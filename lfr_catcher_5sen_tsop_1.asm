;  ASM code generated by mikroVirtualMachine for PIC - V. 8.2.0.0
;  Date/Time: 3/23/2011 6:54:44 AM
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$2804			GOTO	_main
$0A89	$	_RES032:
$0A89	$1303			BCF	STATUS, RP1
$0A8A	$1283			BCF	STATUS, RP0
$0A8B	$01F2			CLRF	STACK_2
$0A8C	$01F1			CLRF	STACK_1
$0A8D	$01F0			CLRF	STACK_0
$0A8E	$01F8			CLRF	STACK_8
$0A8F	$01F3			CLRF	STACK_3
$0A90	$3000			MOVLW	0
$0A91	$0008			RETURN
$0A73	$	_SETFUN32:
$0A73	$1303			BCF	STATUS, RP1
$0A74	$1283			BCF	STATUS, RP0
$0A75	$157B			BSF	STACK_11, 2
$0A76	$1FFB			BTFSS	STACK_11, 7
$0A77	$2A7F			GOTO	SETFUN32EEE
$0A78	$3001			MOVLW	0x01
$0A79	$00F3			MOVWF	STACK_3
$0A7A	$01F2			CLRF	STACK_2
$0A7B	$01F1			CLRF	STACK_1
$0A7C	$01F0			CLRF	STACK_0
$0A7D	$0DFA			RLF	STACK_10, F
$0A7E	$0CF2			RRF	STACK_2, F
$0A7F	$	SETFUN32EEE:
$0A7F	$30FF			MOVLW	0xFF
$0A80	$0008			RETURN
$0AA8	$	_FIXSIGN32:
$0AA8	$1303			BCF	STATUS, RP1
$0AA9	$1283			BCF	STATUS, RP0
$0AAA	$1FFA			BTFSS	STACK_10, 7
$0AAB	$13F2			BCF	STACK_2, 7
$0AAC	$3000			MOVLW	0
$0AAD	$0008			RETURN
$0A65	$	_SETFOV32:
$0A65	$1303			BCF	STATUS, RP1
$0A66	$1283			BCF	STATUS, RP0
$0A67	$14FB			BSF	STACK_11, 1
$0A68	$1FFB			BTFSS	STACK_11, 7
$0A69	$2A71			GOTO	SETFOV32EEE
$0A6A	$30FF			MOVLW	0xFF
$0A6B	$00F3			MOVWF	STACK_3
$0A6C	$00F2			MOVWF	STACK_2
$0A6D	$00F1			MOVWF	STACK_1
$0A6E	$00F0			MOVWF	STACK_0
$0A6F	$0DFA			RLF	STACK_10, F
$0A70	$0CF2			RRF	STACK_2, F
$0A71	$	SETFOV32EEE:
$0A71	$30FF			MOVLW	0xFF
$0A72	$0008			RETURN
$069D	$	_NRM4032:
$069D	$1303			BCF	STATUS, RP1
$069E	$1283			BCF	STATUS, RP0
$069F	$187C			BTFSC	STACK_12, 0
$06A0	$2ED5			GOTO	NRMRND4032
$06A1	$18FC			BTFSC	STACK_12, 1
$06A2	$2EA6			GOTO	NRM4032
$06A3	$197C			BTFSC	STACK_12, 2
$06A4	$2EFA			GOTO	JMPSETFOV32
$06A5	$2E9F			GOTO	$-6
$06A6	$	NRM4032:
$06A6	$01A0			CLRF	__math_tempbD
$06A7	$0872			MOVF	STACK_2, W
$06A8	$1D03			BTFSS	STATUS, Z
$06A9	$2EC6			GOTO	NORM4032
$06AA	$0871			MOVF	STACK_1, W
$06AB	$00F2			MOVWF	STACK_2
$06AC	$0870			MOVF	STACK_0, W
$06AD	$00F1			MOVWF	STACK_1
$06AE	$0878			MOVF	STACK_8, W
$06AF	$00F0			MOVWF	STACK_0
$06B0	$01F8			CLRF	STACK_8
$06B1	$15A0			BSF	__math_tempbD, 3
$06B2	$0872			MOVF	STACK_2, W
$06B3	$1D03			BTFSS	STATUS, Z
$06B4	$2EC6			GOTO	NORM4032
$06B5	$0871			MOVF	STACK_1, W
$06B6	$00F2			MOVWF	STACK_2
$06B7	$0870			MOVF	STACK_0, W
$06B8	$00F1			MOVWF	STACK_1
$06B9	$01F0			CLRF	STACK_0
$06BA	$11A0			BCF	__math_tempbD, 3
$06BB	$1620			BSF	__math_tempbD, 4
$06BC	$0872			MOVF	STACK_2, W
$06BD	$1D03			BTFSS	STATUS, Z
$06BE	$2EC6			GOTO	NORM4032
$06BF	$0871			MOVF	STACK_1, W
$06C0	$00F2			MOVWF	STACK_2
$06C1	$01F1			CLRF	STACK_1
$06C2	$15A0			BSF	__math_tempbD, 3
$06C3	$0872			MOVF	STACK_2, W
$06C4	$1903			BTFSC	STATUS, Z
$06C5	$2EE8			GOTO	JMPRES032
$06C6	$	NORM4032:
$06C6	$0820			MOVF	__math_tempbD, W
$06C7	$02F3			SUBWF	STACK_3, F
$06C8	$1D03			BTFSS	STATUS, Z
$06C9	$1C03			BTFSS	STATUS, C
$06CA	$2EEE			GOTO	JMPSETFUN32
$06CB	$1003			BCF	STATUS, C
$06CC	$	NORM4032A:
$06CC	$1BF2			BTFSC	STACK_2, 7
$06CD	$2ED5			GOTO	NRMRND4032
$06CE	$0DF8			RLF	STACK_8, F
$06CF	$0DF0			RLF	STACK_0, F
$06D0	$0DF1			RLF	STACK_1, F
$06D1	$0DF2			RLF	STACK_2, F
$06D2	$0BF3			DECFSZ	STACK_3, F
$06D3	$2ECC			GOTO	NORM4032A
$06D4	$2EEE			GOTO	JMPSETFUN32
$06D5	$	NRMRND4032:
$06D5	$1B7B			BTFSC	STACK_11, 6
$06D6	$1C70			BTFSS	STACK_0, 0
$06D7	$2EF4			GOTO	JMPFIXSIGN32
$06D8	$1FF8			BTFSS	STACK_8, 7
$06D9	$2EF4			GOTO	JMPFIXSIGN32
$06DA	$0AF0			INCF	STACK_0, F
$06DB	$1903			BTFSC	STATUS, Z
$06DC	$0AF1			INCF	STACK_1, F
$06DD	$1903			BTFSC	STATUS, Z
$06DE	$0AF2			INCF	STACK_2, F
$06DF	$1D03			BTFSS	STATUS, Z
$06E0	$2EF4			GOTO	JMPFIXSIGN32
$06E1	$0CF2			RRF	STACK_2, F
$06E2	$0CF1			RRF	STACK_1, F
$06E3	$0CF0			RRF	STACK_0, F
$06E4	$0AF3			INCF	STACK_3, F
$06E5	$1903			BTFSC	STATUS, Z
$06E6	$2EFA			GOTO	JMPSETFOV32
$06E7	$2EF4			GOTO	JMPFIXSIGN32
$06E8	$	JMPRES032:
$06E8	$3001			MOVLW	0x01
$06E9	$00FC			MOVWF	STACK_12
$06EA	$158A			BSF	PCLATH, 3
$06EB	$2289			CALL	_RES032
$06EC	$118A			BCF	PCLATH, 3
$06ED	$2EFF			GOTO	NRM4032EEE
$06EE	$	JMPSETFUN32:
$06EE	$3002			MOVLW	0x02
$06EF	$00FC			MOVWF	STACK_12
$06F0	$158A			BSF	PCLATH, 3
$06F1	$2273			CALL	_SETFUN32
$06F2	$118A			BCF	PCLATH, 3
$06F3	$2EFF			GOTO	NRM4032EEE
$06F4	$	JMPFIXSIGN32:
$06F4	$3004			MOVLW	0x04
$06F5	$00FC			MOVWF	STACK_12
$06F6	$158A			BSF	PCLATH, 3
$06F7	$22A8			CALL	_FIXSIGN32
$06F8	$118A			BCF	PCLATH, 3
$06F9	$2EFF			GOTO	NRM4032EEE
$06FA	$	JMPSETFOV32:
$06FA	$3008			MOVLW	0x08
$06FB	$00FC			MOVWF	STACK_12
$06FC	$158A			BSF	PCLATH, 3
$06FD	$2265			CALL	_SETFOV32
$06FE	$118A			BCF	PCLATH, 3
$06FF	$	NRM4032EEE:
$06FF	$0000			NOP
$0700	$0008			RETURN
$0961	$	_NRM3232:
$0961	$1303			BCF	STATUS, RP1
$0962	$1283			BCF	STATUS, RP0
$0963	$01A0			CLRF	__math_tempbD
$0964	$0872			MOVF	STACK_2, W
$0965	$1D03			BTFSS	STATUS, Z
$0966	$2978			GOTO	NORM3232
$0967	$0871			MOVF	STACK_1, W
$0968	$00F2			MOVWF	STACK_2
$0969	$0870			MOVF	STACK_0, W
$096A	$00F1			MOVWF	STACK_1
$096B	$01F0			CLRF	STACK_0
$096C	$15A0			BSF	__math_tempbD, 3
$096D	$0872			MOVF	STACK_2, W
$096E	$1D03			BTFSS	STATUS, Z
$096F	$2978			GOTO	NORM3232
$0970	$0871			MOVF	STACK_1, W
$0971	$00F2			MOVWF	STACK_2
$0972	$01F1			CLRF	STACK_1
$0973	$11A0			BCF	__math_tempbD, 3
$0974	$1620			BSF	__math_tempbD, 4
$0975	$0872			MOVF	STACK_2, W
$0976	$1903			BTFSC	STATUS, Z
$0977	$2986			GOTO	JPNRES032
$0978	$	NORM3232:
$0978	$0820			MOVF	__math_tempbD, W
$0979	$02F3			SUBWF	STACK_3, F
$097A	$1D03			BTFSS	STATUS, Z
$097B	$1C03			BTFSS	STATUS, C
$097C	$298A			GOTO	JPNSETFUN32
$097D	$1003			BCF	STATUS, C
$097E	$	NORM3232A:
$097E	$1BF2			BTFSC	STACK_2, 7
$097F	$298E			GOTO	JMPNFIXSIGN32
$0980	$0DF0			RLF	STACK_0, F
$0981	$0DF1			RLF	STACK_1, F
$0982	$0DF2			RLF	STACK_2, F
$0983	$0BF3			DECFSZ	STACK_3, F
$0984	$297E			GOTO	NORM3232A
$0985	$298A			GOTO	JPNSETFUN32
$0986	$	JPNRES032:
$0986	$3001			MOVLW	0x01
$0987	$00FC			MOVWF	STACK_12
$0988	$2289			CALL	_RES032
$0989	$2991			GOTO	NORM32EEE
$098A	$	JPNSETFUN32:
$098A	$3002			MOVLW	0x02
$098B	$00FC			MOVWF	STACK_12
$098C	$2273			CALL	_SETFUN32
$098D	$2991			GOTO	NORM32EEE
$098E	$	JMPNFIXSIGN32:
$098E	$3004			MOVLW	0x04
$098F	$00FC			MOVWF	STACK_12
$0990	$22A8			CALL	_FIXSIGN32
$0991	$	NORM32EEE:
$0991	$0008			RETURN
$0AC8	$	_SETFDZ32:
$0AC8	$1303			BCF	STATUS, RP1
$0AC9	$1283			BCF	STATUS, RP0
$0ACA	$15FB			BSF	STACK_11, 3
$0ACB	$30FF			MOVLW	0xFF
$0ACC	$0008			RETURN
$04EE	$	_Add_32x32_FP:
$04EE	$1303			BCF	STATUS, RP1
$04EF	$1283			BCF	STATUS, RP0
$04F0	$0872			MOVF	STACK_2, W
$04F1	$0676			XORWF	STACK_6, W
$04F2	$00A0			MOVWF	__math_tempbD
$04F3	$01F8			CLRF	STACK_8
$04F4	$01F9			CLRF	STACK_9
$04F5	$0873			MOVF	STACK_3, W
$04F6	$0277			SUBWF	STACK_7, W
$04F7	$1C03			BTFSS	STATUS, C
$04F8	$2D11			GOTO	USEA32
$04F9	$0877			MOVF	STACK_7, W
$04FA	$00FD			MOVWF	STACK_13
$04FB	$0873			MOVF	STACK_3, W
$04FC	$00F7			MOVWF	STACK_7
$04FD	$087D			MOVF	STACK_13, W
$04FE	$00F3			MOVWF	STACK_3
$04FF	$0876			MOVF	STACK_6, W
$0500	$00FD			MOVWF	STACK_13
$0501	$0872			MOVF	STACK_2, W
$0502	$00F6			MOVWF	STACK_6
$0503	$087D			MOVF	STACK_13, W
$0504	$00F2			MOVWF	STACK_2
$0505	$0875			MOVF	STACK_5, W
$0506	$00FD			MOVWF	STACK_13
$0507	$0871			MOVF	STACK_1, W
$0508	$00F5			MOVWF	STACK_5
$0509	$087D			MOVF	STACK_13, W
$050A	$00F1			MOVWF	STACK_1
$050B	$0874			MOVF	STACK_4, W
$050C	$00FD			MOVWF	STACK_13
$050D	$0870			MOVF	STACK_0, W
$050E	$00F4			MOVWF	STACK_4
$050F	$087D			MOVF	STACK_13, W
$0510	$00F0			MOVWF	STACK_0
$0511	$	USEA32:
$0511	$0877			MOVF	STACK_7, W
$0512	$1903			BTFSC	STATUS, Z
$0513	$2D8E			GOTO	JMPEEE
$0514	$0872			MOVF	STACK_2, W
$0515	$00FA			MOVWF	STACK_10
$0516	$17F2			BSF	STACK_2, 7
$0517	$17F6			BSF	STACK_6, 7
$0518	$0877			MOVF	STACK_7, W
$0519	$0273			SUBWF	STACK_3, W
$051A	$00F7			MOVWF	STACK_7
$051B	$1903			BTFSC	STATUS, Z
$051C	$2D44			GOTO	ALIGNED32
$051D	$3008			MOVLW	8
$051E	$0277			SUBWF	STACK_7, W
$051F	$1C03			BTFSS	STATUS, C
$0520	$2D3A			GOTO	ALIGNB32
$0521	$00F7			MOVWF	STACK_7
$0522	$0874			MOVF	STACK_4, W
$0523	$00F9			MOVWF	STACK_9
$0524	$0875			MOVF	STACK_5, W
$0525	$00F4			MOVWF	STACK_4
$0526	$0876			MOVF	STACK_6, W
$0527	$00F5			MOVWF	STACK_5
$0528	$01F6			CLRF	STACK_6
$0529	$3008			MOVLW	8
$052A	$0277			SUBWF	STACK_7, W
$052B	$1C03			BTFSS	STATUS, C
$052C	$2D3A			GOTO	ALIGNB32
$052D	$00F7			MOVWF	STACK_7
$052E	$0874			MOVF	STACK_4, W
$052F	$00F9			MOVWF	STACK_9
$0530	$0875			MOVF	STACK_5, W
$0531	$00F4			MOVWF	STACK_4
$0532	$01F5			CLRF	STACK_5
$0533	$3008			MOVLW	8
$0534	$0277			SUBWF	STACK_7, W
$0535	$1C03			BTFSS	STATUS, C
$0536	$2D3A			GOTO	ALIGNB32
$0537	$087A			MOVF	STACK_10, W
$0538	$00F2			MOVWF	STACK_2
$0539	$2D8E			GOTO	JMPEEE
$053A	$	ALIGNB32:
$053A	$0877			MOVF	STACK_7, W
$053B	$1903			BTFSC	STATUS, Z
$053C	$2D44			GOTO	ALIGNED32
$053D	$	ALOOPB32:
$053D	$1003			BCF	STATUS, C
$053E	$0CF6			RRF	STACK_6, F
$053F	$0CF5			RRF	STACK_5, F
$0540	$0CF4			RRF	STACK_4, F
$0541	$0CF9			RRF	STACK_9, F
$0542	$0BF7			DECFSZ	STACK_7, F
$0543	$2D3D			GOTO	ALOOPB32
$0544	$	ALIGNED32:
$0544	$1FA0			BTFSS	__math_tempbD, 7
$0545	$2D51			GOTO	AOK32
$0546	$09F9			COMF	STACK_9, F
$0547	$09F4			COMF	STACK_4, F
$0548	$09F5			COMF	STACK_5, F
$0549	$09F6			COMF	STACK_6, F
$054A	$0AF9			INCF	STACK_9, F
$054B	$1903			BTFSC	STATUS, Z
$054C	$0AF4			INCF	STACK_4, F
$054D	$1903			BTFSC	STATUS, Z
$054E	$0AF5			INCF	STACK_5, F
$054F	$1903			BTFSC	STATUS, Z
$0550	$0AF6			INCF	STACK_6, F
$0551	$	AOK32:
$0551	$0879			MOVF	STACK_9, W
$0552	$07F8			ADDWF	STACK_8, F
$0553	$0874			MOVF	STACK_4, W
$0554	$1803			BTFSC	STATUS, C
$0555	$0F74			INCFSZ	STACK_4, W
$0556	$07F0			ADDWF	STACK_0, F
$0557	$0875			MOVF	STACK_5, W
$0558	$1803			BTFSC	STATUS, C
$0559	$0F75			INCFSZ	STACK_5, W
$055A	$07F1			ADDWF	STACK_1, F
$055B	$0876			MOVF	STACK_6, W
$055C	$1803			BTFSC	STATUS, C
$055D	$0F76			INCFSZ	STACK_6, W
$055E	$07F2			ADDWF	STACK_2, F
$055F	$1BA0			BTFSC	__math_tempbD, 7
$0560	$2D6A			GOTO	ACOMP32
$0561	$1C03			BTFSS	STATUS, C
$0562	$2D7A			GOTO	JMPNRMRND4032
$0563	$0CF2			RRF	STACK_2, F
$0564	$0CF1			RRF	STACK_1, F
$0565	$0CF0			RRF	STACK_0, F
$0566	$0CF8			RRF	STACK_8, F
$0567	$0FF3			INCFSZ	STACK_3, F
$0568	$2D7A			GOTO	JMPNRMRND4032
$0569	$2D88			GOTO	ADD_JMPSETFOV32
$056A	$	ACOMP32:
$056A	$1803			BTFSC	STATUS, C
$056B	$2D7E			GOTO	JMPNRM4032
$056C	$09F8			COMF	STACK_8, F
$056D	$09F0			COMF	STACK_0, F
$056E	$09F1			COMF	STACK_1, F
$056F	$09F2			COMF	STACK_2, F
$0570	$0AF8			INCF	STACK_8, F
$0571	$1903			BTFSC	STATUS, Z
$0572	$0AF0			INCF	STACK_0, F
$0573	$1903			BTFSC	STATUS, Z
$0574	$0AF1			INCF	STACK_1, F
$0575	$1903			BTFSC	STATUS, Z
$0576	$0AF2			INCF	STACK_2, F
$0577	$3080			MOVLW	0x80
$0578	$06FA			XORWF	STACK_10, F
$0579	$2D82			GOTO	JMPNRM32
$057A	$	JMPNRMRND4032:
$057A	$3001			MOVLW	0x01
$057B	$00FC			MOVWF	STACK_12
$057C	$269D			CALL	_NRM4032
$057D	$2D90			GOTO	ADD32EEE
$057E	$	JMPNRM4032:
$057E	$3002			MOVLW	0x02
$057F	$00FC			MOVWF	STACK_12
$0580	$269D			CALL	_NRM4032
$0581	$2D90			GOTO	ADD32EEE
$0582	$	JMPNRM32:
$0582	$3004			MOVLW	0x04
$0583	$00FC			MOVWF	STACK_12
$0584	$158A			BSF	PCLATH, 3
$0585	$2161			CALL	_NRM3232
$0586	$118A			BCF	PCLATH, 3
$0587	$2D90			GOTO	ADD32EEE
$0588	$	ADD_JMPSETFOV32:
$0588	$3008			MOVLW	0x08
$0589	$00FC			MOVWF	STACK_12
$058A	$158A			BSF	PCLATH, 3
$058B	$2265			CALL	_SETFOV32
$058C	$118A			BCF	PCLATH, 3
$058D	$2D90			GOTO	ADD32EEE
$058E	$	JMPEEE:
$058E	$3000			MOVLW	0x00
$058F	$00FC			MOVWF	STACK_12
$0590	$	ADD32EEE:
$0590	$0000			NOP
$0591	$0008			RETURN
$0A92	$	_PWM1_Start:
$0A92	$1303			BCF	STATUS, RP1
$0A93	$1683			BSF	STATUS, RP0
$0A94	$1107			BCF	TRISC, 2
$0A95	$1283			BCF	STATUS, RP0
$0A96	$1512			BSF	T2CON, 2
$0A97	$300C			MOVLW	12
$0A98	$0497			IORWF	CCP1CON, 1
$0A99	$0008			RETURN
$0A9A	$	_PWM2_Start:
$0A9A	$1303			BCF	STATUS, RP1
$0A9B	$1683			BSF	STATUS, RP0
$0A9C	$1087			BCF	TRISC, 1
$0A9D	$1283			BCF	STATUS, RP0
$0A9E	$1512			BSF	T2CON, 2
$0A9F	$300C			MOVLW	12
$0AA0	$049D			IORWF	CCP2CON, 1
$0AA1	$0008			RETURN
$0AAE	$	_PWM1_Init:
$0AAE	$1303			BCF	STATUS, RP1
$0AAF	$1283			BCF	STATUS, RP0
$0AB0	$0195			CLRF	CCPR1L, 1
$0AB1	$1217			BCF	CCP1CON, 4
$0AB2	$1297			BCF	CCP1CON, 5
$0AB3	$0008			RETURN
$0AA2	$	_PWM2_Init:
$0AA2	$1303			BCF	STATUS, RP1
$0AA3	$1283			BCF	STATUS, RP0
$0AA4	$019B			CLRF	CCPR2L, 1
$0AA5	$121D			BCF	CCP2CON, 4
$0AA6	$129D			BCF	CCP2CON, 5
$0AA7	$0008			RETURN
$09CB	$	_Mul_16x16_U:
$09CB	$1303			BCF	STATUS, RP1
$09CC	$1283			BCF	STATUS, RP0
$09CD	$01FB			CLRF	STACK_11
$09CE	$01FA			CLRF	STACK_10
$09CF	$01F9			CLRF	STACK_9
$09D0	$3080			MOVLW	128
$09D1	$00F8			MOVWF	STACK_8
$09D2	$0CF1			RRF	STACK_1, F
$09D3	$0CF0			RRF	STACK_0, F
$09D4	$1C03			BTFSS	STATUS, C
$09D5	$29DF			GOTO	$+10
$09D6	$0874			MOVF	STACK_4, W
$09D7	$07F9			ADDWF	STACK_9, F
$09D8	$0875			MOVF	STACK_5, W
$09D9	$1803			BTFSC	STATUS, C
$09DA	$0F75			INCFSZ	STACK_5, W
$09DB	$07FA			ADDWF	STACK_10, F
$09DC	$1803			BTFSC	STATUS, C
$09DD	$0AFB			INCF	STACK_11, F
$09DE	$1003			BCF	STATUS, C
$09DF	$1FF0			BTFSS	STACK_0, 7
$09E0	$29E7			GOTO	$+7
$09E1	$0874			MOVF	STACK_4, W
$09E2	$07FA			ADDWF	STACK_10, F
$09E3	$0875			MOVF	STACK_5, W
$09E4	$1803			BTFSC	STATUS, C
$09E5	$0F75			INCFSZ	STACK_5, W
$09E6	$07FB			ADDWF	STACK_11, F
$09E7	$0CFB			RRF	STACK_11, F
$09E8	$0CFA			RRF	STACK_10, F
$09E9	$0CF9			RRF	STACK_9, F
$09EA	$0CF8			RRF	STACK_8, F
$09EB	$1C03			BTFSS	STATUS, C
$09EC	$29D2			GOTO	$-26
$09ED	$087B			MOVF	STACK_11, W
$09EE	$00F3			MOVWF	STACK_3
$09EF	$087A			MOVF	STACK_10, W
$09F0	$00F2			MOVWF	STACK_2
$09F1	$0879			MOVF	STACK_9, W
$09F2	$00F1			MOVWF	STACK_1
$09F3	$0878			MOVF	STACK_8, W
$09F4	$00F0			MOVWF	STACK_0
$09F5	$0008			RETURN
$0A07	$	_Word2Double:
$0A07	$1303			BCF	STATUS, RP1
$0A08	$1283			BCF	STATUS, RP0
$0A09	$0870			MOVF	STACK_0, W
$0A0A	$00F8			MOVWF	STACK_8
$0A0B	$0871			MOVF	STACK_1, W
$0A0C	$00F0			MOVWF	STACK_0
$0A0D	$01F1			CLRF	STACK_1
$0A0E	$01F2			CLRF	STACK_2
$0A0F	$01F3			CLRF	STACK_3
$0A10	$	FLO16U32:
$0A10	$01FB			CLRF	STACK_11
$0A11	$01FC			CLRF	STACK_12
$0A12	$3096			MOVLW	150
$0A13	$00F3			MOVWF	STACK_3
$0A14	$01FA			CLRF	STACK_10
$0A15	$0870			MOVF	STACK_0, W
$0A16	$00F1			MOVWF	STACK_1
$0A17	$0878			MOVF	STACK_8, W
$0A18	$00F0			MOVWF	STACK_0
$0A19	$01F8			CLRF	STACK_8
$0A1A	$01F2			CLRF	STACK_2
$0A1B	$2161			CALL	_NRM3232
$0A1C	$0008			RETURN
$0592	$	_Div_32x32_FP:
$0592	$1303			BCF	STATUS, RP1
$0593	$1283			BCF	STATUS, RP0
$0594	$	FPD32:
$0594	$0877			MOVF	STACK_7, W
$0595	$1903			BTFSC	STATUS, Z
$0596	$2E21			GOTO	JPDSETFDZ32
$0597	$0873			MOVF	STACK_3, W
$0598	$1903			BTFSC	STATUS, Z
$0599	$2E26			GOTO	JPDRES032
$059A	$	D32BNE0:
$059A	$0872			MOVF	STACK_2, W
$059B	$0676			XORWF	STACK_6, W
$059C	$3980			ANDLW	128
$059D	$00FA			MOVWF	STACK_10
$059E	$17F2			BSF	STACK_2, 7
$059F	$17F6			BSF	STACK_6, 7
$05A0	$	TALIGN32:
$05A0	$01A0			CLRF	__math_tempbD
$05A1	$0872			MOVF	STACK_2, W
$05A2	$00F8			MOVWF	STACK_8
$05A3	$0871			MOVF	STACK_1, W
$05A4	$00FC			MOVWF	STACK_12
$05A5	$0870			MOVF	STACK_0, W
$05A6	$00FD			MOVWF	STACK_13
$05A7	$0874			MOVF	STACK_4, W
$05A8	$02FD			SUBWF	STACK_13, F
$05A9	$0875			MOVF	STACK_5, W
$05AA	$1C03			BTFSS	STATUS, C
$05AB	$0F75			INCFSZ	STACK_5, W
$05AC	$	TS1ALIGN32:
$05AC	$02FC			SUBWF	STACK_12, F
$05AD	$0876			MOVF	STACK_6, W
$05AE	$1C03			BTFSS	STATUS, C
$05AF	$0F76			INCFSZ	STACK_6, W
$05B0	$	TS2ALIGN32:
$05B0	$02F8			SUBWF	STACK_8, F
$05B1	$01F8			CLRF	STACK_8
$05B2	$01FC			CLRF	STACK_12
$05B3	$01FD			CLRF	STACK_13
$05B4	$1C03			BTFSS	STATUS, C
$05B5	$2DBD			GOTO	DALIGN32OK
$05B6	$1003			BCF	STATUS, C
$05B7	$0CF2			RRF	STACK_2, F
$05B8	$0CF1			RRF	STACK_1, F
$05B9	$0CF0			RRF	STACK_0, F
$05BA	$0CF8			RRF	STACK_8, F
$05BB	$3001			MOVLW	0x01
$05BC	$00A0			MOVWF	__math_tempbD
$05BD	$	DALIGN32OK:
$05BD	$0877			MOVF	STACK_7, W
$05BE	$02F3			SUBWF	STACK_3, F
$05BF	$1C03			BTFSS	STATUS, C
$05C0	$2DC7			GOTO	ALTB32
$05C1	$	AGEB32:
$05C1	$307E			MOVLW	126
$05C2	$0720			ADDWF	__math_tempbD, W
$05C3	$07F3			ADDWF	STACK_3, F
$05C4	$1803			BTFSC	STATUS, C
$05C5	$2E2B			GOTO	JPDSETFOV32
$05C6	$2DCC			GOTO	DARGOK32
$05C7	$	ALTB32:
$05C7	$307E			MOVLW	126
$05C8	$0720			ADDWF	__math_tempbD, W
$05C9	$07F3			ADDWF	STACK_3, F
$05CA	$1C03			BTFSS	STATUS, C
$05CB	$2E30			GOTO	JPDSETFUN32
$05CC	$	DARGOK32:
$05CC	$3018			MOVLW	24
$05CD	$07FA			ADDWF	STACK_10, F
$05CE	$	DLOOP32:
$05CE	$0DFD			RLF	STACK_13, F
$05CF	$0DFC			RLF	STACK_12, F
$05D0	$0DF8			RLF	STACK_8, F
$05D1	$0DF0			RLF	STACK_0, F
$05D2	$0DF1			RLF	STACK_1, F
$05D3	$0DF2			RLF	STACK_2, F
$05D4	$0DA0			RLF	__math_tempbD, F
$05D5	$0874			MOVF	STACK_4, W
$05D6	$02F0			SUBWF	STACK_0, F
$05D7	$0875			MOVF	STACK_5, W
$05D8	$1C03			BTFSS	STATUS, C
$05D9	$0F75			INCFSZ	STACK_5, W
$05DA	$	DS132:
$05DA	$02F1			SUBWF	STACK_1, F
$05DB	$0876			MOVF	STACK_6, W
$05DC	$1C03			BTFSS	STATUS, C
$05DD	$0F76			INCFSZ	STACK_6, W
$05DE	$	DS232:
$05DE	$02F2			SUBWF	STACK_2, F
$05DF	$0D76			RLF	STACK_6, W
$05E0	$04A0			IORWF	__math_tempbD, F
$05E1	$1C20			BTFSS	__math_tempbD, 0
$05E2	$2DE5			GOTO	DREST32
$05E3	$147D			BSF	STACK_13, 0
$05E4	$2DF0			GOTO	DOK32
$05E5	$	DREST32:
$05E5	$0874			MOVF	STACK_4, W
$05E6	$07F0			ADDWF	STACK_0, F
$05E7	$0875			MOVF	STACK_5, W
$05E8	$1803			BTFSC	STATUS, C
$05E9	$0F75			INCFSZ	STACK_5, W
$05EA	$	DAREST32:
$05EA	$07F1			ADDWF	STACK_1, F
$05EB	$0876			MOVF	STACK_6, W
$05EC	$1803			BTFSC	STATUS, C
$05ED	$0A76			INCF	STACK_6, W
$05EE	$07F2			ADDWF	STACK_2, F
$05EF	$107D			BCF	STACK_13, 0
$05F0	$	DOK32:
$05F0	$03FA			DECF	STACK_10, F
$05F1	$301F			MOVLW	31
$05F2	$057A			ANDWF	STACK_10, W
$05F3	$1D03			BTFSS	STATUS, Z
$05F4	$2DCE			GOTO	DLOOP32
$05F5	$	DROUND32:
$05F5	$1B7B			BTFSC	STACK_11, 6
$05F6	$1C7D			BTFSS	STACK_13, 0
$05F7	$2E17			GOTO	DIV32OK
$05F8	$1003			BCF	STATUS, C
$05F9	$0DF0			RLF	STACK_0, F
$05FA	$0DF1			RLF	STACK_1, F
$05FB	$0DF2			RLF	STACK_2, F
$05FC	$0DA0			RLF	__math_tempbD, F
$05FD	$0874			MOVF	STACK_4, W
$05FE	$02F0			SUBWF	STACK_0, F
$05FF	$0875			MOVF	STACK_5, W
$0600	$1C03			BTFSS	STATUS, C
$0601	$0F75			INCFSZ	STACK_5, W
$0602	$02F1			SUBWF	STACK_1, F
$0603	$0876			MOVF	STACK_6, W
$0604	$1C03			BTFSS	STATUS, C
$0605	$0F76			INCFSZ	STACK_6, W
$0606	$02F2			SUBWF	STACK_2, F
$0607	$0D76			RLF	STACK_6, W
$0608	$0420			IORWF	__math_tempbD, W
$0609	$3901			ANDLW	0x01
$060A	$07FD			ADDWF	STACK_13, F
$060B	$1803			BTFSC	STATUS, C
$060C	$0AFC			INCF	STACK_12, F
$060D	$1903			BTFSC	STATUS, Z
$060E	$0AF8			INCF	STACK_8, F
$060F	$1D03			BTFSS	STATUS, Z
$0610	$2E17			GOTO	DIV32OK
$0611	$0CF8			RRF	STACK_8, F
$0612	$0CFC			RRF	STACK_12, F
$0613	$0CFD			RRF	STACK_13, F
$0614	$0AF3			INCF	STACK_3, F
$0615	$1903			BTFSC	STATUS, Z
$0616	$2E2B			GOTO	JPDSETFOV32
$0617	$	DIV32OK:
$0617	$1FFA			BTFSS	STACK_10, 7
$0618	$13F8			BCF	STACK_8, 7
$0619	$0878			MOVF	STACK_8, W
$061A	$00F2			MOVWF	STACK_2
$061B	$087C			MOVF	STACK_12, W
$061C	$00F1			MOVWF	STACK_1
$061D	$087D			MOVF	STACK_13, W
$061E	$00F0			MOVWF	STACK_0
$061F	$3000			MOVLW	0x00
$0620	$2E34			GOTO	DIV32EEE
$0621	$	JPDSETFDZ32:
$0621	$3001			MOVLW	0x01
$0622	$158A			BSF	PCLATH, 3
$0623	$22C8			CALL	_SETFDZ32
$0624	$118A			BCF	PCLATH, 3
$0625	$2E34			GOTO	DIV32EEE
$0626	$	JPDRES032:
$0626	$3002			MOVLW	0x02
$0627	$158A			BSF	PCLATH, 3
$0628	$2289			CALL	_RES032
$0629	$118A			BCF	PCLATH, 3
$062A	$2E34			GOTO	DIV32EEE
$062B	$	JPDSETFOV32:
$062B	$3004			MOVLW	0x04
$062C	$158A			BSF	PCLATH, 3
$062D	$2265			CALL	_SETFOV32
$062E	$118A			BCF	PCLATH, 3
$062F	$2E34			GOTO	DIV32EEE
$0630	$	JPDSETFUN32:
$0630	$3008			MOVLW	0x08
$0631	$158A			BSF	PCLATH, 3
$0632	$2273			CALL	_SETFUN32
$0633	$118A			BCF	PCLATH, 3
$0634	$	DIV32EEE:
$0634	$0000			NOP
$0635	$0008			RETURN
$0A81	$	_Sub_32x32_FP:
$0A81	$1303			BCF	STATUS, RP1
$0A82	$1283			BCF	STATUS, RP0
$0A83	$3080			MOVLW	0x80
$0A84	$06F6			XORWF	STACK_6, F
$0A85	$118A			BCF	PCLATH, 3
$0A86	$24EE			CALL	_Add_32x32_FP
$0A87	$158A			BSF	PCLATH, 3
$0A88	$0008			RETURN
$089B	$	_Mul_16x16_S:
$089B	$1303			BCF	STATUS, RP1
$089C	$1283			BCF	STATUS, RP0
$089D	$01FB			CLRF	STACK_11
$089E	$01FA			CLRF	STACK_10
$089F	$01F9			CLRF	STACK_9
$08A0	$3080			MOVLW	128
$08A1	$00F8			MOVWF	STACK_8
$08A2	$01FD			CLRF	STACK_13
$08A3	$1FF1			BTFSS	STACK_1, 7
$08A4	$28AB			GOTO	$+7
$08A5	$09F1			COMF	STACK_1, F
$08A6	$09F0			COMF	STACK_0, F
$08A7	$0AF0			INCF	STACK_0, F
$08A8	$1903			BTFSC	STATUS, Z
$08A9	$0AF1			INCF	STACK_1, F
$08AA	$0AFD			INCF	STACK_13, F
$08AB	$1FF5			BTFSS	STACK_5, 7
$08AC	$28B3			GOTO	$+7
$08AD	$09F5			COMF	STACK_5, F
$08AE	$09F4			COMF	STACK_4, F
$08AF	$0AF4			INCF	STACK_4, F
$08B0	$1903			BTFSC	STATUS, Z
$08B1	$0AF5			INCF	STACK_5, F
$08B2	$0AFD			INCF	STACK_13, F
$08B3	$0CF1			RRF	STACK_1, F
$08B4	$0CF0			RRF	STACK_0, F
$08B5	$1C03			BTFSS	STATUS, C
$08B6	$28C0			GOTO	$+10
$08B7	$0874			MOVF	STACK_4, W
$08B8	$07F9			ADDWF	STACK_9, F
$08B9	$0875			MOVF	STACK_5, W
$08BA	$1803			BTFSC	STATUS, C
$08BB	$0F75			INCFSZ	STACK_5, W
$08BC	$07FA			ADDWF	STACK_10, F
$08BD	$1803			BTFSC	STATUS, C
$08BE	$0AFB			INCF	STACK_11, F
$08BF	$1003			BCF	STATUS, C
$08C0	$1FF0			BTFSS	STACK_0, 7
$08C1	$28C8			GOTO	$+7
$08C2	$0874			MOVF	STACK_4, W
$08C3	$07FA			ADDWF	STACK_10, F
$08C4	$1803			BTFSC	STATUS, C
$08C5	$0AFB			INCF	STACK_11, F
$08C6	$0875			MOVF	STACK_5, W
$08C7	$07FB			ADDWF	STACK_11, F
$08C8	$0CFB			RRF	STACK_11, F
$08C9	$0CFA			RRF	STACK_10, F
$08CA	$0CF9			RRF	STACK_9, F
$08CB	$0CF8			RRF	STACK_8, F
$08CC	$1C03			BTFSS	STATUS, C
$08CD	$28B3			GOTO	$-26
$08CE	$1C7D			BTFSS	STACK_13, 0
$08CF	$28DB			GOTO	$+12
$08D0	$09FB			COMF	STACK_11, F
$08D1	$09FA			COMF	STACK_10, F
$08D2	$09F9			COMF	STACK_9, F
$08D3	$09F8			COMF	STACK_8, F
$08D4	$0AF8			INCF	STACK_8, F
$08D5	$1903			BTFSC	STATUS, Z
$08D6	$0AF9			INCF	STACK_9, F
$08D7	$1903			BTFSC	STATUS, Z
$08D8	$0AFA			INCF	STACK_10, F
$08D9	$1903			BTFSC	STATUS, Z
$08DA	$0AFB			INCF	STACK_11, F
$08DB	$087B			MOVF	STACK_11, W
$08DC	$00F3			MOVWF	STACK_3
$08DD	$087A			MOVF	STACK_10, W
$08DE	$00F2			MOVWF	STACK_2
$08DF	$0879			MOVF	STACK_9, W
$08E0	$00F1			MOVWF	STACK_1
$08E1	$0878			MOVF	STACK_8, W
$08E2	$00F0			MOVWF	STACK_0
$08E3	$0000			NOP
$08E4	$0008			RETURN
$0A56	$	_SETIOV3224:
$0A56	$1303			BCF	STATUS, RP1
$0A57	$1283			BCF	STATUS, RP0
$0A58	$147B			BSF	STACK_11, 0
$0A59	$1FFB			BTFSS	STACK_11, 7
$0A5A	$2A63			GOTO	SETIOV3224EEE
$0A5B	$01F2			CLRF	STACK_2
$0A5C	$1FFA			BTFSS	STACK_10, 7
$0A5D	$30FF			MOVLW	0xFF
$0A5E	$00F2			MOVWF	STACK_2
$0A5F	$00F1			MOVWF	STACK_1
$0A60	$00F0			MOVWF	STACK_0
$0A61	$0DFA			RLF	STACK_10, F
$0A62	$0CF2			RRF	STACK_2, F
$0A63	$	SETIOV3224EEE:
$0A63	$30FF			MOVLW	0xFF
$0A64	$0008			RETURN
$0A45	$	_initport:
;lfr_catcher_5sen_tsop_1.c,14 :: 		void initport()
;lfr_catcher_5sen_tsop_1.c,16 :: 		ADCON1 =0x06;          //TURN OFF ADC AND CONFIGURE A AND E AS DIG I/O
$0A45	$3006			MOVLW	6
$0A46	$1303			BCF	STATUS, RP1
$0A47	$1683			BSF	STATUS, RP0
$0A48	$009F			MOVWF	ADCON1
;lfr_catcher_5sen_tsop_1.c,17 :: 		PORTA = 0;             //CLEAR PORTA
$0A49	$1283			BCF	STATUS, RP0
$0A4A	$0185			CLRF	PORTA, 1
;lfr_catcher_5sen_tsop_1.c,18 :: 		PORTE = 0;             //CLEAR PORTE
$0A4B	$0189			CLRF	PORTE, 1
;lfr_catcher_5sen_tsop_1.c,19 :: 		TRISA = 0x3F;          //INITIALIZE PORTA AS INPUT
$0A4C	$303F			MOVLW	63
$0A4D	$1683			BSF	STATUS, RP0
$0A4E	$0085			MOVWF	TRISA
;lfr_catcher_5sen_tsop_1.c,20 :: 		TRISE = 0x03;          //INITIALIZE PORTE AS INPUT
$0A4F	$3003			MOVLW	3
$0A50	$0089			MOVWF	TRISE
;lfr_catcher_5sen_tsop_1.c,21 :: 		TRISD = 0x00;          //INITIALIZE PORTD AS OUTPUT
$0A51	$0188			CLRF	TRISD, 1
;lfr_catcher_5sen_tsop_1.c,22 :: 		TRISC = 0b00000000;    //INITIALIZE PORTC AS OUTPUT
$0A52	$0187			CLRF	TRISC, 1
;lfr_catcher_5sen_tsop_1.c,23 :: 		TRISB = 0b11000000;    //INITIALIZE PORTB AS INPUT  FOR TSOP
$0A53	$30C0			MOVLW	192
$0A54	$0086			MOVWF	TRISB
;lfr_catcher_5sen_tsop_1.c,24 :: 		}
$0A55	$0008			RETURN
$09F6	$	_initpwm:
;lfr_catcher_5sen_tsop_1.c,26 :: 		void initpwm()
;lfr_catcher_5sen_tsop_1.c,28 :: 		PWM1_Init(5000);
$09F6	$1303			BCF	STATUS, RP1
$09F7	$1283			BCF	STATUS, RP0
$09F8	$1012			BCF	T2CON, T2CKPS0
$09F9	$1092			BCF	T2CON, T2CKPS1
$09FA	$30C7			MOVLW	199
$09FB	$1683			BSF	STATUS, RP0
$09FC	$0092			MOVWF	PR2
$09FD	$22AE			CALL	_PWM1_Init
;lfr_catcher_5sen_tsop_1.c,29 :: 		PWM2_Init(5000);
$09FE	$1012			BCF	T2CON, T2CKPS0
$09FF	$1092			BCF	T2CON, T2CKPS1
$0A00	$30C7			MOVLW	199
$0A01	$1683			BSF	STATUS, RP0
$0A02	$0092			MOVWF	PR2
$0A03	$22A2			CALL	_PWM2_Init
;lfr_catcher_5sen_tsop_1.c,30 :: 		Pwm1_Start();          //RIGHT MOTOR
$0A04	$2292			CALL	_PWM1_Start
;lfr_catcher_5sen_tsop_1.c,31 :: 		Pwm2_Start();          //LEFT MOTOR
$0A05	$229A			CALL	_PWM2_Start
;lfr_catcher_5sen_tsop_1.c,32 :: 		}
$0A06	$0008			RETURN
$0701	$	_indicator:
;lfr_catcher_5sen_tsop_1.c,57 :: 		void indicator()         //COPY THE SENSOR OUTPUT TO PORTD-INDICATOR
;lfr_catcher_5sen_tsop_1.c,60 :: 		PORTD.F7 = 0;
$0701	$1303			BCF	STATUS, RP1
$0702	$1283			BCF	STATUS, RP0
$0703	$1388			BCF	PORTD, 7
;lfr_catcher_5sen_tsop_1.c,61 :: 		PORTD.F6 = 0;
$0704	$1308			BCF	PORTD, 6
;lfr_catcher_5sen_tsop_1.c,62 :: 		PORTD.F5 = PORTA.F2;
$0705	$3000			MOVLW	0
$0706	$1905			BTFSC	PORTA, 2
$0707	$3001			MOVLW	1
$0708	$00F1			MOVWF	STACK_1
$0709	$3000			MOVLW	0
$070A	$1871			BTFSC	STACK_1, 0
$070B	$3020			MOVLW	32
$070C	$0608			XORWF	PORTD, 0
$070D	$3920			ANDLW	32
$070E	$0688			XORWF	PORTD, 1
;lfr_catcher_5sen_tsop_1.c,63 :: 		PORTD.F4 = PORTA.F3;
$070F	$3000			MOVLW	0
$0710	$1985			BTFSC	PORTA, 3
$0711	$3001			MOVLW	1
$0712	$00F1			MOVWF	STACK_1
$0713	$3000			MOVLW	0
$0714	$1871			BTFSC	STACK_1, 0
$0715	$3010			MOVLW	16
$0716	$0608			XORWF	PORTD, 0
$0717	$3910			ANDLW	16
$0718	$0688			XORWF	PORTD, 1
;lfr_catcher_5sen_tsop_1.c,64 :: 		PORTD.F3 = PORTA.F4;
$0719	$3000			MOVLW	0
$071A	$1A05			BTFSC	PORTA, 4
$071B	$3001			MOVLW	1
$071C	$00F1			MOVWF	STACK_1
$071D	$3000			MOVLW	0
$071E	$1871			BTFSC	STACK_1, 0
$071F	$3008			MOVLW	8
$0720	$0608			XORWF	PORTD, 0
$0721	$3908			ANDLW	8
$0722	$0688			XORWF	PORTD, 1
;lfr_catcher_5sen_tsop_1.c,65 :: 		PORTD.F2 = PORTA.F5;
$0723	$3000			MOVLW	0
$0724	$1A85			BTFSC	PORTA, 5
$0725	$3001			MOVLW	1
$0726	$00F1			MOVWF	STACK_1
$0727	$3000			MOVLW	0
$0728	$1871			BTFSC	STACK_1, 0
$0729	$3004			MOVLW	4
$072A	$0608			XORWF	PORTD, 0
$072B	$3904			ANDLW	4
$072C	$0688			XORWF	PORTD, 1
;lfr_catcher_5sen_tsop_1.c,66 :: 		PORTD.F1 = PORTE.F0;
$072D	$3001			MOVLW	1
$072E	$0509			ANDWF	PORTE, 0
$072F	$00F0			MOVWF	STACK_0
$0730	$3000			MOVLW	0
$0731	$1870			BTFSC	STACK_0, 0
$0732	$3002			MOVLW	2
$0733	$0608			XORWF	PORTD, 0
$0734	$3902			ANDLW	2
$0735	$0688			XORWF	PORTD, 1
;lfr_catcher_5sen_tsop_1.c,67 :: 		PORTD.F0 = 0;
$0736	$1008			BCF	PORTD, 0
;lfr_catcher_5sen_tsop_1.c,68 :: 		}
$0737	$0008			RETURN
$040F	$	_CalcError:
;lfr_catcher_5sen_tsop_1.c,69 :: 		void CalcError()				 //calculates the current error
;lfr_catcher_5sen_tsop_1.c,71 :: 		s1 = 0;
$040F	$1303			BCF	STATUS, RP1
$0410	$1283			BCF	STATUS, RP0
$0411	$01A1			CLRF	_s1
$0412	$01A2			CLRF	_s1+1
;lfr_catcher_5sen_tsop_1.c,72 :: 		s2 = 0;
$0413	$01A3			CLRF	_s2
$0414	$01A4			CLRF	_s2+1
;lfr_catcher_5sen_tsop_1.c,73 :: 		s3 = 0;
$0415	$01A5			CLRF	_s3
$0416	$01A6			CLRF	_s3+1
;lfr_catcher_5sen_tsop_1.c,74 :: 		s4 = 0;
$0417	$01A7			CLRF	_s4
$0418	$01A8			CLRF	_s4+1
;lfr_catcher_5sen_tsop_1.c,75 :: 		s5 = 0;
$0419	$01A9			CLRF	_s5
$041A	$01AA			CLRF	_s5+1
;lfr_catcher_5sen_tsop_1.c,77 :: 		if(PORTA.F2)
$041B	$1D05			BTFSS	PORTA, 2
$041C	$2C23			GOTO	L_CalcError_0
;lfr_catcher_5sen_tsop_1.c,79 :: 		lastreading='r';
$041D	$3072			MOVLW	114
$041E	$00AB			MOVWF	_lastreading
;lfr_catcher_5sen_tsop_1.c,80 :: 		s1 = 1;
$041F	$3001			MOVLW	1
$0420	$00A1			MOVWF	_s1
$0421	$3000			MOVLW	0
$0422	$00A2			MOVWF	_s1+1
;lfr_catcher_5sen_tsop_1.c,81 :: 		}
$0423	$	L_CalcError_0:
;lfr_catcher_5sen_tsop_1.c,82 :: 		if(PORTA.F3)
$0423	$1D85			BTFSS	PORTA, 3
$0424	$2C29			GOTO	L_CalcError_1
;lfr_catcher_5sen_tsop_1.c,84 :: 		s2 = 1;
$0425	$3001			MOVLW	1
$0426	$00A3			MOVWF	_s2
$0427	$3000			MOVLW	0
$0428	$00A4			MOVWF	_s2+1
;lfr_catcher_5sen_tsop_1.c,85 :: 		}
$0429	$	L_CalcError_1:
;lfr_catcher_5sen_tsop_1.c,86 :: 		if(PORTA.F4)
$0429	$1E05			BTFSS	PORTA, 4
$042A	$2C2F			GOTO	L_CalcError_2
;lfr_catcher_5sen_tsop_1.c,88 :: 		s3 = 1;
$042B	$3001			MOVLW	1
$042C	$00A5			MOVWF	_s3
$042D	$3000			MOVLW	0
$042E	$00A6			MOVWF	_s3+1
;lfr_catcher_5sen_tsop_1.c,89 :: 		}
$042F	$	L_CalcError_2:
;lfr_catcher_5sen_tsop_1.c,90 :: 		if(PORTA.F5)
$042F	$1E85			BTFSS	PORTA, 5
$0430	$2C35			GOTO	L_CalcError_3
;lfr_catcher_5sen_tsop_1.c,93 :: 		s4 = 1;
$0431	$3001			MOVLW	1
$0432	$00A7			MOVWF	_s4
$0433	$3000			MOVLW	0
$0434	$00A8			MOVWF	_s4+1
;lfr_catcher_5sen_tsop_1.c,94 :: 		}
$0435	$	L_CalcError_3:
;lfr_catcher_5sen_tsop_1.c,95 :: 		if(PORTE.F0)
$0435	$1C09			BTFSS	PORTE, 0
$0436	$2C3D			GOTO	L_CalcError_4
;lfr_catcher_5sen_tsop_1.c,97 :: 		lastreading='l';
$0437	$306C			MOVLW	108
$0438	$00AB			MOVWF	_lastreading
;lfr_catcher_5sen_tsop_1.c,98 :: 		s5 = 1;
$0439	$3001			MOVLW	1
$043A	$00A9			MOVWF	_s5
$043B	$3000			MOVLW	0
$043C	$00AA			MOVWF	_s5+1
;lfr_catcher_5sen_tsop_1.c,99 :: 		}
$043D	$	L_CalcError_4:
;lfr_catcher_5sen_tsop_1.c,101 :: 		perror = error;
$043D	$0830			MOVF	_error, 0
$043E	$00AC			MOVWF	_perror
$043F	$0831			MOVF	_error+1, 0
$0440	$00AD			MOVWF	_perror+1
$0441	$0832			MOVF	_error+2, 0
$0442	$00AE			MOVWF	_perror+2
$0443	$0833			MOVF	_error+3, 0
$0444	$00AF			MOVWF	_perror+3
;lfr_catcher_5sen_tsop_1.c,105 :: 		error = (s1 * 1) + (s2 * 2) + (s3 * 3) + (s4 * 4) + (s5 * 5) ;
$0445	$3001			MOVLW	1
$0446	$00F4			MOVWF	STACK_4
$0447	$0823			MOVF	_s2, 0
$0448	$00F0			MOVWF	STACK_0
$0449	$0824			MOVF	_s2+1, 0
$044A	$00F1			MOVWF	STACK_0+1
$044B	$0874			MOVF	STACK_4, 0
$044C	$	L_CalcError_51:
$044C	$1903			BTFSC	STATUS, Z
$044D	$2C53			GOTO	L_CalcError_52
$044E	$0DF0			RLF	STACK_0, 1
$044F	$0DF1			RLF	STACK_0+1, 1
$0450	$1070			BCF	STACK_0, 0
$0451	$3FFF			ADDLW	255
$0452	$2C4C			GOTO	L_CalcError_51
$0453	$	L_CalcError_52:
$0453	$0870			MOVF	STACK_0, 0
$0454	$0721			ADDWF	_s1, 0
$0455	$00DE			MOVWF	FLOC_CalcError+0
$0456	$0822			MOVF	_s1+1, 0
$0457	$1803			BTFSC	STATUS, C
$0458	$3F01			ADDLW	1
$0459	$0771			ADDWF	STACK_0+1, 0
$045A	$00DF			MOVWF	FLOC_CalcError+1
$045B	$0825			MOVF	_s3, 0
$045C	$00F0			MOVWF	STACK_0
$045D	$0826			MOVF	_s3+1, 0
$045E	$00F1			MOVWF	STACK_0+1
$045F	$3003			MOVLW	3
$0460	$00F4			MOVWF	STACK_4
$0461	$3000			MOVLW	0
$0462	$00F5			MOVWF	STACK_4+1
$0463	$158A			BSF	PCLATH, 3
$0464	$21CB			CALL	_mul_16x16_u
$0465	$118A			BCF	PCLATH, 3
$0466	$0870			MOVF	STACK_0, 0
$0467	$07DE			ADDWF	FLOC_CalcError+0, 1
$0468	$0871			MOVF	STACK_0+1, 0
$0469	$1803			BTFSC	STATUS, C
$046A	$3F01			ADDLW	1
$046B	$07DF			ADDWF	FLOC_CalcError+1, 1
$046C	$3002			MOVLW	2
$046D	$00F4			MOVWF	STACK_4
$046E	$0827			MOVF	_s4, 0
$046F	$00F0			MOVWF	STACK_0
$0470	$0828			MOVF	_s4+1, 0
$0471	$00F1			MOVWF	STACK_0+1
$0472	$0874			MOVF	STACK_4, 0
$0473	$	L_CalcError_53:
$0473	$1903			BTFSC	STATUS, Z
$0474	$2C7A			GOTO	L_CalcError_54
$0475	$0DF0			RLF	STACK_0, 1
$0476	$0DF1			RLF	STACK_0+1, 1
$0477	$1070			BCF	STACK_0, 0
$0478	$3FFF			ADDLW	255
$0479	$2C73			GOTO	L_CalcError_53
$047A	$	L_CalcError_54:
$047A	$0870			MOVF	STACK_0, 0
$047B	$07DE			ADDWF	FLOC_CalcError+0, 1
$047C	$0871			MOVF	STACK_0+1, 0
$047D	$1803			BTFSC	STATUS, C
$047E	$3F01			ADDLW	1
$047F	$07DF			ADDWF	FLOC_CalcError+1, 1
$0480	$0829			MOVF	_s5, 0
$0481	$00F0			MOVWF	STACK_0
$0482	$082A			MOVF	_s5+1, 0
$0483	$00F1			MOVWF	STACK_0+1
$0484	$3005			MOVLW	5
$0485	$00F4			MOVWF	STACK_4
$0486	$3000			MOVLW	0
$0487	$00F5			MOVWF	STACK_4+1
$0488	$158A			BSF	PCLATH, 3
$0489	$21CB			CALL	_mul_16x16_u
$048A	$118A			BCF	PCLATH, 3
$048B	$085E			MOVF	FLOC_CalcError+0, 0
$048C	$07F0			ADDWF	STACK_0, 1
$048D	$085F			MOVF	FLOC_CalcError+1, 0
$048E	$1803			BTFSC	STATUS, C
$048F	$3F01			ADDLW	1
$0490	$07F1			ADDWF	STACK_0+1, 1
$0491	$158A			BSF	PCLATH, 3
$0492	$2207			CALL	_word2double
$0493	$118A			BCF	PCLATH, 3
$0494	$0870			MOVF	STACK_0, 0
$0495	$00DE			MOVWF	FLOC_CalcError+0
$0496	$0871			MOVF	STACK_0+1, 0
$0497	$00DF			MOVWF	FLOC_CalcError+1
$0498	$0872			MOVF	STACK_0+2, 0
$0499	$00E0			MOVWF	FLOC_CalcError+2
$049A	$0873			MOVF	STACK_0+3, 0
$049B	$00E1			MOVWF	FLOC_CalcError+3
$049C	$085E			MOVF	FLOC_CalcError+0, 0
$049D	$00B0			MOVWF	_error
$049E	$085F			MOVF	FLOC_CalcError+1, 0
$049F	$00B1			MOVWF	_error+1
$04A0	$0860			MOVF	FLOC_CalcError+2, 0
$04A1	$00B2			MOVWF	_error+2
$04A2	$0861			MOVF	FLOC_CalcError+3, 0
$04A3	$00B3			MOVWF	_error+3
;lfr_catcher_5sen_tsop_1.c,106 :: 		error = (error)/(s1+s2+s3+s4+s5);
$04A4	$0823			MOVF	_s2, 0
$04A5	$0721			ADDWF	_s1, 0
$04A6	$00F0			MOVWF	STACK_0
$04A7	$0822			MOVF	_s1+1, 0
$04A8	$1803			BTFSC	STATUS, C
$04A9	$3F01			ADDLW	1
$04AA	$0724			ADDWF	_s2+1, 0
$04AB	$00F1			MOVWF	STACK_0+1
$04AC	$0825			MOVF	_s3, 0
$04AD	$07F0			ADDWF	STACK_0, 1
$04AE	$0826			MOVF	_s3+1, 0
$04AF	$1803			BTFSC	STATUS, C
$04B0	$3F01			ADDLW	1
$04B1	$07F1			ADDWF	STACK_0+1, 1
$04B2	$0827			MOVF	_s4, 0
$04B3	$07F0			ADDWF	STACK_0, 1
$04B4	$0828			MOVF	_s4+1, 0
$04B5	$1803			BTFSC	STATUS, C
$04B6	$3F01			ADDLW	1
$04B7	$07F1			ADDWF	STACK_0+1, 1
$04B8	$0829			MOVF	_s5, 0
$04B9	$07F0			ADDWF	STACK_0, 1
$04BA	$082A			MOVF	_s5+1, 0
$04BB	$1803			BTFSC	STATUS, C
$04BC	$3F01			ADDLW	1
$04BD	$07F1			ADDWF	STACK_0+1, 1
$04BE	$158A			BSF	PCLATH, 3
$04BF	$2207			CALL	_word2double
$04C0	$118A			BCF	PCLATH, 3
$04C1	$0870			MOVF	STACK_0, 0
$04C2	$00F4			MOVWF	STACK_4
$04C3	$0871			MOVF	STACK_0+1, 0
$04C4	$00F5			MOVWF	STACK_4+1
$04C5	$0872			MOVF	STACK_0+2, 0
$04C6	$00F6			MOVWF	STACK_4+2
$04C7	$0873			MOVF	STACK_0+3, 0
$04C8	$00F7			MOVWF	STACK_4+3
$04C9	$085E			MOVF	FLOC_CalcError+0, 0
$04CA	$00F0			MOVWF	STACK_0
$04CB	$085F			MOVF	FLOC_CalcError+1, 0
$04CC	$00F1			MOVWF	STACK_0+1
$04CD	$0860			MOVF	FLOC_CalcError+2, 0
$04CE	$00F2			MOVWF	STACK_0+2
$04CF	$0861			MOVF	FLOC_CalcError+3, 0
$04D0	$00F3			MOVWF	STACK_0+3
$04D1	$2592			CALL	_div_32x32_fp
$04D2	$0870			MOVF	STACK_0, 0
$04D3	$00B0			MOVWF	_error
$04D4	$0871			MOVF	STACK_0+1, 0
$04D5	$00B1			MOVWF	_error+1
$04D6	$0872			MOVF	STACK_0+2, 0
$04D7	$00B2			MOVWF	_error+2
$04D8	$0873			MOVF	STACK_0+3, 0
$04D9	$00B3			MOVWF	_error+3
;lfr_catcher_5sen_tsop_1.c,107 :: 		error = error - 3;
$04DA	$3000			MOVLW	0
$04DB	$00F4			MOVWF	STACK_4
$04DC	$3000			MOVLW	0
$04DD	$00F5			MOVWF	STACK_4+1
$04DE	$3040			MOVLW	64
$04DF	$00F6			MOVWF	STACK_4+2
$04E0	$3080			MOVLW	128
$04E1	$00F7			MOVWF	STACK_4+3
$04E2	$158A			BSF	PCLATH, 3
$04E3	$2281			CALL	_sub_32x32_fp
$04E4	$118A			BCF	PCLATH, 3
$04E5	$0870			MOVF	STACK_0, 0
$04E6	$00B0			MOVWF	_error
$04E7	$0871			MOVF	STACK_0+1, 0
$04E8	$00B1			MOVWF	_error+1
$04E9	$0872			MOVF	STACK_0+2, 0
$04EA	$00B2			MOVWF	_error+2
$04EB	$0873			MOVF	STACK_0+3, 0
$04EC	$00B3			MOVWF	_error+3
;lfr_catcher_5sen_tsop_1.c,108 :: 		}
$04ED	$0008			RETURN
$0ABE	$	_motor_RB:
;lfr_catcher_5sen_tsop_1.c,40 :: 		void motor_RB()          //RIGHT MOTOR REV DIR
;lfr_catcher_5sen_tsop_1.c,42 :: 		PORTC.F7 = 0;
$0ABE	$1303			BCF	STATUS, RP1
$0ABF	$1283			BCF	STATUS, RP0
$0AC0	$1387			BCF	PORTC, 7
;lfr_catcher_5sen_tsop_1.c,43 :: 		PORTC.F6 = 1;
$0AC1	$1707			BSF	PORTC, 6
;lfr_catcher_5sen_tsop_1.c,44 :: 		}
$0AC2	$0008			RETURN
$0AB9	$	_motor_LF:
;lfr_catcher_5sen_tsop_1.c,46 :: 		void motor_LF()          //LEFT MOTOR FWD DIR
;lfr_catcher_5sen_tsop_1.c,48 :: 		PORTC.F5 = 1;
$0AB9	$1303			BCF	STATUS, RP1
$0ABA	$1283			BCF	STATUS, RP0
$0ABB	$1687			BSF	PORTC, 5
;lfr_catcher_5sen_tsop_1.c,49 :: 		PORTC.F4 = 0;
$0ABC	$1207			BCF	PORTC, 4
;lfr_catcher_5sen_tsop_1.c,50 :: 		}
$0ABD	$0008			RETURN
$0928	$	_PWM1_Change_Duty:
$0928	$1303			BCF	STATUS, RP1
$0929	$1683			BSF	STATUS, RP0
$092A	$0812			MOVF	PR2, 0
$092B	$3F01			ADDLW	1
$092C	$00F0			MOVWF	STACK_0
$092D	$01F1			CLRF	STACK_0+1
$092E	$1803			BTFSC	STATUS, C
$092F	$0AF1			INCF	STACK_0+1, 1
$0930	$1283			BCF	STATUS, RP0
$0931	$085E			MOVF	FARG_PWM1_Change_Duty+0, 0
$0932	$00F4			MOVWF	STACK_4
$0933	$01F5			CLRF	STACK_4+1
$0934	$209B			CALL	_mul_16x16_s
$0935	$3006			MOVLW	6
$0936	$00F2			MOVWF	STACK_2
$0937	$0870			MOVF	STACK_0, 0
$0938	$00F4			MOVWF	STACK_4
$0939	$0871			MOVF	STACK_0+1, 0
$093A	$00F5			MOVWF	STACK_4+1
$093B	$0872			MOVF	STACK_2, 0
$093C	$	L_PWM1_Change_Duty_2:
$093C	$1903			BTFSC	STATUS, Z
$093D	$2943			GOTO	L_PWM1_Change_Duty_3
$093E	$0CF5			RRF	STACK_4+1, 1
$093F	$0CF4			RRF	STACK_4, 1
$0940	$13F5			BCF	STACK_4+1, 7
$0941	$3FFF			ADDLW	255
$0942	$293C			GOTO	L_PWM1_Change_Duty_2
$0943	$	L_PWM1_Change_Duty_3:
$0943	$0874			MOVF	STACK_4, 0
$0944	$00F0			MOVWF	STACK_0
$0945	$0DF0			RLF	STACK_0, 1
$0946	$1070			BCF	STACK_0, 0
$0947	$0DF0			RLF	STACK_0, 1
$0948	$1070			BCF	STACK_0, 0
$0949	$0DF0			RLF	STACK_0, 1
$094A	$1070			BCF	STACK_0, 0
$094B	$0DF0			RLF	STACK_0, 1
$094C	$1070			BCF	STACK_0, 0
$094D	$3030			MOVLW	48
$094E	$0570			ANDWF	STACK_0, 0
$094F	$00F3			MOVWF	STACK_3
$0950	$0874			MOVF	STACK_4, 0
$0951	$00F0			MOVWF	STACK_0
$0952	$0875			MOVF	STACK_4+1, 0
$0953	$00F1			MOVWF	STACK_0+1
$0954	$0CF1			RRF	STACK_0+1, 1
$0955	$0CF0			RRF	STACK_0, 1
$0956	$13F1			BCF	STACK_0+1, 7
$0957	$0CF1			RRF	STACK_0+1, 1
$0958	$0CF0			RRF	STACK_0, 1
$0959	$13F1			BCF	STACK_0+1, 7
$095A	$0870			MOVF	STACK_0, 0
$095B	$0095			MOVWF	CCPR1L
$095C	$300F			MOVLW	15
$095D	$0597			ANDWF	CCP1CON, 1
$095E	$0873			MOVF	STACK_3, 0
$095F	$0497			IORWF	CCP1CON, 1
$0960	$0008			RETURN
$0992	$	_PWM2_Change_Duty:
$0992	$1303			BCF	STATUS, RP1
$0993	$1683			BSF	STATUS, RP0
$0994	$0812			MOVF	PR2, 0
$0995	$3F01			ADDLW	1
$0996	$00F0			MOVWF	STACK_0
$0997	$01F1			CLRF	STACK_0+1
$0998	$1803			BTFSC	STATUS, C
$0999	$0AF1			INCF	STACK_0+1, 1
$099A	$1283			BCF	STATUS, RP0
$099B	$085E			MOVF	FARG_PWM2_Change_Duty+0, 0
$099C	$00F4			MOVWF	STACK_4
$099D	$01F5			CLRF	STACK_4+1
$099E	$209B			CALL	_mul_16x16_s
$099F	$3006			MOVLW	6
$09A0	$00F2			MOVWF	STACK_2
$09A1	$0870			MOVF	STACK_0, 0
$09A2	$00F4			MOVWF	STACK_4
$09A3	$0871			MOVF	STACK_0+1, 0
$09A4	$00F5			MOVWF	STACK_4+1
$09A5	$0872			MOVF	STACK_2, 0
$09A6	$	L_PWM2_Change_Duty_0:
$09A6	$1903			BTFSC	STATUS, Z
$09A7	$29AD			GOTO	L_PWM2_Change_Duty_1
$09A8	$0CF5			RRF	STACK_4+1, 1
$09A9	$0CF4			RRF	STACK_4, 1
$09AA	$13F5			BCF	STACK_4+1, 7
$09AB	$3FFF			ADDLW	255
$09AC	$29A6			GOTO	L_PWM2_Change_Duty_0
$09AD	$	L_PWM2_Change_Duty_1:
$09AD	$0874			MOVF	STACK_4, 0
$09AE	$00F0			MOVWF	STACK_0
$09AF	$0DF0			RLF	STACK_0, 1
$09B0	$1070			BCF	STACK_0, 0
$09B1	$0DF0			RLF	STACK_0, 1
$09B2	$1070			BCF	STACK_0, 0
$09B3	$0DF0			RLF	STACK_0, 1
$09B4	$1070			BCF	STACK_0, 0
$09B5	$0DF0			RLF	STACK_0, 1
$09B6	$1070			BCF	STACK_0, 0
$09B7	$3030			MOVLW	48
$09B8	$0570			ANDWF	STACK_0, 0
$09B9	$00F3			MOVWF	STACK_3
$09BA	$0874			MOVF	STACK_4, 0
$09BB	$00F0			MOVWF	STACK_0
$09BC	$0875			MOVF	STACK_4+1, 0
$09BD	$00F1			MOVWF	STACK_0+1
$09BE	$0CF1			RRF	STACK_0+1, 1
$09BF	$0CF0			RRF	STACK_0, 1
$09C0	$13F1			BCF	STACK_0+1, 7
$09C1	$0CF1			RRF	STACK_0+1, 1
$09C2	$0CF0			RRF	STACK_0, 1
$09C3	$13F1			BCF	STACK_0+1, 7
$09C4	$0870			MOVF	STACK_0, 0
$09C5	$009B			MOVWF	CCPR2L
$09C6	$300F			MOVLW	15
$09C7	$059D			ANDWF	CCP2CON, 1
$09C8	$0873			MOVF	STACK_3, 0
$09C9	$049D			IORWF	CCP2CON, 1
$09CA	$0008			RETURN
$0AC3	$	_motor_LB:
;lfr_catcher_5sen_tsop_1.c,52 :: 		void motor_LB()          //LEFT MOTOR REV DIR
;lfr_catcher_5sen_tsop_1.c,54 :: 		PORTC.F5 = 0;
$0AC3	$1303			BCF	STATUS, RP1
$0AC4	$1283			BCF	STATUS, RP0
$0AC5	$1287			BCF	PORTC, 5
;lfr_catcher_5sen_tsop_1.c,55 :: 		PORTC.F4 = 1;
$0AC6	$1607			BSF	PORTC, 4
;lfr_catcher_5sen_tsop_1.c,56 :: 		}
$0AC7	$0008			RETURN
$0AB4	$	_motor_RF:
;lfr_catcher_5sen_tsop_1.c,34 :: 		void motor_RF()          //RIGHT MOTOR FWD DIR
;lfr_catcher_5sen_tsop_1.c,36 :: 		PORTC.F7 = 1;
$0AB4	$1303			BCF	STATUS, RP1
$0AB5	$1283			BCF	STATUS, RP0
$0AB6	$1787			BSF	PORTC, 7
;lfr_catcher_5sen_tsop_1.c,37 :: 		PORTC.F6 = 0;
$0AB7	$1307			BCF	PORTC, 6
;lfr_catcher_5sen_tsop_1.c,38 :: 		}
$0AB8	$0008			RETURN
$0850	$	GlobalInilfr_catcher_5sen_tsop_1:
$0850	$30BE			MOVLW	190
$0851	$1303			BCF	STATUS, RP1
$0852	$1283			BCF	STATUS, RP0
$0853	$00B4			MOVWF	_basespeed+0
$0854	$3005			MOVLW	5
$0855	$00B5			MOVWF	_Kp+0
$0856	$3008			MOVLW	8
$0857	$00B6			MOVWF	_Ki+0
$0858	$3004			MOVLW	4
$0859	$00B7			MOVWF	_Kd+0
$085A	$3000			MOVLW	0
$085B	$00B8			MOVWF	_rightpulse+0
$085C	$3000			MOVLW	0
$085D	$00B9			MOVWF	_rightpulse+1
$085E	$3000			MOVLW	0
$085F	$00BA			MOVWF	_rightpulse+2
$0860	$3000			MOVLW	0
$0861	$00BB			MOVWF	_rightpulse+3
$0862	$3000			MOVLW	0
$0863	$00BC			MOVWF	_leftpulse+0
$0864	$3000			MOVLW	0
$0865	$00BD			MOVWF	_leftpulse+1
$0866	$3000			MOVLW	0
$0867	$00BE			MOVWF	_leftpulse+2
$0868	$3000			MOVLW	0
$0869	$00BF			MOVWF	_leftpulse+3
$086A	$3000			MOVLW	0
$086B	$00AC			MOVWF	_perror+0
$086C	$3000			MOVLW	0
$086D	$00AD			MOVWF	_perror+1
$086E	$3000			MOVLW	0
$086F	$00AE			MOVWF	_perror+2
$0870	$3000			MOVLW	0
$0871	$00AF			MOVWF	_perror+3
$0872	$3000			MOVLW	0
$0873	$00B0			MOVWF	_error+0
$0874	$3000			MOVLW	0
$0875	$00B1			MOVWF	_error+1
$0876	$3000			MOVLW	0
$0877	$00B2			MOVWF	_error+2
$0878	$3000			MOVLW	0
$0879	$00B3			MOVWF	_error+3
$087A	$3000			MOVLW	0
$087B	$00C0			MOVWF	_PROPORTIONAL+0
$087C	$3000			MOVLW	0
$087D	$00C1			MOVWF	_PROPORTIONAL+1
$087E	$3000			MOVLW	0
$087F	$00C2			MOVWF	_PROPORTIONAL+2
$0880	$3000			MOVLW	0
$0881	$00C3			MOVWF	_PROPORTIONAL+3
$0882	$3000			MOVLW	0
$0883	$00C4			MOVWF	_INTEGRAL+0
$0884	$3000			MOVLW	0
$0885	$00C5			MOVWF	_INTEGRAL+1
$0886	$3000			MOVLW	0
$0887	$00C6			MOVWF	_INTEGRAL+2
$0888	$3000			MOVLW	0
$0889	$00C7			MOVWF	_INTEGRAL+3
$088A	$3000			MOVLW	0
$088B	$00C8			MOVWF	_DERIVATIVE+0
$088C	$3000			MOVLW	0
$088D	$00C9			MOVWF	_DERIVATIVE+1
$088E	$3000			MOVLW	0
$088F	$00CA			MOVWF	_DERIVATIVE+2
$0890	$3000			MOVLW	0
$0891	$00CB			MOVWF	_DERIVATIVE+3
$0892	$3000			MOVLW	0
$0893	$00CC			MOVWF	_correction+0
$0894	$3000			MOVLW	0
$0895	$00CD			MOVWF	_correction+1
$0896	$3000			MOVLW	0
$0897	$00CE			MOVWF	_correction+2
$0898	$3000			MOVLW	0
$0899	$00CF			MOVWF	_correction+3
$089A	$0008			RETURN
$0A1D	$	_Equals_Double:
$0A1D	$1303			BCF	STATUS, RP1
$0A1E	$1283			BCF	STATUS, RP0
$0A1F	$0873			MOVF	STACK_3, W
$0A20	$0677			XORWF	STACK_7, W
$0A21	$1D03			BTFSS	STATUS, Z
$0A22	$2A30			GOTO	EQU_FALSE
$0A23	$0872			MOVF	STACK_2, W
$0A24	$0676			XORWF	STACK_6, W
$0A25	$1D03			BTFSS	STATUS, Z
$0A26	$2A30			GOTO	EQU_FALSE
$0A27	$0871			MOVF	STACK_1, W
$0A28	$0675			XORWF	STACK_5, W
$0A29	$1D03			BTFSS	STATUS, Z
$0A2A	$2A30			GOTO	EQU_FALSE
$0A2B	$0870			MOVF	STACK_0, W
$0A2C	$0674			XORWF	STACK_4, W
$0A2D	$1903			BTFSC	STATUS, Z
$0A2E	$1503			BSF	STATUS, Z
$0A2F	$0008			RETURN
$0A30	$	EQU_FALSE:
$0A30	$1103			BCF	STATUS, Z
$0A31	$0008			RETURN
$0A32	$0008			RETURN
$0A33	$	_Byte2Double:
$0A33	$1303			BCF	STATUS, RP1
$0A34	$1283			BCF	STATUS, RP0
$0A35	$	FLO08U32:
$0A35	$0870			MOVF	STACK_0, W
$0A36	$00F8			MOVWF	STACK_8
$0A37	$01FB			CLRF	STACK_11
$0A38	$01FC			CLRF	STACK_12
$0A39	$309E			MOVLW	0x9E
$0A3A	$00F3			MOVWF	STACK_3
$0A3B	$01FA			CLRF	STACK_10
$0A3C	$01F2			CLRF	STACK_2
$0A3D	$01F1			CLRF	STACK_1
$0A3E	$01F0			CLRF	STACK_0
$0A3F	$3002			MOVLW	0x02
$0A40	$00FC			MOVWF	STACK_12
$0A41	$118A			BCF	PCLATH, 3
$0A42	$269D			CALL	_NRM4032
$0A43	$158A			BSF	PCLATH, 3
$0A44	$0008			RETURN
$0636	$	_Mul_32x32_FP:
$0636	$1303			BCF	STATUS, RP1
$0637	$1283			BCF	STATUS, RP0
$0638	$	FPM32:
$0638	$01FB			CLRF	STACK_11
$0639	$0873			MOVF	STACK_3, W
$063A	$1D03			BTFSS	STATUS, Z
$063B	$0877			MOVF	STACK_7, W
$063C	$1903			BTFSC	STATUS, Z
$063D	$2E8D			GOTO	JPMRES032
$063E	$	M32BNE0:
$063E	$0872			MOVF	STACK_2, W
$063F	$0676			XORWF	STACK_6, W
$0640	$00FA			MOVWF	STACK_10
$0641	$0877			MOVF	STACK_7, W
$0642	$07F3			ADDWF	STACK_3, F
$0643	$307E			MOVLW	126
$0644	$1C03			BTFSS	STATUS, C
$0645	$2E4A			GOTO	MTUN32
$0646	$02F3			SUBWF	STACK_3, F
$0647	$1803			BTFSC	STATUS, C
$0648	$2E92			GOTO	JPMSETFOV32
$0649	$2E4D			GOTO	MOK32
$064A	$	MTUN32:
$064A	$02F3			SUBWF	STACK_3, F
$064B	$1C03			BTFSS	STATUS, C
$064C	$2E97			GOTO	JPMSETFUN32
$064D	$	MOK32:
$064D	$0872			MOVF	STACK_2, W
$064E	$00F8			MOVWF	STACK_8
$064F	$0871			MOVF	STACK_1, W
$0650	$00FC			MOVWF	STACK_12
$0651	$0870			MOVF	STACK_0, W
$0652	$00FD			MOVWF	STACK_13
$0653	$17F8			BSF	STACK_8, 7
$0654	$17F6			BSF	STACK_6, 7
$0655	$1003			BCF	STATUS, C
$0656	$01F2			CLRF	STACK_2
$0657	$01F1			CLRF	STACK_1
$0658	$01F0			CLRF	STACK_0
$0659	$3018			MOVLW	24
$065A	$00A0			MOVWF	__math_tempbD
$065B	$	MLOOP32:
$065B	$1C7D			BTFSS	STACK_13, 0
$065C	$2E67			GOTO	MNOADD32
$065D	$	MADD32:
$065D	$0874			MOVF	STACK_4, W
$065E	$07F0			ADDWF	STACK_0, F
$065F	$0875			MOVF	STACK_5, W
$0660	$1803			BTFSC	STATUS, C
$0661	$0F75			INCFSZ	STACK_5, W
$0662	$07F1			ADDWF	STACK_1, F
$0663	$0876			MOVF	STACK_6, W
$0664	$1803			BTFSC	STATUS, C
$0665	$0F76			INCFSZ	STACK_6, W
$0666	$07F2			ADDWF	STACK_2, F
$0667	$	MNOADD32:
$0667	$0CF2			RRF	STACK_2, F
$0668	$0CF1			RRF	STACK_1, F
$0669	$0CF0			RRF	STACK_0, F
$066A	$0CF8			RRF	STACK_8, F
$066B	$0CFC			RRF	STACK_12, F
$066C	$0CFD			RRF	STACK_13, F
$066D	$1003			BCF	STATUS, C
$066E	$0BA0			DECFSZ	__math_tempbD, F
$066F	$2E5B			GOTO	MLOOP32
$0670	$1BF2			BTFSC	STACK_2, 7
$0671	$2E77			GOTO	MROUND32
$0672	$0DF8			RLF	STACK_8, F
$0673	$0DF0			RLF	STACK_0, F
$0674	$0DF1			RLF	STACK_1, F
$0675	$0DF2			RLF	STACK_2, F
$0676	$03F3			DECF	STACK_3, F
$0677	$	MROUND32:
$0677	$1B7B			BTFSC	STACK_11, 6
$0678	$1C70			BTFSS	STACK_0, 0
$0679	$2E89			GOTO	MUL32OK
$067A	$1FF8			BTFSS	STACK_8, 7
$067B	$2E89			GOTO	MUL32OK
$067C	$0AF0			INCF	STACK_0, F
$067D	$1903			BTFSC	STATUS, Z
$067E	$0AF1			INCF	STACK_1, F
$067F	$1903			BTFSC	STATUS, Z
$0680	$0AF2			INCF	STACK_2, F
$0681	$1D03			BTFSS	STATUS, Z
$0682	$2E89			GOTO	MUL32OK
$0683	$0CF2			RRF	STACK_2, F
$0684	$0CF1			RRF	STACK_1, F
$0685	$0CF0			RRF	STACK_0, F
$0686	$0AF3			INCF	STACK_3, F
$0687	$1903			BTFSC	STATUS, Z
$0688	$2E92			GOTO	JPMSETFOV32
$0689	$	MUL32OK:
$0689	$1FFA			BTFSS	STACK_10, 7
$068A	$13F2			BCF	STACK_2, 7
$068B	$3000			MOVLW	0x00
$068C	$2E9B			GOTO	MUL32EEE
$068D	$	JPMRES032:
$068D	$3001			MOVLW	0x01
$068E	$158A			BSF	PCLATH, 3
$068F	$2289			CALL	_RES032
$0690	$118A			BCF	PCLATH, 3
$0691	$2E9B			GOTO	MUL32EEE
$0692	$	JPMSETFOV32:
$0692	$3002			MOVLW	0x02
$0693	$158A			BSF	PCLATH, 3
$0694	$2265			CALL	_SETFOV32
$0695	$118A			BCF	PCLATH, 3
$0696	$2E9B			GOTO	MUL32EEE
$0697	$	JPMSETFUN32:
$0697	$3004			MOVLW	0x04
$0698	$158A			BSF	PCLATH, 3
$0699	$2273			CALL	_SETFUN32
$069A	$118A			BCF	PCLATH, 3
$069B	$	MUL32EEE:
$069B	$0000			NOP
$069C	$0008			RETURN
$0800	$	_Compare_Double:
$0800	$1303			BCF	STATUS, RP1
$0801	$1283			BCF	STATUS, RP0
$0802	$01FA			CLRF	STACK_10
$0803	$0873			MOVF	STACK_3, W
$0804	$1D03			BTFSS	STATUS, Z
$0805	$147A			BSF	STACK_10, 0
$0806	$0877			MOVF	STACK_7, W
$0807	$1D03			BTFSS	STATUS, Z
$0808	$14FA			BSF	STACK_10, 1
$0809	$087A			MOVF	STACK_10, W
$080A	$1903			BTFSC	STATUS, Z
$080B	$284C			GOTO	COMPARE_EQU
$080C	$3A03			XORLW	0x03
$080D	$1903			BTFSC	STATUS, Z
$080E	$2817			GOTO	COMPARE_NOTZERO
$080F	$187A			BTFSC	STACK_10, 0
$0810	$2814			GOTO	COMPARE_XNOTZERO
$0811	$	COMPARE_YNOTZERO:
$0811	$1FF6			BTFSS	STACK_6, 7
$0812	$284A			GOTO	COMPARE_LT
$0813	$2848			GOTO	COMPARE_GT
$0814	$	COMPARE_XNOTZERO:
$0814	$1FF2			BTFSS	STACK_2, 7
$0815	$2848			GOTO	COMPARE_GT
$0816	$284A			GOTO	COMPARE_LT
$0817	$	COMPARE_NOTZERO:
$0817	$0872			MOVF	STACK_2, W
$0818	$3980			ANDLW	0x80
$0819	$00FA			MOVWF	STACK_10
$081A	$13F2			BCF	STACK_2, 7
$081B	$0876			MOVF	STACK_6, W
$081C	$3980			ANDLW	0x80
$081D	$13F6			BCF	STACK_6, 7
$081E	$067A			XORWF	STACK_10, W
$081F	$1903			BTFSC	STATUS, Z
$0820	$2825			GOTO	COMPARE_TESTALL
$0821	$087A			MOVF	STACK_10, W
$0822	$1903			BTFSC	STATUS, Z
$0823	$2848			GOTO	COMPARE_GT
$0824	$284A			GOTO	COMPARE_LT
$0825	$	COMPARE_TESTALL:
$0825	$0877			MOVF	STACK_7, W
$0826	$0273			SUBWF	STACK_3, W
$0827	$1903			BTFSC	STATUS, Z
$0828	$282C			GOTO	COMPARE_C1
$0829	$1C03			BTFSS	STATUS, C
$082A	$2840			GOTO	GT_FALSE
$082B	$2844			GOTO	GT_TRUE
$082C	$	COMPARE_C1:
$082C	$0876			MOVF	STACK_6, W
$082D	$0272			SUBWF	STACK_2, W
$082E	$1903			BTFSC	STATUS, Z
$082F	$2833			GOTO	COMPARE_C2
$0830	$1C03			BTFSS	STATUS, C
$0831	$2840			GOTO	GT_FALSE
$0832	$2844			GOTO	GT_TRUE
$0833	$	COMPARE_C2:
$0833	$0875			MOVF	STACK_5, W
$0834	$0271			SUBWF	STACK_1, W
$0835	$1903			BTFSC	STATUS, Z
$0836	$283A			GOTO	COMPARE_C3
$0837	$1C03			BTFSS	STATUS, C
$0838	$2840			GOTO	GT_FALSE
$0839	$2844			GOTO	GT_TRUE
$083A	$	COMPARE_C3:
$083A	$0874			MOVF	STACK_4, W
$083B	$0270			SUBWF	STACK_0, W
$083C	$1903			BTFSC	STATUS, Z
$083D	$284C			GOTO	COMPARE_EQU
$083E	$1803			BTFSC	STATUS, C
$083F	$2844			GOTO	GT_TRUE
$0840	$	GT_FALSE:
$0840	$08FA			MOVF	STACK_10, F
$0841	$1903			BTFSC	STATUS, Z
$0842	$284A			GOTO	COMPARE_LT
$0843	$2848			GOTO	COMPARE_GT
$0844	$	GT_TRUE:
$0844	$08FA			MOVF	STACK_10, F
$0845	$1903			BTFSC	STATUS, Z
$0846	$2848			GOTO	COMPARE_GT
$0847	$284A			GOTO	COMPARE_LT
$0848	$	COMPARE_GT:
$0848	$1403			BSF	STATUS, C
$0849	$0008			RETURN
$084A	$	COMPARE_LT:
$084A	$1003			BCF	STATUS, C
$084B	$0008			RETURN
$084C	$	COMPARE_EQU:
$084C	$1403			BSF	STATUS, C
$084D	$1503			BSF	STATUS, Z
$084E	$0008			RETURN
$084F	$0008			RETURN
$08E5	$	_Double2Byte:
$08E5	$1303			BCF	STATUS, RP1
$08E6	$1283			BCF	STATUS, RP0
$08E7	$	INT32U08:
$08E7	$01FB			CLRF	STACK_11
$08E8	$01FC			CLRF	STACK_12
$08E9	$01FA			CLRF	STACK_10
$08EA	$0873			MOVF	STACK_3, W
$08EB	$1903			BTFSC	STATUS, Z
$08EC	$2912			GOTO	IRES008
$08ED	$13FA			BCF	STACK_10, 7
$08EE	$17F2			BSF	STACK_2, 7
$08EF	$3086			MOVLW	134
$08F0	$02F3			SUBWF	STACK_3, F
$08F1	$1BF3			BTFSC	STACK_3, 7
$08F2	$28F6			GOTO	SETEXP08
$08F3	$1903			BTFSC	STATUS, Z
$08F4	$28F6			GOTO	SETEXP08
$08F5	$2914			GOTO	SETIOV08
$08F6	$	SETEXP08:
$08F6	$09F3			COMF	STACK_3, F
$08F7	$0AF3			INCF	STACK_3, F
$08F8	$3008			MOVLW	8
$08F9	$0273			SUBWF	STACK_3, W
$08FA	$1C03			BTFSS	STATUS, C
$08FB	$2903			GOTO	TSHIFT3208
$08FC	$00F3			MOVWF	STACK_3
$08FD	$0DF2			RLF	STACK_2, F
$08FE	$01F2			CLRF	STACK_2
$08FF	$0873			MOVF	STACK_3, W
$0900	$1D03			BTFSS	STATUS, Z
$0901	$1003			BCF	STATUS, C
$0902	$290A			GOTO	SHIFT3208OK
$0903	$	TSHIFT3208:
$0903	$0873			MOVF	STACK_3, W
$0904	$1903			BTFSC	STATUS, Z
$0905	$290A			GOTO	SHIFT3208OK
$0906	$	SHIFT3208:
$0906	$1003			BCF	STATUS, C
$0907	$0CF2			RRF	STACK_2, F
$0908	$0BF3			DECFSZ	STACK_3, F
$0909	$2906			GOTO	SHIFT3208
$090A	$	SHIFT3208OK:
$090A	$1B7B			BTFSC	STACK_11, 6
$090B	$1C72			BTFSS	STACK_2, 0
$090C	$2912			GOTO	INT3208OK
$090D	$1C03			BTFSS	STATUS, C
$090E	$2912			GOTO	INT3208OK
$090F	$0AF2			INCF	STACK_2, F
$0910	$1903			BTFSC	STATUS, Z
$0911	$2919			GOTO	D2B_JPKSETIOV3224
$0912	$	INT3208OK:
$0912	$	IRES008:
$0912	$01F1			CLRF	STACK_1
$0913	$291C			GOTO	INT3208EOK
$0914	$	SETIOV08:
$0914	$147B			BSF	STACK_11, 0
$0915	$1FFB			BTFSS	STACK_11, 7
$0916	$291F			GOTO	INT3208EER
$0917	$01F1			CLRF	STACK_1
$0918	$291F			GOTO	INT3208EER
$0919	$	D2B_JPKSETIOV3224:
$0919	$3001			MOVLW	0x01
$091A	$00FC			MOVWF	STACK_12
$091B	$2921			GOTO	INT3208EEE
$091C	$	INT3208EOK:
$091C	$3000			MOVLW	0x00
$091D	$00FC			MOVWF	STACK_12
$091E	$2921			GOTO	INT3208EEE
$091F	$	INT3208EER:
$091F	$30FF			MOVLW	0xFF
$0920	$00FC			MOVWF	STACK_12
$0921	$	INT3208EEE:
$0921	$08FC			MOVF	STACK_12, F
$0922	$1903			BTFSC	STATUS, Z
$0923	$2925			GOTO	L_Double2Byte_0
$0924	$2256			CALL	_SETIOV3224
$0925	$	L_Double2Byte_0:
$0925	$0872			MOVF	STACK_2, W
$0926	$00F0			MOVWF	STACK_0
$0927	$0008			RETURN
$0004	$	_main:
;lfr_catcher_5sen_tsop_1.c,109 :: 		void main()
;lfr_catcher_5sen_tsop_1.c,112 :: 		initport();
$0004	$158A			BSF	PCLATH, 3
$0005	$2050			CALL	GlobalInilfr_catcher_5sen_tsop_1
$0006	$118A			BCF	PCLATH, 3
$0007	$158A			BSF	PCLATH, 3
$0008	$2245			CALL	_initport
$0009	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop_1.c,113 :: 		initpwm();
$000A	$158A			BSF	PCLATH, 3
$000B	$21F6			CALL	_initpwm
$000C	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop_1.c,114 :: 		while(1)
$000D	$	L_main_5:
;lfr_catcher_5sen_tsop_1.c,116 :: 		indicator();
$000D	$2701			CALL	_indicator
;lfr_catcher_5sen_tsop_1.c,117 :: 		CalcError();
$000E	$240F			CALL	_CalcError
;lfr_catcher_5sen_tsop_1.c,119 :: 		if((s1+s2+s3+s4+s5) == 0)		          //ROBOT HAS OVERSHOOT
$000F	$0823			MOVF	_s2, 0
$0010	$0721			ADDWF	_s1, 0
$0011	$00F0			MOVWF	STACK_0
$0012	$0822			MOVF	_s1+1, 0
$0013	$1803			BTFSC	STATUS, C
$0014	$3F01			ADDLW	1
$0015	$0724			ADDWF	_s2+1, 0
$0016	$00F1			MOVWF	STACK_0+1
$0017	$0825			MOVF	_s3, 0
$0018	$07F0			ADDWF	STACK_0, 1
$0019	$0826			MOVF	_s3+1, 0
$001A	$1803			BTFSC	STATUS, C
$001B	$3F01			ADDLW	1
$001C	$07F1			ADDWF	STACK_0+1, 1
$001D	$0827			MOVF	_s4, 0
$001E	$07F0			ADDWF	STACK_0, 1
$001F	$0828			MOVF	_s4+1, 0
$0020	$1803			BTFSC	STATUS, C
$0021	$3F01			ADDLW	1
$0022	$07F1			ADDWF	STACK_0+1, 1
$0023	$0829			MOVF	_s5, 0
$0024	$0770			ADDWF	STACK_0, 0
$0025	$00F4			MOVWF	STACK_4
$0026	$0871			MOVF	STACK_0+1, 0
$0027	$1803			BTFSC	STATUS, C
$0028	$3F01			ADDLW	1
$0029	$072A			ADDWF	_s5+1, 0
$002A	$00F5			MOVWF	STACK_4+1
$002B	$3000			MOVLW	0
$002C	$0675			XORWF	STACK_4+1, 0
$002D	$1D03			BTFSS	STATUS, Z
$002E	$2831			GOTO	L_main_55
$002F	$3000			MOVLW	0
$0030	$0674			XORWF	STACK_4, 0
$0031	$	L_main_55:
$0031	$1D03			BTFSS	STATUS, Z
$0032	$287A			GOTO	L_main_7
;lfr_catcher_5sen_tsop_1.c,121 :: 		if(lastreading == 'r')				      //CHECKS IF THE LAST SENSOR ACTIVATED WAS RIGHT
$0033	$082B			MOVF	_lastreading, 0
$0034	$3A72			XORLW	114
$0035	$1D03			BTFSS	STATUS, Z
$0036	$2856			GOTO	L_main_8
;lfr_catcher_5sen_tsop_1.c,123 :: 		motor_RB();						          //TURN RIGHT AT FULL SPEED
$0037	$158A			BSF	PCLATH, 3
$0038	$22BE			CALL	_motor_RB
$0039	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop_1.c,124 :: 		motor_LF();
$003A	$158A			BSF	PCLATH, 3
$003B	$22B9			CALL	_motor_LF
$003C	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop_1.c,125 :: 		PWM1_CHANGE_DUTY(255);
$003D	$30FF			MOVLW	255
$003E	$00DE			MOVWF	FARG_PWM1_Change_Duty+0
$003F	$158A			BSF	PCLATH, 3
$0040	$2128			CALL	_PWM1_Change_Duty
$0041	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop_1.c,126 :: 		PWM2_CHANGE_DUTY(255);
$0042	$30FF			MOVLW	255
$0043	$00DE			MOVWF	FARG_PWM2_Change_Duty+0
$0044	$158A			BSF	PCLATH, 3
$0045	$2192			CALL	_PWM2_Change_Duty
$0046	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop_1.c,127 :: 		delay_ms(10);
$0047	$300D			MOVLW	13
$0048	$00FB			MOVWF	STACK_11
$0049	$30FF			MOVLW	255
$004A	$00FA			MOVWF	STACK_10
$004B	$0BFB			DECFSZ	STACK_11, F
$004C	$284E			GOTO	$+2
$004D	$2851			GOTO	$+4
$004E	$0BFA			DECFSZ	STACK_10, F
$004F	$284E			GOTO	$-1
$0050	$284B			GOTO	$-5
$0051	$30F3			MOVLW	243
$0052	$00FA			MOVWF	STACK_10
$0053	$0BFA			DECFSZ	STACK_10, F
$0054	$2853			GOTO	$-1
$0055	$0000			NOP
;lfr_catcher_5sen_tsop_1.c,128 :: 		}
$0056	$	L_main_8:
;lfr_catcher_5sen_tsop_1.c,129 :: 		if(lastreading == 'l')			        //CHECKS IF THE LAST SENSOR ACTIVATED WAS LEFT
$0056	$082B			MOVF	_lastreading, 0
$0057	$3A6C			XORLW	108
$0058	$1D03			BTFSS	STATUS, Z
$0059	$2879			GOTO	L_main_9
;lfr_catcher_5sen_tsop_1.c,131 :: 		motor_LB();					        	  //TURN LEFT AT FULL SPEED
$005A	$158A			BSF	PCLATH, 3
$005B	$22C3			CALL	_motor_LB
$005C	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop_1.c,132 :: 		motor_RF();
$005D	$158A			BSF	PCLATH, 3
$005E	$22B4			CALL	_motor_RF
$005F	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop_1.c,133 :: 		PWM1_CHANGE_DUTY(255);
$0060	$30FF			MOVLW	255
$0061	$00DE			MOVWF	FARG_PWM1_Change_Duty+0
$0062	$158A			BSF	PCLATH, 3
$0063	$2128			CALL	_PWM1_Change_Duty
$0064	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop_1.c,134 :: 		PWM2_CHANGE_DUTY(255);
$0065	$30FF			MOVLW	255
$0066	$00DE			MOVWF	FARG_PWM2_Change_Duty+0
$0067	$158A			BSF	PCLATH, 3
$0068	$2192			CALL	_PWM2_Change_Duty
$0069	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop_1.c,135 :: 		delay_ms(10);
$006A	$300D			MOVLW	13
$006B	$00FB			MOVWF	STACK_11
$006C	$30FF			MOVLW	255
$006D	$00FA			MOVWF	STACK_10
$006E	$0BFB			DECFSZ	STACK_11, F
$006F	$2871			GOTO	$+2
$0070	$2874			GOTO	$+4
$0071	$0BFA			DECFSZ	STACK_10, F
$0072	$2871			GOTO	$-1
$0073	$286E			GOTO	$-5
$0074	$30F3			MOVLW	243
$0075	$00FA			MOVWF	STACK_10
$0076	$0BFA			DECFSZ	STACK_10, F
$0077	$2876			GOTO	$-1
$0078	$0000			NOP
;lfr_catcher_5sen_tsop_1.c,136 :: 		}
$0079	$	L_main_9:
;lfr_catcher_5sen_tsop_1.c,137 :: 		}
$0079	$2A74			GOTO	L_main_10
$007A	$	L_main_7:
;lfr_catcher_5sen_tsop_1.c,140 :: 		if((error == 0) && (s3==1) && ((s1+s2+s4+s5)==0))
$007A	$01F4			CLRF	STACK_4
$007B	$01F5			CLRF	STACK_4+1
$007C	$01F6			CLRF	STACK_4+2
$007D	$01F7			CLRF	STACK_4+3
$007E	$0830			MOVF	_error, 0
$007F	$00F0			MOVWF	STACK_0
$0080	$0831			MOVF	_error+1, 0
$0081	$00F1			MOVWF	STACK_0+1
$0082	$0832			MOVF	_error+2, 0
$0083	$00F2			MOVWF	STACK_0+2
$0084	$0833			MOVF	_error+3, 0
$0085	$00F3			MOVWF	STACK_0+3
$0086	$158A			BSF	PCLATH, 3
$0087	$221D			CALL	_equals_double
$0088	$118A			BCF	PCLATH, 3
$0089	$3001			MOVLW	1
$008A	$1D03			BTFSS	STATUS, Z
$008B	$3000			MOVLW	0
$008C	$00F0			MOVWF	STACK_0
$008D	$0870			MOVF	STACK_0, 0
$008E	$1903			BTFSC	STATUS, Z
$008F	$28D5			GOTO	L_main_13
$0090	$3000			MOVLW	0
$0091	$0626			XORWF	_s3+1, 0
$0092	$1D03			BTFSS	STATUS, Z
$0093	$2896			GOTO	L_main_56
$0094	$3001			MOVLW	1
$0095	$0625			XORWF	_s3, 0
$0096	$	L_main_56:
$0096	$1D03			BTFSS	STATUS, Z
$0097	$28D5			GOTO	L_main_13
$0098	$0823			MOVF	_s2, 0
$0099	$0721			ADDWF	_s1, 0
$009A	$00F0			MOVWF	STACK_0
$009B	$0822			MOVF	_s1+1, 0
$009C	$1803			BTFSC	STATUS, C
$009D	$3F01			ADDLW	1
$009E	$0724			ADDWF	_s2+1, 0
$009F	$00F1			MOVWF	STACK_0+1
$00A0	$0827			MOVF	_s4, 0
$00A1	$07F0			ADDWF	STACK_0, 1
$00A2	$0828			MOVF	_s4+1, 0
$00A3	$1803			BTFSC	STATUS, C
$00A4	$3F01			ADDLW	1
$00A5	$07F1			ADDWF	STACK_0+1, 1
$00A6	$0829			MOVF	_s5, 0
$00A7	$0770			ADDWF	STACK_0, 0
$00A8	$00F4			MOVWF	STACK_4
$00A9	$0871			MOVF	STACK_0+1, 0
$00AA	$1803			BTFSC	STATUS, C
$00AB	$3F01			ADDLW	1
$00AC	$072A			ADDWF	_s5+1, 0
$00AD	$00F5			MOVWF	STACK_4+1
$00AE	$3000			MOVLW	0
$00AF	$0675			XORWF	STACK_4+1, 0
$00B0	$1D03			BTFSS	STATUS, Z
$00B1	$28B4			GOTO	L_main_57
$00B2	$3000			MOVLW	0
$00B3	$0674			XORWF	STACK_4, 0
$00B4	$	L_main_57:
$00B4	$1D03			BTFSS	STATUS, Z
$00B5	$28D5			GOTO	L_main_13
$00B6	$	L185_ex_L_main_13:
;lfr_catcher_5sen_tsop_1.c,142 :: 		motor_LF();					        	      //FWD AT FULL SPEED
$00B6	$158A			BSF	PCLATH, 3
$00B7	$22B9			CALL	_motor_LF
$00B8	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop_1.c,143 :: 		motor_RF();
$00B9	$158A			BSF	PCLATH, 3
$00BA	$22B4			CALL	_motor_RF
$00BB	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop_1.c,144 :: 		PWM1_CHANGE_DUTY(255);
$00BC	$30FF			MOVLW	255
$00BD	$00DE			MOVWF	FARG_PWM1_Change_Duty+0
$00BE	$158A			BSF	PCLATH, 3
$00BF	$2128			CALL	_PWM1_Change_Duty
$00C0	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop_1.c,145 :: 		PWM2_CHANGE_DUTY(255);
$00C1	$30FF			MOVLW	255
$00C2	$00DE			MOVWF	FARG_PWM2_Change_Duty+0
$00C3	$158A			BSF	PCLATH, 3
$00C4	$2192			CALL	_PWM2_Change_Duty
$00C5	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop_1.c,146 :: 		delay_ms(10);
$00C6	$300D			MOVLW	13
$00C7	$00FB			MOVWF	STACK_11
$00C8	$30FF			MOVLW	255
$00C9	$00FA			MOVWF	STACK_10
$00CA	$0BFB			DECFSZ	STACK_11, F
$00CB	$28CD			GOTO	$+2
$00CC	$28D0			GOTO	$+4
$00CD	$0BFA			DECFSZ	STACK_10, F
$00CE	$28CD			GOTO	$-1
$00CF	$28CA			GOTO	$-5
$00D0	$30F3			MOVLW	243
$00D1	$00FA			MOVWF	STACK_10
$00D2	$0BFA			DECFSZ	STACK_10, F
$00D3	$28D2			GOTO	$-1
$00D4	$0000			NOP
;lfr_catcher_5sen_tsop_1.c,147 :: 		}
$00D5	$	L_main_13:
;lfr_catcher_5sen_tsop_1.c,148 :: 		PROPORTIONAL = error * kp;
$00D5	$0835			MOVF	_Kp, 0
$00D6	$00F0			MOVWF	STACK_0
$00D7	$158A			BSF	PCLATH, 3
$00D8	$2233			CALL	_byte2double
$00D9	$118A			BCF	PCLATH, 3
$00DA	$0830			MOVF	_error, 0
$00DB	$00F4			MOVWF	STACK_4
$00DC	$0831			MOVF	_error+1, 0
$00DD	$00F5			MOVWF	STACK_4+1
$00DE	$0832			MOVF	_error+2, 0
$00DF	$00F6			MOVWF	STACK_4+2
$00E0	$0833			MOVF	_error+3, 0
$00E1	$00F7			MOVWF	STACK_4+3
$00E2	$2636			CALL	_mul_32x32_fp
$00E3	$0870			MOVF	STACK_0, 0
$00E4	$00DA			MOVWF	FLOC_main+8
$00E5	$0871			MOVF	STACK_0+1, 0
$00E6	$00DB			MOVWF	FLOC_main+9
$00E7	$0872			MOVF	STACK_0+2, 0
$00E8	$00DC			MOVWF	FLOC_main+10
$00E9	$0873			MOVF	STACK_0+3, 0
$00EA	$00DD			MOVWF	FLOC_main+11
$00EB	$085A			MOVF	FLOC_main+8, 0
$00EC	$00C0			MOVWF	_PROPORTIONAL
$00ED	$085B			MOVF	FLOC_main+9, 0
$00EE	$00C1			MOVWF	_PROPORTIONAL+1
$00EF	$085C			MOVF	FLOC_main+10, 0
$00F0	$00C2			MOVWF	_PROPORTIONAL+2
$00F1	$085D			MOVF	FLOC_main+11, 0
$00F2	$00C3			MOVWF	_PROPORTIONAL+3
;lfr_catcher_5sen_tsop_1.c,149 :: 		INTEGRAL  += error ;
$00F3	$0844			MOVF	_INTEGRAL, 0
$00F4	$00F0			MOVWF	STACK_0
$00F5	$0845			MOVF	_INTEGRAL+1, 0
$00F6	$00F1			MOVWF	STACK_0+1
$00F7	$0846			MOVF	_INTEGRAL+2, 0
$00F8	$00F2			MOVWF	STACK_0+2
$00F9	$0847			MOVF	_INTEGRAL+3, 0
$00FA	$00F3			MOVWF	STACK_0+3
$00FB	$0830			MOVF	_error, 0
$00FC	$00F4			MOVWF	STACK_4
$00FD	$0831			MOVF	_error+1, 0
$00FE	$00F5			MOVWF	STACK_4+1
$00FF	$0832			MOVF	_error+2, 0
$0100	$00F6			MOVWF	STACK_4+2
$0101	$0833			MOVF	_error+3, 0
$0102	$00F7			MOVWF	STACK_4+3
$0103	$24EE			CALL	_add_32x32_fp
$0104	$0870			MOVF	STACK_0, 0
$0105	$00D2			MOVWF	FLOC_main+0
$0106	$0871			MOVF	STACK_0+1, 0
$0107	$00D3			MOVWF	FLOC_main+1
$0108	$0872			MOVF	STACK_0+2, 0
$0109	$00D4			MOVWF	FLOC_main+2
$010A	$0873			MOVF	STACK_0+3, 0
$010B	$00D5			MOVWF	FLOC_main+3
$010C	$0852			MOVF	FLOC_main+0, 0
$010D	$00C4			MOVWF	_INTEGRAL
$010E	$0853			MOVF	FLOC_main+1, 0
$010F	$00C5			MOVWF	_INTEGRAL+1
$0110	$0854			MOVF	FLOC_main+2, 0
$0111	$00C6			MOVWF	_INTEGRAL+2
$0112	$0855			MOVF	FLOC_main+3, 0
$0113	$00C7			MOVWF	_INTEGRAL+3
;lfr_catcher_5sen_tsop_1.c,150 :: 		INTEGRAL  *= ki;
$0114	$0836			MOVF	_Ki, 0
$0115	$00F0			MOVWF	STACK_0
$0116	$158A			BSF	PCLATH, 3
$0117	$2233			CALL	_byte2double
$0118	$118A			BCF	PCLATH, 3
$0119	$0852			MOVF	FLOC_main+0, 0
$011A	$00F4			MOVWF	STACK_4
$011B	$0853			MOVF	FLOC_main+1, 0
$011C	$00F5			MOVWF	STACK_4+1
$011D	$0854			MOVF	FLOC_main+2, 0
$011E	$00F6			MOVWF	STACK_4+2
$011F	$0855			MOVF	FLOC_main+3, 0
$0120	$00F7			MOVWF	STACK_4+3
$0121	$2636			CALL	_mul_32x32_fp
$0122	$0870			MOVF	STACK_0, 0
$0123	$00D2			MOVWF	FLOC_main+0
$0124	$0871			MOVF	STACK_0+1, 0
$0125	$00D3			MOVWF	FLOC_main+1
$0126	$0872			MOVF	STACK_0+2, 0
$0127	$00D4			MOVWF	FLOC_main+2
$0128	$0873			MOVF	STACK_0+3, 0
$0129	$00D5			MOVWF	FLOC_main+3
$012A	$0852			MOVF	FLOC_main+0, 0
$012B	$00C4			MOVWF	_INTEGRAL
$012C	$0853			MOVF	FLOC_main+1, 0
$012D	$00C5			MOVWF	_INTEGRAL+1
$012E	$0854			MOVF	FLOC_main+2, 0
$012F	$00C6			MOVWF	_INTEGRAL+2
$0130	$0855			MOVF	FLOC_main+3, 0
$0131	$00C7			MOVWF	_INTEGRAL+3
;lfr_catcher_5sen_tsop_1.c,151 :: 		DERIVATIVE = (error - perror);
$0132	$082C			MOVF	_perror, 0
$0133	$00F4			MOVWF	STACK_4
$0134	$082D			MOVF	_perror+1, 0
$0135	$00F5			MOVWF	STACK_4+1
$0136	$082E			MOVF	_perror+2, 0
$0137	$00F6			MOVWF	STACK_4+2
$0138	$082F			MOVF	_perror+3, 0
$0139	$00F7			MOVWF	STACK_4+3
$013A	$0830			MOVF	_error, 0
$013B	$00F0			MOVWF	STACK_0
$013C	$0831			MOVF	_error+1, 0
$013D	$00F1			MOVWF	STACK_0+1
$013E	$0832			MOVF	_error+2, 0
$013F	$00F2			MOVWF	STACK_0+2
$0140	$0833			MOVF	_error+3, 0
$0141	$00F3			MOVWF	STACK_0+3
$0142	$158A			BSF	PCLATH, 3
$0143	$2281			CALL	_sub_32x32_fp
$0144	$118A			BCF	PCLATH, 3
$0145	$0870			MOVF	STACK_0, 0
$0146	$00D6			MOVWF	FLOC_main+4
$0147	$0871			MOVF	STACK_0+1, 0
$0148	$00D7			MOVWF	FLOC_main+5
$0149	$0872			MOVF	STACK_0+2, 0
$014A	$00D8			MOVWF	FLOC_main+6
$014B	$0873			MOVF	STACK_0+3, 0
$014C	$00D9			MOVWF	FLOC_main+7
$014D	$0856			MOVF	FLOC_main+4, 0
$014E	$00C8			MOVWF	_DERIVATIVE
$014F	$0857			MOVF	FLOC_main+5, 0
$0150	$00C9			MOVWF	_DERIVATIVE+1
$0151	$0858			MOVF	FLOC_main+6, 0
$0152	$00CA			MOVWF	_DERIVATIVE+2
$0153	$0859			MOVF	FLOC_main+7, 0
$0154	$00CB			MOVWF	_DERIVATIVE+3
;lfr_catcher_5sen_tsop_1.c,152 :: 		correction = ( (PROPORTIONAL) + (INTEGRAL) + (DERIVATIVE*kd));
$0155	$085A			MOVF	FLOC_main+8, 0
$0156	$00F0			MOVWF	STACK_0
$0157	$085B			MOVF	FLOC_main+9, 0
$0158	$00F1			MOVWF	STACK_0+1
$0159	$085C			MOVF	FLOC_main+10, 0
$015A	$00F2			MOVWF	STACK_0+2
$015B	$085D			MOVF	FLOC_main+11, 0
$015C	$00F3			MOVWF	STACK_0+3
$015D	$0852			MOVF	FLOC_main+0, 0
$015E	$00F4			MOVWF	STACK_4
$015F	$0853			MOVF	FLOC_main+1, 0
$0160	$00F5			MOVWF	STACK_4+1
$0161	$0854			MOVF	FLOC_main+2, 0
$0162	$00F6			MOVWF	STACK_4+2
$0163	$0855			MOVF	FLOC_main+3, 0
$0164	$00F7			MOVWF	STACK_4+3
$0165	$24EE			CALL	_add_32x32_fp
$0166	$0870			MOVF	STACK_0, 0
$0167	$00D2			MOVWF	FLOC_main+0
$0168	$0871			MOVF	STACK_0+1, 0
$0169	$00D3			MOVWF	FLOC_main+1
$016A	$0872			MOVF	STACK_0+2, 0
$016B	$00D4			MOVWF	FLOC_main+2
$016C	$0873			MOVF	STACK_0+3, 0
$016D	$00D5			MOVWF	FLOC_main+3
$016E	$0837			MOVF	_Kd, 0
$016F	$00F0			MOVWF	STACK_0
$0170	$158A			BSF	PCLATH, 3
$0171	$2233			CALL	_byte2double
$0172	$118A			BCF	PCLATH, 3
$0173	$0856			MOVF	FLOC_main+4, 0
$0174	$00F4			MOVWF	STACK_4
$0175	$0857			MOVF	FLOC_main+5, 0
$0176	$00F5			MOVWF	STACK_4+1
$0177	$0858			MOVF	FLOC_main+6, 0
$0178	$00F6			MOVWF	STACK_4+2
$0179	$0859			MOVF	FLOC_main+7, 0
$017A	$00F7			MOVWF	STACK_4+3
$017B	$2636			CALL	_mul_32x32_fp
$017C	$0852			MOVF	FLOC_main+0, 0
$017D	$00F4			MOVWF	STACK_4
$017E	$0853			MOVF	FLOC_main+1, 0
$017F	$00F5			MOVWF	STACK_4+1
$0180	$0854			MOVF	FLOC_main+2, 0
$0181	$00F6			MOVWF	STACK_4+2
$0182	$0855			MOVF	FLOC_main+3, 0
$0183	$00F7			MOVWF	STACK_4+3
$0184	$24EE			CALL	_add_32x32_fp
$0185	$0870			MOVF	STACK_0, 0
$0186	$00D6			MOVWF	FLOC_main+4
$0187	$0871			MOVF	STACK_0+1, 0
$0188	$00D7			MOVWF	FLOC_main+5
$0189	$0872			MOVF	STACK_0+2, 0
$018A	$00D8			MOVWF	FLOC_main+6
$018B	$0873			MOVF	STACK_0+3, 0
$018C	$00D9			MOVWF	FLOC_main+7
$018D	$0856			MOVF	FLOC_main+4, 0
$018E	$00CC			MOVWF	_correction
$018F	$0857			MOVF	FLOC_main+5, 0
$0190	$00CD			MOVWF	_correction+1
$0191	$0858			MOVF	FLOC_main+6, 0
$0192	$00CE			MOVWF	_correction+2
$0193	$0859			MOVF	FLOC_main+7, 0
$0194	$00CF			MOVWF	_correction+3
;lfr_catcher_5sen_tsop_1.c,153 :: 		rightpulse =  basespeed + correction;
$0195	$0834			MOVF	_basespeed, 0
$0196	$00F0			MOVWF	STACK_0
$0197	$158A			BSF	PCLATH, 3
$0198	$2233			CALL	_byte2double
$0199	$118A			BCF	PCLATH, 3
$019A	$0870			MOVF	STACK_0, 0
$019B	$00D2			MOVWF	FLOC_main+0
$019C	$0871			MOVF	STACK_0+1, 0
$019D	$00D3			MOVWF	FLOC_main+1
$019E	$0872			MOVF	STACK_0+2, 0
$019F	$00D4			MOVWF	FLOC_main+2
$01A0	$0873			MOVF	STACK_0+3, 0
$01A1	$00D5			MOVWF	FLOC_main+3
$01A2	$0852			MOVF	FLOC_main+0, 0
$01A3	$00F0			MOVWF	STACK_0
$01A4	$0853			MOVF	FLOC_main+1, 0
$01A5	$00F1			MOVWF	STACK_0+1
$01A6	$0854			MOVF	FLOC_main+2, 0
$01A7	$00F2			MOVWF	STACK_0+2
$01A8	$0855			MOVF	FLOC_main+3, 0
$01A9	$00F3			MOVWF	STACK_0+3
$01AA	$0856			MOVF	FLOC_main+4, 0
$01AB	$00F4			MOVWF	STACK_4
$01AC	$0857			MOVF	FLOC_main+5, 0
$01AD	$00F5			MOVWF	STACK_4+1
$01AE	$0858			MOVF	FLOC_main+6, 0
$01AF	$00F6			MOVWF	STACK_4+2
$01B0	$0859			MOVF	FLOC_main+7, 0
$01B1	$00F7			MOVWF	STACK_4+3
$01B2	$24EE			CALL	_add_32x32_fp
$01B3	$0870			MOVF	STACK_0, 0
$01B4	$00B8			MOVWF	_rightpulse
$01B5	$0871			MOVF	STACK_0+1, 0
$01B6	$00B9			MOVWF	_rightpulse+1
$01B7	$0872			MOVF	STACK_0+2, 0
$01B8	$00BA			MOVWF	_rightpulse+2
$01B9	$0873			MOVF	STACK_0+3, 0
$01BA	$00BB			MOVWF	_rightpulse+3
;lfr_catcher_5sen_tsop_1.c,154 :: 		leftpulse = basespeed - correction;
$01BB	$0856			MOVF	FLOC_main+4, 0
$01BC	$00F4			MOVWF	STACK_4
$01BD	$0857			MOVF	FLOC_main+5, 0
$01BE	$00F5			MOVWF	STACK_4+1
$01BF	$0858			MOVF	FLOC_main+6, 0
$01C0	$00F6			MOVWF	STACK_4+2
$01C1	$0859			MOVF	FLOC_main+7, 0
$01C2	$00F7			MOVWF	STACK_4+3
$01C3	$0852			MOVF	FLOC_main+0, 0
$01C4	$00F0			MOVWF	STACK_0
$01C5	$0853			MOVF	FLOC_main+1, 0
$01C6	$00F1			MOVWF	STACK_0+1
$01C7	$0854			MOVF	FLOC_main+2, 0
$01C8	$00F2			MOVWF	STACK_0+2
$01C9	$0855			MOVF	FLOC_main+3, 0
$01CA	$00F3			MOVWF	STACK_0+3
$01CB	$158A			BSF	PCLATH, 3
$01CC	$2281			CALL	_sub_32x32_fp
$01CD	$118A			BCF	PCLATH, 3
$01CE	$0870			MOVF	STACK_0, 0
$01CF	$00BC			MOVWF	_leftpulse
$01D0	$0871			MOVF	STACK_0+1, 0
$01D1	$00BD			MOVWF	_leftpulse+1
$01D2	$0872			MOVF	STACK_0+2, 0
$01D3	$00BE			MOVWF	_leftpulse+2
$01D4	$0873			MOVF	STACK_0+3, 0
$01D5	$00BF			MOVWF	_leftpulse+3
;lfr_catcher_5sen_tsop_1.c,155 :: 		motor_RF();
$01D6	$158A			BSF	PCLATH, 3
$01D7	$22B4			CALL	_motor_RF
$01D8	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop_1.c,156 :: 		motor_LF();
$01D9	$158A			BSF	PCLATH, 3
$01DA	$22B9			CALL	_motor_LF
$01DB	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop_1.c,158 :: 		if(leftpulse > 255)                 //LEFT CORRECTION EXCEED
$01DC	$083C			MOVF	_leftpulse, 0
$01DD	$00F4			MOVWF	STACK_4
$01DE	$083D			MOVF	_leftpulse+1, 0
$01DF	$00F5			MOVWF	STACK_4+1
$01E0	$083E			MOVF	_leftpulse+2, 0
$01E1	$00F6			MOVWF	STACK_4+2
$01E2	$083F			MOVF	_leftpulse+3, 0
$01E3	$00F7			MOVWF	STACK_4+3
$01E4	$3000			MOVLW	0
$01E5	$00F0			MOVWF	STACK_0
$01E6	$3000			MOVLW	0
$01E7	$00F1			MOVWF	STACK_0+1
$01E8	$307F			MOVLW	127
$01E9	$00F2			MOVWF	STACK_0+2
$01EA	$3086			MOVLW	134
$01EB	$00F3			MOVWF	STACK_0+3
$01EC	$158A			BSF	PCLATH, 3
$01ED	$2000			CALL	_compare_double
$01EE	$118A			BCF	PCLATH, 3
$01EF	$3001			MOVLW	1
$01F0	$1803			BTFSC	STATUS, C
$01F1	$3000			MOVLW	0
$01F2	$00F0			MOVWF	STACK_0
$01F3	$0870			MOVF	STACK_0, 0
$01F4	$1903			BTFSC	STATUS, Z
$01F5	$29FE			GOTO	L_main_14
;lfr_catcher_5sen_tsop_1.c,159 :: 		leftpulse = 255;
$01F6	$3000			MOVLW	0
$01F7	$00BC			MOVWF	_leftpulse
$01F8	$3000			MOVLW	0
$01F9	$00BD			MOVWF	_leftpulse+1
$01FA	$307F			MOVLW	127
$01FB	$00BE			MOVWF	_leftpulse+2
$01FC	$3086			MOVLW	134
$01FD	$00BF			MOVWF	_leftpulse+3
$01FE	$	L_main_14:
;lfr_catcher_5sen_tsop_1.c,161 :: 		if(rightpulse > 255)                //RIGHT CORRECTION EXCEED
$01FE	$0838			MOVF	_rightpulse, 0
$01FF	$00F4			MOVWF	STACK_4
$0200	$0839			MOVF	_rightpulse+1, 0
$0201	$00F5			MOVWF	STACK_4+1
$0202	$083A			MOVF	_rightpulse+2, 0
$0203	$00F6			MOVWF	STACK_4+2
$0204	$083B			MOVF	_rightpulse+3, 0
$0205	$00F7			MOVWF	STACK_4+3
$0206	$3000			MOVLW	0
$0207	$00F0			MOVWF	STACK_0
$0208	$3000			MOVLW	0
$0209	$00F1			MOVWF	STACK_0+1
$020A	$307F			MOVLW	127
$020B	$00F2			MOVWF	STACK_0+2
$020C	$3086			MOVLW	134
$020D	$00F3			MOVWF	STACK_0+3
$020E	$158A			BSF	PCLATH, 3
$020F	$2000			CALL	_compare_double
$0210	$118A			BCF	PCLATH, 3
$0211	$3001			MOVLW	1
$0212	$1803			BTFSC	STATUS, C
$0213	$3000			MOVLW	0
$0214	$00F0			MOVWF	STACK_0
$0215	$0870			MOVF	STACK_0, 0
$0216	$1903			BTFSC	STATUS, Z
$0217	$2A20			GOTO	L_main_15
;lfr_catcher_5sen_tsop_1.c,162 :: 		rightpulse = 255;
$0218	$3000			MOVLW	0
$0219	$00B8			MOVWF	_rightpulse
$021A	$3000			MOVLW	0
$021B	$00B9			MOVWF	_rightpulse+1
$021C	$307F			MOVLW	127
$021D	$00BA			MOVWF	_rightpulse+2
$021E	$3086			MOVLW	134
$021F	$00BB			MOVWF	_rightpulse+3
$0220	$	L_main_15:
;lfr_catcher_5sen_tsop_1.c,164 :: 		if(leftpulse < 0)                   //LEFT CORRECTION EXCEED
$0220	$01F4			CLRF	STACK_4
$0221	$01F5			CLRF	STACK_4+1
$0222	$01F6			CLRF	STACK_4+2
$0223	$01F7			CLRF	STACK_4+3
$0224	$083C			MOVF	_leftpulse, 0
$0225	$00F0			MOVWF	STACK_0
$0226	$083D			MOVF	_leftpulse+1, 0
$0227	$00F1			MOVWF	STACK_0+1
$0228	$083E			MOVF	_leftpulse+2, 0
$0229	$00F2			MOVWF	STACK_0+2
$022A	$083F			MOVF	_leftpulse+3, 0
$022B	$00F3			MOVWF	STACK_0+3
$022C	$158A			BSF	PCLATH, 3
$022D	$2000			CALL	_compare_double
$022E	$118A			BCF	PCLATH, 3
$022F	$3001			MOVLW	1
$0230	$1803			BTFSC	STATUS, C
$0231	$3000			MOVLW	0
$0232	$00F0			MOVWF	STACK_0
$0233	$0870			MOVF	STACK_0, 0
$0234	$1903			BTFSC	STATUS, Z
$0235	$2A3A			GOTO	L_main_16
;lfr_catcher_5sen_tsop_1.c,165 :: 		leftpulse = 0;
$0236	$01BC			CLRF	_leftpulse
$0237	$01BD			CLRF	_leftpulse+1
$0238	$01BE			CLRF	_leftpulse+2
$0239	$01BF			CLRF	_leftpulse+3
$023A	$	L_main_16:
;lfr_catcher_5sen_tsop_1.c,167 :: 		if(rightpulse < 0)                  //RIGHT CORRECTION EXCEED
$023A	$01F4			CLRF	STACK_4
$023B	$01F5			CLRF	STACK_4+1
$023C	$01F6			CLRF	STACK_4+2
$023D	$01F7			CLRF	STACK_4+3
$023E	$0838			MOVF	_rightpulse, 0
$023F	$00F0			MOVWF	STACK_0
$0240	$0839			MOVF	_rightpulse+1, 0
$0241	$00F1			MOVWF	STACK_0+1
$0242	$083A			MOVF	_rightpulse+2, 0
$0243	$00F2			MOVWF	STACK_0+2
$0244	$083B			MOVF	_rightpulse+3, 0
$0245	$00F3			MOVWF	STACK_0+3
$0246	$158A			BSF	PCLATH, 3
$0247	$2000			CALL	_compare_double
$0248	$118A			BCF	PCLATH, 3
$0249	$3001			MOVLW	1
$024A	$1803			BTFSC	STATUS, C
$024B	$3000			MOVLW	0
$024C	$00F0			MOVWF	STACK_0
$024D	$0870			MOVF	STACK_0, 0
$024E	$1903			BTFSC	STATUS, Z
$024F	$2A54			GOTO	L_main_17
;lfr_catcher_5sen_tsop_1.c,168 :: 		rightpulse = 0;
$0250	$01B8			CLRF	_rightpulse
$0251	$01B9			CLRF	_rightpulse+1
$0252	$01BA			CLRF	_rightpulse+2
$0253	$01BB			CLRF	_rightpulse+3
$0254	$	L_main_17:
;lfr_catcher_5sen_tsop_1.c,170 :: 		PWM1_CHANGE_DUTY(rightpulse);
$0254	$0838			MOVF	_rightpulse, 0
$0255	$00F0			MOVWF	STACK_0
$0256	$0839			MOVF	_rightpulse+1, 0
$0257	$00F1			MOVWF	STACK_0+1
$0258	$083A			MOVF	_rightpulse+2, 0
$0259	$00F2			MOVWF	STACK_0+2
$025A	$083B			MOVF	_rightpulse+3, 0
$025B	$00F3			MOVWF	STACK_0+3
$025C	$158A			BSF	PCLATH, 3
$025D	$20E5			CALL	_double2byte
$025E	$118A			BCF	PCLATH, 3
$025F	$0870			MOVF	STACK_0, 0
$0260	$00DE			MOVWF	FARG_PWM1_Change_Duty+0
$0261	$158A			BSF	PCLATH, 3
$0262	$2128			CALL	_PWM1_Change_Duty
$0263	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop_1.c,171 :: 		PWM2_CHANGE_DUTY(leftpulse);
$0264	$083C			MOVF	_leftpulse, 0
$0265	$00F0			MOVWF	STACK_0
$0266	$083D			MOVF	_leftpulse+1, 0
$0267	$00F1			MOVWF	STACK_0+1
$0268	$083E			MOVF	_leftpulse+2, 0
$0269	$00F2			MOVWF	STACK_0+2
$026A	$083F			MOVF	_leftpulse+3, 0
$026B	$00F3			MOVWF	STACK_0+3
$026C	$158A			BSF	PCLATH, 3
$026D	$20E5			CALL	_double2byte
$026E	$118A			BCF	PCLATH, 3
$026F	$0870			MOVF	STACK_0, 0
$0270	$00DE			MOVWF	FARG_PWM2_Change_Duty+0
$0271	$158A			BSF	PCLATH, 3
$0272	$2192			CALL	_PWM2_Change_Duty
$0273	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop_1.c,172 :: 		}
$0274	$	L_main_10:
;lfr_catcher_5sen_tsop_1.c,173 :: 		if(PORTB.F6 == 0)
$0274	$3000			MOVLW	0
$0275	$1B06			BTFSC	PORTB, 6
$0276	$3001			MOVLW	1
$0277	$00F4			MOVWF	STACK_4
$0278	$0874			MOVF	STACK_4, 0
$0279	$3A00			XORLW	0
$027A	$1D03			BTFSS	STATUS, Z
$027B	$2AAB			GOTO	L_main_18
;lfr_catcher_5sen_tsop_1.c,175 :: 		for(i=0;i<60;i++)
$027C	$01D0			CLRF	_i
$027D	$01D1			CLRF	_i+1
$027E	$	L_main_19:
$027E	$3000			MOVLW	0
$027F	$0251			SUBWF	_i+1, 0
$0280	$1D03			BTFSS	STATUS, Z
$0281	$2A84			GOTO	L_main_58
$0282	$303C			MOVLW	60
$0283	$0250			SUBWF	_i, 0
$0284	$	L_main_58:
$0284	$1803			BTFSC	STATUS, C
$0285	$2AAB			GOTO	L_main_20
;lfr_catcher_5sen_tsop_1.c,177 :: 		lastreading ='u';
$0286	$3075			MOVLW	117
$0287	$00AB			MOVWF	_lastreading
;lfr_catcher_5sen_tsop_1.c,178 :: 		motor_RF();						          //TURN RIGHT AT FULL SPEED
$0288	$158A			BSF	PCLATH, 3
$0289	$22B4			CALL	_motor_RF
$028A	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop_1.c,179 :: 		motor_LB();
$028B	$158A			BSF	PCLATH, 3
$028C	$22C3			CALL	_motor_LB
$028D	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop_1.c,180 :: 		PWM1_CHANGE_DUTY(255);
$028E	$30FF			MOVLW	255
$028F	$00DE			MOVWF	FARG_PWM1_Change_Duty+0
$0290	$158A			BSF	PCLATH, 3
$0291	$2128			CALL	_PWM1_Change_Duty
$0292	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop_1.c,181 :: 		PWM2_CHANGE_DUTY(255);
$0293	$30FF			MOVLW	255
$0294	$00DE			MOVWF	FARG_PWM2_Change_Duty+0
$0295	$158A			BSF	PCLATH, 3
$0296	$2192			CALL	_PWM2_Change_Duty
$0297	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop_1.c,182 :: 		delay_ms(10);
$0298	$300D			MOVLW	13
$0299	$00FB			MOVWF	STACK_11
$029A	$30FF			MOVLW	255
$029B	$00FA			MOVWF	STACK_10
$029C	$0BFB			DECFSZ	STACK_11, F
$029D	$2A9F			GOTO	$+2
$029E	$2AA2			GOTO	$+4
$029F	$0BFA			DECFSZ	STACK_10, F
$02A0	$2A9F			GOTO	$-1
$02A1	$2A9C			GOTO	$-5
$02A2	$30F3			MOVLW	243
$02A3	$00FA			MOVWF	STACK_10
$02A4	$0BFA			DECFSZ	STACK_10, F
$02A5	$2AA4			GOTO	$-1
$02A6	$0000			NOP
;lfr_catcher_5sen_tsop_1.c,183 :: 		}
$02A7	$	L_main_21:
;lfr_catcher_5sen_tsop_1.c,175 :: 		for(i=0;i<60;i++)
$02A7	$0AD0			INCF	_i, 1
$02A8	$1903			BTFSC	STATUS, Z
$02A9	$0AD1			INCF	_i+1, 1
;lfr_catcher_5sen_tsop_1.c,183 :: 		}
$02AA	$2A7E			GOTO	L_main_19
$02AB	$	L_main_20:
;lfr_catcher_5sen_tsop_1.c,184 :: 		}
$02AB	$	L_main_18:
;lfr_catcher_5sen_tsop_1.c,185 :: 		if((s1+s2+s3+s4+s5) ==5 )
$02AB	$0823			MOVF	_s2, 0
$02AC	$0721			ADDWF	_s1, 0
$02AD	$00F0			MOVWF	STACK_0
$02AE	$0822			MOVF	_s1+1, 0
$02AF	$1803			BTFSC	STATUS, C
$02B0	$3F01			ADDLW	1
$02B1	$0724			ADDWF	_s2+1, 0
$02B2	$00F1			MOVWF	STACK_0+1
$02B3	$0825			MOVF	_s3, 0
$02B4	$07F0			ADDWF	STACK_0, 1
$02B5	$0826			MOVF	_s3+1, 0
$02B6	$1803			BTFSC	STATUS, C
$02B7	$3F01			ADDLW	1
$02B8	$07F1			ADDWF	STACK_0+1, 1
$02B9	$0827			MOVF	_s4, 0
$02BA	$07F0			ADDWF	STACK_0, 1
$02BB	$0828			MOVF	_s4+1, 0
$02BC	$1803			BTFSC	STATUS, C
$02BD	$3F01			ADDLW	1
$02BE	$07F1			ADDWF	STACK_0+1, 1
$02BF	$0829			MOVF	_s5, 0
$02C0	$0770			ADDWF	STACK_0, 0
$02C1	$00F4			MOVWF	STACK_4
$02C2	$0871			MOVF	STACK_0+1, 0
$02C3	$1803			BTFSC	STATUS, C
$02C4	$3F01			ADDLW	1
$02C5	$072A			ADDWF	_s5+1, 0
$02C6	$00F5			MOVWF	STACK_4+1
$02C7	$3000			MOVLW	0
$02C8	$0675			XORWF	STACK_4+1, 0
$02C9	$1D03			BTFSS	STATUS, Z
$02CA	$2ACD			GOTO	L_main_59
$02CB	$3005			MOVLW	5
$02CC	$0674			XORWF	STACK_4, 0
$02CD	$	L_main_59:
$02CD	$1D03			BTFSS	STATUS, Z
$02CE	$2B3D			GOTO	L_main_22
;lfr_catcher_5sen_tsop_1.c,187 :: 		if(PORTA.F2==1)
$02CF	$3000			MOVLW	0
$02D0	$1905			BTFSC	PORTA, 2
$02D1	$3001			MOVLW	1
$02D2	$00F4			MOVWF	STACK_4
$02D3	$0874			MOVF	STACK_4, 0
$02D4	$3A01			XORLW	1
$02D5	$1D03			BTFSS	STATUS, Z
$02D6	$2B06			GOTO	L_main_23
;lfr_catcher_5sen_tsop_1.c,188 :: 		{for(i=0;i<20;i++)
$02D7	$01D0			CLRF	_i
$02D8	$01D1			CLRF	_i+1
$02D9	$	L_main_24:
$02D9	$3000			MOVLW	0
$02DA	$0251			SUBWF	_i+1, 0
$02DB	$1D03			BTFSS	STATUS, Z
$02DC	$2ADF			GOTO	L_main_60
$02DD	$3014			MOVLW	20
$02DE	$0250			SUBWF	_i, 0
$02DF	$	L_main_60:
$02DF	$1803			BTFSC	STATUS, C
$02E0	$2B06			GOTO	L_main_25
;lfr_catcher_5sen_tsop_1.c,190 :: 		lastreading = 'u';
$02E1	$3075			MOVLW	117
$02E2	$00AB			MOVWF	_lastreading
;lfr_catcher_5sen_tsop_1.c,191 :: 		motor_RB();						          //TURN RIGHT AT FULL SPEED
$02E3	$158A			BSF	PCLATH, 3
$02E4	$22BE			CALL	_motor_RB
$02E5	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop_1.c,192 :: 		motor_LF();
$02E6	$158A			BSF	PCLATH, 3
$02E7	$22B9			CALL	_motor_LF
$02E8	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop_1.c,193 :: 		PWM1_CHANGE_DUTY(255);
$02E9	$30FF			MOVLW	255
$02EA	$00DE			MOVWF	FARG_PWM1_Change_Duty+0
$02EB	$158A			BSF	PCLATH, 3
$02EC	$2128			CALL	_PWM1_Change_Duty
$02ED	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop_1.c,194 :: 		PWM2_CHANGE_DUTY(255);
$02EE	$30FF			MOVLW	255
$02EF	$00DE			MOVWF	FARG_PWM2_Change_Duty+0
$02F0	$158A			BSF	PCLATH, 3
$02F1	$2192			CALL	_PWM2_Change_Duty
$02F2	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop_1.c,195 :: 		delay_ms(10);
$02F3	$300D			MOVLW	13
$02F4	$00FB			MOVWF	STACK_11
$02F5	$30FF			MOVLW	255
$02F6	$00FA			MOVWF	STACK_10
$02F7	$0BFB			DECFSZ	STACK_11, F
$02F8	$2AFA			GOTO	$+2
$02F9	$2AFD			GOTO	$+4
$02FA	$0BFA			DECFSZ	STACK_10, F
$02FB	$2AFA			GOTO	$-1
$02FC	$2AF7			GOTO	$-5
$02FD	$30F3			MOVLW	243
$02FE	$00FA			MOVWF	STACK_10
$02FF	$0BFA			DECFSZ	STACK_10, F
$0300	$2AFF			GOTO	$-1
$0301	$0000			NOP
;lfr_catcher_5sen_tsop_1.c,196 :: 		}
$0302	$	L_main_26:
;lfr_catcher_5sen_tsop_1.c,188 :: 		{for(i=0;i<20;i++)
$0302	$0AD0			INCF	_i, 1
$0303	$1903			BTFSC	STATUS, Z
$0304	$0AD1			INCF	_i+1, 1
;lfr_catcher_5sen_tsop_1.c,196 :: 		}
$0305	$2AD9			GOTO	L_main_24
$0306	$	L_main_25:
;lfr_catcher_5sen_tsop_1.c,197 :: 		}
$0306	$	L_main_23:
;lfr_catcher_5sen_tsop_1.c,198 :: 		if(PORTE.F1==1)
$0306	$3000			MOVLW	0
$0307	$1889			BTFSC	PORTE, 1
$0308	$3001			MOVLW	1
$0309	$00F4			MOVWF	STACK_4
$030A	$0874			MOVF	STACK_4, 0
$030B	$3A01			XORLW	1
$030C	$1D03			BTFSS	STATUS, Z
$030D	$2B3D			GOTO	L_main_27
;lfr_catcher_5sen_tsop_1.c,199 :: 		{ for(i=0;i<20;i++)
$030E	$01D0			CLRF	_i
$030F	$01D1			CLRF	_i+1
$0310	$	L_main_28:
$0310	$3000			MOVLW	0
$0311	$0251			SUBWF	_i+1, 0
$0312	$1D03			BTFSS	STATUS, Z
$0313	$2B16			GOTO	L_main_61
$0314	$3014			MOVLW	20
$0315	$0250			SUBWF	_i, 0
$0316	$	L_main_61:
$0316	$1803			BTFSC	STATUS, C
$0317	$2B3D			GOTO	L_main_29
;lfr_catcher_5sen_tsop_1.c,201 :: 		lastreading = 'u';
$0318	$3075			MOVLW	117
$0319	$00AB			MOVWF	_lastreading
;lfr_catcher_5sen_tsop_1.c,202 :: 		motor_RF();						          //TURN LEFT AT FULL SPEED
$031A	$158A			BSF	PCLATH, 3
$031B	$22B4			CALL	_motor_RF
$031C	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop_1.c,203 :: 		motor_LB();
$031D	$158A			BSF	PCLATH, 3
$031E	$22C3			CALL	_motor_LB
$031F	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop_1.c,204 :: 		PWM1_CHANGE_DUTY(255);
$0320	$30FF			MOVLW	255
$0321	$00DE			MOVWF	FARG_PWM1_Change_Duty+0
$0322	$158A			BSF	PCLATH, 3
$0323	$2128			CALL	_PWM1_Change_Duty
$0324	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop_1.c,205 :: 		PWM2_CHANGE_DUTY(255);
$0325	$30FF			MOVLW	255
$0326	$00DE			MOVWF	FARG_PWM2_Change_Duty+0
$0327	$158A			BSF	PCLATH, 3
$0328	$2192			CALL	_PWM2_Change_Duty
$0329	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop_1.c,206 :: 		delay_ms(10);
$032A	$300D			MOVLW	13
$032B	$00FB			MOVWF	STACK_11
$032C	$30FF			MOVLW	255
$032D	$00FA			MOVWF	STACK_10
$032E	$0BFB			DECFSZ	STACK_11, F
$032F	$2B31			GOTO	$+2
$0330	$2B34			GOTO	$+4
$0331	$0BFA			DECFSZ	STACK_10, F
$0332	$2B31			GOTO	$-1
$0333	$2B2E			GOTO	$-5
$0334	$30F3			MOVLW	243
$0335	$00FA			MOVWF	STACK_10
$0336	$0BFA			DECFSZ	STACK_10, F
$0337	$2B36			GOTO	$-1
$0338	$0000			NOP
;lfr_catcher_5sen_tsop_1.c,207 :: 		}
$0339	$	L_main_30:
;lfr_catcher_5sen_tsop_1.c,199 :: 		{ for(i=0;i<20;i++)
$0339	$0AD0			INCF	_i, 1
$033A	$1903			BTFSC	STATUS, Z
$033B	$0AD1			INCF	_i+1, 1
;lfr_catcher_5sen_tsop_1.c,207 :: 		}
$033C	$2B10			GOTO	L_main_28
$033D	$	L_main_29:
;lfr_catcher_5sen_tsop_1.c,208 :: 		}
$033D	$	L_main_27:
;lfr_catcher_5sen_tsop_1.c,209 :: 		}
$033D	$	L_main_22:
;lfr_catcher_5sen_tsop_1.c,211 :: 		if(PORTB.F7 == 0 && (PORTE.F1==1 ||PORTA.F0==1))
$033D	$3000			MOVLW	0
$033E	$1B86			BTFSC	PORTB, 7
$033F	$3001			MOVLW	1
$0340	$00F4			MOVWF	STACK_4
$0341	$0874			MOVF	STACK_4, 0
$0342	$3A00			XORLW	0
$0343	$1D03			BTFSS	STATUS, Z
$0344	$2B81			GOTO	L_main_35
$0345	$3000			MOVLW	0
$0346	$1889			BTFSC	PORTE, 1
$0347	$3001			MOVLW	1
$0348	$00F4			MOVWF	STACK_4
$0349	$0874			MOVF	STACK_4, 0
$034A	$3A01			XORLW	1
$034B	$1903			BTFSC	STATUS, Z
$034C	$2B54			GOTO	L396_ex_L_main_35
$034D	$3001			MOVLW	1
$034E	$0505			ANDWF	PORTA, 0
$034F	$00F4			MOVWF	STACK_4
$0350	$0874			MOVF	STACK_4, 0
$0351	$3A01			XORLW	1
$0352	$1D03			BTFSS	STATUS, Z
$0353	$2B81			GOTO	L_main_35
$0354	$	L396_ex_L_main_35:
$0354	$	L403_ex_L_main_35:
;lfr_catcher_5sen_tsop_1.c,213 :: 		for(i=0;i<10;i++)
$0354	$01D0			CLRF	_i
$0355	$01D1			CLRF	_i+1
$0356	$	L_main_36:
$0356	$3000			MOVLW	0
$0357	$0251			SUBWF	_i+1, 0
$0358	$1D03			BTFSS	STATUS, Z
$0359	$2B5C			GOTO	L_main_62
$035A	$300A			MOVLW	10
$035B	$0250			SUBWF	_i, 0
$035C	$	L_main_62:
$035C	$1803			BTFSC	STATUS, C
$035D	$2B81			GOTO	L_main_37
;lfr_catcher_5sen_tsop_1.c,215 :: 		motor_LF();					        	      //FWD AT FULL SPEED
$035E	$158A			BSF	PCLATH, 3
$035F	$22B9			CALL	_motor_LF
$0360	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop_1.c,216 :: 		motor_RF();
$0361	$158A			BSF	PCLATH, 3
$0362	$22B4			CALL	_motor_RF
$0363	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop_1.c,217 :: 		PWM1_CHANGE_DUTY(255);
$0364	$30FF			MOVLW	255
$0365	$00DE			MOVWF	FARG_PWM1_Change_Duty+0
$0366	$158A			BSF	PCLATH, 3
$0367	$2128			CALL	_PWM1_Change_Duty
$0368	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop_1.c,218 :: 		PWM2_CHANGE_DUTY(255);
$0369	$30FF			MOVLW	255
$036A	$00DE			MOVWF	FARG_PWM2_Change_Duty+0
$036B	$158A			BSF	PCLATH, 3
$036C	$2192			CALL	_PWM2_Change_Duty
$036D	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop_1.c,219 :: 		delay_ms(10);
$036E	$300D			MOVLW	13
$036F	$00FB			MOVWF	STACK_11
$0370	$30FF			MOVLW	255
$0371	$00FA			MOVWF	STACK_10
$0372	$0BFB			DECFSZ	STACK_11, F
$0373	$2B75			GOTO	$+2
$0374	$2B78			GOTO	$+4
$0375	$0BFA			DECFSZ	STACK_10, F
$0376	$2B75			GOTO	$-1
$0377	$2B72			GOTO	$-5
$0378	$30F3			MOVLW	243
$0379	$00FA			MOVWF	STACK_10
$037A	$0BFA			DECFSZ	STACK_10, F
$037B	$2B7A			GOTO	$-1
$037C	$0000			NOP
;lfr_catcher_5sen_tsop_1.c,220 :: 		}
$037D	$	L_main_38:
;lfr_catcher_5sen_tsop_1.c,213 :: 		for(i=0;i<10;i++)
$037D	$0AD0			INCF	_i, 1
$037E	$1903			BTFSC	STATUS, Z
$037F	$0AD1			INCF	_i+1, 1
;lfr_catcher_5sen_tsop_1.c,220 :: 		}
$0380	$2B56			GOTO	L_main_36
$0381	$	L_main_37:
;lfr_catcher_5sen_tsop_1.c,221 :: 		}
$0381	$	L_main_35:
;lfr_catcher_5sen_tsop_1.c,222 :: 		if(PORTB.F6 == 1 && PORTA.F0==1 )
$0381	$3000			MOVLW	0
$0382	$1B06			BTFSC	PORTB, 6
$0383	$3001			MOVLW	1
$0384	$00F4			MOVWF	STACK_4
$0385	$0874			MOVF	STACK_4, 0
$0386	$3A01			XORLW	1
$0387	$1D03			BTFSS	STATUS, Z
$0388	$2BBF			GOTO	L_main_41
$0389	$3001			MOVLW	1
$038A	$0505			ANDWF	PORTA, 0
$038B	$00F4			MOVWF	STACK_4
$038C	$0874			MOVF	STACK_4, 0
$038D	$3A01			XORLW	1
$038E	$1D03			BTFSS	STATUS, Z
$038F	$2BBF			GOTO	L_main_41
$0390	$	L451_ex_L_main_41:
;lfr_catcher_5sen_tsop_1.c,224 :: 		for(i=0;i<10;i++)
$0390	$01D0			CLRF	_i
$0391	$01D1			CLRF	_i+1
$0392	$	L_main_42:
$0392	$3000			MOVLW	0
$0393	$0251			SUBWF	_i+1, 0
$0394	$1D03			BTFSS	STATUS, Z
$0395	$2B98			GOTO	L_main_63
$0396	$300A			MOVLW	10
$0397	$0250			SUBWF	_i, 0
$0398	$	L_main_63:
$0398	$1803			BTFSC	STATUS, C
$0399	$2BBF			GOTO	L_main_43
;lfr_catcher_5sen_tsop_1.c,226 :: 		lastreading = 'u';
$039A	$3075			MOVLW	117
$039B	$00AB			MOVWF	_lastreading
;lfr_catcher_5sen_tsop_1.c,227 :: 		motor_RB();						          //TURN RIGHT AT FULL SPEED
$039C	$158A			BSF	PCLATH, 3
$039D	$22BE			CALL	_motor_RB
$039E	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop_1.c,228 :: 		motor_LF();
$039F	$158A			BSF	PCLATH, 3
$03A0	$22B9			CALL	_motor_LF
$03A1	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop_1.c,229 :: 		PWM1_CHANGE_DUTY(255);
$03A2	$30FF			MOVLW	255
$03A3	$00DE			MOVWF	FARG_PWM1_Change_Duty+0
$03A4	$158A			BSF	PCLATH, 3
$03A5	$2128			CALL	_PWM1_Change_Duty
$03A6	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop_1.c,230 :: 		PWM2_CHANGE_DUTY(255);
$03A7	$30FF			MOVLW	255
$03A8	$00DE			MOVWF	FARG_PWM2_Change_Duty+0
$03A9	$158A			BSF	PCLATH, 3
$03AA	$2192			CALL	_PWM2_Change_Duty
$03AB	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop_1.c,231 :: 		delay_ms(10);
$03AC	$300D			MOVLW	13
$03AD	$00FB			MOVWF	STACK_11
$03AE	$30FF			MOVLW	255
$03AF	$00FA			MOVWF	STACK_10
$03B0	$0BFB			DECFSZ	STACK_11, F
$03B1	$2BB3			GOTO	$+2
$03B2	$2BB6			GOTO	$+4
$03B3	$0BFA			DECFSZ	STACK_10, F
$03B4	$2BB3			GOTO	$-1
$03B5	$2BB0			GOTO	$-5
$03B6	$30F3			MOVLW	243
$03B7	$00FA			MOVWF	STACK_10
$03B8	$0BFA			DECFSZ	STACK_10, F
$03B9	$2BB8			GOTO	$-1
$03BA	$0000			NOP
;lfr_catcher_5sen_tsop_1.c,232 :: 		}
$03BB	$	L_main_44:
;lfr_catcher_5sen_tsop_1.c,224 :: 		for(i=0;i<10;i++)
$03BB	$0AD0			INCF	_i, 1
$03BC	$1903			BTFSC	STATUS, Z
$03BD	$0AD1			INCF	_i+1, 1
;lfr_catcher_5sen_tsop_1.c,232 :: 		}
$03BE	$2B92			GOTO	L_main_42
$03BF	$	L_main_43:
;lfr_catcher_5sen_tsop_1.c,233 :: 		}
$03BF	$	L_main_41:
;lfr_catcher_5sen_tsop_1.c,235 :: 		if(PORTB.F7 == 1 && PORTE.F1==1)
$03BF	$3000			MOVLW	0
$03C0	$1B86			BTFSC	PORTB, 7
$03C1	$3001			MOVLW	1
$03C2	$00F4			MOVWF	STACK_4
$03C3	$0874			MOVF	STACK_4, 0
$03C4	$3A01			XORLW	1
$03C5	$1D03			BTFSS	STATUS, Z
$03C6	$2BFE			GOTO	L_main_47
$03C7	$3000			MOVLW	0
$03C8	$1889			BTFSC	PORTE, 1
$03C9	$3001			MOVLW	1
$03CA	$00F4			MOVWF	STACK_4
$03CB	$0874			MOVF	STACK_4, 0
$03CC	$3A01			XORLW	1
$03CD	$1D03			BTFSS	STATUS, Z
$03CE	$2BFE			GOTO	L_main_47
$03CF	$	L502_ex_L_main_47:
;lfr_catcher_5sen_tsop_1.c,237 :: 		for(i=0;i<10;i++)
$03CF	$01D0			CLRF	_i
$03D0	$01D1			CLRF	_i+1
$03D1	$	L_main_48:
$03D1	$3000			MOVLW	0
$03D2	$0251			SUBWF	_i+1, 0
$03D3	$1D03			BTFSS	STATUS, Z
$03D4	$2BD7			GOTO	L_main_64
$03D5	$300A			MOVLW	10
$03D6	$0250			SUBWF	_i, 0
$03D7	$	L_main_64:
$03D7	$1803			BTFSC	STATUS, C
$03D8	$2BFE			GOTO	L_main_49
;lfr_catcher_5sen_tsop_1.c,239 :: 		lastreading = 'u';
$03D9	$3075			MOVLW	117
$03DA	$00AB			MOVWF	_lastreading
;lfr_catcher_5sen_tsop_1.c,240 :: 		motor_LB();					        	      //TURN LEFT AT FULL SPEED
$03DB	$158A			BSF	PCLATH, 3
$03DC	$22C3			CALL	_motor_LB
$03DD	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop_1.c,241 :: 		motor_RF();
$03DE	$158A			BSF	PCLATH, 3
$03DF	$22B4			CALL	_motor_RF
$03E0	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop_1.c,242 :: 		PWM1_CHANGE_DUTY(255);
$03E1	$30FF			MOVLW	255
$03E2	$00DE			MOVWF	FARG_PWM1_Change_Duty+0
$03E3	$158A			BSF	PCLATH, 3
$03E4	$2128			CALL	_PWM1_Change_Duty
$03E5	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop_1.c,243 :: 		PWM2_CHANGE_DUTY(255);
$03E6	$30FF			MOVLW	255
$03E7	$00DE			MOVWF	FARG_PWM2_Change_Duty+0
$03E8	$158A			BSF	PCLATH, 3
$03E9	$2192			CALL	_PWM2_Change_Duty
$03EA	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop_1.c,244 :: 		delay_ms(10);
$03EB	$300D			MOVLW	13
$03EC	$00FB			MOVWF	STACK_11
$03ED	$30FF			MOVLW	255
$03EE	$00FA			MOVWF	STACK_10
$03EF	$0BFB			DECFSZ	STACK_11, F
$03F0	$2BF2			GOTO	$+2
$03F1	$2BF5			GOTO	$+4
$03F2	$0BFA			DECFSZ	STACK_10, F
$03F3	$2BF2			GOTO	$-1
$03F4	$2BEF			GOTO	$-5
$03F5	$30F3			MOVLW	243
$03F6	$00FA			MOVWF	STACK_10
$03F7	$0BFA			DECFSZ	STACK_10, F
$03F8	$2BF7			GOTO	$-1
$03F9	$0000			NOP
;lfr_catcher_5sen_tsop_1.c,245 :: 		}
$03FA	$	L_main_50:
;lfr_catcher_5sen_tsop_1.c,237 :: 		for(i=0;i<10;i++)
$03FA	$0AD0			INCF	_i, 1
$03FB	$1903			BTFSC	STATUS, Z
$03FC	$0AD1			INCF	_i+1, 1
;lfr_catcher_5sen_tsop_1.c,245 :: 		}
$03FD	$2BD1			GOTO	L_main_48
$03FE	$	L_main_49:
;lfr_catcher_5sen_tsop_1.c,246 :: 		}
$03FE	$	L_main_47:
;lfr_catcher_5sen_tsop_1.c,247 :: 		delay_ms(10);
$03FE	$300D			MOVLW	13
$03FF	$00FB			MOVWF	STACK_11
$0400	$30FF			MOVLW	255
$0401	$00FA			MOVWF	STACK_10
$0402	$0BFB			DECFSZ	STACK_11, F
$0403	$2C05			GOTO	$+2
$0404	$2C08			GOTO	$+4
$0405	$0BFA			DECFSZ	STACK_10, F
$0406	$2C05			GOTO	$-1
$0407	$2C02			GOTO	$-5
$0408	$30F3			MOVLW	243
$0409	$00FA			MOVWF	STACK_10
$040A	$0BFA			DECFSZ	STACK_10, F
$040B	$2C0A			GOTO	$-1
$040C	$0000			NOP
;lfr_catcher_5sen_tsop_1.c,248 :: 		}
$040D	$280D			GOTO	L_main_5
;lfr_catcher_5sen_tsop_1.c,249 :: 		}
$040E	$2C0E			GOTO	$
