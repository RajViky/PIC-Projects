;  ASM code generated by mikroVirtualMachine for PIC - V. 8.2.0.0
;  Date/Time: 8/25/2011 4:30:15 AM
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$2831			GOTO	_main
$0004	$	_interrupt:
$0004	$00FF			MOVWF	STACK_15
$0005	$0E03			SWAPF	STATUS, 0
$0006	$0183			CLRF	STATUS
$0007	$00D9			MOVWF	?saveSTATUS
$0008	$0804			MOVF	FSR, 0
$0009	$00D8			MOVWF	?saveFSR
$000A	$080A			MOVF	PCLATH, 0
$000B	$00DA			MOVWF	?savePCLATH
$000C	$018A			CLRF	PCLATH
$000D	$0871			MOVF	STACK_1, 0
$000E	$1683			BSF	STATUS, RP0
$000F	$00A0			MOVWF	STSAVED_1
$0010	$0870			MOVF	STACK_0, 0
$0011	$1283			BCF	STATUS, RP0
$0012	$00EF			MOVWF	STSAVED_0
;lfr_new.c,67 :: 		void interrupt()
;lfr_new.c,69 :: 		if (PIR1.TMR1IF == 1)   // timer1 interrupt flag is set.
$0013	$3001			MOVLW	1
$0014	$050C			ANDWF	PIR1, 0
$0015	$00F1			MOVWF	STACK_1
$0016	$0871			MOVF	STACK_1, 0
$0017	$3A01			XORLW	1
$0018	$1D03			BTFSS	STATUS, Z
$0019	$2822			GOTO	L_interrupt_0
;lfr_new.c,71 :: 		counter++;           // add 1 to counter every time an interrupt happens
$001A	$0AA1			INCF	_counter, 1
$001B	$1903			BTFSC	STATUS, Z
$001C	$0AA2			INCF	_counter+1, 1
;lfr_new.c,72 :: 		PIR1.TMR1IF = 0;     // clear the interrupt flag
$001D	$100C			BCF	PIR1, 0
;lfr_new.c,73 :: 		TMR1H = 0xFF;        // set timer1H to known value
$001E	$30FF			MOVLW	255
$001F	$008F			MOVWF	TMR1H
;lfr_new.c,74 :: 		TMR1L = 0x83;        // set timer1L to known value
$0020	$3083			MOVLW	131
$0021	$008E			MOVWF	TMR1L
;lfr_new.c,75 :: 		}
$0022	$	L_interrupt_0:
;lfr_new.c,76 :: 		}                         // exit interrupt
$0022	$	L_Interrupt_end:
$0022	$1683			BSF	STATUS, RP0
$0023	$0820			MOVF	STSAVED_1, 0
$0024	$00F1			MOVWF	STACK_1
$0025	$1283			BCF	STATUS, RP0
$0026	$086F			MOVF	STSAVED_0, 0
$0027	$00F0			MOVWF	STACK_0
$0028	$085A			MOVF	?savePCLATH, 0
$0029	$008A			MOVWF	PCLATH
$002A	$0858			MOVF	?saveFSR, 0
$002B	$0084			MOVWF	FSR
$002C	$0E59			SWAPF	?saveSTATUS, 0
$002D	$0083			MOVWF	STATUS
$002E	$0EFF			SWAPF	STACK_15, 1
$002F	$0E7F			SWAPF	STACK_15, 0
$0030	$0009			RETFIE
$0A37	$	_RES032:
$0A37	$1303			BCF	STATUS, RP1
$0A38	$1283			BCF	STATUS, RP0
$0A39	$01F2			CLRF	STACK_2
$0A3A	$01F1			CLRF	STACK_1
$0A3B	$01F0			CLRF	STACK_0
$0A3C	$01F8			CLRF	STACK_8
$0A3D	$01F3			CLRF	STACK_3
$0A3E	$3000			MOVLW	0
$0A3F	$0008			RETURN
$0A21	$	_SETFUN32:
$0A21	$1303			BCF	STATUS, RP1
$0A22	$1283			BCF	STATUS, RP0
$0A23	$157B			BSF	STACK_11, 2
$0A24	$1FFB			BTFSS	STACK_11, 7
$0A25	$2A2D			GOTO	SETFUN32EEE
$0A26	$3001			MOVLW	0x01
$0A27	$00F3			MOVWF	STACK_3
$0A28	$01F2			CLRF	STACK_2
$0A29	$01F1			CLRF	STACK_1
$0A2A	$01F0			CLRF	STACK_0
$0A2B	$0DFA			RLF	STACK_10, F
$0A2C	$0CF2			RRF	STACK_2, F
$0A2D	$	SETFUN32EEE:
$0A2D	$30FF			MOVLW	0xFF
$0A2E	$0008			RETURN
$0A56	$	_FIXSIGN32:
$0A56	$1303			BCF	STATUS, RP1
$0A57	$1283			BCF	STATUS, RP0
$0A58	$1FFA			BTFSS	STACK_10, 7
$0A59	$13F2			BCF	STACK_2, 7
$0A5A	$3000			MOVLW	0
$0A5B	$0008			RETURN
$0745	$	_SETFOV32:
$0745	$1303			BCF	STATUS, RP1
$0746	$1283			BCF	STATUS, RP0
$0747	$14FB			BSF	STACK_11, 1
$0748	$1FFB			BTFSS	STACK_11, 7
$0749	$2F51			GOTO	SETFOV32EEE
$074A	$30FF			MOVLW	0xFF
$074B	$00F3			MOVWF	STACK_3
$074C	$00F2			MOVWF	STACK_2
$074D	$00F1			MOVWF	STACK_1
$074E	$00F0			MOVWF	STACK_0
$074F	$0DFA			RLF	STACK_10, F
$0750	$0CF2			RRF	STACK_2, F
$0751	$	SETFOV32EEE:
$0751	$30FF			MOVLW	0xFF
$0752	$0008			RETURN
$0642	$	_NRM4032:
$0642	$1303			BCF	STATUS, RP1
$0643	$1283			BCF	STATUS, RP0
$0644	$187C			BTFSC	STACK_12, 0
$0645	$2E7A			GOTO	NRMRND4032
$0646	$18FC			BTFSC	STACK_12, 1
$0647	$2E4B			GOTO	NRM4032
$0648	$197C			BTFSC	STACK_12, 2
$0649	$2E9F			GOTO	JMPSETFOV32
$064A	$2E44			GOTO	$-6
$064B	$	NRM4032:
$064B	$01A0			CLRF	__math_tempbD
$064C	$0872			MOVF	STACK_2, W
$064D	$1D03			BTFSS	STATUS, Z
$064E	$2E6B			GOTO	NORM4032
$064F	$0871			MOVF	STACK_1, W
$0650	$00F2			MOVWF	STACK_2
$0651	$0870			MOVF	STACK_0, W
$0652	$00F1			MOVWF	STACK_1
$0653	$0878			MOVF	STACK_8, W
$0654	$00F0			MOVWF	STACK_0
$0655	$01F8			CLRF	STACK_8
$0656	$15A0			BSF	__math_tempbD, 3
$0657	$0872			MOVF	STACK_2, W
$0658	$1D03			BTFSS	STATUS, Z
$0659	$2E6B			GOTO	NORM4032
$065A	$0871			MOVF	STACK_1, W
$065B	$00F2			MOVWF	STACK_2
$065C	$0870			MOVF	STACK_0, W
$065D	$00F1			MOVWF	STACK_1
$065E	$01F0			CLRF	STACK_0
$065F	$11A0			BCF	__math_tempbD, 3
$0660	$1620			BSF	__math_tempbD, 4
$0661	$0872			MOVF	STACK_2, W
$0662	$1D03			BTFSS	STATUS, Z
$0663	$2E6B			GOTO	NORM4032
$0664	$0871			MOVF	STACK_1, W
$0665	$00F2			MOVWF	STACK_2
$0666	$01F1			CLRF	STACK_1
$0667	$15A0			BSF	__math_tempbD, 3
$0668	$0872			MOVF	STACK_2, W
$0669	$1903			BTFSC	STATUS, Z
$066A	$2E8D			GOTO	JMPRES032
$066B	$	NORM4032:
$066B	$0820			MOVF	__math_tempbD, W
$066C	$02F3			SUBWF	STACK_3, F
$066D	$1D03			BTFSS	STATUS, Z
$066E	$1C03			BTFSS	STATUS, C
$066F	$2E93			GOTO	JMPSETFUN32
$0670	$1003			BCF	STATUS, C
$0671	$	NORM4032A:
$0671	$1BF2			BTFSC	STACK_2, 7
$0672	$2E7A			GOTO	NRMRND4032
$0673	$0DF8			RLF	STACK_8, F
$0674	$0DF0			RLF	STACK_0, F
$0675	$0DF1			RLF	STACK_1, F
$0676	$0DF2			RLF	STACK_2, F
$0677	$0BF3			DECFSZ	STACK_3, F
$0678	$2E71			GOTO	NORM4032A
$0679	$2E93			GOTO	JMPSETFUN32
$067A	$	NRMRND4032:
$067A	$1B7B			BTFSC	STACK_11, 6
$067B	$1C70			BTFSS	STACK_0, 0
$067C	$2E99			GOTO	JMPFIXSIGN32
$067D	$1FF8			BTFSS	STACK_8, 7
$067E	$2E99			GOTO	JMPFIXSIGN32
$067F	$0AF0			INCF	STACK_0, F
$0680	$1903			BTFSC	STATUS, Z
$0681	$0AF1			INCF	STACK_1, F
$0682	$1903			BTFSC	STATUS, Z
$0683	$0AF2			INCF	STACK_2, F
$0684	$1D03			BTFSS	STATUS, Z
$0685	$2E99			GOTO	JMPFIXSIGN32
$0686	$0CF2			RRF	STACK_2, F
$0687	$0CF1			RRF	STACK_1, F
$0688	$0CF0			RRF	STACK_0, F
$0689	$0AF3			INCF	STACK_3, F
$068A	$1903			BTFSC	STATUS, Z
$068B	$2E9F			GOTO	JMPSETFOV32
$068C	$2E99			GOTO	JMPFIXSIGN32
$068D	$	JMPRES032:
$068D	$3001			MOVLW	0x01
$068E	$00FC			MOVWF	STACK_12
$068F	$158A			BSF	PCLATH, 3
$0690	$2237			CALL	_RES032
$0691	$118A			BCF	PCLATH, 3
$0692	$2EA2			GOTO	NRM4032EEE
$0693	$	JMPSETFUN32:
$0693	$3002			MOVLW	0x02
$0694	$00FC			MOVWF	STACK_12
$0695	$158A			BSF	PCLATH, 3
$0696	$2221			CALL	_SETFUN32
$0697	$118A			BCF	PCLATH, 3
$0698	$2EA2			GOTO	NRM4032EEE
$0699	$	JMPFIXSIGN32:
$0699	$3004			MOVLW	0x04
$069A	$00FC			MOVWF	STACK_12
$069B	$158A			BSF	PCLATH, 3
$069C	$2256			CALL	_FIXSIGN32
$069D	$118A			BCF	PCLATH, 3
$069E	$2EA2			GOTO	NRM4032EEE
$069F	$	JMPSETFOV32:
$069F	$3008			MOVLW	0x08
$06A0	$00FC			MOVWF	STACK_12
$06A1	$2745			CALL	_SETFOV32
$06A2	$	NRM4032EEE:
$06A2	$0000			NOP
$06A3	$0008			RETURN
$0911	$	_NRM3232:
$0911	$1303			BCF	STATUS, RP1
$0912	$1283			BCF	STATUS, RP0
$0913	$01A0			CLRF	__math_tempbD
$0914	$0872			MOVF	STACK_2, W
$0915	$1D03			BTFSS	STATUS, Z
$0916	$2928			GOTO	NORM3232
$0917	$0871			MOVF	STACK_1, W
$0918	$00F2			MOVWF	STACK_2
$0919	$0870			MOVF	STACK_0, W
$091A	$00F1			MOVWF	STACK_1
$091B	$01F0			CLRF	STACK_0
$091C	$15A0			BSF	__math_tempbD, 3
$091D	$0872			MOVF	STACK_2, W
$091E	$1D03			BTFSS	STATUS, Z
$091F	$2928			GOTO	NORM3232
$0920	$0871			MOVF	STACK_1, W
$0921	$00F2			MOVWF	STACK_2
$0922	$01F1			CLRF	STACK_1
$0923	$11A0			BCF	__math_tempbD, 3
$0924	$1620			BSF	__math_tempbD, 4
$0925	$0872			MOVF	STACK_2, W
$0926	$1903			BTFSC	STATUS, Z
$0927	$2936			GOTO	JPNRES032
$0928	$	NORM3232:
$0928	$0820			MOVF	__math_tempbD, W
$0929	$02F3			SUBWF	STACK_3, F
$092A	$1D03			BTFSS	STATUS, Z
$092B	$1C03			BTFSS	STATUS, C
$092C	$293A			GOTO	JPNSETFUN32
$092D	$1003			BCF	STATUS, C
$092E	$	NORM3232A:
$092E	$1BF2			BTFSC	STACK_2, 7
$092F	$293E			GOTO	JMPNFIXSIGN32
$0930	$0DF0			RLF	STACK_0, F
$0931	$0DF1			RLF	STACK_1, F
$0932	$0DF2			RLF	STACK_2, F
$0933	$0BF3			DECFSZ	STACK_3, F
$0934	$292E			GOTO	NORM3232A
$0935	$293A			GOTO	JPNSETFUN32
$0936	$	JPNRES032:
$0936	$3001			MOVLW	0x01
$0937	$00FC			MOVWF	STACK_12
$0938	$2237			CALL	_RES032
$0939	$2941			GOTO	NORM32EEE
$093A	$	JPNSETFUN32:
$093A	$3002			MOVLW	0x02
$093B	$00FC			MOVWF	STACK_12
$093C	$2221			CALL	_SETFUN32
$093D	$2941			GOTO	NORM32EEE
$093E	$	JMPNFIXSIGN32:
$093E	$3004			MOVLW	0x04
$093F	$00FC			MOVWF	STACK_12
$0940	$2256			CALL	_FIXSIGN32
$0941	$	NORM32EEE:
$0941	$0008			RETURN
$0A76	$	_SETFDZ32:
$0A76	$1303			BCF	STATUS, RP1
$0A77	$1283			BCF	STATUS, RP0
$0A78	$15FB			BSF	STACK_11, 3
$0A79	$30FF			MOVLW	0xFF
$0A7A	$0008			RETURN
$0499	$	_Add_32x32_FP:
$0499	$1303			BCF	STATUS, RP1
$049A	$1283			BCF	STATUS, RP0
$049B	$0872			MOVF	STACK_2, W
$049C	$0676			XORWF	STACK_6, W
$049D	$00A0			MOVWF	__math_tempbD
$049E	$01F8			CLRF	STACK_8
$049F	$01F9			CLRF	STACK_9
$04A0	$0873			MOVF	STACK_3, W
$04A1	$0277			SUBWF	STACK_7, W
$04A2	$1C03			BTFSS	STATUS, C
$04A3	$2CBC			GOTO	USEA32
$04A4	$0877			MOVF	STACK_7, W
$04A5	$00FD			MOVWF	STACK_13
$04A6	$0873			MOVF	STACK_3, W
$04A7	$00F7			MOVWF	STACK_7
$04A8	$087D			MOVF	STACK_13, W
$04A9	$00F3			MOVWF	STACK_3
$04AA	$0876			MOVF	STACK_6, W
$04AB	$00FD			MOVWF	STACK_13
$04AC	$0872			MOVF	STACK_2, W
$04AD	$00F6			MOVWF	STACK_6
$04AE	$087D			MOVF	STACK_13, W
$04AF	$00F2			MOVWF	STACK_2
$04B0	$0875			MOVF	STACK_5, W
$04B1	$00FD			MOVWF	STACK_13
$04B2	$0871			MOVF	STACK_1, W
$04B3	$00F5			MOVWF	STACK_5
$04B4	$087D			MOVF	STACK_13, W
$04B5	$00F1			MOVWF	STACK_1
$04B6	$0874			MOVF	STACK_4, W
$04B7	$00FD			MOVWF	STACK_13
$04B8	$0870			MOVF	STACK_0, W
$04B9	$00F4			MOVWF	STACK_4
$04BA	$087D			MOVF	STACK_13, W
$04BB	$00F0			MOVWF	STACK_0
$04BC	$	USEA32:
$04BC	$0877			MOVF	STACK_7, W
$04BD	$1903			BTFSC	STATUS, Z
$04BE	$2D37			GOTO	JMPEEE
$04BF	$0872			MOVF	STACK_2, W
$04C0	$00FA			MOVWF	STACK_10
$04C1	$17F2			BSF	STACK_2, 7
$04C2	$17F6			BSF	STACK_6, 7
$04C3	$0877			MOVF	STACK_7, W
$04C4	$0273			SUBWF	STACK_3, W
$04C5	$00F7			MOVWF	STACK_7
$04C6	$1903			BTFSC	STATUS, Z
$04C7	$2CEF			GOTO	ALIGNED32
$04C8	$3008			MOVLW	8
$04C9	$0277			SUBWF	STACK_7, W
$04CA	$1C03			BTFSS	STATUS, C
$04CB	$2CE5			GOTO	ALIGNB32
$04CC	$00F7			MOVWF	STACK_7
$04CD	$0874			MOVF	STACK_4, W
$04CE	$00F9			MOVWF	STACK_9
$04CF	$0875			MOVF	STACK_5, W
$04D0	$00F4			MOVWF	STACK_4
$04D1	$0876			MOVF	STACK_6, W
$04D2	$00F5			MOVWF	STACK_5
$04D3	$01F6			CLRF	STACK_6
$04D4	$3008			MOVLW	8
$04D5	$0277			SUBWF	STACK_7, W
$04D6	$1C03			BTFSS	STATUS, C
$04D7	$2CE5			GOTO	ALIGNB32
$04D8	$00F7			MOVWF	STACK_7
$04D9	$0874			MOVF	STACK_4, W
$04DA	$00F9			MOVWF	STACK_9
$04DB	$0875			MOVF	STACK_5, W
$04DC	$00F4			MOVWF	STACK_4
$04DD	$01F5			CLRF	STACK_5
$04DE	$3008			MOVLW	8
$04DF	$0277			SUBWF	STACK_7, W
$04E0	$1C03			BTFSS	STATUS, C
$04E1	$2CE5			GOTO	ALIGNB32
$04E2	$087A			MOVF	STACK_10, W
$04E3	$00F2			MOVWF	STACK_2
$04E4	$2D37			GOTO	JMPEEE
$04E5	$	ALIGNB32:
$04E5	$0877			MOVF	STACK_7, W
$04E6	$1903			BTFSC	STATUS, Z
$04E7	$2CEF			GOTO	ALIGNED32
$04E8	$	ALOOPB32:
$04E8	$1003			BCF	STATUS, C
$04E9	$0CF6			RRF	STACK_6, F
$04EA	$0CF5			RRF	STACK_5, F
$04EB	$0CF4			RRF	STACK_4, F
$04EC	$0CF9			RRF	STACK_9, F
$04ED	$0BF7			DECFSZ	STACK_7, F
$04EE	$2CE8			GOTO	ALOOPB32
$04EF	$	ALIGNED32:
$04EF	$1FA0			BTFSS	__math_tempbD, 7
$04F0	$2CFC			GOTO	AOK32
$04F1	$09F9			COMF	STACK_9, F
$04F2	$09F4			COMF	STACK_4, F
$04F3	$09F5			COMF	STACK_5, F
$04F4	$09F6			COMF	STACK_6, F
$04F5	$0AF9			INCF	STACK_9, F
$04F6	$1903			BTFSC	STATUS, Z
$04F7	$0AF4			INCF	STACK_4, F
$04F8	$1903			BTFSC	STATUS, Z
$04F9	$0AF5			INCF	STACK_5, F
$04FA	$1903			BTFSC	STATUS, Z
$04FB	$0AF6			INCF	STACK_6, F
$04FC	$	AOK32:
$04FC	$0879			MOVF	STACK_9, W
$04FD	$07F8			ADDWF	STACK_8, F
$04FE	$0874			MOVF	STACK_4, W
$04FF	$1803			BTFSC	STATUS, C
$0500	$0F74			INCFSZ	STACK_4, W
$0501	$07F0			ADDWF	STACK_0, F
$0502	$0875			MOVF	STACK_5, W
$0503	$1803			BTFSC	STATUS, C
$0504	$0F75			INCFSZ	STACK_5, W
$0505	$07F1			ADDWF	STACK_1, F
$0506	$0876			MOVF	STACK_6, W
$0507	$1803			BTFSC	STATUS, C
$0508	$0F76			INCFSZ	STACK_6, W
$0509	$07F2			ADDWF	STACK_2, F
$050A	$1BA0			BTFSC	__math_tempbD, 7
$050B	$2D15			GOTO	ACOMP32
$050C	$1C03			BTFSS	STATUS, C
$050D	$2D25			GOTO	JMPNRMRND4032
$050E	$0CF2			RRF	STACK_2, F
$050F	$0CF1			RRF	STACK_1, F
$0510	$0CF0			RRF	STACK_0, F
$0511	$0CF8			RRF	STACK_8, F
$0512	$0FF3			INCFSZ	STACK_3, F
$0513	$2D25			GOTO	JMPNRMRND4032
$0514	$2D33			GOTO	ADD_JMPSETFOV32
$0515	$	ACOMP32:
$0515	$1803			BTFSC	STATUS, C
$0516	$2D29			GOTO	JMPNRM4032
$0517	$09F8			COMF	STACK_8, F
$0518	$09F0			COMF	STACK_0, F
$0519	$09F1			COMF	STACK_1, F
$051A	$09F2			COMF	STACK_2, F
$051B	$0AF8			INCF	STACK_8, F
$051C	$1903			BTFSC	STATUS, Z
$051D	$0AF0			INCF	STACK_0, F
$051E	$1903			BTFSC	STATUS, Z
$051F	$0AF1			INCF	STACK_1, F
$0520	$1903			BTFSC	STATUS, Z
$0521	$0AF2			INCF	STACK_2, F
$0522	$3080			MOVLW	0x80
$0523	$06FA			XORWF	STACK_10, F
$0524	$2D2D			GOTO	JMPNRM32
$0525	$	JMPNRMRND4032:
$0525	$3001			MOVLW	0x01
$0526	$00FC			MOVWF	STACK_12
$0527	$2642			CALL	_NRM4032
$0528	$2D39			GOTO	ADD32EEE
$0529	$	JMPNRM4032:
$0529	$3002			MOVLW	0x02
$052A	$00FC			MOVWF	STACK_12
$052B	$2642			CALL	_NRM4032
$052C	$2D39			GOTO	ADD32EEE
$052D	$	JMPNRM32:
$052D	$3004			MOVLW	0x04
$052E	$00FC			MOVWF	STACK_12
$052F	$158A			BSF	PCLATH, 3
$0530	$2111			CALL	_NRM3232
$0531	$118A			BCF	PCLATH, 3
$0532	$2D39			GOTO	ADD32EEE
$0533	$	ADD_JMPSETFOV32:
$0533	$3008			MOVLW	0x08
$0534	$00FC			MOVWF	STACK_12
$0535	$2745			CALL	_SETFOV32
$0536	$2D39			GOTO	ADD32EEE
$0537	$	JMPEEE:
$0537	$3000			MOVLW	0x00
$0538	$00FC			MOVWF	STACK_12
$0539	$	ADD32EEE:
$0539	$0000			NOP
$053A	$0008			RETURN
$0A40	$	_PWM1_Start:
$0A40	$1303			BCF	STATUS, RP1
$0A41	$1683			BSF	STATUS, RP0
$0A42	$1107			BCF	TRISC, 2
$0A43	$1283			BCF	STATUS, RP0
$0A44	$1512			BSF	T2CON, 2
$0A45	$300C			MOVLW	12
$0A46	$0497			IORWF	CCP1CON, 1
$0A47	$0008			RETURN
$0A48	$	_PWM2_Start:
$0A48	$1303			BCF	STATUS, RP1
$0A49	$1683			BSF	STATUS, RP0
$0A4A	$1087			BCF	TRISC, 1
$0A4B	$1283			BCF	STATUS, RP0
$0A4C	$1512			BSF	T2CON, 2
$0A4D	$300C			MOVLW	12
$0A4E	$049D			IORWF	CCP2CON, 1
$0A4F	$0008			RETURN
$0A5C	$	_PWM1_Init:
$0A5C	$1303			BCF	STATUS, RP1
$0A5D	$1283			BCF	STATUS, RP0
$0A5E	$0195			CLRF	CCPR1L, 1
$0A5F	$1217			BCF	CCP1CON, 4
$0A60	$1297			BCF	CCP1CON, 5
$0A61	$0008			RETURN
$0A50	$	_PWM2_Init:
$0A50	$1303			BCF	STATUS, RP1
$0A51	$1283			BCF	STATUS, RP0
$0A52	$019B			CLRF	CCPR2L, 1
$0A53	$121D			BCF	CCP2CON, 4
$0A54	$129D			BCF	CCP2CON, 5
$0A55	$0008			RETURN
$097B	$	_Mul_16x16_U:
$097B	$1303			BCF	STATUS, RP1
$097C	$1283			BCF	STATUS, RP0
$097D	$01FB			CLRF	STACK_11
$097E	$01FA			CLRF	STACK_10
$097F	$01F9			CLRF	STACK_9
$0980	$3080			MOVLW	128
$0981	$00F8			MOVWF	STACK_8
$0982	$0CF1			RRF	STACK_1, F
$0983	$0CF0			RRF	STACK_0, F
$0984	$1C03			BTFSS	STATUS, C
$0985	$298F			GOTO	$+10
$0986	$0874			MOVF	STACK_4, W
$0987	$07F9			ADDWF	STACK_9, F
$0988	$0875			MOVF	STACK_5, W
$0989	$1803			BTFSC	STATUS, C
$098A	$0F75			INCFSZ	STACK_5, W
$098B	$07FA			ADDWF	STACK_10, F
$098C	$1803			BTFSC	STATUS, C
$098D	$0AFB			INCF	STACK_11, F
$098E	$1003			BCF	STATUS, C
$098F	$1FF0			BTFSS	STACK_0, 7
$0990	$2997			GOTO	$+7
$0991	$0874			MOVF	STACK_4, W
$0992	$07FA			ADDWF	STACK_10, F
$0993	$0875			MOVF	STACK_5, W
$0994	$1803			BTFSC	STATUS, C
$0995	$0F75			INCFSZ	STACK_5, W
$0996	$07FB			ADDWF	STACK_11, F
$0997	$0CFB			RRF	STACK_11, F
$0998	$0CFA			RRF	STACK_10, F
$0999	$0CF9			RRF	STACK_9, F
$099A	$0CF8			RRF	STACK_8, F
$099B	$1C03			BTFSS	STATUS, C
$099C	$2982			GOTO	$-26
$099D	$087B			MOVF	STACK_11, W
$099E	$00F3			MOVWF	STACK_3
$099F	$087A			MOVF	STACK_10, W
$09A0	$00F2			MOVWF	STACK_2
$09A1	$0879			MOVF	STACK_9, W
$09A2	$00F1			MOVWF	STACK_1
$09A3	$0878			MOVF	STACK_8, W
$09A4	$00F0			MOVWF	STACK_0
$09A5	$0008			RETURN
$09D4	$	_Word2Double:
$09D4	$1303			BCF	STATUS, RP1
$09D5	$1283			BCF	STATUS, RP0
$09D6	$0870			MOVF	STACK_0, W
$09D7	$00F8			MOVWF	STACK_8
$09D8	$0871			MOVF	STACK_1, W
$09D9	$00F0			MOVWF	STACK_0
$09DA	$01F1			CLRF	STACK_1
$09DB	$01F2			CLRF	STACK_2
$09DC	$01F3			CLRF	STACK_3
$09DD	$	FLO16U32:
$09DD	$01FB			CLRF	STACK_11
$09DE	$01FC			CLRF	STACK_12
$09DF	$3096			MOVLW	150
$09E0	$00F3			MOVWF	STACK_3
$09E1	$01FA			CLRF	STACK_10
$09E2	$0870			MOVF	STACK_0, W
$09E3	$00F1			MOVWF	STACK_1
$09E4	$0878			MOVF	STACK_8, W
$09E5	$00F0			MOVWF	STACK_0
$09E6	$01F8			CLRF	STACK_8
$09E7	$01F2			CLRF	STACK_2
$09E8	$2111			CALL	_NRM3232
$09E9	$0008			RETURN
$053B	$	_Div_32x32_FP:
$053B	$1303			BCF	STATUS, RP1
$053C	$1283			BCF	STATUS, RP0
$053D	$	FPD32:
$053D	$0877			MOVF	STACK_7, W
$053E	$1903			BTFSC	STATUS, Z
$053F	$2DCA			GOTO	JPDSETFDZ32
$0540	$0873			MOVF	STACK_3, W
$0541	$1903			BTFSC	STATUS, Z
$0542	$2DCF			GOTO	JPDRES032
$0543	$	D32BNE0:
$0543	$0872			MOVF	STACK_2, W
$0544	$0676			XORWF	STACK_6, W
$0545	$3980			ANDLW	128
$0546	$00FA			MOVWF	STACK_10
$0547	$17F2			BSF	STACK_2, 7
$0548	$17F6			BSF	STACK_6, 7
$0549	$	TALIGN32:
$0549	$01A0			CLRF	__math_tempbD
$054A	$0872			MOVF	STACK_2, W
$054B	$00F8			MOVWF	STACK_8
$054C	$0871			MOVF	STACK_1, W
$054D	$00FC			MOVWF	STACK_12
$054E	$0870			MOVF	STACK_0, W
$054F	$00FD			MOVWF	STACK_13
$0550	$0874			MOVF	STACK_4, W
$0551	$02FD			SUBWF	STACK_13, F
$0552	$0875			MOVF	STACK_5, W
$0553	$1C03			BTFSS	STATUS, C
$0554	$0F75			INCFSZ	STACK_5, W
$0555	$	TS1ALIGN32:
$0555	$02FC			SUBWF	STACK_12, F
$0556	$0876			MOVF	STACK_6, W
$0557	$1C03			BTFSS	STATUS, C
$0558	$0F76			INCFSZ	STACK_6, W
$0559	$	TS2ALIGN32:
$0559	$02F8			SUBWF	STACK_8, F
$055A	$01F8			CLRF	STACK_8
$055B	$01FC			CLRF	STACK_12
$055C	$01FD			CLRF	STACK_13
$055D	$1C03			BTFSS	STATUS, C
$055E	$2D66			GOTO	DALIGN32OK
$055F	$1003			BCF	STATUS, C
$0560	$0CF2			RRF	STACK_2, F
$0561	$0CF1			RRF	STACK_1, F
$0562	$0CF0			RRF	STACK_0, F
$0563	$0CF8			RRF	STACK_8, F
$0564	$3001			MOVLW	0x01
$0565	$00A0			MOVWF	__math_tempbD
$0566	$	DALIGN32OK:
$0566	$0877			MOVF	STACK_7, W
$0567	$02F3			SUBWF	STACK_3, F
$0568	$1C03			BTFSS	STATUS, C
$0569	$2D70			GOTO	ALTB32
$056A	$	AGEB32:
$056A	$307E			MOVLW	126
$056B	$0720			ADDWF	__math_tempbD, W
$056C	$07F3			ADDWF	STACK_3, F
$056D	$1803			BTFSC	STATUS, C
$056E	$2DD4			GOTO	JPDSETFOV32
$056F	$2D75			GOTO	DARGOK32
$0570	$	ALTB32:
$0570	$307E			MOVLW	126
$0571	$0720			ADDWF	__math_tempbD, W
$0572	$07F3			ADDWF	STACK_3, F
$0573	$1C03			BTFSS	STATUS, C
$0574	$2DD7			GOTO	JPDSETFUN32
$0575	$	DARGOK32:
$0575	$3018			MOVLW	24
$0576	$07FA			ADDWF	STACK_10, F
$0577	$	DLOOP32:
$0577	$0DFD			RLF	STACK_13, F
$0578	$0DFC			RLF	STACK_12, F
$0579	$0DF8			RLF	STACK_8, F
$057A	$0DF0			RLF	STACK_0, F
$057B	$0DF1			RLF	STACK_1, F
$057C	$0DF2			RLF	STACK_2, F
$057D	$0DA0			RLF	__math_tempbD, F
$057E	$0874			MOVF	STACK_4, W
$057F	$02F0			SUBWF	STACK_0, F
$0580	$0875			MOVF	STACK_5, W
$0581	$1C03			BTFSS	STATUS, C
$0582	$0F75			INCFSZ	STACK_5, W
$0583	$	DS132:
$0583	$02F1			SUBWF	STACK_1, F
$0584	$0876			MOVF	STACK_6, W
$0585	$1C03			BTFSS	STATUS, C
$0586	$0F76			INCFSZ	STACK_6, W
$0587	$	DS232:
$0587	$02F2			SUBWF	STACK_2, F
$0588	$0D76			RLF	STACK_6, W
$0589	$04A0			IORWF	__math_tempbD, F
$058A	$1C20			BTFSS	__math_tempbD, 0
$058B	$2D8E			GOTO	DREST32
$058C	$147D			BSF	STACK_13, 0
$058D	$2D99			GOTO	DOK32
$058E	$	DREST32:
$058E	$0874			MOVF	STACK_4, W
$058F	$07F0			ADDWF	STACK_0, F
$0590	$0875			MOVF	STACK_5, W
$0591	$1803			BTFSC	STATUS, C
$0592	$0F75			INCFSZ	STACK_5, W
$0593	$	DAREST32:
$0593	$07F1			ADDWF	STACK_1, F
$0594	$0876			MOVF	STACK_6, W
$0595	$1803			BTFSC	STATUS, C
$0596	$0A76			INCF	STACK_6, W
$0597	$07F2			ADDWF	STACK_2, F
$0598	$107D			BCF	STACK_13, 0
$0599	$	DOK32:
$0599	$03FA			DECF	STACK_10, F
$059A	$301F			MOVLW	31
$059B	$057A			ANDWF	STACK_10, W
$059C	$1D03			BTFSS	STATUS, Z
$059D	$2D77			GOTO	DLOOP32
$059E	$	DROUND32:
$059E	$1B7B			BTFSC	STACK_11, 6
$059F	$1C7D			BTFSS	STACK_13, 0
$05A0	$2DC0			GOTO	DIV32OK
$05A1	$1003			BCF	STATUS, C
$05A2	$0DF0			RLF	STACK_0, F
$05A3	$0DF1			RLF	STACK_1, F
$05A4	$0DF2			RLF	STACK_2, F
$05A5	$0DA0			RLF	__math_tempbD, F
$05A6	$0874			MOVF	STACK_4, W
$05A7	$02F0			SUBWF	STACK_0, F
$05A8	$0875			MOVF	STACK_5, W
$05A9	$1C03			BTFSS	STATUS, C
$05AA	$0F75			INCFSZ	STACK_5, W
$05AB	$02F1			SUBWF	STACK_1, F
$05AC	$0876			MOVF	STACK_6, W
$05AD	$1C03			BTFSS	STATUS, C
$05AE	$0F76			INCFSZ	STACK_6, W
$05AF	$02F2			SUBWF	STACK_2, F
$05B0	$0D76			RLF	STACK_6, W
$05B1	$0420			IORWF	__math_tempbD, W
$05B2	$3901			ANDLW	0x01
$05B3	$07FD			ADDWF	STACK_13, F
$05B4	$1803			BTFSC	STATUS, C
$05B5	$0AFC			INCF	STACK_12, F
$05B6	$1903			BTFSC	STATUS, Z
$05B7	$0AF8			INCF	STACK_8, F
$05B8	$1D03			BTFSS	STATUS, Z
$05B9	$2DC0			GOTO	DIV32OK
$05BA	$0CF8			RRF	STACK_8, F
$05BB	$0CFC			RRF	STACK_12, F
$05BC	$0CFD			RRF	STACK_13, F
$05BD	$0AF3			INCF	STACK_3, F
$05BE	$1903			BTFSC	STATUS, Z
$05BF	$2DD4			GOTO	JPDSETFOV32
$05C0	$	DIV32OK:
$05C0	$1FFA			BTFSS	STACK_10, 7
$05C1	$13F8			BCF	STACK_8, 7
$05C2	$0878			MOVF	STACK_8, W
$05C3	$00F2			MOVWF	STACK_2
$05C4	$087C			MOVF	STACK_12, W
$05C5	$00F1			MOVWF	STACK_1
$05C6	$087D			MOVF	STACK_13, W
$05C7	$00F0			MOVWF	STACK_0
$05C8	$3000			MOVLW	0x00
$05C9	$2DDB			GOTO	DIV32EEE
$05CA	$	JPDSETFDZ32:
$05CA	$3001			MOVLW	0x01
$05CB	$158A			BSF	PCLATH, 3
$05CC	$2276			CALL	_SETFDZ32
$05CD	$118A			BCF	PCLATH, 3
$05CE	$2DDB			GOTO	DIV32EEE
$05CF	$	JPDRES032:
$05CF	$3002			MOVLW	0x02
$05D0	$158A			BSF	PCLATH, 3
$05D1	$2237			CALL	_RES032
$05D2	$118A			BCF	PCLATH, 3
$05D3	$2DDB			GOTO	DIV32EEE
$05D4	$	JPDSETFOV32:
$05D4	$3004			MOVLW	0x04
$05D5	$2745			CALL	_SETFOV32
$05D6	$2DDB			GOTO	DIV32EEE
$05D7	$	JPDSETFUN32:
$05D7	$3008			MOVLW	0x08
$05D8	$158A			BSF	PCLATH, 3
$05D9	$2221			CALL	_SETFUN32
$05DA	$118A			BCF	PCLATH, 3
$05DB	$	DIV32EEE:
$05DB	$0000			NOP
$05DC	$0008			RETURN
$0A2F	$	_Sub_32x32_FP:
$0A2F	$1303			BCF	STATUS, RP1
$0A30	$1283			BCF	STATUS, RP0
$0A31	$3080			MOVLW	0x80
$0A32	$06F6			XORWF	STACK_6, F
$0A33	$118A			BCF	PCLATH, 3
$0A34	$2499			CALL	_Add_32x32_FP
$0A35	$158A			BSF	PCLATH, 3
$0A36	$0008			RETURN
$084B	$	_Mul_16x16_S:
$084B	$1303			BCF	STATUS, RP1
$084C	$1283			BCF	STATUS, RP0
$084D	$01FB			CLRF	STACK_11
$084E	$01FA			CLRF	STACK_10
$084F	$01F9			CLRF	STACK_9
$0850	$3080			MOVLW	128
$0851	$00F8			MOVWF	STACK_8
$0852	$01FD			CLRF	STACK_13
$0853	$1FF1			BTFSS	STACK_1, 7
$0854	$285B			GOTO	$+7
$0855	$09F1			COMF	STACK_1, F
$0856	$09F0			COMF	STACK_0, F
$0857	$0AF0			INCF	STACK_0, F
$0858	$1903			BTFSC	STATUS, Z
$0859	$0AF1			INCF	STACK_1, F
$085A	$0AFD			INCF	STACK_13, F
$085B	$1FF5			BTFSS	STACK_5, 7
$085C	$2863			GOTO	$+7
$085D	$09F5			COMF	STACK_5, F
$085E	$09F4			COMF	STACK_4, F
$085F	$0AF4			INCF	STACK_4, F
$0860	$1903			BTFSC	STATUS, Z
$0861	$0AF5			INCF	STACK_5, F
$0862	$0AFD			INCF	STACK_13, F
$0863	$0CF1			RRF	STACK_1, F
$0864	$0CF0			RRF	STACK_0, F
$0865	$1C03			BTFSS	STATUS, C
$0866	$2870			GOTO	$+10
$0867	$0874			MOVF	STACK_4, W
$0868	$07F9			ADDWF	STACK_9, F
$0869	$0875			MOVF	STACK_5, W
$086A	$1803			BTFSC	STATUS, C
$086B	$0F75			INCFSZ	STACK_5, W
$086C	$07FA			ADDWF	STACK_10, F
$086D	$1803			BTFSC	STATUS, C
$086E	$0AFB			INCF	STACK_11, F
$086F	$1003			BCF	STATUS, C
$0870	$1FF0			BTFSS	STACK_0, 7
$0871	$2878			GOTO	$+7
$0872	$0874			MOVF	STACK_4, W
$0873	$07FA			ADDWF	STACK_10, F
$0874	$1803			BTFSC	STATUS, C
$0875	$0AFB			INCF	STACK_11, F
$0876	$0875			MOVF	STACK_5, W
$0877	$07FB			ADDWF	STACK_11, F
$0878	$0CFB			RRF	STACK_11, F
$0879	$0CFA			RRF	STACK_10, F
$087A	$0CF9			RRF	STACK_9, F
$087B	$0CF8			RRF	STACK_8, F
$087C	$1C03			BTFSS	STATUS, C
$087D	$2863			GOTO	$-26
$087E	$1C7D			BTFSS	STACK_13, 0
$087F	$288B			GOTO	$+12
$0880	$09FB			COMF	STACK_11, F
$0881	$09FA			COMF	STACK_10, F
$0882	$09F9			COMF	STACK_9, F
$0883	$09F8			COMF	STACK_8, F
$0884	$0AF8			INCF	STACK_8, F
$0885	$1903			BTFSC	STATUS, Z
$0886	$0AF9			INCF	STACK_9, F
$0887	$1903			BTFSC	STATUS, Z
$0888	$0AFA			INCF	STACK_10, F
$0889	$1903			BTFSC	STATUS, Z
$088A	$0AFB			INCF	STACK_11, F
$088B	$087B			MOVF	STACK_11, W
$088C	$00F3			MOVWF	STACK_3
$088D	$087A			MOVF	STACK_10, W
$088E	$00F2			MOVWF	STACK_2
$088F	$0879			MOVF	STACK_9, W
$0890	$00F1			MOVWF	STACK_1
$0891	$0878			MOVF	STACK_8, W
$0892	$00F0			MOVWF	STACK_0
$0893	$0000			NOP
$0894	$0008			RETURN
$0A12	$	_SETIOV3224:
$0A12	$1303			BCF	STATUS, RP1
$0A13	$1283			BCF	STATUS, RP0
$0A14	$147B			BSF	STACK_11, 0
$0A15	$1FFB			BTFSS	STACK_11, 7
$0A16	$2A1F			GOTO	SETIOV3224EEE
$0A17	$01F2			CLRF	STACK_2
$0A18	$1FFA			BTFSS	STACK_10, 7
$0A19	$30FF			MOVLW	0xFF
$0A1A	$00F2			MOVWF	STACK_2
$0A1B	$00F1			MOVWF	STACK_1
$0A1C	$00F0			MOVWF	STACK_0
$0A1D	$0DFA			RLF	STACK_10, F
$0A1E	$0CF2			RRF	STACK_2, F
$0A1F	$	SETIOV3224EEE:
$0A1F	$30FF			MOVLW	0xFF
$0A20	$0008			RETURN
$09B7	$	_initport:
;lfr_new.c,15 :: 		void initport()
;lfr_new.c,17 :: 		ADCON1 =0x06;          //TURN OFF ADC AND CONFIGURE A AND E AS DIG I/O
$09B7	$3006			MOVLW	6
$09B8	$1303			BCF	STATUS, RP1
$09B9	$1683			BSF	STATUS, RP0
$09BA	$009F			MOVWF	ADCON1
;lfr_new.c,18 :: 		PORTA = 0;             //CLEAR PORTA
$09BB	$1283			BCF	STATUS, RP0
$09BC	$0185			CLRF	PORTA, 1
;lfr_new.c,19 :: 		PORTE = 0;             //CLEAR PORTE
$09BD	$0189			CLRF	PORTE, 1
;lfr_new.c,20 :: 		TRISA = 0x3F;          //INITIALIZE PORTA AS INPUT
$09BE	$303F			MOVLW	63
$09BF	$1683			BSF	STATUS, RP0
$09C0	$0085			MOVWF	TRISA
;lfr_new.c,21 :: 		TRISE = 0x03;          //INITIALIZE PORTE AS INPUT
$09C1	$3003			MOVLW	3
$09C2	$0089			MOVWF	TRISE
;lfr_new.c,22 :: 		TRISD = 0x00;          //INITIALIZE PORTD AS OUTPUT
$09C3	$0188			CLRF	TRISD, 1
;lfr_new.c,23 :: 		TRISC = 0b00000000;    //INITIALIZE PORTC AS OUTPUT
$09C4	$0187			CLRF	TRISC, 1
;lfr_new.c,24 :: 		T1CON.TMR1CS    = 0;  // assign clock source to instruction clock
$09C5	$1283			BCF	STATUS, RP0
$09C6	$1090			BCF	T1CON, 1
;lfr_new.c,25 :: 		T1CON.T1CKPS1   = 1;  // prescaler set to 8 for 4MHz xtal
$09C7	$1690			BSF	T1CON, 5
;lfr_new.c,26 :: 		T1CON.T1CKPS0   = 1;
$09C8	$1610			BSF	T1CON, 4
;lfr_new.c,28 :: 		TMR1H = 0xFF;         // set timer1H to known value
$09C9	$30FF			MOVLW	255
$09CA	$008F			MOVWF	TMR1H
;lfr_new.c,29 :: 		TMR1L = 0x83;         // set timer1L to known value
$09CB	$3083			MOVLW	131
$09CC	$008E			MOVWF	TMR1L
;lfr_new.c,30 :: 		PIE1.TMR1IE = 1;      // enable timer1 interrupt source
$09CD	$1683			BSF	STATUS, RP0
$09CE	$140C			BSF	PIE1, 0
;lfr_new.c,31 :: 		PIR1.TMR1IF = 0;      // Clear timer1 interrupt flag
$09CF	$1283			BCF	STATUS, RP0
$09D0	$100C			BCF	PIR1, 0
;lfr_new.c,32 :: 		INTCON.PEIE = 1;      // enable peripheral interrupts
$09D1	$170B			BSF	INTCON, 6
;lfr_new.c,33 :: 		INTCON.GIE  = 1;      // enable global interrupts
$09D2	$178B			BSF	INTCON, 7
;lfr_new.c,34 :: 		}
$09D3	$0008			RETURN
$09A6	$	_initpwm:
;lfr_new.c,36 :: 		void initpwm()
;lfr_new.c,38 :: 		PWM1_Init(5000);
$09A6	$1303			BCF	STATUS, RP1
$09A7	$1283			BCF	STATUS, RP0
$09A8	$1012			BCF	T2CON, T2CKPS0
$09A9	$1092			BCF	T2CON, T2CKPS1
$09AA	$30C7			MOVLW	199
$09AB	$1683			BSF	STATUS, RP0
$09AC	$0092			MOVWF	PR2
$09AD	$225C			CALL	_PWM1_Init
;lfr_new.c,39 :: 		PWM2_Init(5000);
$09AE	$1012			BCF	T2CON, T2CKPS0
$09AF	$1092			BCF	T2CON, T2CKPS1
$09B0	$30C7			MOVLW	199
$09B1	$1683			BSF	STATUS, RP0
$09B2	$0092			MOVWF	PR2
$09B3	$2250			CALL	_PWM2_Init
;lfr_new.c,40 :: 		Pwm1_Start();          //RIGHT MOTOR
$09B4	$2240			CALL	_PWM1_Start
;lfr_new.c,41 :: 		Pwm2_Start();          //LEFT MOTOR
$09B5	$2248			CALL	_PWM2_Start
;lfr_new.c,42 :: 		}
$09B6	$0008			RETURN
$06A4	$	_indicator:
;lfr_new.c,78 :: 		void indicator()        //COPY THE SENSOR OUTPUT TO PORTD-INDICATOR
;lfr_new.c,80 :: 		PORTD.F7 = PORTA.F0;
$06A4	$3001			MOVLW	1
$06A5	$1303			BCF	STATUS, RP1
$06A6	$1283			BCF	STATUS, RP0
$06A7	$0505			ANDWF	PORTA, 0
$06A8	$00F0			MOVWF	STACK_0
$06A9	$3000			MOVLW	0
$06AA	$1870			BTFSC	STACK_0, 0
$06AB	$3080			MOVLW	128
$06AC	$0608			XORWF	PORTD, 0
$06AD	$3980			ANDLW	128
$06AE	$0688			XORWF	PORTD, 1
;lfr_new.c,81 :: 		PORTD.F6 = PORTA.F1;
$06AF	$3000			MOVLW	0
$06B0	$1885			BTFSC	PORTA, 1
$06B1	$3001			MOVLW	1
$06B2	$00F1			MOVWF	STACK_1
$06B3	$3000			MOVLW	0
$06B4	$1871			BTFSC	STACK_1, 0
$06B5	$3040			MOVLW	64
$06B6	$0608			XORWF	PORTD, 0
$06B7	$3940			ANDLW	64
$06B8	$0688			XORWF	PORTD, 1
;lfr_new.c,82 :: 		PORTD.F5 = PORTA.F2;
$06B9	$3000			MOVLW	0
$06BA	$1905			BTFSC	PORTA, 2
$06BB	$3001			MOVLW	1
$06BC	$00F1			MOVWF	STACK_1
$06BD	$3000			MOVLW	0
$06BE	$1871			BTFSC	STACK_1, 0
$06BF	$3020			MOVLW	32
$06C0	$0608			XORWF	PORTD, 0
$06C1	$3920			ANDLW	32
$06C2	$0688			XORWF	PORTD, 1
;lfr_new.c,83 :: 		PORTD.F4 = PORTA.F3;
$06C3	$3000			MOVLW	0
$06C4	$1985			BTFSC	PORTA, 3
$06C5	$3001			MOVLW	1
$06C6	$00F1			MOVWF	STACK_1
$06C7	$3000			MOVLW	0
$06C8	$1871			BTFSC	STACK_1, 0
$06C9	$3010			MOVLW	16
$06CA	$0608			XORWF	PORTD, 0
$06CB	$3910			ANDLW	16
$06CC	$0688			XORWF	PORTD, 1
;lfr_new.c,84 :: 		PORTD.F3 = PORTA.F4;
$06CD	$3000			MOVLW	0
$06CE	$1A05			BTFSC	PORTA, 4
$06CF	$3001			MOVLW	1
$06D0	$00F1			MOVWF	STACK_1
$06D1	$3000			MOVLW	0
$06D2	$1871			BTFSC	STACK_1, 0
$06D3	$3008			MOVLW	8
$06D4	$0608			XORWF	PORTD, 0
$06D5	$3908			ANDLW	8
$06D6	$0688			XORWF	PORTD, 1
;lfr_new.c,85 :: 		PORTD.F2 = PORTA.F5;
$06D7	$3000			MOVLW	0
$06D8	$1A85			BTFSC	PORTA, 5
$06D9	$3001			MOVLW	1
$06DA	$00F1			MOVWF	STACK_1
$06DB	$3000			MOVLW	0
$06DC	$1871			BTFSC	STACK_1, 0
$06DD	$3004			MOVLW	4
$06DE	$0608			XORWF	PORTD, 0
$06DF	$3904			ANDLW	4
$06E0	$0688			XORWF	PORTD, 1
;lfr_new.c,86 :: 		PORTD.F1 = PORTE.F0;
$06E1	$3001			MOVLW	1
$06E2	$0509			ANDWF	PORTE, 0
$06E3	$00F0			MOVWF	STACK_0
$06E4	$3000			MOVLW	0
$06E5	$1870			BTFSC	STACK_0, 0
$06E6	$3002			MOVLW	2
$06E7	$0608			XORWF	PORTD, 0
$06E8	$3902			ANDLW	2
$06E9	$0688			XORWF	PORTD, 1
;lfr_new.c,87 :: 		PORTD.F0 = PORTE.F1;
$06EA	$3000			MOVLW	0
$06EB	$1889			BTFSC	PORTE, 1
$06EC	$3001			MOVLW	1
$06ED	$00F1			MOVWF	STACK_1
$06EE	$3000			MOVLW	0
$06EF	$1871			BTFSC	STACK_1, 0
$06F0	$3001			MOVLW	1
$06F1	$0608			XORWF	PORTD, 0
$06F2	$3901			ANDLW	1
$06F3	$0688			XORWF	PORTD, 1
;lfr_new.c,88 :: 		}
$06F4	$0008			RETURN
$035A	$	_CalcError:
;lfr_new.c,89 :: 		void CalcError()								//calculates the current error
;lfr_new.c,91 :: 		s1 = 0;
$035A	$1303			BCF	STATUS, RP1
$035B	$1283			BCF	STATUS, RP0
$035C	$01A3			CLRF	_s1
$035D	$01A4			CLRF	_s1+1
;lfr_new.c,92 :: 		s2 = 0;
$035E	$01A5			CLRF	_s2
$035F	$01A6			CLRF	_s2+1
;lfr_new.c,93 :: 		s3 = 0;
$0360	$01A7			CLRF	_s3
$0361	$01A8			CLRF	_s3+1
;lfr_new.c,94 :: 		s4 = 0;
$0362	$01A9			CLRF	_s4
$0363	$01AA			CLRF	_s4+1
;lfr_new.c,95 :: 		s5 = 0;
$0364	$01AB			CLRF	_s5
$0365	$01AC			CLRF	_s5+1
;lfr_new.c,96 :: 		s6 = 0;
$0366	$01AD			CLRF	_s6
$0367	$01AE			CLRF	_s6+1
;lfr_new.c,97 :: 		s7 = 0;
$0368	$01AF			CLRF	_s7
$0369	$01B0			CLRF	_s7+1
;lfr_new.c,98 :: 		s8 = 0;
$036A	$01B1			CLRF	_s8
$036B	$01B2			CLRF	_s8+1
;lfr_new.c,100 :: 		if(PORTA.F0)
$036C	$1C05			BTFSS	PORTA, 0
$036D	$2B74			GOTO	L_CalcError_1
;lfr_new.c,102 :: 		lastreading='r';
$036E	$3072			MOVLW	114
$036F	$00B3			MOVWF	_lastreading
;lfr_new.c,103 :: 		s1 = 1;
$0370	$3001			MOVLW	1
$0371	$00A3			MOVWF	_s1
$0372	$3000			MOVLW	0
$0373	$00A4			MOVWF	_s1+1
;lfr_new.c,104 :: 		}
$0374	$	L_CalcError_1:
;lfr_new.c,105 :: 		if(PORTA.F1)
$0374	$1C85			BTFSS	PORTA, 1
$0375	$2B7A			GOTO	L_CalcError_2
;lfr_new.c,108 :: 		s2 = 1;
$0376	$3001			MOVLW	1
$0377	$00A5			MOVWF	_s2
$0378	$3000			MOVLW	0
$0379	$00A6			MOVWF	_s2+1
;lfr_new.c,109 :: 		}
$037A	$	L_CalcError_2:
;lfr_new.c,110 :: 		if(PORTA.F2)
$037A	$1D05			BTFSS	PORTA, 2
$037B	$2B80			GOTO	L_CalcError_3
;lfr_new.c,112 :: 		s3 = 1;
$037C	$3001			MOVLW	1
$037D	$00A7			MOVWF	_s3
$037E	$3000			MOVLW	0
$037F	$00A8			MOVWF	_s3+1
;lfr_new.c,113 :: 		}
$0380	$	L_CalcError_3:
;lfr_new.c,114 :: 		if(PORTA.F3)
$0380	$1D85			BTFSS	PORTA, 3
$0381	$2B86			GOTO	L_CalcError_4
;lfr_new.c,117 :: 		s4 = 1;
$0382	$3001			MOVLW	1
$0383	$00A9			MOVWF	_s4
$0384	$3000			MOVLW	0
$0385	$00AA			MOVWF	_s4+1
;lfr_new.c,118 :: 		}
$0386	$	L_CalcError_4:
;lfr_new.c,119 :: 		if(PORTA.F4)
$0386	$1E05			BTFSS	PORTA, 4
$0387	$2B8C			GOTO	L_CalcError_5
;lfr_new.c,121 :: 		s5 = 1;
$0388	$3001			MOVLW	1
$0389	$00AB			MOVWF	_s5
$038A	$3000			MOVLW	0
$038B	$00AC			MOVWF	_s5+1
;lfr_new.c,122 :: 		}
$038C	$	L_CalcError_5:
;lfr_new.c,123 :: 		if(PORTA.F5)
$038C	$1E85			BTFSS	PORTA, 5
$038D	$2B92			GOTO	L_CalcError_6
;lfr_new.c,125 :: 		s6 = 1;
$038E	$3001			MOVLW	1
$038F	$00AD			MOVWF	_s6
$0390	$3000			MOVLW	0
$0391	$00AE			MOVWF	_s6+1
$0392	$	L_CalcError_6:
;lfr_new.c,126 :: 		if(PORTE.F0)
$0392	$1C09			BTFSS	PORTE, 0
$0393	$2B98			GOTO	L_CalcError_7
;lfr_new.c,129 :: 		s7 = 1;
$0394	$3001			MOVLW	1
$0395	$00AF			MOVWF	_s7
$0396	$3000			MOVLW	0
$0397	$00B0			MOVWF	_s7+1
;lfr_new.c,130 :: 		}
$0398	$	L_CalcError_7:
;lfr_new.c,131 :: 		if(PORTE.F1)
$0398	$1C89			BTFSS	PORTE, 1
$0399	$2BA0			GOTO	L_CalcError_8
;lfr_new.c,133 :: 		lastreading='l';
$039A	$306C			MOVLW	108
$039B	$00B3			MOVWF	_lastreading
;lfr_new.c,134 :: 		s8 = 1;
$039C	$3001			MOVLW	1
$039D	$00B1			MOVWF	_s8
$039E	$3000			MOVLW	0
$039F	$00B2			MOVWF	_s8+1
;lfr_new.c,135 :: 		}
$03A0	$	L_CalcError_8:
;lfr_new.c,136 :: 		perror = error;
$03A0	$0838			MOVF	_error, 0
$03A1	$00B4			MOVWF	_perror
$03A2	$0839			MOVF	_error+1, 0
$03A3	$00B5			MOVWF	_perror+1
$03A4	$083A			MOVF	_error+2, 0
$03A5	$00B6			MOVWF	_perror+2
$03A6	$083B			MOVF	_error+3, 0
$03A7	$00B7			MOVWF	_perror+3
;lfr_new.c,138 :: 		error = (s1 * 1) + (s2 * 2) + (s3 * 3) + (s4 * 4) + (s5 * 5) + (s6 * 6) +(s7 * 7) + (s8*8);
$03A8	$3001			MOVLW	1
$03A9	$00F4			MOVWF	STACK_4
$03AA	$0825			MOVF	_s2, 0
$03AB	$00F0			MOVWF	STACK_0
$03AC	$0826			MOVF	_s2+1, 0
$03AD	$00F1			MOVWF	STACK_0+1
$03AE	$0874			MOVF	STACK_4, 0
$03AF	$	L_CalcError_29:
$03AF	$1903			BTFSC	STATUS, Z
$03B0	$2BB6			GOTO	L_CalcError_30
$03B1	$0DF0			RLF	STACK_0, 1
$03B2	$0DF1			RLF	STACK_0+1, 1
$03B3	$1070			BCF	STACK_0, 0
$03B4	$3FFF			ADDLW	255
$03B5	$2BAF			GOTO	L_CalcError_29
$03B6	$	L_CalcError_30:
$03B6	$0870			MOVF	STACK_0, 0
$03B7	$0723			ADDWF	_s1, 0
$03B8	$00E7			MOVWF	FLOC_CalcError+0
$03B9	$0824			MOVF	_s1+1, 0
$03BA	$1803			BTFSC	STATUS, C
$03BB	$3F01			ADDLW	1
$03BC	$0771			ADDWF	STACK_0+1, 0
$03BD	$00E8			MOVWF	FLOC_CalcError+1
$03BE	$0827			MOVF	_s3, 0
$03BF	$00F0			MOVWF	STACK_0
$03C0	$0828			MOVF	_s3+1, 0
$03C1	$00F1			MOVWF	STACK_0+1
$03C2	$3003			MOVLW	3
$03C3	$00F4			MOVWF	STACK_4
$03C4	$3000			MOVLW	0
$03C5	$00F5			MOVWF	STACK_4+1
$03C6	$158A			BSF	PCLATH, 3
$03C7	$217B			CALL	_mul_16x16_u
$03C8	$118A			BCF	PCLATH, 3
$03C9	$0870			MOVF	STACK_0, 0
$03CA	$07E7			ADDWF	FLOC_CalcError+0, 1
$03CB	$0871			MOVF	STACK_0+1, 0
$03CC	$1803			BTFSC	STATUS, C
$03CD	$3F01			ADDLW	1
$03CE	$07E8			ADDWF	FLOC_CalcError+1, 1
$03CF	$3002			MOVLW	2
$03D0	$00F4			MOVWF	STACK_4
$03D1	$0829			MOVF	_s4, 0
$03D2	$00F0			MOVWF	STACK_0
$03D3	$082A			MOVF	_s4+1, 0
$03D4	$00F1			MOVWF	STACK_0+1
$03D5	$0874			MOVF	STACK_4, 0
$03D6	$	L_CalcError_31:
$03D6	$1903			BTFSC	STATUS, Z
$03D7	$2BDD			GOTO	L_CalcError_32
$03D8	$0DF0			RLF	STACK_0, 1
$03D9	$0DF1			RLF	STACK_0+1, 1
$03DA	$1070			BCF	STACK_0, 0
$03DB	$3FFF			ADDLW	255
$03DC	$2BD6			GOTO	L_CalcError_31
$03DD	$	L_CalcError_32:
$03DD	$0870			MOVF	STACK_0, 0
$03DE	$07E7			ADDWF	FLOC_CalcError+0, 1
$03DF	$0871			MOVF	STACK_0+1, 0
$03E0	$1803			BTFSC	STATUS, C
$03E1	$3F01			ADDLW	1
$03E2	$07E8			ADDWF	FLOC_CalcError+1, 1
$03E3	$082B			MOVF	_s5, 0
$03E4	$00F0			MOVWF	STACK_0
$03E5	$082C			MOVF	_s5+1, 0
$03E6	$00F1			MOVWF	STACK_0+1
$03E7	$3005			MOVLW	5
$03E8	$00F4			MOVWF	STACK_4
$03E9	$3000			MOVLW	0
$03EA	$00F5			MOVWF	STACK_4+1
$03EB	$158A			BSF	PCLATH, 3
$03EC	$217B			CALL	_mul_16x16_u
$03ED	$118A			BCF	PCLATH, 3
$03EE	$0870			MOVF	STACK_0, 0
$03EF	$07E7			ADDWF	FLOC_CalcError+0, 1
$03F0	$0871			MOVF	STACK_0+1, 0
$03F1	$1803			BTFSC	STATUS, C
$03F2	$3F01			ADDLW	1
$03F3	$07E8			ADDWF	FLOC_CalcError+1, 1
$03F4	$082D			MOVF	_s6, 0
$03F5	$00F0			MOVWF	STACK_0
$03F6	$082E			MOVF	_s6+1, 0
$03F7	$00F1			MOVWF	STACK_0+1
$03F8	$3006			MOVLW	6
$03F9	$00F4			MOVWF	STACK_4
$03FA	$3000			MOVLW	0
$03FB	$00F5			MOVWF	STACK_4+1
$03FC	$158A			BSF	PCLATH, 3
$03FD	$217B			CALL	_mul_16x16_u
$03FE	$118A			BCF	PCLATH, 3
$03FF	$0870			MOVF	STACK_0, 0
$0400	$07E7			ADDWF	FLOC_CalcError+0, 1
$0401	$0871			MOVF	STACK_0+1, 0
$0402	$1803			BTFSC	STATUS, C
$0403	$3F01			ADDLW	1
$0404	$07E8			ADDWF	FLOC_CalcError+1, 1
$0405	$082F			MOVF	_s7, 0
$0406	$00F0			MOVWF	STACK_0
$0407	$0830			MOVF	_s7+1, 0
$0408	$00F1			MOVWF	STACK_0+1
$0409	$3007			MOVLW	7
$040A	$00F4			MOVWF	STACK_4
$040B	$3000			MOVLW	0
$040C	$00F5			MOVWF	STACK_4+1
$040D	$158A			BSF	PCLATH, 3
$040E	$217B			CALL	_mul_16x16_u
$040F	$118A			BCF	PCLATH, 3
$0410	$0870			MOVF	STACK_0, 0
$0411	$07E7			ADDWF	FLOC_CalcError+0, 1
$0412	$0871			MOVF	STACK_0+1, 0
$0413	$1803			BTFSC	STATUS, C
$0414	$3F01			ADDLW	1
$0415	$07E8			ADDWF	FLOC_CalcError+1, 1
$0416	$3003			MOVLW	3
$0417	$00F4			MOVWF	STACK_4
$0418	$0831			MOVF	_s8, 0
$0419	$00F0			MOVWF	STACK_0
$041A	$0832			MOVF	_s8+1, 0
$041B	$00F1			MOVWF	STACK_0+1
$041C	$0874			MOVF	STACK_4, 0
$041D	$	L_CalcError_33:
$041D	$1903			BTFSC	STATUS, Z
$041E	$2C24			GOTO	L_CalcError_34
$041F	$0DF0			RLF	STACK_0, 1
$0420	$0DF1			RLF	STACK_0+1, 1
$0421	$1070			BCF	STACK_0, 0
$0422	$3FFF			ADDLW	255
$0423	$2C1D			GOTO	L_CalcError_33
$0424	$	L_CalcError_34:
$0424	$0867			MOVF	FLOC_CalcError+0, 0
$0425	$07F0			ADDWF	STACK_0, 1
$0426	$0868			MOVF	FLOC_CalcError+1, 0
$0427	$1803			BTFSC	STATUS, C
$0428	$3F01			ADDLW	1
$0429	$07F1			ADDWF	STACK_0+1, 1
$042A	$158A			BSF	PCLATH, 3
$042B	$21D4			CALL	_word2double
$042C	$118A			BCF	PCLATH, 3
$042D	$0870			MOVF	STACK_0, 0
$042E	$00E7			MOVWF	FLOC_CalcError+0
$042F	$0871			MOVF	STACK_0+1, 0
$0430	$00E8			MOVWF	FLOC_CalcError+1
$0431	$0872			MOVF	STACK_0+2, 0
$0432	$00E9			MOVWF	FLOC_CalcError+2
$0433	$0873			MOVF	STACK_0+3, 0
$0434	$00EA			MOVWF	FLOC_CalcError+3
$0435	$0867			MOVF	FLOC_CalcError+0, 0
$0436	$00B8			MOVWF	_error
$0437	$0868			MOVF	FLOC_CalcError+1, 0
$0438	$00B9			MOVWF	_error+1
$0439	$0869			MOVF	FLOC_CalcError+2, 0
$043A	$00BA			MOVWF	_error+2
$043B	$086A			MOVF	FLOC_CalcError+3, 0
$043C	$00BB			MOVWF	_error+3
;lfr_new.c,139 :: 		error = (error)/(s1+s2+s3+s4+s5+s6+s7+s8);
$043D	$0825			MOVF	_s2, 0
$043E	$0723			ADDWF	_s1, 0
$043F	$00F0			MOVWF	STACK_0
$0440	$0824			MOVF	_s1+1, 0
$0441	$1803			BTFSC	STATUS, C
$0442	$3F01			ADDLW	1
$0443	$0726			ADDWF	_s2+1, 0
$0444	$00F1			MOVWF	STACK_0+1
$0445	$0827			MOVF	_s3, 0
$0446	$07F0			ADDWF	STACK_0, 1
$0447	$0828			MOVF	_s3+1, 0
$0448	$1803			BTFSC	STATUS, C
$0449	$3F01			ADDLW	1
$044A	$07F1			ADDWF	STACK_0+1, 1
$044B	$0829			MOVF	_s4, 0
$044C	$07F0			ADDWF	STACK_0, 1
$044D	$082A			MOVF	_s4+1, 0
$044E	$1803			BTFSC	STATUS, C
$044F	$3F01			ADDLW	1
$0450	$07F1			ADDWF	STACK_0+1, 1
$0451	$082B			MOVF	_s5, 0
$0452	$07F0			ADDWF	STACK_0, 1
$0453	$082C			MOVF	_s5+1, 0
$0454	$1803			BTFSC	STATUS, C
$0455	$3F01			ADDLW	1
$0456	$07F1			ADDWF	STACK_0+1, 1
$0457	$082D			MOVF	_s6, 0
$0458	$07F0			ADDWF	STACK_0, 1
$0459	$082E			MOVF	_s6+1, 0
$045A	$1803			BTFSC	STATUS, C
$045B	$3F01			ADDLW	1
$045C	$07F1			ADDWF	STACK_0+1, 1
$045D	$082F			MOVF	_s7, 0
$045E	$07F0			ADDWF	STACK_0, 1
$045F	$0830			MOVF	_s7+1, 0
$0460	$1803			BTFSC	STATUS, C
$0461	$3F01			ADDLW	1
$0462	$07F1			ADDWF	STACK_0+1, 1
$0463	$0831			MOVF	_s8, 0
$0464	$07F0			ADDWF	STACK_0, 1
$0465	$0832			MOVF	_s8+1, 0
$0466	$1803			BTFSC	STATUS, C
$0467	$3F01			ADDLW	1
$0468	$07F1			ADDWF	STACK_0+1, 1
$0469	$158A			BSF	PCLATH, 3
$046A	$21D4			CALL	_word2double
$046B	$118A			BCF	PCLATH, 3
$046C	$0870			MOVF	STACK_0, 0
$046D	$00F4			MOVWF	STACK_4
$046E	$0871			MOVF	STACK_0+1, 0
$046F	$00F5			MOVWF	STACK_4+1
$0470	$0872			MOVF	STACK_0+2, 0
$0471	$00F6			MOVWF	STACK_4+2
$0472	$0873			MOVF	STACK_0+3, 0
$0473	$00F7			MOVWF	STACK_4+3
$0474	$0867			MOVF	FLOC_CalcError+0, 0
$0475	$00F0			MOVWF	STACK_0
$0476	$0868			MOVF	FLOC_CalcError+1, 0
$0477	$00F1			MOVWF	STACK_0+1
$0478	$0869			MOVF	FLOC_CalcError+2, 0
$0479	$00F2			MOVWF	STACK_0+2
$047A	$086A			MOVF	FLOC_CalcError+3, 0
$047B	$00F3			MOVWF	STACK_0+3
$047C	$253B			CALL	_div_32x32_fp
$047D	$0870			MOVF	STACK_0, 0
$047E	$00B8			MOVWF	_error
$047F	$0871			MOVF	STACK_0+1, 0
$0480	$00B9			MOVWF	_error+1
$0481	$0872			MOVF	STACK_0+2, 0
$0482	$00BA			MOVWF	_error+2
$0483	$0873			MOVF	STACK_0+3, 0
$0484	$00BB			MOVWF	_error+3
;lfr_new.c,140 :: 		error = error - 4.5;
$0485	$3000			MOVLW	0
$0486	$00F4			MOVWF	STACK_4
$0487	$3000			MOVLW	0
$0488	$00F5			MOVWF	STACK_4+1
$0489	$3010			MOVLW	16
$048A	$00F6			MOVWF	STACK_4+2
$048B	$3081			MOVLW	129
$048C	$00F7			MOVWF	STACK_4+3
$048D	$158A			BSF	PCLATH, 3
$048E	$222F			CALL	_sub_32x32_fp
$048F	$118A			BCF	PCLATH, 3
$0490	$0870			MOVF	STACK_0, 0
$0491	$00B8			MOVWF	_error
$0492	$0871			MOVF	STACK_0+1, 0
$0493	$00B9			MOVWF	_error+1
$0494	$0872			MOVF	STACK_0+2, 0
$0495	$00BA			MOVWF	_error+2
$0496	$0873			MOVF	STACK_0+3, 0
$0497	$00BB			MOVWF	_error+3
;lfr_new.c,141 :: 		}
$0498	$0008			RETURN
$0A6C	$	_motor_LF:
;lfr_new.c,56 :: 		void motor_LF()         //LEFT MOTOR FWD DIR
;lfr_new.c,58 :: 		PORTC.F5 = 1;
$0A6C	$1303			BCF	STATUS, RP1
$0A6D	$1283			BCF	STATUS, RP0
$0A6E	$1687			BSF	PORTC, 5
;lfr_new.c,59 :: 		PORTC.F4 = 0;
$0A6F	$1207			BCF	PORTC, 4
;lfr_new.c,60 :: 		}
$0A70	$0008			RETURN
$0A67	$	_motor_RF:
;lfr_new.c,44 :: 		void motor_RF()         //RIGHT MOTOR FWD DIR
;lfr_new.c,46 :: 		PORTC.F7 = 1;
$0A67	$1303			BCF	STATUS, RP1
$0A68	$1283			BCF	STATUS, RP0
$0A69	$1787			BSF	PORTC, 7
;lfr_new.c,47 :: 		PORTC.F6 = 0;
$0A6A	$1307			BCF	PORTC, 6
;lfr_new.c,48 :: 		}
$0A6B	$0008			RETURN
$0942	$	_PWM1_Change_Duty:
$0942	$1303			BCF	STATUS, RP1
$0943	$1683			BSF	STATUS, RP0
$0944	$0812			MOVF	PR2, 0
$0945	$3F01			ADDLW	1
$0946	$00F0			MOVWF	STACK_0
$0947	$01F1			CLRF	STACK_0+1
$0948	$1803			BTFSC	STATUS, C
$0949	$0AF1			INCF	STACK_0+1, 1
$094A	$1283			BCF	STATUS, RP0
$094B	$0867			MOVF	FARG_PWM1_Change_Duty+0, 0
$094C	$00F4			MOVWF	STACK_4
$094D	$01F5			CLRF	STACK_4+1
$094E	$204B			CALL	_mul_16x16_s
$094F	$3006			MOVLW	6
$0950	$00F2			MOVWF	STACK_2
$0951	$0870			MOVF	STACK_0, 0
$0952	$00F4			MOVWF	STACK_4
$0953	$0871			MOVF	STACK_0+1, 0
$0954	$00F5			MOVWF	STACK_4+1
$0955	$0872			MOVF	STACK_2, 0
$0956	$	L_PWM1_Change_Duty_2:
$0956	$1903			BTFSC	STATUS, Z
$0957	$295D			GOTO	L_PWM1_Change_Duty_3
$0958	$0CF5			RRF	STACK_4+1, 1
$0959	$0CF4			RRF	STACK_4, 1
$095A	$13F5			BCF	STACK_4+1, 7
$095B	$3FFF			ADDLW	255
$095C	$2956			GOTO	L_PWM1_Change_Duty_2
$095D	$	L_PWM1_Change_Duty_3:
$095D	$0874			MOVF	STACK_4, 0
$095E	$00F0			MOVWF	STACK_0
$095F	$0DF0			RLF	STACK_0, 1
$0960	$1070			BCF	STACK_0, 0
$0961	$0DF0			RLF	STACK_0, 1
$0962	$1070			BCF	STACK_0, 0
$0963	$0DF0			RLF	STACK_0, 1
$0964	$1070			BCF	STACK_0, 0
$0965	$0DF0			RLF	STACK_0, 1
$0966	$1070			BCF	STACK_0, 0
$0967	$3030			MOVLW	48
$0968	$0570			ANDWF	STACK_0, 0
$0969	$00F3			MOVWF	STACK_3
$096A	$0874			MOVF	STACK_4, 0
$096B	$00F0			MOVWF	STACK_0
$096C	$0875			MOVF	STACK_4+1, 0
$096D	$00F1			MOVWF	STACK_0+1
$096E	$0CF1			RRF	STACK_0+1, 1
$096F	$0CF0			RRF	STACK_0, 1
$0970	$13F1			BCF	STACK_0+1, 7
$0971	$0CF1			RRF	STACK_0+1, 1
$0972	$0CF0			RRF	STACK_0, 1
$0973	$13F1			BCF	STACK_0+1, 7
$0974	$0870			MOVF	STACK_0, 0
$0975	$0095			MOVWF	CCPR1L
$0976	$300F			MOVLW	15
$0977	$0597			ANDWF	CCP1CON, 1
$0978	$0873			MOVF	STACK_3, 0
$0979	$0497			IORWF	CCP1CON, 1
$097A	$0008			RETURN
$08D8	$	_PWM2_Change_Duty:
$08D8	$1303			BCF	STATUS, RP1
$08D9	$1683			BSF	STATUS, RP0
$08DA	$0812			MOVF	PR2, 0
$08DB	$3F01			ADDLW	1
$08DC	$00F0			MOVWF	STACK_0
$08DD	$01F1			CLRF	STACK_0+1
$08DE	$1803			BTFSC	STATUS, C
$08DF	$0AF1			INCF	STACK_0+1, 1
$08E0	$1283			BCF	STATUS, RP0
$08E1	$0867			MOVF	FARG_PWM2_Change_Duty+0, 0
$08E2	$00F4			MOVWF	STACK_4
$08E3	$01F5			CLRF	STACK_4+1
$08E4	$204B			CALL	_mul_16x16_s
$08E5	$3006			MOVLW	6
$08E6	$00F2			MOVWF	STACK_2
$08E7	$0870			MOVF	STACK_0, 0
$08E8	$00F4			MOVWF	STACK_4
$08E9	$0871			MOVF	STACK_0+1, 0
$08EA	$00F5			MOVWF	STACK_4+1
$08EB	$0872			MOVF	STACK_2, 0
$08EC	$	L_PWM2_Change_Duty_0:
$08EC	$1903			BTFSC	STATUS, Z
$08ED	$28F3			GOTO	L_PWM2_Change_Duty_1
$08EE	$0CF5			RRF	STACK_4+1, 1
$08EF	$0CF4			RRF	STACK_4, 1
$08F0	$13F5			BCF	STACK_4+1, 7
$08F1	$3FFF			ADDLW	255
$08F2	$28EC			GOTO	L_PWM2_Change_Duty_0
$08F3	$	L_PWM2_Change_Duty_1:
$08F3	$0874			MOVF	STACK_4, 0
$08F4	$00F0			MOVWF	STACK_0
$08F5	$0DF0			RLF	STACK_0, 1
$08F6	$1070			BCF	STACK_0, 0
$08F7	$0DF0			RLF	STACK_0, 1
$08F8	$1070			BCF	STACK_0, 0
$08F9	$0DF0			RLF	STACK_0, 1
$08FA	$1070			BCF	STACK_0, 0
$08FB	$0DF0			RLF	STACK_0, 1
$08FC	$1070			BCF	STACK_0, 0
$08FD	$3030			MOVLW	48
$08FE	$0570			ANDWF	STACK_0, 0
$08FF	$00F3			MOVWF	STACK_3
$0900	$0874			MOVF	STACK_4, 0
$0901	$00F0			MOVWF	STACK_0
$0902	$0875			MOVF	STACK_4+1, 0
$0903	$00F1			MOVWF	STACK_0+1
$0904	$0CF1			RRF	STACK_0+1, 1
$0905	$0CF0			RRF	STACK_0, 1
$0906	$13F1			BCF	STACK_0+1, 7
$0907	$0CF1			RRF	STACK_0+1, 1
$0908	$0CF0			RRF	STACK_0, 1
$0909	$13F1			BCF	STACK_0+1, 7
$090A	$0870			MOVF	STACK_0, 0
$090B	$009B			MOVWF	CCPR2L
$090C	$300F			MOVLW	15
$090D	$059D			ANDWF	CCP2CON, 1
$090E	$0873			MOVF	STACK_3, 0
$090F	$049D			IORWF	CCP2CON, 1
$0910	$0008			RETURN
$0A71	$	_motor_RB:
;lfr_new.c,50 :: 		void motor_RB()         //RIGHT MOTOR REV DIR
;lfr_new.c,52 :: 		PORTC.F7 = 0;
$0A71	$1303			BCF	STATUS, RP1
$0A72	$1283			BCF	STATUS, RP0
$0A73	$1387			BCF	PORTC, 7
;lfr_new.c,53 :: 		PORTC.F6 = 1;
$0A74	$1707			BSF	PORTC, 6
;lfr_new.c,54 :: 		}
$0A75	$0008			RETURN
$0A62	$	_motor_LB:
;lfr_new.c,62 :: 		void motor_LB()         //LEFT MOTOR REV DIR
;lfr_new.c,64 :: 		PORTC.F5 = 0;
$0A62	$1303			BCF	STATUS, RP1
$0A63	$1283			BCF	STATUS, RP0
$0A64	$1287			BCF	PORTC, 5
;lfr_new.c,65 :: 		PORTC.F4 = 1;
$0A65	$1607			BSF	PORTC, 4
;lfr_new.c,66 :: 		}
$0A66	$0008			RETURN
$0800	$	GlobalInilfr_new:
$0800	$3096			MOVLW	150
$0801	$1303			BCF	STATUS, RP1
$0802	$1283			BCF	STATUS, RP0
$0803	$00BC			MOVWF	_basespeed+0
$0804	$3064			MOVLW	100
$0805	$00BD			MOVWF	_Kp+0
$0806	$3005			MOVLW	5
$0807	$00BE			MOVWF	_Ki+0
$0808	$300A			MOVLW	10
$0809	$00BF			MOVWF	_Kd+0
$080A	$3000			MOVLW	0
$080B	$00C0			MOVWF	_rightpulse+0
$080C	$3000			MOVLW	0
$080D	$00C1			MOVWF	_rightpulse+1
$080E	$3000			MOVLW	0
$080F	$00C2			MOVWF	_rightpulse+2
$0810	$3000			MOVLW	0
$0811	$00C3			MOVWF	_rightpulse+3
$0812	$3000			MOVLW	0
$0813	$00C4			MOVWF	_leftpulse+0
$0814	$3000			MOVLW	0
$0815	$00C5			MOVWF	_leftpulse+1
$0816	$3000			MOVLW	0
$0817	$00C6			MOVWF	_leftpulse+2
$0818	$3000			MOVLW	0
$0819	$00C7			MOVWF	_leftpulse+3
$081A	$3000			MOVLW	0
$081B	$00B4			MOVWF	_perror+0
$081C	$3000			MOVLW	0
$081D	$00B5			MOVWF	_perror+1
$081E	$3000			MOVLW	0
$081F	$00B6			MOVWF	_perror+2
$0820	$3000			MOVLW	0
$0821	$00B7			MOVWF	_perror+3
$0822	$3000			MOVLW	0
$0823	$00B8			MOVWF	_error+0
$0824	$3000			MOVLW	0
$0825	$00B9			MOVWF	_error+1
$0826	$3000			MOVLW	0
$0827	$00BA			MOVWF	_error+2
$0828	$3000			MOVLW	0
$0829	$00BB			MOVWF	_error+3
$082A	$3000			MOVLW	0
$082B	$00C8			MOVWF	_PROPORTIONAL+0
$082C	$3000			MOVLW	0
$082D	$00C9			MOVWF	_PROPORTIONAL+1
$082E	$3000			MOVLW	0
$082F	$00CA			MOVWF	_PROPORTIONAL+2
$0830	$3000			MOVLW	0
$0831	$00CB			MOVWF	_PROPORTIONAL+3
$0832	$3000			MOVLW	0
$0833	$00CC			MOVWF	_INTEGRAL+0
$0834	$3000			MOVLW	0
$0835	$00CD			MOVWF	_INTEGRAL+1
$0836	$3000			MOVLW	0
$0837	$00CE			MOVWF	_INTEGRAL+2
$0838	$3000			MOVLW	0
$0839	$00CF			MOVWF	_INTEGRAL+3
$083A	$3000			MOVLW	0
$083B	$00D0			MOVWF	_DERIVATIVE+0
$083C	$3000			MOVLW	0
$083D	$00D1			MOVWF	_DERIVATIVE+1
$083E	$3000			MOVLW	0
$083F	$00D2			MOVWF	_DERIVATIVE+2
$0840	$3000			MOVLW	0
$0841	$00D3			MOVWF	_DERIVATIVE+3
$0842	$3000			MOVLW	0
$0843	$00D4			MOVWF	_correction+0
$0844	$3000			MOVLW	0
$0845	$00D5			MOVWF	_correction+1
$0846	$3000			MOVLW	0
$0847	$00D6			MOVWF	_correction+2
$0848	$3000			MOVLW	0
$0849	$00D7			MOVWF	_correction+3
$084A	$0008			RETURN
$09EA	$	_Equals_Double:
$09EA	$1303			BCF	STATUS, RP1
$09EB	$1283			BCF	STATUS, RP0
$09EC	$0873			MOVF	STACK_3, W
$09ED	$0677			XORWF	STACK_7, W
$09EE	$1D03			BTFSS	STATUS, Z
$09EF	$29FD			GOTO	EQU_FALSE
$09F0	$0872			MOVF	STACK_2, W
$09F1	$0676			XORWF	STACK_6, W
$09F2	$1D03			BTFSS	STATUS, Z
$09F3	$29FD			GOTO	EQU_FALSE
$09F4	$0871			MOVF	STACK_1, W
$09F5	$0675			XORWF	STACK_5, W
$09F6	$1D03			BTFSS	STATUS, Z
$09F7	$29FD			GOTO	EQU_FALSE
$09F8	$0870			MOVF	STACK_0, W
$09F9	$0674			XORWF	STACK_4, W
$09FA	$1903			BTFSC	STATUS, Z
$09FB	$1503			BSF	STATUS, Z
$09FC	$0008			RETURN
$09FD	$	EQU_FALSE:
$09FD	$1103			BCF	STATUS, Z
$09FE	$0008			RETURN
$09FF	$0008			RETURN
$0A00	$	_Byte2Double:
$0A00	$1303			BCF	STATUS, RP1
$0A01	$1283			BCF	STATUS, RP0
$0A02	$	FLO08U32:
$0A02	$0870			MOVF	STACK_0, W
$0A03	$00F8			MOVWF	STACK_8
$0A04	$01FB			CLRF	STACK_11
$0A05	$01FC			CLRF	STACK_12
$0A06	$309E			MOVLW	0x9E
$0A07	$00F3			MOVWF	STACK_3
$0A08	$01FA			CLRF	STACK_10
$0A09	$01F2			CLRF	STACK_2
$0A0A	$01F1			CLRF	STACK_1
$0A0B	$01F0			CLRF	STACK_0
$0A0C	$3002			MOVLW	0x02
$0A0D	$00FC			MOVWF	STACK_12
$0A0E	$118A			BCF	PCLATH, 3
$0A0F	$2642			CALL	_NRM4032
$0A10	$158A			BSF	PCLATH, 3
$0A11	$0008			RETURN
$05DD	$	_Mul_32x32_FP:
$05DD	$1303			BCF	STATUS, RP1
$05DE	$1283			BCF	STATUS, RP0
$05DF	$	FPM32:
$05DF	$01FB			CLRF	STACK_11
$05E0	$0873			MOVF	STACK_3, W
$05E1	$1D03			BTFSS	STATUS, Z
$05E2	$0877			MOVF	STACK_7, W
$05E3	$1903			BTFSC	STATUS, Z
$05E4	$2E34			GOTO	JPMRES032
$05E5	$	M32BNE0:
$05E5	$0872			MOVF	STACK_2, W
$05E6	$0676			XORWF	STACK_6, W
$05E7	$00FA			MOVWF	STACK_10
$05E8	$0877			MOVF	STACK_7, W
$05E9	$07F3			ADDWF	STACK_3, F
$05EA	$307E			MOVLW	126
$05EB	$1C03			BTFSS	STATUS, C
$05EC	$2DF1			GOTO	MTUN32
$05ED	$02F3			SUBWF	STACK_3, F
$05EE	$1803			BTFSC	STATUS, C
$05EF	$2E39			GOTO	JPMSETFOV32
$05F0	$2DF4			GOTO	MOK32
$05F1	$	MTUN32:
$05F1	$02F3			SUBWF	STACK_3, F
$05F2	$1C03			BTFSS	STATUS, C
$05F3	$2E3C			GOTO	JPMSETFUN32
$05F4	$	MOK32:
$05F4	$0872			MOVF	STACK_2, W
$05F5	$00F8			MOVWF	STACK_8
$05F6	$0871			MOVF	STACK_1, W
$05F7	$00FC			MOVWF	STACK_12
$05F8	$0870			MOVF	STACK_0, W
$05F9	$00FD			MOVWF	STACK_13
$05FA	$17F8			BSF	STACK_8, 7
$05FB	$17F6			BSF	STACK_6, 7
$05FC	$1003			BCF	STATUS, C
$05FD	$01F2			CLRF	STACK_2
$05FE	$01F1			CLRF	STACK_1
$05FF	$01F0			CLRF	STACK_0
$0600	$3018			MOVLW	24
$0601	$00A0			MOVWF	__math_tempbD
$0602	$	MLOOP32:
$0602	$1C7D			BTFSS	STACK_13, 0
$0603	$2E0E			GOTO	MNOADD32
$0604	$	MADD32:
$0604	$0874			MOVF	STACK_4, W
$0605	$07F0			ADDWF	STACK_0, F
$0606	$0875			MOVF	STACK_5, W
$0607	$1803			BTFSC	STATUS, C
$0608	$0F75			INCFSZ	STACK_5, W
$0609	$07F1			ADDWF	STACK_1, F
$060A	$0876			MOVF	STACK_6, W
$060B	$1803			BTFSC	STATUS, C
$060C	$0F76			INCFSZ	STACK_6, W
$060D	$07F2			ADDWF	STACK_2, F
$060E	$	MNOADD32:
$060E	$0CF2			RRF	STACK_2, F
$060F	$0CF1			RRF	STACK_1, F
$0610	$0CF0			RRF	STACK_0, F
$0611	$0CF8			RRF	STACK_8, F
$0612	$0CFC			RRF	STACK_12, F
$0613	$0CFD			RRF	STACK_13, F
$0614	$1003			BCF	STATUS, C
$0615	$0BA0			DECFSZ	__math_tempbD, F
$0616	$2E02			GOTO	MLOOP32
$0617	$1BF2			BTFSC	STACK_2, 7
$0618	$2E1E			GOTO	MROUND32
$0619	$0DF8			RLF	STACK_8, F
$061A	$0DF0			RLF	STACK_0, F
$061B	$0DF1			RLF	STACK_1, F
$061C	$0DF2			RLF	STACK_2, F
$061D	$03F3			DECF	STACK_3, F
$061E	$	MROUND32:
$061E	$1B7B			BTFSC	STACK_11, 6
$061F	$1C70			BTFSS	STACK_0, 0
$0620	$2E30			GOTO	MUL32OK
$0621	$1FF8			BTFSS	STACK_8, 7
$0622	$2E30			GOTO	MUL32OK
$0623	$0AF0			INCF	STACK_0, F
$0624	$1903			BTFSC	STATUS, Z
$0625	$0AF1			INCF	STACK_1, F
$0626	$1903			BTFSC	STATUS, Z
$0627	$0AF2			INCF	STACK_2, F
$0628	$1D03			BTFSS	STATUS, Z
$0629	$2E30			GOTO	MUL32OK
$062A	$0CF2			RRF	STACK_2, F
$062B	$0CF1			RRF	STACK_1, F
$062C	$0CF0			RRF	STACK_0, F
$062D	$0AF3			INCF	STACK_3, F
$062E	$1903			BTFSC	STATUS, Z
$062F	$2E39			GOTO	JPMSETFOV32
$0630	$	MUL32OK:
$0630	$1FFA			BTFSS	STACK_10, 7
$0631	$13F2			BCF	STACK_2, 7
$0632	$3000			MOVLW	0x00
$0633	$2E40			GOTO	MUL32EEE
$0634	$	JPMRES032:
$0634	$3001			MOVLW	0x01
$0635	$158A			BSF	PCLATH, 3
$0636	$2237			CALL	_RES032
$0637	$118A			BCF	PCLATH, 3
$0638	$2E40			GOTO	MUL32EEE
$0639	$	JPMSETFOV32:
$0639	$3002			MOVLW	0x02
$063A	$2745			CALL	_SETFOV32
$063B	$2E40			GOTO	MUL32EEE
$063C	$	JPMSETFUN32:
$063C	$3004			MOVLW	0x04
$063D	$158A			BSF	PCLATH, 3
$063E	$2221			CALL	_SETFUN32
$063F	$118A			BCF	PCLATH, 3
$0640	$	MUL32EEE:
$0640	$0000			NOP
$0641	$0008			RETURN
$06F5	$	_Compare_Double:
$06F5	$1303			BCF	STATUS, RP1
$06F6	$1283			BCF	STATUS, RP0
$06F7	$01FA			CLRF	STACK_10
$06F8	$0873			MOVF	STACK_3, W
$06F9	$1D03			BTFSS	STATUS, Z
$06FA	$147A			BSF	STACK_10, 0
$06FB	$0877			MOVF	STACK_7, W
$06FC	$1D03			BTFSS	STATUS, Z
$06FD	$14FA			BSF	STACK_10, 1
$06FE	$087A			MOVF	STACK_10, W
$06FF	$1903			BTFSC	STATUS, Z
$0700	$2F41			GOTO	COMPARE_EQU
$0701	$3A03			XORLW	0x03
$0702	$1903			BTFSC	STATUS, Z
$0703	$2F0C			GOTO	COMPARE_NOTZERO
$0704	$187A			BTFSC	STACK_10, 0
$0705	$2F09			GOTO	COMPARE_XNOTZERO
$0706	$	COMPARE_YNOTZERO:
$0706	$1FF6			BTFSS	STACK_6, 7
$0707	$2F3F			GOTO	COMPARE_LT
$0708	$2F3D			GOTO	COMPARE_GT
$0709	$	COMPARE_XNOTZERO:
$0709	$1FF2			BTFSS	STACK_2, 7
$070A	$2F3D			GOTO	COMPARE_GT
$070B	$2F3F			GOTO	COMPARE_LT
$070C	$	COMPARE_NOTZERO:
$070C	$0872			MOVF	STACK_2, W
$070D	$3980			ANDLW	0x80
$070E	$00FA			MOVWF	STACK_10
$070F	$13F2			BCF	STACK_2, 7
$0710	$0876			MOVF	STACK_6, W
$0711	$3980			ANDLW	0x80
$0712	$13F6			BCF	STACK_6, 7
$0713	$067A			XORWF	STACK_10, W
$0714	$1903			BTFSC	STATUS, Z
$0715	$2F1A			GOTO	COMPARE_TESTALL
$0716	$087A			MOVF	STACK_10, W
$0717	$1903			BTFSC	STATUS, Z
$0718	$2F3D			GOTO	COMPARE_GT
$0719	$2F3F			GOTO	COMPARE_LT
$071A	$	COMPARE_TESTALL:
$071A	$0877			MOVF	STACK_7, W
$071B	$0273			SUBWF	STACK_3, W
$071C	$1903			BTFSC	STATUS, Z
$071D	$2F21			GOTO	COMPARE_C1
$071E	$1C03			BTFSS	STATUS, C
$071F	$2F35			GOTO	GT_FALSE
$0720	$2F39			GOTO	GT_TRUE
$0721	$	COMPARE_C1:
$0721	$0876			MOVF	STACK_6, W
$0722	$0272			SUBWF	STACK_2, W
$0723	$1903			BTFSC	STATUS, Z
$0724	$2F28			GOTO	COMPARE_C2
$0725	$1C03			BTFSS	STATUS, C
$0726	$2F35			GOTO	GT_FALSE
$0727	$2F39			GOTO	GT_TRUE
$0728	$	COMPARE_C2:
$0728	$0875			MOVF	STACK_5, W
$0729	$0271			SUBWF	STACK_1, W
$072A	$1903			BTFSC	STATUS, Z
$072B	$2F2F			GOTO	COMPARE_C3
$072C	$1C03			BTFSS	STATUS, C
$072D	$2F35			GOTO	GT_FALSE
$072E	$2F39			GOTO	GT_TRUE
$072F	$	COMPARE_C3:
$072F	$0874			MOVF	STACK_4, W
$0730	$0270			SUBWF	STACK_0, W
$0731	$1903			BTFSC	STATUS, Z
$0732	$2F41			GOTO	COMPARE_EQU
$0733	$1803			BTFSC	STATUS, C
$0734	$2F39			GOTO	GT_TRUE
$0735	$	GT_FALSE:
$0735	$08FA			MOVF	STACK_10, F
$0736	$1903			BTFSC	STATUS, Z
$0737	$2F3F			GOTO	COMPARE_LT
$0738	$2F3D			GOTO	COMPARE_GT
$0739	$	GT_TRUE:
$0739	$08FA			MOVF	STACK_10, F
$073A	$1903			BTFSC	STATUS, Z
$073B	$2F3D			GOTO	COMPARE_GT
$073C	$2F3F			GOTO	COMPARE_LT
$073D	$	COMPARE_GT:
$073D	$1403			BSF	STATUS, C
$073E	$0008			RETURN
$073F	$	COMPARE_LT:
$073F	$1003			BCF	STATUS, C
$0740	$0008			RETURN
$0741	$	COMPARE_EQU:
$0741	$1403			BSF	STATUS, C
$0742	$1503			BSF	STATUS, Z
$0743	$0008			RETURN
$0744	$0008			RETURN
$0895	$	_Double2Byte:
$0895	$1303			BCF	STATUS, RP1
$0896	$1283			BCF	STATUS, RP0
$0897	$	INT32U08:
$0897	$01FB			CLRF	STACK_11
$0898	$01FC			CLRF	STACK_12
$0899	$01FA			CLRF	STACK_10
$089A	$0873			MOVF	STACK_3, W
$089B	$1903			BTFSC	STATUS, Z
$089C	$28C2			GOTO	IRES008
$089D	$13FA			BCF	STACK_10, 7
$089E	$17F2			BSF	STACK_2, 7
$089F	$3086			MOVLW	134
$08A0	$02F3			SUBWF	STACK_3, F
$08A1	$1BF3			BTFSC	STACK_3, 7
$08A2	$28A6			GOTO	SETEXP08
$08A3	$1903			BTFSC	STATUS, Z
$08A4	$28A6			GOTO	SETEXP08
$08A5	$28C4			GOTO	SETIOV08
$08A6	$	SETEXP08:
$08A6	$09F3			COMF	STACK_3, F
$08A7	$0AF3			INCF	STACK_3, F
$08A8	$3008			MOVLW	8
$08A9	$0273			SUBWF	STACK_3, W
$08AA	$1C03			BTFSS	STATUS, C
$08AB	$28B3			GOTO	TSHIFT3208
$08AC	$00F3			MOVWF	STACK_3
$08AD	$0DF2			RLF	STACK_2, F
$08AE	$01F2			CLRF	STACK_2
$08AF	$0873			MOVF	STACK_3, W
$08B0	$1D03			BTFSS	STATUS, Z
$08B1	$1003			BCF	STATUS, C
$08B2	$28BA			GOTO	SHIFT3208OK
$08B3	$	TSHIFT3208:
$08B3	$0873			MOVF	STACK_3, W
$08B4	$1903			BTFSC	STATUS, Z
$08B5	$28BA			GOTO	SHIFT3208OK
$08B6	$	SHIFT3208:
$08B6	$1003			BCF	STATUS, C
$08B7	$0CF2			RRF	STACK_2, F
$08B8	$0BF3			DECFSZ	STACK_3, F
$08B9	$28B6			GOTO	SHIFT3208
$08BA	$	SHIFT3208OK:
$08BA	$1B7B			BTFSC	STACK_11, 6
$08BB	$1C72			BTFSS	STACK_2, 0
$08BC	$28C2			GOTO	INT3208OK
$08BD	$1C03			BTFSS	STATUS, C
$08BE	$28C2			GOTO	INT3208OK
$08BF	$0AF2			INCF	STACK_2, F
$08C0	$1903			BTFSC	STATUS, Z
$08C1	$28C9			GOTO	D2B_JPKSETIOV3224
$08C2	$	INT3208OK:
$08C2	$	IRES008:
$08C2	$01F1			CLRF	STACK_1
$08C3	$28CC			GOTO	INT3208EOK
$08C4	$	SETIOV08:
$08C4	$147B			BSF	STACK_11, 0
$08C5	$1FFB			BTFSS	STACK_11, 7
$08C6	$28CF			GOTO	INT3208EER
$08C7	$01F1			CLRF	STACK_1
$08C8	$28CF			GOTO	INT3208EER
$08C9	$	D2B_JPKSETIOV3224:
$08C9	$3001			MOVLW	0x01
$08CA	$00FC			MOVWF	STACK_12
$08CB	$28D1			GOTO	INT3208EEE
$08CC	$	INT3208EOK:
$08CC	$3000			MOVLW	0x00
$08CD	$00FC			MOVWF	STACK_12
$08CE	$28D1			GOTO	INT3208EEE
$08CF	$	INT3208EER:
$08CF	$30FF			MOVLW	0xFF
$08D0	$00FC			MOVWF	STACK_12
$08D1	$	INT3208EEE:
$08D1	$08FC			MOVF	STACK_12, F
$08D2	$1903			BTFSC	STATUS, Z
$08D3	$28D5			GOTO	L_Double2Byte_0
$08D4	$2212			CALL	_SETIOV3224
$08D5	$	L_Double2Byte_0:
$08D5	$0872			MOVF	STACK_2, W
$08D6	$00F0			MOVWF	STACK_0
$08D7	$0008			RETURN
$0031	$	_main:
;lfr_new.c,142 :: 		void main()
;lfr_new.c,145 :: 		initport();
$0031	$158A			BSF	PCLATH, 3
$0032	$2000			CALL	GlobalInilfr_new
$0033	$118A			BCF	PCLATH, 3
$0034	$158A			BSF	PCLATH, 3
$0035	$21B7			CALL	_initport
$0036	$118A			BCF	PCLATH, 3
;lfr_new.c,146 :: 		initpwm();
$0037	$158A			BSF	PCLATH, 3
$0038	$21A6			CALL	_initpwm
$0039	$118A			BCF	PCLATH, 3
;lfr_new.c,147 :: 		while(1)
$003A	$	L_main_9:
;lfr_new.c,149 :: 		indicator();
$003A	$26A4			CALL	_indicator
;lfr_new.c,150 :: 		CalcError();
$003B	$235A			CALL	_CalcError
;lfr_new.c,151 :: 		if((error == 0) && (s4+s5==2))
$003C	$01F4			CLRF	STACK_4
$003D	$01F5			CLRF	STACK_4+1
$003E	$01F6			CLRF	STACK_4+2
$003F	$01F7			CLRF	STACK_4+3
$0040	$0838			MOVF	_error, 0
$0041	$00F0			MOVWF	STACK_0
$0042	$0839			MOVF	_error+1, 0
$0043	$00F1			MOVWF	STACK_0+1
$0044	$083A			MOVF	_error+2, 0
$0045	$00F2			MOVWF	STACK_0+2
$0046	$083B			MOVF	_error+3, 0
$0047	$00F3			MOVWF	STACK_0+3
$0048	$158A			BSF	PCLATH, 3
$0049	$21EA			CALL	_equals_double
$004A	$118A			BCF	PCLATH, 3
$004B	$3001			MOVLW	1
$004C	$1D03			BTFSS	STATUS, Z
$004D	$3000			MOVLW	0
$004E	$00F0			MOVWF	STACK_0
$004F	$0870			MOVF	STACK_0, 0
$0050	$1903			BTFSC	STATUS, Z
$0051	$2882			GOTO	L_main_13
$0052	$082B			MOVF	_s5, 0
$0053	$0729			ADDWF	_s4, 0
$0054	$00F4			MOVWF	STACK_4
$0055	$082A			MOVF	_s4+1, 0
$0056	$1803			BTFSC	STATUS, C
$0057	$3F01			ADDLW	1
$0058	$072C			ADDWF	_s5+1, 0
$0059	$00F5			MOVWF	STACK_4+1
$005A	$3000			MOVLW	0
$005B	$0675			XORWF	STACK_4+1, 0
$005C	$1D03			BTFSS	STATUS, Z
$005D	$2860			GOTO	L_main_35
$005E	$3002			MOVLW	2
$005F	$0674			XORWF	STACK_4, 0
$0060	$	L_main_35:
$0060	$1D03			BTFSS	STATUS, Z
$0061	$2882			GOTO	L_main_13
$0062	$	L171_ex_L_main_13:
;lfr_new.c,153 :: 		T1CON.TMR1ON    = 0;
$0062	$1010			BCF	T1CON, 0
;lfr_new.c,154 :: 		motor_LF();					        	    //FWD AT FULL SPEED
$0063	$158A			BSF	PCLATH, 3
$0064	$226C			CALL	_motor_LF
$0065	$118A			BCF	PCLATH, 3
;lfr_new.c,155 :: 		motor_RF();
$0066	$158A			BSF	PCLATH, 3
$0067	$2267			CALL	_motor_RF
$0068	$118A			BCF	PCLATH, 3
;lfr_new.c,156 :: 		PWM1_CHANGE_DUTY(255);
$0069	$30FF			MOVLW	255
$006A	$00E7			MOVWF	FARG_PWM1_Change_Duty+0
$006B	$158A			BSF	PCLATH, 3
$006C	$2142			CALL	_PWM1_Change_Duty
$006D	$118A			BCF	PCLATH, 3
;lfr_new.c,157 :: 		PWM2_CHANGE_DUTY(255);
$006E	$30FF			MOVLW	255
$006F	$00E7			MOVWF	FARG_PWM2_Change_Duty+0
$0070	$158A			BSF	PCLATH, 3
$0071	$20D8			CALL	_PWM2_Change_Duty
$0072	$118A			BCF	PCLATH, 3
;lfr_new.c,158 :: 		delay_ms(10);
$0073	$300D			MOVLW	13
$0074	$00FB			MOVWF	STACK_11
$0075	$30FF			MOVLW	255
$0076	$00FA			MOVWF	STACK_10
$0077	$0BFB			DECFSZ	STACK_11, F
$0078	$287A			GOTO	$+2
$0079	$287D			GOTO	$+4
$007A	$0BFA			DECFSZ	STACK_10, F
$007B	$287A			GOTO	$-1
$007C	$2877			GOTO	$-5
$007D	$30F3			MOVLW	243
$007E	$00FA			MOVWF	STACK_10
$007F	$0BFA			DECFSZ	STACK_10, F
$0080	$287F			GOTO	$-1
$0081	$0000			NOP
;lfr_new.c,159 :: 		}
$0082	$	L_main_13:
;lfr_new.c,160 :: 		if((s1+s2+s3+s4+s5+s6+s7+s8) == 0)		//ROBOT HAS OVERSHOOT
$0082	$0825			MOVF	_s2, 0
$0083	$0723			ADDWF	_s1, 0
$0084	$00F0			MOVWF	STACK_0
$0085	$0824			MOVF	_s1+1, 0
$0086	$1803			BTFSC	STATUS, C
$0087	$3F01			ADDLW	1
$0088	$0726			ADDWF	_s2+1, 0
$0089	$00F1			MOVWF	STACK_0+1
$008A	$0827			MOVF	_s3, 0
$008B	$07F0			ADDWF	STACK_0, 1
$008C	$0828			MOVF	_s3+1, 0
$008D	$1803			BTFSC	STATUS, C
$008E	$3F01			ADDLW	1
$008F	$07F1			ADDWF	STACK_0+1, 1
$0090	$0829			MOVF	_s4, 0
$0091	$07F0			ADDWF	STACK_0, 1
$0092	$082A			MOVF	_s4+1, 0
$0093	$1803			BTFSC	STATUS, C
$0094	$3F01			ADDLW	1
$0095	$07F1			ADDWF	STACK_0+1, 1
$0096	$082B			MOVF	_s5, 0
$0097	$07F0			ADDWF	STACK_0, 1
$0098	$082C			MOVF	_s5+1, 0
$0099	$1803			BTFSC	STATUS, C
$009A	$3F01			ADDLW	1
$009B	$07F1			ADDWF	STACK_0+1, 1
$009C	$082D			MOVF	_s6, 0
$009D	$07F0			ADDWF	STACK_0, 1
$009E	$082E			MOVF	_s6+1, 0
$009F	$1803			BTFSC	STATUS, C
$00A0	$3F01			ADDLW	1
$00A1	$07F1			ADDWF	STACK_0+1, 1
$00A2	$082F			MOVF	_s7, 0
$00A3	$07F0			ADDWF	STACK_0, 1
$00A4	$0830			MOVF	_s7+1, 0
$00A5	$1803			BTFSC	STATUS, C
$00A6	$3F01			ADDLW	1
$00A7	$07F1			ADDWF	STACK_0+1, 1
$00A8	$0831			MOVF	_s8, 0
$00A9	$0770			ADDWF	STACK_0, 0
$00AA	$00F4			MOVWF	STACK_4
$00AB	$0871			MOVF	STACK_0+1, 0
$00AC	$1803			BTFSC	STATUS, C
$00AD	$3F01			ADDLW	1
$00AE	$0732			ADDWF	_s8+1, 0
$00AF	$00F5			MOVWF	STACK_4+1
$00B0	$3000			MOVLW	0
$00B1	$0675			XORWF	STACK_4+1, 0
$00B2	$1D03			BTFSS	STATUS, Z
$00B3	$28B6			GOTO	L_main_36
$00B4	$3000			MOVLW	0
$00B5	$0674			XORWF	STACK_4, 0
$00B6	$	L_main_36:
$00B6	$1D03			BTFSS	STATUS, Z
$00B7	$2902			GOTO	L_main_14
;lfr_new.c,162 :: 		T1CON.TMR1ON = 0;
$00B8	$1010			BCF	T1CON, 0
;lfr_new.c,163 :: 		if(lastreading == 'r')				  //CHECKS IF THE LAST SENSOR ACTIVATED WAS RIGHT
$00B9	$0833			MOVF	_lastreading, 0
$00BA	$3A72			XORLW	114
$00BB	$1D03			BTFSS	STATUS, Z
$00BC	$28DE			GOTO	L_main_15
;lfr_new.c,165 :: 		T1CON.TMR1ON = 0;
$00BD	$1010			BCF	T1CON, 0
;lfr_new.c,166 :: 		motor_RB();						        //TURN RIGHT AT FULL SPEED
$00BE	$158A			BSF	PCLATH, 3
$00BF	$2271			CALL	_motor_RB
$00C0	$118A			BCF	PCLATH, 3
;lfr_new.c,167 :: 		motor_LF();
$00C1	$158A			BSF	PCLATH, 3
$00C2	$226C			CALL	_motor_LF
$00C3	$118A			BCF	PCLATH, 3
;lfr_new.c,168 :: 		PWM1_CHANGE_DUTY(255);
$00C4	$30FF			MOVLW	255
$00C5	$00E7			MOVWF	FARG_PWM1_Change_Duty+0
$00C6	$158A			BSF	PCLATH, 3
$00C7	$2142			CALL	_PWM1_Change_Duty
$00C8	$118A			BCF	PCLATH, 3
;lfr_new.c,169 :: 		PWM2_CHANGE_DUTY(255);
$00C9	$30FF			MOVLW	255
$00CA	$00E7			MOVWF	FARG_PWM2_Change_Duty+0
$00CB	$158A			BSF	PCLATH, 3
$00CC	$20D8			CALL	_PWM2_Change_Duty
$00CD	$118A			BCF	PCLATH, 3
;lfr_new.c,170 :: 		delay_ms(10);
$00CE	$300D			MOVLW	13
$00CF	$00FB			MOVWF	STACK_11
$00D0	$30FF			MOVLW	255
$00D1	$00FA			MOVWF	STACK_10
$00D2	$0BFB			DECFSZ	STACK_11, F
$00D3	$28D5			GOTO	$+2
$00D4	$28D8			GOTO	$+4
$00D5	$0BFA			DECFSZ	STACK_10, F
$00D6	$28D5			GOTO	$-1
$00D7	$28D2			GOTO	$-5
$00D8	$30F3			MOVLW	243
$00D9	$00FA			MOVWF	STACK_10
$00DA	$0BFA			DECFSZ	STACK_10, F
$00DB	$28DA			GOTO	$-1
$00DC	$0000			NOP
;lfr_new.c,172 :: 		}
$00DD	$2902			GOTO	L_main_16
$00DE	$	L_main_15:
;lfr_new.c,173 :: 		else if(lastreading == 'l')			  //CHECKS IF THE LAST SENSOR ACTIVATED WAS LEFT
$00DE	$0833			MOVF	_lastreading, 0
$00DF	$3A6C			XORLW	108
$00E0	$1D03			BTFSS	STATUS, Z
$00E1	$2902			GOTO	L_main_17
;lfr_new.c,175 :: 		T1CON.TMR1ON = 0;
$00E2	$1010			BCF	T1CON, 0
;lfr_new.c,176 :: 		motor_LB();					        	//TURN LEFT AT FULL SPEED
$00E3	$158A			BSF	PCLATH, 3
$00E4	$2262			CALL	_motor_LB
$00E5	$118A			BCF	PCLATH, 3
;lfr_new.c,177 :: 		motor_RF();
$00E6	$158A			BSF	PCLATH, 3
$00E7	$2267			CALL	_motor_RF
$00E8	$118A			BCF	PCLATH, 3
;lfr_new.c,178 :: 		PWM1_CHANGE_DUTY(255);
$00E9	$30FF			MOVLW	255
$00EA	$00E7			MOVWF	FARG_PWM1_Change_Duty+0
$00EB	$158A			BSF	PCLATH, 3
$00EC	$2142			CALL	_PWM1_Change_Duty
$00ED	$118A			BCF	PCLATH, 3
;lfr_new.c,179 :: 		PWM2_CHANGE_DUTY(255);
$00EE	$30FF			MOVLW	255
$00EF	$00E7			MOVWF	FARG_PWM2_Change_Duty+0
$00F0	$158A			BSF	PCLATH, 3
$00F1	$20D8			CALL	_PWM2_Change_Duty
$00F2	$118A			BCF	PCLATH, 3
;lfr_new.c,180 :: 		delay_ms(10);
$00F3	$300D			MOVLW	13
$00F4	$00FB			MOVWF	STACK_11
$00F5	$30FF			MOVLW	255
$00F6	$00FA			MOVWF	STACK_10
$00F7	$0BFB			DECFSZ	STACK_11, F
$00F8	$28FA			GOTO	$+2
$00F9	$28FD			GOTO	$+4
$00FA	$0BFA			DECFSZ	STACK_10, F
$00FB	$28FA			GOTO	$-1
$00FC	$28F7			GOTO	$-5
$00FD	$30F3			MOVLW	243
$00FE	$00FA			MOVWF	STACK_10
$00FF	$0BFA			DECFSZ	STACK_10, F
$0100	$28FF			GOTO	$-1
$0101	$0000			NOP
;lfr_new.c,182 :: 		}
$0102	$	L_main_17:
$0102	$	L_main_16:
;lfr_new.c,184 :: 		}
$0102	$	L_main_14:
;lfr_new.c,185 :: 		if ( counter>200)
$0102	$0822			MOVF	_counter+1, 0
$0103	$3C00			SUBLW	0
$0104	$1D03			BTFSS	STATUS, Z
$0105	$2908			GOTO	L_main_37
$0106	$0821			MOVF	_counter, 0
$0107	$3CC8			SUBLW	200
$0108	$	L_main_37:
$0108	$1803			BTFSC	STATUS, C
$0109	$2910			GOTO	L_main_18
;lfr_new.c,187 :: 		T1CON.TMR1ON    = 0;
$010A	$1010			BCF	T1CON, 0
;lfr_new.c,188 :: 		PORTC.F7 = 0;
$010B	$1387			BCF	PORTC, 7
;lfr_new.c,189 :: 		PORTC.F6 = 0;
$010C	$1307			BCF	PORTC, 6
;lfr_new.c,190 :: 		PORTC.F5 = 0;
$010D	$1287			BCF	PORTC, 5
;lfr_new.c,191 :: 		PORTC.F4 = 0;
$010E	$1207			BCF	PORTC, 4
;lfr_new.c,192 :: 		while(1);
$010F	$	L_main_19:
$010F	$290F			GOTO	L_main_19
;lfr_new.c,193 :: 		}
$0110	$	L_main_18:
;lfr_new.c,194 :: 		if( (s1+s2+s3+s4+s5+s6+s7) == 7 || (s2+s3+s4+s5+s6+s7+s8) == 7 || (s1+s2+s3+s4+s5+s6+s7+s8) == 8)
$0110	$0825			MOVF	_s2, 0
$0111	$0723			ADDWF	_s1, 0
$0112	$00F0			MOVWF	STACK_0
$0113	$0824			MOVF	_s1+1, 0
$0114	$1803			BTFSC	STATUS, C
$0115	$3F01			ADDLW	1
$0116	$0726			ADDWF	_s2+1, 0
$0117	$00F1			MOVWF	STACK_0+1
$0118	$0827			MOVF	_s3, 0
$0119	$07F0			ADDWF	STACK_0, 1
$011A	$0828			MOVF	_s3+1, 0
$011B	$1803			BTFSC	STATUS, C
$011C	$3F01			ADDLW	1
$011D	$07F1			ADDWF	STACK_0+1, 1
$011E	$0829			MOVF	_s4, 0
$011F	$07F0			ADDWF	STACK_0, 1
$0120	$082A			MOVF	_s4+1, 0
$0121	$1803			BTFSC	STATUS, C
$0122	$3F01			ADDLW	1
$0123	$07F1			ADDWF	STACK_0+1, 1
$0124	$082B			MOVF	_s5, 0
$0125	$07F0			ADDWF	STACK_0, 1
$0126	$082C			MOVF	_s5+1, 0
$0127	$1803			BTFSC	STATUS, C
$0128	$3F01			ADDLW	1
$0129	$07F1			ADDWF	STACK_0+1, 1
$012A	$082D			MOVF	_s6, 0
$012B	$07F0			ADDWF	STACK_0, 1
$012C	$082E			MOVF	_s6+1, 0
$012D	$1803			BTFSC	STATUS, C
$012E	$3F01			ADDLW	1
$012F	$07F1			ADDWF	STACK_0+1, 1
$0130	$082F			MOVF	_s7, 0
$0131	$0770			ADDWF	STACK_0, 0
$0132	$00F4			MOVWF	STACK_4
$0133	$0871			MOVF	STACK_0+1, 0
$0134	$1803			BTFSC	STATUS, C
$0135	$3F01			ADDLW	1
$0136	$0730			ADDWF	_s7+1, 0
$0137	$00F5			MOVWF	STACK_4+1
$0138	$3000			MOVLW	0
$0139	$0675			XORWF	STACK_4+1, 0
$013A	$1D03			BTFSS	STATUS, Z
$013B	$293E			GOTO	L_main_38
$013C	$3007			MOVLW	7
$013D	$0674			XORWF	STACK_4, 0
$013E	$	L_main_38:
$013E	$1903			BTFSC	STATUS, Z
$013F	$29A6			GOTO	L301_ex_L_main_23
$0140	$0827			MOVF	_s3, 0
$0141	$0725			ADDWF	_s2, 0
$0142	$00F0			MOVWF	STACK_0
$0143	$0826			MOVF	_s2+1, 0
$0144	$1803			BTFSC	STATUS, C
$0145	$3F01			ADDLW	1
$0146	$0728			ADDWF	_s3+1, 0
$0147	$00F1			MOVWF	STACK_0+1
$0148	$0829			MOVF	_s4, 0
$0149	$07F0			ADDWF	STACK_0, 1
$014A	$082A			MOVF	_s4+1, 0
$014B	$1803			BTFSC	STATUS, C
$014C	$3F01			ADDLW	1
$014D	$07F1			ADDWF	STACK_0+1, 1
$014E	$082B			MOVF	_s5, 0
$014F	$07F0			ADDWF	STACK_0, 1
$0150	$082C			MOVF	_s5+1, 0
$0151	$1803			BTFSC	STATUS, C
$0152	$3F01			ADDLW	1
$0153	$07F1			ADDWF	STACK_0+1, 1
$0154	$082D			MOVF	_s6, 0
$0155	$07F0			ADDWF	STACK_0, 1
$0156	$082E			MOVF	_s6+1, 0
$0157	$1803			BTFSC	STATUS, C
$0158	$3F01			ADDLW	1
$0159	$07F1			ADDWF	STACK_0+1, 1
$015A	$082F			MOVF	_s7, 0
$015B	$07F0			ADDWF	STACK_0, 1
$015C	$0830			MOVF	_s7+1, 0
$015D	$1803			BTFSC	STATUS, C
$015E	$3F01			ADDLW	1
$015F	$07F1			ADDWF	STACK_0+1, 1
$0160	$0831			MOVF	_s8, 0
$0161	$0770			ADDWF	STACK_0, 0
$0162	$00F4			MOVWF	STACK_4
$0163	$0871			MOVF	STACK_0+1, 0
$0164	$1803			BTFSC	STATUS, C
$0165	$3F01			ADDLW	1
$0166	$0732			ADDWF	_s8+1, 0
$0167	$00F5			MOVWF	STACK_4+1
$0168	$3000			MOVLW	0
$0169	$0675			XORWF	STACK_4+1, 0
$016A	$1D03			BTFSS	STATUS, Z
$016B	$296E			GOTO	L_main_39
$016C	$3007			MOVLW	7
$016D	$0674			XORWF	STACK_4, 0
$016E	$	L_main_39:
$016E	$1903			BTFSC	STATUS, Z
$016F	$29A6			GOTO	L301_ex_L_main_23
$0170	$0825			MOVF	_s2, 0
$0171	$0723			ADDWF	_s1, 0
$0172	$00F0			MOVWF	STACK_0
$0173	$0824			MOVF	_s1+1, 0
$0174	$1803			BTFSC	STATUS, C
$0175	$3F01			ADDLW	1
$0176	$0726			ADDWF	_s2+1, 0
$0177	$00F1			MOVWF	STACK_0+1
$0178	$0827			MOVF	_s3, 0
$0179	$07F0			ADDWF	STACK_0, 1
$017A	$0828			MOVF	_s3+1, 0
$017B	$1803			BTFSC	STATUS, C
$017C	$3F01			ADDLW	1
$017D	$07F1			ADDWF	STACK_0+1, 1
$017E	$0829			MOVF	_s4, 0
$017F	$07F0			ADDWF	STACK_0, 1
$0180	$082A			MOVF	_s4+1, 0
$0181	$1803			BTFSC	STATUS, C
$0182	$3F01			ADDLW	1
$0183	$07F1			ADDWF	STACK_0+1, 1
$0184	$082B			MOVF	_s5, 0
$0185	$07F0			ADDWF	STACK_0, 1
$0186	$082C			MOVF	_s5+1, 0
$0187	$1803			BTFSC	STATUS, C
$0188	$3F01			ADDLW	1
$0189	$07F1			ADDWF	STACK_0+1, 1
$018A	$082D			MOVF	_s6, 0
$018B	$07F0			ADDWF	STACK_0, 1
$018C	$082E			MOVF	_s6+1, 0
$018D	$1803			BTFSC	STATUS, C
$018E	$3F01			ADDLW	1
$018F	$07F1			ADDWF	STACK_0+1, 1
$0190	$082F			MOVF	_s7, 0
$0191	$07F0			ADDWF	STACK_0, 1
$0192	$0830			MOVF	_s7+1, 0
$0193	$1803			BTFSC	STATUS, C
$0194	$3F01			ADDLW	1
$0195	$07F1			ADDWF	STACK_0+1, 1
$0196	$0831			MOVF	_s8, 0
$0197	$0770			ADDWF	STACK_0, 0
$0198	$00F4			MOVWF	STACK_4
$0199	$0871			MOVF	STACK_0+1, 0
$019A	$1803			BTFSC	STATUS, C
$019B	$3F01			ADDLW	1
$019C	$0732			ADDWF	_s8+1, 0
$019D	$00F5			MOVWF	STACK_4+1
$019E	$3000			MOVLW	0
$019F	$0675			XORWF	STACK_4+1, 0
$01A0	$1D03			BTFSS	STATUS, Z
$01A1	$29A4			GOTO	L_main_40
$01A2	$3008			MOVLW	8
$01A3	$0674			XORWF	STACK_4, 0
$01A4	$	L_main_40:
$01A4	$1D03			BTFSS	STATUS, Z
$01A5	$29A8			GOTO	L_main_23
$01A6	$	L301_ex_L_main_23:
;lfr_new.c,197 :: 		T1CON.TMR1ON    = 1;  // enable timer1
$01A6	$1410			BSF	T1CON, 0
;lfr_new.c,206 :: 		}
$01A7	$2B49			GOTO	L_main_24
$01A8	$	L_main_23:
;lfr_new.c,209 :: 		T1CON.TMR1ON    = 0;
$01A8	$1010			BCF	T1CON, 0
;lfr_new.c,210 :: 		PROPORTIONAL = error * kp;
$01A9	$083D			MOVF	_Kp, 0
$01AA	$00F0			MOVWF	STACK_0
$01AB	$158A			BSF	PCLATH, 3
$01AC	$2200			CALL	_byte2double
$01AD	$118A			BCF	PCLATH, 3
$01AE	$0838			MOVF	_error, 0
$01AF	$00F4			MOVWF	STACK_4
$01B0	$0839			MOVF	_error+1, 0
$01B1	$00F5			MOVWF	STACK_4+1
$01B2	$083A			MOVF	_error+2, 0
$01B3	$00F6			MOVWF	STACK_4+2
$01B4	$083B			MOVF	_error+3, 0
$01B5	$00F7			MOVWF	STACK_4+3
$01B6	$25DD			CALL	_mul_32x32_fp
$01B7	$0870			MOVF	STACK_0, 0
$01B8	$00E3			MOVWF	FLOC_main+8
$01B9	$0871			MOVF	STACK_0+1, 0
$01BA	$00E4			MOVWF	FLOC_main+9
$01BB	$0872			MOVF	STACK_0+2, 0
$01BC	$00E5			MOVWF	FLOC_main+10
$01BD	$0873			MOVF	STACK_0+3, 0
$01BE	$00E6			MOVWF	FLOC_main+11
$01BF	$0863			MOVF	FLOC_main+8, 0
$01C0	$00C8			MOVWF	_PROPORTIONAL
$01C1	$0864			MOVF	FLOC_main+9, 0
$01C2	$00C9			MOVWF	_PROPORTIONAL+1
$01C3	$0865			MOVF	FLOC_main+10, 0
$01C4	$00CA			MOVWF	_PROPORTIONAL+2
$01C5	$0866			MOVF	FLOC_main+11, 0
$01C6	$00CB			MOVWF	_PROPORTIONAL+3
;lfr_new.c,211 :: 		INTEGRAL += error ;
$01C7	$084C			MOVF	_INTEGRAL, 0
$01C8	$00F0			MOVWF	STACK_0
$01C9	$084D			MOVF	_INTEGRAL+1, 0
$01CA	$00F1			MOVWF	STACK_0+1
$01CB	$084E			MOVF	_INTEGRAL+2, 0
$01CC	$00F2			MOVWF	STACK_0+2
$01CD	$084F			MOVF	_INTEGRAL+3, 0
$01CE	$00F3			MOVWF	STACK_0+3
$01CF	$0838			MOVF	_error, 0
$01D0	$00F4			MOVWF	STACK_4
$01D1	$0839			MOVF	_error+1, 0
$01D2	$00F5			MOVWF	STACK_4+1
$01D3	$083A			MOVF	_error+2, 0
$01D4	$00F6			MOVWF	STACK_4+2
$01D5	$083B			MOVF	_error+3, 0
$01D6	$00F7			MOVWF	STACK_4+3
$01D7	$2499			CALL	_add_32x32_fp
$01D8	$0870			MOVF	STACK_0, 0
$01D9	$00DB			MOVWF	FLOC_main+0
$01DA	$0871			MOVF	STACK_0+1, 0
$01DB	$00DC			MOVWF	FLOC_main+1
$01DC	$0872			MOVF	STACK_0+2, 0
$01DD	$00DD			MOVWF	FLOC_main+2
$01DE	$0873			MOVF	STACK_0+3, 0
$01DF	$00DE			MOVWF	FLOC_main+3
$01E0	$085B			MOVF	FLOC_main+0, 0
$01E1	$00CC			MOVWF	_INTEGRAL
$01E2	$085C			MOVF	FLOC_main+1, 0
$01E3	$00CD			MOVWF	_INTEGRAL+1
$01E4	$085D			MOVF	FLOC_main+2, 0
$01E5	$00CE			MOVWF	_INTEGRAL+2
$01E6	$085E			MOVF	FLOC_main+3, 0
$01E7	$00CF			MOVWF	_INTEGRAL+3
;lfr_new.c,212 :: 		INTEGRAL *= ki;
$01E8	$083E			MOVF	_Ki, 0
$01E9	$00F0			MOVWF	STACK_0
$01EA	$158A			BSF	PCLATH, 3
$01EB	$2200			CALL	_byte2double
$01EC	$118A			BCF	PCLATH, 3
$01ED	$085B			MOVF	FLOC_main+0, 0
$01EE	$00F4			MOVWF	STACK_4
$01EF	$085C			MOVF	FLOC_main+1, 0
$01F0	$00F5			MOVWF	STACK_4+1
$01F1	$085D			MOVF	FLOC_main+2, 0
$01F2	$00F6			MOVWF	STACK_4+2
$01F3	$085E			MOVF	FLOC_main+3, 0
$01F4	$00F7			MOVWF	STACK_4+3
$01F5	$25DD			CALL	_mul_32x32_fp
$01F6	$0870			MOVF	STACK_0, 0
$01F7	$00DB			MOVWF	FLOC_main+0
$01F8	$0871			MOVF	STACK_0+1, 0
$01F9	$00DC			MOVWF	FLOC_main+1
$01FA	$0872			MOVF	STACK_0+2, 0
$01FB	$00DD			MOVWF	FLOC_main+2
$01FC	$0873			MOVF	STACK_0+3, 0
$01FD	$00DE			MOVWF	FLOC_main+3
$01FE	$085B			MOVF	FLOC_main+0, 0
$01FF	$00CC			MOVWF	_INTEGRAL
$0200	$085C			MOVF	FLOC_main+1, 0
$0201	$00CD			MOVWF	_INTEGRAL+1
$0202	$085D			MOVF	FLOC_main+2, 0
$0203	$00CE			MOVWF	_INTEGRAL+2
$0204	$085E			MOVF	FLOC_main+3, 0
$0205	$00CF			MOVWF	_INTEGRAL+3
;lfr_new.c,213 :: 		DERIVATIVE = (error - perror);
$0206	$0834			MOVF	_perror, 0
$0207	$00F4			MOVWF	STACK_4
$0208	$0835			MOVF	_perror+1, 0
$0209	$00F5			MOVWF	STACK_4+1
$020A	$0836			MOVF	_perror+2, 0
$020B	$00F6			MOVWF	STACK_4+2
$020C	$0837			MOVF	_perror+3, 0
$020D	$00F7			MOVWF	STACK_4+3
$020E	$0838			MOVF	_error, 0
$020F	$00F0			MOVWF	STACK_0
$0210	$0839			MOVF	_error+1, 0
$0211	$00F1			MOVWF	STACK_0+1
$0212	$083A			MOVF	_error+2, 0
$0213	$00F2			MOVWF	STACK_0+2
$0214	$083B			MOVF	_error+3, 0
$0215	$00F3			MOVWF	STACK_0+3
$0216	$158A			BSF	PCLATH, 3
$0217	$222F			CALL	_sub_32x32_fp
$0218	$118A			BCF	PCLATH, 3
$0219	$0870			MOVF	STACK_0, 0
$021A	$00DF			MOVWF	FLOC_main+4
$021B	$0871			MOVF	STACK_0+1, 0
$021C	$00E0			MOVWF	FLOC_main+5
$021D	$0872			MOVF	STACK_0+2, 0
$021E	$00E1			MOVWF	FLOC_main+6
$021F	$0873			MOVF	STACK_0+3, 0
$0220	$00E2			MOVWF	FLOC_main+7
$0221	$085F			MOVF	FLOC_main+4, 0
$0222	$00D0			MOVWF	_DERIVATIVE
$0223	$0860			MOVF	FLOC_main+5, 0
$0224	$00D1			MOVWF	_DERIVATIVE+1
$0225	$0861			MOVF	FLOC_main+6, 0
$0226	$00D2			MOVWF	_DERIVATIVE+2
$0227	$0862			MOVF	FLOC_main+7, 0
$0228	$00D3			MOVWF	_DERIVATIVE+3
;lfr_new.c,214 :: 		correction = ( (PROPORTIONAL) + (INTEGRAL) + (DERIVATIVE*kd));
$0229	$0863			MOVF	FLOC_main+8, 0
$022A	$00F0			MOVWF	STACK_0
$022B	$0864			MOVF	FLOC_main+9, 0
$022C	$00F1			MOVWF	STACK_0+1
$022D	$0865			MOVF	FLOC_main+10, 0
$022E	$00F2			MOVWF	STACK_0+2
$022F	$0866			MOVF	FLOC_main+11, 0
$0230	$00F3			MOVWF	STACK_0+3
$0231	$085B			MOVF	FLOC_main+0, 0
$0232	$00F4			MOVWF	STACK_4
$0233	$085C			MOVF	FLOC_main+1, 0
$0234	$00F5			MOVWF	STACK_4+1
$0235	$085D			MOVF	FLOC_main+2, 0
$0236	$00F6			MOVWF	STACK_4+2
$0237	$085E			MOVF	FLOC_main+3, 0
$0238	$00F7			MOVWF	STACK_4+3
$0239	$2499			CALL	_add_32x32_fp
$023A	$0870			MOVF	STACK_0, 0
$023B	$00DB			MOVWF	FLOC_main+0
$023C	$0871			MOVF	STACK_0+1, 0
$023D	$00DC			MOVWF	FLOC_main+1
$023E	$0872			MOVF	STACK_0+2, 0
$023F	$00DD			MOVWF	FLOC_main+2
$0240	$0873			MOVF	STACK_0+3, 0
$0241	$00DE			MOVWF	FLOC_main+3
$0242	$083F			MOVF	_Kd, 0
$0243	$00F0			MOVWF	STACK_0
$0244	$158A			BSF	PCLATH, 3
$0245	$2200			CALL	_byte2double
$0246	$118A			BCF	PCLATH, 3
$0247	$085F			MOVF	FLOC_main+4, 0
$0248	$00F4			MOVWF	STACK_4
$0249	$0860			MOVF	FLOC_main+5, 0
$024A	$00F5			MOVWF	STACK_4+1
$024B	$0861			MOVF	FLOC_main+6, 0
$024C	$00F6			MOVWF	STACK_4+2
$024D	$0862			MOVF	FLOC_main+7, 0
$024E	$00F7			MOVWF	STACK_4+3
$024F	$25DD			CALL	_mul_32x32_fp
$0250	$085B			MOVF	FLOC_main+0, 0
$0251	$00F4			MOVWF	STACK_4
$0252	$085C			MOVF	FLOC_main+1, 0
$0253	$00F5			MOVWF	STACK_4+1
$0254	$085D			MOVF	FLOC_main+2, 0
$0255	$00F6			MOVWF	STACK_4+2
$0256	$085E			MOVF	FLOC_main+3, 0
$0257	$00F7			MOVWF	STACK_4+3
$0258	$2499			CALL	_add_32x32_fp
$0259	$0870			MOVF	STACK_0, 0
$025A	$00D4			MOVWF	_correction
$025B	$0871			MOVF	STACK_0+1, 0
$025C	$00D5			MOVWF	_correction+1
$025D	$0872			MOVF	STACK_0+2, 0
$025E	$00D6			MOVWF	_correction+2
$025F	$0873			MOVF	STACK_0+3, 0
$0260	$00D7			MOVWF	_correction+3
;lfr_new.c,215 :: 		rightpulse =  basespeed + (correction/2);
$0261	$3000			MOVLW	0
$0262	$00F4			MOVWF	STACK_4
$0263	$3000			MOVLW	0
$0264	$00F5			MOVWF	STACK_4+1
$0265	$3000			MOVLW	0
$0266	$00F6			MOVWF	STACK_4+2
$0267	$3080			MOVLW	128
$0268	$00F7			MOVWF	STACK_4+3
$0269	$253B			CALL	_div_32x32_fp
$026A	$0870			MOVF	STACK_0, 0
$026B	$00DF			MOVWF	FLOC_main+4
$026C	$0871			MOVF	STACK_0+1, 0
$026D	$00E0			MOVWF	FLOC_main+5
$026E	$0872			MOVF	STACK_0+2, 0
$026F	$00E1			MOVWF	FLOC_main+6
$0270	$0873			MOVF	STACK_0+3, 0
$0271	$00E2			MOVWF	FLOC_main+7
$0272	$083C			MOVF	_basespeed, 0
$0273	$00F0			MOVWF	STACK_0
$0274	$158A			BSF	PCLATH, 3
$0275	$2200			CALL	_byte2double
$0276	$118A			BCF	PCLATH, 3
$0277	$0870			MOVF	STACK_0, 0
$0278	$00DB			MOVWF	FLOC_main+0
$0279	$0871			MOVF	STACK_0+1, 0
$027A	$00DC			MOVWF	FLOC_main+1
$027B	$0872			MOVF	STACK_0+2, 0
$027C	$00DD			MOVWF	FLOC_main+2
$027D	$0873			MOVF	STACK_0+3, 0
$027E	$00DE			MOVWF	FLOC_main+3
$027F	$085B			MOVF	FLOC_main+0, 0
$0280	$00F0			MOVWF	STACK_0
$0281	$085C			MOVF	FLOC_main+1, 0
$0282	$00F1			MOVWF	STACK_0+1
$0283	$085D			MOVF	FLOC_main+2, 0
$0284	$00F2			MOVWF	STACK_0+2
$0285	$085E			MOVF	FLOC_main+3, 0
$0286	$00F3			MOVWF	STACK_0+3
$0287	$085F			MOVF	FLOC_main+4, 0
$0288	$00F4			MOVWF	STACK_4
$0289	$0860			MOVF	FLOC_main+5, 0
$028A	$00F5			MOVWF	STACK_4+1
$028B	$0861			MOVF	FLOC_main+6, 0
$028C	$00F6			MOVWF	STACK_4+2
$028D	$0862			MOVF	FLOC_main+7, 0
$028E	$00F7			MOVWF	STACK_4+3
$028F	$2499			CALL	_add_32x32_fp
$0290	$0870			MOVF	STACK_0, 0
$0291	$00C0			MOVWF	_rightpulse
$0292	$0871			MOVF	STACK_0+1, 0
$0293	$00C1			MOVWF	_rightpulse+1
$0294	$0872			MOVF	STACK_0+2, 0
$0295	$00C2			MOVWF	_rightpulse+2
$0296	$0873			MOVF	STACK_0+3, 0
$0297	$00C3			MOVWF	_rightpulse+3
;lfr_new.c,216 :: 		leftpulse = basespeed - (correction/2);
$0298	$085F			MOVF	FLOC_main+4, 0
$0299	$00F4			MOVWF	STACK_4
$029A	$0860			MOVF	FLOC_main+5, 0
$029B	$00F5			MOVWF	STACK_4+1
$029C	$0861			MOVF	FLOC_main+6, 0
$029D	$00F6			MOVWF	STACK_4+2
$029E	$0862			MOVF	FLOC_main+7, 0
$029F	$00F7			MOVWF	STACK_4+3
$02A0	$085B			MOVF	FLOC_main+0, 0
$02A1	$00F0			MOVWF	STACK_0
$02A2	$085C			MOVF	FLOC_main+1, 0
$02A3	$00F1			MOVWF	STACK_0+1
$02A4	$085D			MOVF	FLOC_main+2, 0
$02A5	$00F2			MOVWF	STACK_0+2
$02A6	$085E			MOVF	FLOC_main+3, 0
$02A7	$00F3			MOVWF	STACK_0+3
$02A8	$158A			BSF	PCLATH, 3
$02A9	$222F			CALL	_sub_32x32_fp
$02AA	$118A			BCF	PCLATH, 3
$02AB	$0870			MOVF	STACK_0, 0
$02AC	$00C4			MOVWF	_leftpulse
$02AD	$0871			MOVF	STACK_0+1, 0
$02AE	$00C5			MOVWF	_leftpulse+1
$02AF	$0872			MOVF	STACK_0+2, 0
$02B0	$00C6			MOVWF	_leftpulse+2
$02B1	$0873			MOVF	STACK_0+3, 0
$02B2	$00C7			MOVWF	_leftpulse+3
;lfr_new.c,217 :: 		motor_RF();
$02B3	$158A			BSF	PCLATH, 3
$02B4	$2267			CALL	_motor_RF
$02B5	$118A			BCF	PCLATH, 3
;lfr_new.c,218 :: 		motor_LF();
$02B6	$158A			BSF	PCLATH, 3
$02B7	$226C			CALL	_motor_LF
$02B8	$118A			BCF	PCLATH, 3
;lfr_new.c,220 :: 		if(leftpulse > 255)                  //LEFT CORRECTION EXCEED
$02B9	$0844			MOVF	_leftpulse, 0
$02BA	$00F4			MOVWF	STACK_4
$02BB	$0845			MOVF	_leftpulse+1, 0
$02BC	$00F5			MOVWF	STACK_4+1
$02BD	$0846			MOVF	_leftpulse+2, 0
$02BE	$00F6			MOVWF	STACK_4+2
$02BF	$0847			MOVF	_leftpulse+3, 0
$02C0	$00F7			MOVWF	STACK_4+3
$02C1	$3000			MOVLW	0
$02C2	$00F0			MOVWF	STACK_0
$02C3	$3000			MOVLW	0
$02C4	$00F1			MOVWF	STACK_0+1
$02C5	$307F			MOVLW	127
$02C6	$00F2			MOVWF	STACK_0+2
$02C7	$3086			MOVLW	134
$02C8	$00F3			MOVWF	STACK_0+3
$02C9	$26F5			CALL	_compare_double
$02CA	$3001			MOVLW	1
$02CB	$1803			BTFSC	STATUS, C
$02CC	$3000			MOVLW	0
$02CD	$00F0			MOVWF	STACK_0
$02CE	$0870			MOVF	STACK_0, 0
$02CF	$1903			BTFSC	STATUS, Z
$02D0	$2AD9			GOTO	L_main_25
;lfr_new.c,221 :: 		leftpulse = 255;
$02D1	$3000			MOVLW	0
$02D2	$00C4			MOVWF	_leftpulse
$02D3	$3000			MOVLW	0
$02D4	$00C5			MOVWF	_leftpulse+1
$02D5	$307F			MOVLW	127
$02D6	$00C6			MOVWF	_leftpulse+2
$02D7	$3086			MOVLW	134
$02D8	$00C7			MOVWF	_leftpulse+3
$02D9	$	L_main_25:
;lfr_new.c,222 :: 		if(rightpulse > 255)                 //RIGHT CORRECTION EXCEED
$02D9	$0840			MOVF	_rightpulse, 0
$02DA	$00F4			MOVWF	STACK_4
$02DB	$0841			MOVF	_rightpulse+1, 0
$02DC	$00F5			MOVWF	STACK_4+1
$02DD	$0842			MOVF	_rightpulse+2, 0
$02DE	$00F6			MOVWF	STACK_4+2
$02DF	$0843			MOVF	_rightpulse+3, 0
$02E0	$00F7			MOVWF	STACK_4+3
$02E1	$3000			MOVLW	0
$02E2	$00F0			MOVWF	STACK_0
$02E3	$3000			MOVLW	0
$02E4	$00F1			MOVWF	STACK_0+1
$02E5	$307F			MOVLW	127
$02E6	$00F2			MOVWF	STACK_0+2
$02E7	$3086			MOVLW	134
$02E8	$00F3			MOVWF	STACK_0+3
$02E9	$26F5			CALL	_compare_double
$02EA	$3001			MOVLW	1
$02EB	$1803			BTFSC	STATUS, C
$02EC	$3000			MOVLW	0
$02ED	$00F0			MOVWF	STACK_0
$02EE	$0870			MOVF	STACK_0, 0
$02EF	$1903			BTFSC	STATUS, Z
$02F0	$2AF9			GOTO	L_main_26
;lfr_new.c,223 :: 		rightpulse = 255;
$02F1	$3000			MOVLW	0
$02F2	$00C0			MOVWF	_rightpulse
$02F3	$3000			MOVLW	0
$02F4	$00C1			MOVWF	_rightpulse+1
$02F5	$307F			MOVLW	127
$02F6	$00C2			MOVWF	_rightpulse+2
$02F7	$3086			MOVLW	134
$02F8	$00C3			MOVWF	_rightpulse+3
$02F9	$	L_main_26:
;lfr_new.c,224 :: 		if(leftpulse < 0)                    //LEFT CORRECTION EXCEED
$02F9	$01F4			CLRF	STACK_4
$02FA	$01F5			CLRF	STACK_4+1
$02FB	$01F6			CLRF	STACK_4+2
$02FC	$01F7			CLRF	STACK_4+3
$02FD	$0844			MOVF	_leftpulse, 0
$02FE	$00F0			MOVWF	STACK_0
$02FF	$0845			MOVF	_leftpulse+1, 0
$0300	$00F1			MOVWF	STACK_0+1
$0301	$0846			MOVF	_leftpulse+2, 0
$0302	$00F2			MOVWF	STACK_0+2
$0303	$0847			MOVF	_leftpulse+3, 0
$0304	$00F3			MOVWF	STACK_0+3
$0305	$26F5			CALL	_compare_double
$0306	$3001			MOVLW	1
$0307	$1803			BTFSC	STATUS, C
$0308	$3000			MOVLW	0
$0309	$00F0			MOVWF	STACK_0
$030A	$0870			MOVF	STACK_0, 0
$030B	$1903			BTFSC	STATUS, Z
$030C	$2B11			GOTO	L_main_27
;lfr_new.c,225 :: 		leftpulse = 0;
$030D	$01C4			CLRF	_leftpulse
$030E	$01C5			CLRF	_leftpulse+1
$030F	$01C6			CLRF	_leftpulse+2
$0310	$01C7			CLRF	_leftpulse+3
$0311	$	L_main_27:
;lfr_new.c,226 :: 		if(rightpulse < 0)                   //RIGHT CORRECTION EXCEED
$0311	$01F4			CLRF	STACK_4
$0312	$01F5			CLRF	STACK_4+1
$0313	$01F6			CLRF	STACK_4+2
$0314	$01F7			CLRF	STACK_4+3
$0315	$0840			MOVF	_rightpulse, 0
$0316	$00F0			MOVWF	STACK_0
$0317	$0841			MOVF	_rightpulse+1, 0
$0318	$00F1			MOVWF	STACK_0+1
$0319	$0842			MOVF	_rightpulse+2, 0
$031A	$00F2			MOVWF	STACK_0+2
$031B	$0843			MOVF	_rightpulse+3, 0
$031C	$00F3			MOVWF	STACK_0+3
$031D	$26F5			CALL	_compare_double
$031E	$3001			MOVLW	1
$031F	$1803			BTFSC	STATUS, C
$0320	$3000			MOVLW	0
$0321	$00F0			MOVWF	STACK_0
$0322	$0870			MOVF	STACK_0, 0
$0323	$1903			BTFSC	STATUS, Z
$0324	$2B29			GOTO	L_main_28
;lfr_new.c,227 :: 		rightpulse = 0;
$0325	$01C0			CLRF	_rightpulse
$0326	$01C1			CLRF	_rightpulse+1
$0327	$01C2			CLRF	_rightpulse+2
$0328	$01C3			CLRF	_rightpulse+3
$0329	$	L_main_28:
;lfr_new.c,228 :: 		PWM1_CHANGE_DUTY(rightpulse);
$0329	$0840			MOVF	_rightpulse, 0
$032A	$00F0			MOVWF	STACK_0
$032B	$0841			MOVF	_rightpulse+1, 0
$032C	$00F1			MOVWF	STACK_0+1
$032D	$0842			MOVF	_rightpulse+2, 0
$032E	$00F2			MOVWF	STACK_0+2
$032F	$0843			MOVF	_rightpulse+3, 0
$0330	$00F3			MOVWF	STACK_0+3
$0331	$158A			BSF	PCLATH, 3
$0332	$2095			CALL	_double2byte
$0333	$118A			BCF	PCLATH, 3
$0334	$0870			MOVF	STACK_0, 0
$0335	$00E7			MOVWF	FARG_PWM1_Change_Duty+0
$0336	$158A			BSF	PCLATH, 3
$0337	$2142			CALL	_PWM1_Change_Duty
$0338	$118A			BCF	PCLATH, 3
;lfr_new.c,229 :: 		PWM2_CHANGE_DUTY(leftpulse);
$0339	$0844			MOVF	_leftpulse, 0
$033A	$00F0			MOVWF	STACK_0
$033B	$0845			MOVF	_leftpulse+1, 0
$033C	$00F1			MOVWF	STACK_0+1
$033D	$0846			MOVF	_leftpulse+2, 0
$033E	$00F2			MOVWF	STACK_0+2
$033F	$0847			MOVF	_leftpulse+3, 0
$0340	$00F3			MOVWF	STACK_0+3
$0341	$158A			BSF	PCLATH, 3
$0342	$2095			CALL	_double2byte
$0343	$118A			BCF	PCLATH, 3
$0344	$0870			MOVF	STACK_0, 0
$0345	$00E7			MOVWF	FARG_PWM2_Change_Duty+0
$0346	$158A			BSF	PCLATH, 3
$0347	$20D8			CALL	_PWM2_Change_Duty
$0348	$118A			BCF	PCLATH, 3
;lfr_new.c,230 :: 		}
$0349	$	L_main_24:
;lfr_new.c,231 :: 		delay_ms(10);
$0349	$300D			MOVLW	13
$034A	$00FB			MOVWF	STACK_11
$034B	$30FF			MOVLW	255
$034C	$00FA			MOVWF	STACK_10
$034D	$0BFB			DECFSZ	STACK_11, F
$034E	$2B50			GOTO	$+2
$034F	$2B53			GOTO	$+4
$0350	$0BFA			DECFSZ	STACK_10, F
$0351	$2B50			GOTO	$-1
$0352	$2B4D			GOTO	$-5
$0353	$30F3			MOVLW	243
$0354	$00FA			MOVWF	STACK_10
$0355	$0BFA			DECFSZ	STACK_10, F
$0356	$2B55			GOTO	$-1
$0357	$0000			NOP
;lfr_new.c,232 :: 		}
$0358	$283A			GOTO	L_main_9
;lfr_new.c,233 :: 		}
$0359	$2B59			GOTO	$
