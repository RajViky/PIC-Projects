;  ASM code generated by mikroVirtualMachine for PIC - V. 8.2.0.0
;  Date/Time: 4/18/2012 6:00:46 PM
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$2804			GOTO	_main
$0BCA	$	_RES032:
$0BCA	$1303			BCF	STATUS, RP1
$0BCB	$1283			BCF	STATUS, RP0
$0BCC	$01F2			CLRF	STACK_2
$0BCD	$01F1			CLRF	STACK_1
$0BCE	$01F0			CLRF	STACK_0
$0BCF	$01F8			CLRF	STACK_8
$0BD0	$01F3			CLRF	STACK_3
$0BD1	$3000			MOVLW	0
$0BD2	$0008			RETURN
$0BA6	$	_SETFUN32:
$0BA6	$1303			BCF	STATUS, RP1
$0BA7	$1283			BCF	STATUS, RP0
$0BA8	$157B			BSF	STACK_11, 2
$0BA9	$1FFB			BTFSS	STACK_11, 7
$0BAA	$2BB2			GOTO	SETFUN32EEE
$0BAB	$3001			MOVLW	0x01
$0BAC	$00F3			MOVWF	STACK_3
$0BAD	$01F2			CLRF	STACK_2
$0BAE	$01F1			CLRF	STACK_1
$0BAF	$01F0			CLRF	STACK_0
$0BB0	$0DFA			RLF	STACK_10, F
$0BB1	$0CF2			RRF	STACK_2, F
$0BB2	$	SETFUN32EEE:
$0BB2	$30FF			MOVLW	0xFF
$0BB3	$0008			RETURN
$0BE3	$	_FIXSIGN32:
$0BE3	$1303			BCF	STATUS, RP1
$0BE4	$1283			BCF	STATUS, RP0
$0BE5	$1FFA			BTFSS	STACK_10, 7
$0BE6	$13F2			BCF	STACK_2, 7
$0BE7	$3000			MOVLW	0
$0BE8	$0008			RETURN
$0BB4	$	_SETFOV32:
$0BB4	$1303			BCF	STATUS, RP1
$0BB5	$1283			BCF	STATUS, RP0
$0BB6	$14FB			BSF	STACK_11, 1
$0BB7	$1FFB			BTFSS	STACK_11, 7
$0BB8	$2BC0			GOTO	SETFOV32EEE
$0BB9	$30FF			MOVLW	0xFF
$0BBA	$00F3			MOVWF	STACK_3
$0BBB	$00F2			MOVWF	STACK_2
$0BBC	$00F1			MOVWF	STACK_1
$0BBD	$00F0			MOVWF	STACK_0
$0BBE	$0DFA			RLF	STACK_10, F
$0BBF	$0CF2			RRF	STACK_2, F
$0BC0	$	SETFOV32EEE:
$0BC0	$30FF			MOVLW	0xFF
$0BC1	$0008			RETURN
$08FD	$	_NRM4032:
$08FD	$1303			BCF	STATUS, RP1
$08FE	$1283			BCF	STATUS, RP0
$08FF	$187C			BTFSC	STACK_12, 0
$0900	$2935			GOTO	NRMRND4032
$0901	$18FC			BTFSC	STACK_12, 1
$0902	$2906			GOTO	NRM4032
$0903	$197C			BTFSC	STACK_12, 2
$0904	$2954			GOTO	JMPSETFOV32
$0905	$28FF			GOTO	$-6
$0906	$	NRM4032:
$0906	$01A0			CLRF	__math_tempbD
$0907	$0872			MOVF	STACK_2, W
$0908	$1D03			BTFSS	STATUS, Z
$0909	$2926			GOTO	NORM4032
$090A	$0871			MOVF	STACK_1, W
$090B	$00F2			MOVWF	STACK_2
$090C	$0870			MOVF	STACK_0, W
$090D	$00F1			MOVWF	STACK_1
$090E	$0878			MOVF	STACK_8, W
$090F	$00F0			MOVWF	STACK_0
$0910	$01F8			CLRF	STACK_8
$0911	$15A0			BSF	__math_tempbD, 3
$0912	$0872			MOVF	STACK_2, W
$0913	$1D03			BTFSS	STATUS, Z
$0914	$2926			GOTO	NORM4032
$0915	$0871			MOVF	STACK_1, W
$0916	$00F2			MOVWF	STACK_2
$0917	$0870			MOVF	STACK_0, W
$0918	$00F1			MOVWF	STACK_1
$0919	$01F0			CLRF	STACK_0
$091A	$11A0			BCF	__math_tempbD, 3
$091B	$1620			BSF	__math_tempbD, 4
$091C	$0872			MOVF	STACK_2, W
$091D	$1D03			BTFSS	STATUS, Z
$091E	$2926			GOTO	NORM4032
$091F	$0871			MOVF	STACK_1, W
$0920	$00F2			MOVWF	STACK_2
$0921	$01F1			CLRF	STACK_1
$0922	$15A0			BSF	__math_tempbD, 3
$0923	$0872			MOVF	STACK_2, W
$0924	$1903			BTFSC	STATUS, Z
$0925	$2948			GOTO	JMPRES032
$0926	$	NORM4032:
$0926	$0820			MOVF	__math_tempbD, W
$0927	$02F3			SUBWF	STACK_3, F
$0928	$1D03			BTFSS	STATUS, Z
$0929	$1C03			BTFSS	STATUS, C
$092A	$294C			GOTO	JMPSETFUN32
$092B	$1003			BCF	STATUS, C
$092C	$	NORM4032A:
$092C	$1BF2			BTFSC	STACK_2, 7
$092D	$2935			GOTO	NRMRND4032
$092E	$0DF8			RLF	STACK_8, F
$092F	$0DF0			RLF	STACK_0, F
$0930	$0DF1			RLF	STACK_1, F
$0931	$0DF2			RLF	STACK_2, F
$0932	$0BF3			DECFSZ	STACK_3, F
$0933	$292C			GOTO	NORM4032A
$0934	$294C			GOTO	JMPSETFUN32
$0935	$	NRMRND4032:
$0935	$1B7B			BTFSC	STACK_11, 6
$0936	$1C70			BTFSS	STACK_0, 0
$0937	$2950			GOTO	JMPFIXSIGN32
$0938	$1FF8			BTFSS	STACK_8, 7
$0939	$2950			GOTO	JMPFIXSIGN32
$093A	$0AF0			INCF	STACK_0, F
$093B	$1903			BTFSC	STATUS, Z
$093C	$0AF1			INCF	STACK_1, F
$093D	$1903			BTFSC	STATUS, Z
$093E	$0AF2			INCF	STACK_2, F
$093F	$1D03			BTFSS	STATUS, Z
$0940	$2950			GOTO	JMPFIXSIGN32
$0941	$0CF2			RRF	STACK_2, F
$0942	$0CF1			RRF	STACK_1, F
$0943	$0CF0			RRF	STACK_0, F
$0944	$0AF3			INCF	STACK_3, F
$0945	$1903			BTFSC	STATUS, Z
$0946	$2954			GOTO	JMPSETFOV32
$0947	$2950			GOTO	JMPFIXSIGN32
$0948	$	JMPRES032:
$0948	$3001			MOVLW	0x01
$0949	$00FC			MOVWF	STACK_12
$094A	$23CA			CALL	_RES032
$094B	$2957			GOTO	NRM4032EEE
$094C	$	JMPSETFUN32:
$094C	$3002			MOVLW	0x02
$094D	$00FC			MOVWF	STACK_12
$094E	$23A6			CALL	_SETFUN32
$094F	$2957			GOTO	NRM4032EEE
$0950	$	JMPFIXSIGN32:
$0950	$3004			MOVLW	0x04
$0951	$00FC			MOVWF	STACK_12
$0952	$23E3			CALL	_FIXSIGN32
$0953	$2957			GOTO	NRM4032EEE
$0954	$	JMPSETFOV32:
$0954	$3008			MOVLW	0x08
$0955	$00FC			MOVWF	STACK_12
$0956	$23B4			CALL	_SETFOV32
$0957	$	NRM4032EEE:
$0957	$0000			NOP
$0958	$0008			RETURN
$0ABA	$	_NRM3232:
$0ABA	$1303			BCF	STATUS, RP1
$0ABB	$1283			BCF	STATUS, RP0
$0ABC	$01A0			CLRF	__math_tempbD
$0ABD	$0872			MOVF	STACK_2, W
$0ABE	$1D03			BTFSS	STATUS, Z
$0ABF	$2AD1			GOTO	NORM3232
$0AC0	$0871			MOVF	STACK_1, W
$0AC1	$00F2			MOVWF	STACK_2
$0AC2	$0870			MOVF	STACK_0, W
$0AC3	$00F1			MOVWF	STACK_1
$0AC4	$01F0			CLRF	STACK_0
$0AC5	$15A0			BSF	__math_tempbD, 3
$0AC6	$0872			MOVF	STACK_2, W
$0AC7	$1D03			BTFSS	STATUS, Z
$0AC8	$2AD1			GOTO	NORM3232
$0AC9	$0871			MOVF	STACK_1, W
$0ACA	$00F2			MOVWF	STACK_2
$0ACB	$01F1			CLRF	STACK_1
$0ACC	$11A0			BCF	__math_tempbD, 3
$0ACD	$1620			BSF	__math_tempbD, 4
$0ACE	$0872			MOVF	STACK_2, W
$0ACF	$1903			BTFSC	STATUS, Z
$0AD0	$2ADF			GOTO	JPNRES032
$0AD1	$	NORM3232:
$0AD1	$0820			MOVF	__math_tempbD, W
$0AD2	$02F3			SUBWF	STACK_3, F
$0AD3	$1D03			BTFSS	STATUS, Z
$0AD4	$1C03			BTFSS	STATUS, C
$0AD5	$2AE3			GOTO	JPNSETFUN32
$0AD6	$1003			BCF	STATUS, C
$0AD7	$	NORM3232A:
$0AD7	$1BF2			BTFSC	STACK_2, 7
$0AD8	$2AE7			GOTO	JMPNFIXSIGN32
$0AD9	$0DF0			RLF	STACK_0, F
$0ADA	$0DF1			RLF	STACK_1, F
$0ADB	$0DF2			RLF	STACK_2, F
$0ADC	$0BF3			DECFSZ	STACK_3, F
$0ADD	$2AD7			GOTO	NORM3232A
$0ADE	$2AE3			GOTO	JPNSETFUN32
$0ADF	$	JPNRES032:
$0ADF	$3001			MOVLW	0x01
$0AE0	$00FC			MOVWF	STACK_12
$0AE1	$23CA			CALL	_RES032
$0AE2	$2AEA			GOTO	NORM32EEE
$0AE3	$	JPNSETFUN32:
$0AE3	$3002			MOVLW	0x02
$0AE4	$00FC			MOVWF	STACK_12
$0AE5	$23A6			CALL	_SETFUN32
$0AE6	$2AEA			GOTO	NORM32EEE
$0AE7	$	JMPNFIXSIGN32:
$0AE7	$3004			MOVLW	0x04
$0AE8	$00FC			MOVWF	STACK_12
$0AE9	$23E3			CALL	_FIXSIGN32
$0AEA	$	NORM32EEE:
$0AEA	$0008			RETURN
$0BFF	$	_SETFDZ32:
$0BFF	$1303			BCF	STATUS, RP1
$0C00	$1283			BCF	STATUS, RP0
$0C01	$15FB			BSF	STACK_11, 3
$0C02	$30FF			MOVLW	0xFF
$0C03	$0008			RETURN
$062E	$	_Add_32x32_FP:
$062E	$1303			BCF	STATUS, RP1
$062F	$1283			BCF	STATUS, RP0
$0630	$0872			MOVF	STACK_2, W
$0631	$0676			XORWF	STACK_6, W
$0632	$00A0			MOVWF	__math_tempbD
$0633	$01F8			CLRF	STACK_8
$0634	$01F9			CLRF	STACK_9
$0635	$0873			MOVF	STACK_3, W
$0636	$0277			SUBWF	STACK_7, W
$0637	$1C03			BTFSS	STATUS, C
$0638	$2E51			GOTO	USEA32
$0639	$0877			MOVF	STACK_7, W
$063A	$00FD			MOVWF	STACK_13
$063B	$0873			MOVF	STACK_3, W
$063C	$00F7			MOVWF	STACK_7
$063D	$087D			MOVF	STACK_13, W
$063E	$00F3			MOVWF	STACK_3
$063F	$0876			MOVF	STACK_6, W
$0640	$00FD			MOVWF	STACK_13
$0641	$0872			MOVF	STACK_2, W
$0642	$00F6			MOVWF	STACK_6
$0643	$087D			MOVF	STACK_13, W
$0644	$00F2			MOVWF	STACK_2
$0645	$0875			MOVF	STACK_5, W
$0646	$00FD			MOVWF	STACK_13
$0647	$0871			MOVF	STACK_1, W
$0648	$00F5			MOVWF	STACK_5
$0649	$087D			MOVF	STACK_13, W
$064A	$00F1			MOVWF	STACK_1
$064B	$0874			MOVF	STACK_4, W
$064C	$00FD			MOVWF	STACK_13
$064D	$0870			MOVF	STACK_0, W
$064E	$00F4			MOVWF	STACK_4
$064F	$087D			MOVF	STACK_13, W
$0650	$00F0			MOVWF	STACK_0
$0651	$	USEA32:
$0651	$0877			MOVF	STACK_7, W
$0652	$1903			BTFSC	STATUS, Z
$0653	$2ED2			GOTO	JMPEEE
$0654	$0872			MOVF	STACK_2, W
$0655	$00FA			MOVWF	STACK_10
$0656	$17F2			BSF	STACK_2, 7
$0657	$17F6			BSF	STACK_6, 7
$0658	$0877			MOVF	STACK_7, W
$0659	$0273			SUBWF	STACK_3, W
$065A	$00F7			MOVWF	STACK_7
$065B	$1903			BTFSC	STATUS, Z
$065C	$2E84			GOTO	ALIGNED32
$065D	$3008			MOVLW	8
$065E	$0277			SUBWF	STACK_7, W
$065F	$1C03			BTFSS	STATUS, C
$0660	$2E7A			GOTO	ALIGNB32
$0661	$00F7			MOVWF	STACK_7
$0662	$0874			MOVF	STACK_4, W
$0663	$00F9			MOVWF	STACK_9
$0664	$0875			MOVF	STACK_5, W
$0665	$00F4			MOVWF	STACK_4
$0666	$0876			MOVF	STACK_6, W
$0667	$00F5			MOVWF	STACK_5
$0668	$01F6			CLRF	STACK_6
$0669	$3008			MOVLW	8
$066A	$0277			SUBWF	STACK_7, W
$066B	$1C03			BTFSS	STATUS, C
$066C	$2E7A			GOTO	ALIGNB32
$066D	$00F7			MOVWF	STACK_7
$066E	$0874			MOVF	STACK_4, W
$066F	$00F9			MOVWF	STACK_9
$0670	$0875			MOVF	STACK_5, W
$0671	$00F4			MOVWF	STACK_4
$0672	$01F5			CLRF	STACK_5
$0673	$3008			MOVLW	8
$0674	$0277			SUBWF	STACK_7, W
$0675	$1C03			BTFSS	STATUS, C
$0676	$2E7A			GOTO	ALIGNB32
$0677	$087A			MOVF	STACK_10, W
$0678	$00F2			MOVWF	STACK_2
$0679	$2ED2			GOTO	JMPEEE
$067A	$	ALIGNB32:
$067A	$0877			MOVF	STACK_7, W
$067B	$1903			BTFSC	STATUS, Z
$067C	$2E84			GOTO	ALIGNED32
$067D	$	ALOOPB32:
$067D	$1003			BCF	STATUS, C
$067E	$0CF6			RRF	STACK_6, F
$067F	$0CF5			RRF	STACK_5, F
$0680	$0CF4			RRF	STACK_4, F
$0681	$0CF9			RRF	STACK_9, F
$0682	$0BF7			DECFSZ	STACK_7, F
$0683	$2E7D			GOTO	ALOOPB32
$0684	$	ALIGNED32:
$0684	$1FA0			BTFSS	__math_tempbD, 7
$0685	$2E91			GOTO	AOK32
$0686	$09F9			COMF	STACK_9, F
$0687	$09F4			COMF	STACK_4, F
$0688	$09F5			COMF	STACK_5, F
$0689	$09F6			COMF	STACK_6, F
$068A	$0AF9			INCF	STACK_9, F
$068B	$1903			BTFSC	STATUS, Z
$068C	$0AF4			INCF	STACK_4, F
$068D	$1903			BTFSC	STATUS, Z
$068E	$0AF5			INCF	STACK_5, F
$068F	$1903			BTFSC	STATUS, Z
$0690	$0AF6			INCF	STACK_6, F
$0691	$	AOK32:
$0691	$0879			MOVF	STACK_9, W
$0692	$07F8			ADDWF	STACK_8, F
$0693	$0874			MOVF	STACK_4, W
$0694	$1803			BTFSC	STATUS, C
$0695	$0F74			INCFSZ	STACK_4, W
$0696	$07F0			ADDWF	STACK_0, F
$0697	$0875			MOVF	STACK_5, W
$0698	$1803			BTFSC	STATUS, C
$0699	$0F75			INCFSZ	STACK_5, W
$069A	$07F1			ADDWF	STACK_1, F
$069B	$0876			MOVF	STACK_6, W
$069C	$1803			BTFSC	STATUS, C
$069D	$0F76			INCFSZ	STACK_6, W
$069E	$07F2			ADDWF	STACK_2, F
$069F	$1BA0			BTFSC	__math_tempbD, 7
$06A0	$2EAA			GOTO	ACOMP32
$06A1	$1C03			BTFSS	STATUS, C
$06A2	$2EBA			GOTO	JMPNRMRND4032
$06A3	$0CF2			RRF	STACK_2, F
$06A4	$0CF1			RRF	STACK_1, F
$06A5	$0CF0			RRF	STACK_0, F
$06A6	$0CF8			RRF	STACK_8, F
$06A7	$0FF3			INCFSZ	STACK_3, F
$06A8	$2EBA			GOTO	JMPNRMRND4032
$06A9	$2ECC			GOTO	ADD_JMPSETFOV32
$06AA	$	ACOMP32:
$06AA	$1803			BTFSC	STATUS, C
$06AB	$2EC0			GOTO	JMPNRM4032
$06AC	$09F8			COMF	STACK_8, F
$06AD	$09F0			COMF	STACK_0, F
$06AE	$09F1			COMF	STACK_1, F
$06AF	$09F2			COMF	STACK_2, F
$06B0	$0AF8			INCF	STACK_8, F
$06B1	$1903			BTFSC	STATUS, Z
$06B2	$0AF0			INCF	STACK_0, F
$06B3	$1903			BTFSC	STATUS, Z
$06B4	$0AF1			INCF	STACK_1, F
$06B5	$1903			BTFSC	STATUS, Z
$06B6	$0AF2			INCF	STACK_2, F
$06B7	$3080			MOVLW	0x80
$06B8	$06FA			XORWF	STACK_10, F
$06B9	$2EC6			GOTO	JMPNRM32
$06BA	$	JMPNRMRND4032:
$06BA	$3001			MOVLW	0x01
$06BB	$00FC			MOVWF	STACK_12
$06BC	$158A			BSF	PCLATH, 3
$06BD	$20FD			CALL	_NRM4032
$06BE	$118A			BCF	PCLATH, 3
$06BF	$2ED4			GOTO	ADD32EEE
$06C0	$	JMPNRM4032:
$06C0	$3002			MOVLW	0x02
$06C1	$00FC			MOVWF	STACK_12
$06C2	$158A			BSF	PCLATH, 3
$06C3	$20FD			CALL	_NRM4032
$06C4	$118A			BCF	PCLATH, 3
$06C5	$2ED4			GOTO	ADD32EEE
$06C6	$	JMPNRM32:
$06C6	$3004			MOVLW	0x04
$06C7	$00FC			MOVWF	STACK_12
$06C8	$158A			BSF	PCLATH, 3
$06C9	$22BA			CALL	_NRM3232
$06CA	$118A			BCF	PCLATH, 3
$06CB	$2ED4			GOTO	ADD32EEE
$06CC	$	ADD_JMPSETFOV32:
$06CC	$3008			MOVLW	0x08
$06CD	$00FC			MOVWF	STACK_12
$06CE	$158A			BSF	PCLATH, 3
$06CF	$23B4			CALL	_SETFOV32
$06D0	$118A			BCF	PCLATH, 3
$06D1	$2ED4			GOTO	ADD32EEE
$06D2	$	JMPEEE:
$06D2	$3000			MOVLW	0x00
$06D3	$00FC			MOVWF	STACK_12
$06D4	$	ADD32EEE:
$06D4	$0000			NOP
$06D5	$0008			RETURN
$09F4	$	_Mul_16x16_S:
$09F4	$1303			BCF	STATUS, RP1
$09F5	$1283			BCF	STATUS, RP0
$09F6	$01FB			CLRF	STACK_11
$09F7	$01FA			CLRF	STACK_10
$09F8	$01F9			CLRF	STACK_9
$09F9	$3080			MOVLW	128
$09FA	$00F8			MOVWF	STACK_8
$09FB	$01FD			CLRF	STACK_13
$09FC	$1FF1			BTFSS	STACK_1, 7
$09FD	$2A04			GOTO	$+7
$09FE	$09F1			COMF	STACK_1, F
$09FF	$09F0			COMF	STACK_0, F
$0A00	$0AF0			INCF	STACK_0, F
$0A01	$1903			BTFSC	STATUS, Z
$0A02	$0AF1			INCF	STACK_1, F
$0A03	$0AFD			INCF	STACK_13, F
$0A04	$1FF5			BTFSS	STACK_5, 7
$0A05	$2A0C			GOTO	$+7
$0A06	$09F5			COMF	STACK_5, F
$0A07	$09F4			COMF	STACK_4, F
$0A08	$0AF4			INCF	STACK_4, F
$0A09	$1903			BTFSC	STATUS, Z
$0A0A	$0AF5			INCF	STACK_5, F
$0A0B	$0AFD			INCF	STACK_13, F
$0A0C	$0CF1			RRF	STACK_1, F
$0A0D	$0CF0			RRF	STACK_0, F
$0A0E	$1C03			BTFSS	STATUS, C
$0A0F	$2A19			GOTO	$+10
$0A10	$0874			MOVF	STACK_4, W
$0A11	$07F9			ADDWF	STACK_9, F
$0A12	$0875			MOVF	STACK_5, W
$0A13	$1803			BTFSC	STATUS, C
$0A14	$0F75			INCFSZ	STACK_5, W
$0A15	$07FA			ADDWF	STACK_10, F
$0A16	$1803			BTFSC	STATUS, C
$0A17	$0AFB			INCF	STACK_11, F
$0A18	$1003			BCF	STATUS, C
$0A19	$1FF0			BTFSS	STACK_0, 7
$0A1A	$2A21			GOTO	$+7
$0A1B	$0874			MOVF	STACK_4, W
$0A1C	$07FA			ADDWF	STACK_10, F
$0A1D	$1803			BTFSC	STATUS, C
$0A1E	$0AFB			INCF	STACK_11, F
$0A1F	$0875			MOVF	STACK_5, W
$0A20	$07FB			ADDWF	STACK_11, F
$0A21	$0CFB			RRF	STACK_11, F
$0A22	$0CFA			RRF	STACK_10, F
$0A23	$0CF9			RRF	STACK_9, F
$0A24	$0CF8			RRF	STACK_8, F
$0A25	$1C03			BTFSS	STATUS, C
$0A26	$2A0C			GOTO	$-26
$0A27	$1C7D			BTFSS	STACK_13, 0
$0A28	$2A34			GOTO	$+12
$0A29	$09FB			COMF	STACK_11, F
$0A2A	$09FA			COMF	STACK_10, F
$0A2B	$09F9			COMF	STACK_9, F
$0A2C	$09F8			COMF	STACK_8, F
$0A2D	$0AF8			INCF	STACK_8, F
$0A2E	$1903			BTFSC	STATUS, Z
$0A2F	$0AF9			INCF	STACK_9, F
$0A30	$1903			BTFSC	STATUS, Z
$0A31	$0AFA			INCF	STACK_10, F
$0A32	$1903			BTFSC	STATUS, Z
$0A33	$0AFB			INCF	STACK_11, F
$0A34	$087B			MOVF	STACK_11, W
$0A35	$00F3			MOVWF	STACK_3
$0A36	$087A			MOVF	STACK_10, W
$0A37	$00F2			MOVWF	STACK_2
$0A38	$0879			MOVF	STACK_9, W
$0A39	$00F1			MOVWF	STACK_1
$0A3A	$0878			MOVF	STACK_8, W
$0A3B	$00F0			MOVWF	STACK_0
$0A3C	$0000			NOP
$0A3D	$0008			RETURN
$0B97	$	_SETIOV3224:
$0B97	$1303			BCF	STATUS, RP1
$0B98	$1283			BCF	STATUS, RP0
$0B99	$147B			BSF	STACK_11, 0
$0B9A	$1FFB			BTFSS	STACK_11, 7
$0B9B	$2BA4			GOTO	SETIOV3224EEE
$0B9C	$01F2			CLRF	STACK_2
$0B9D	$1FFA			BTFSS	STACK_10, 7
$0B9E	$30FF			MOVLW	0xFF
$0B9F	$00F2			MOVWF	STACK_2
$0BA0	$00F1			MOVWF	STACK_1
$0BA1	$00F0			MOVWF	STACK_0
$0BA2	$0DFA			RLF	STACK_10, F
$0BA3	$0CF2			RRF	STACK_2, F
$0BA4	$	SETIOV3224EEE:
$0BA4	$30FF			MOVLW	0xFF
$0BA5	$0008			RETURN
$0BDB	$	_PWM1_Start:
$0BDB	$1303			BCF	STATUS, RP1
$0BDC	$1683			BSF	STATUS, RP0
$0BDD	$1107			BCF	TRISC, 2
$0BDE	$1283			BCF	STATUS, RP0
$0BDF	$1512			BSF	T2CON, 2
$0BE0	$300C			MOVLW	12
$0BE1	$0497			IORWF	CCP1CON, 1
$0BE2	$0008			RETURN
$0BD3	$	_PWM2_Start:
$0BD3	$1303			BCF	STATUS, RP1
$0BD4	$1683			BSF	STATUS, RP0
$0BD5	$1087			BCF	TRISC, 1
$0BD6	$1283			BCF	STATUS, RP0
$0BD7	$1512			BSF	T2CON, 2
$0BD8	$300C			MOVLW	12
$0BD9	$049D			IORWF	CCP2CON, 1
$0BDA	$0008			RETURN
$0BEF	$	_PWM1_Init:
$0BEF	$1303			BCF	STATUS, RP1
$0BF0	$1283			BCF	STATUS, RP0
$0BF1	$0195			CLRF	CCPR1L, 1
$0BF2	$1217			BCF	CCP1CON, 4
$0BF3	$1297			BCF	CCP1CON, 5
$0BF4	$0008			RETURN
$0BE9	$	_PWM2_Init:
$0BE9	$1303			BCF	STATUS, RP1
$0BEA	$1283			BCF	STATUS, RP0
$0BEB	$019B			CLRF	CCPR2L, 1
$0BEC	$121D			BCF	CCP2CON, 4
$0BED	$129D			BCF	CCP2CON, 5
$0BEE	$0008			RETURN
$0B24	$	_Mul_16x16_U:
$0B24	$1303			BCF	STATUS, RP1
$0B25	$1283			BCF	STATUS, RP0
$0B26	$01FB			CLRF	STACK_11
$0B27	$01FA			CLRF	STACK_10
$0B28	$01F9			CLRF	STACK_9
$0B29	$3080			MOVLW	128
$0B2A	$00F8			MOVWF	STACK_8
$0B2B	$0CF1			RRF	STACK_1, F
$0B2C	$0CF0			RRF	STACK_0, F
$0B2D	$1C03			BTFSS	STATUS, C
$0B2E	$2B38			GOTO	$+10
$0B2F	$0874			MOVF	STACK_4, W
$0B30	$07F9			ADDWF	STACK_9, F
$0B31	$0875			MOVF	STACK_5, W
$0B32	$1803			BTFSC	STATUS, C
$0B33	$0F75			INCFSZ	STACK_5, W
$0B34	$07FA			ADDWF	STACK_10, F
$0B35	$1803			BTFSC	STATUS, C
$0B36	$0AFB			INCF	STACK_11, F
$0B37	$1003			BCF	STATUS, C
$0B38	$1FF0			BTFSS	STACK_0, 7
$0B39	$2B40			GOTO	$+7
$0B3A	$0874			MOVF	STACK_4, W
$0B3B	$07FA			ADDWF	STACK_10, F
$0B3C	$0875			MOVF	STACK_5, W
$0B3D	$1803			BTFSC	STATUS, C
$0B3E	$0F75			INCFSZ	STACK_5, W
$0B3F	$07FB			ADDWF	STACK_11, F
$0B40	$0CFB			RRF	STACK_11, F
$0B41	$0CFA			RRF	STACK_10, F
$0B42	$0CF9			RRF	STACK_9, F
$0B43	$0CF8			RRF	STACK_8, F
$0B44	$1C03			BTFSS	STATUS, C
$0B45	$2B2B			GOTO	$-26
$0B46	$087B			MOVF	STACK_11, W
$0B47	$00F3			MOVWF	STACK_3
$0B48	$087A			MOVF	STACK_10, W
$0B49	$00F2			MOVWF	STACK_2
$0B4A	$0879			MOVF	STACK_9, W
$0B4B	$00F1			MOVWF	STACK_1
$0B4C	$0878			MOVF	STACK_8, W
$0B4D	$00F0			MOVWF	STACK_0
$0B4E	$0008			RETURN
$0B60	$	_Word2Double:
$0B60	$1303			BCF	STATUS, RP1
$0B61	$1283			BCF	STATUS, RP0
$0B62	$0870			MOVF	STACK_0, W
$0B63	$00F8			MOVWF	STACK_8
$0B64	$0871			MOVF	STACK_1, W
$0B65	$00F0			MOVWF	STACK_0
$0B66	$01F1			CLRF	STACK_1
$0B67	$01F2			CLRF	STACK_2
$0B68	$01F3			CLRF	STACK_3
$0B69	$	FLO16U32:
$0B69	$01FB			CLRF	STACK_11
$0B6A	$01FC			CLRF	STACK_12
$0B6B	$3096			MOVLW	150
$0B6C	$00F3			MOVWF	STACK_3
$0B6D	$01FA			CLRF	STACK_10
$0B6E	$0870			MOVF	STACK_0, W
$0B6F	$00F1			MOVWF	STACK_1
$0B70	$0878			MOVF	STACK_8, W
$0B71	$00F0			MOVWF	STACK_0
$0B72	$01F8			CLRF	STACK_8
$0B73	$01F2			CLRF	STACK_2
$0B74	$22BA			CALL	_NRM3232
$0B75	$0008			RETURN
$0800	$	_Div_32x32_FP:
$0800	$1303			BCF	STATUS, RP1
$0801	$1283			BCF	STATUS, RP0
$0802	$	FPD32:
$0802	$0877			MOVF	STACK_7, W
$0803	$1903			BTFSC	STATUS, Z
$0804	$288F			GOTO	JPDSETFDZ32
$0805	$0873			MOVF	STACK_3, W
$0806	$1903			BTFSC	STATUS, Z
$0807	$2892			GOTO	JPDRES032
$0808	$	D32BNE0:
$0808	$0872			MOVF	STACK_2, W
$0809	$0676			XORWF	STACK_6, W
$080A	$3980			ANDLW	128
$080B	$00FA			MOVWF	STACK_10
$080C	$17F2			BSF	STACK_2, 7
$080D	$17F6			BSF	STACK_6, 7
$080E	$	TALIGN32:
$080E	$01A0			CLRF	__math_tempbD
$080F	$0872			MOVF	STACK_2, W
$0810	$00F8			MOVWF	STACK_8
$0811	$0871			MOVF	STACK_1, W
$0812	$00FC			MOVWF	STACK_12
$0813	$0870			MOVF	STACK_0, W
$0814	$00FD			MOVWF	STACK_13
$0815	$0874			MOVF	STACK_4, W
$0816	$02FD			SUBWF	STACK_13, F
$0817	$0875			MOVF	STACK_5, W
$0818	$1C03			BTFSS	STATUS, C
$0819	$0F75			INCFSZ	STACK_5, W
$081A	$	TS1ALIGN32:
$081A	$02FC			SUBWF	STACK_12, F
$081B	$0876			MOVF	STACK_6, W
$081C	$1C03			BTFSS	STATUS, C
$081D	$0F76			INCFSZ	STACK_6, W
$081E	$	TS2ALIGN32:
$081E	$02F8			SUBWF	STACK_8, F
$081F	$01F8			CLRF	STACK_8
$0820	$01FC			CLRF	STACK_12
$0821	$01FD			CLRF	STACK_13
$0822	$1C03			BTFSS	STATUS, C
$0823	$282B			GOTO	DALIGN32OK
$0824	$1003			BCF	STATUS, C
$0825	$0CF2			RRF	STACK_2, F
$0826	$0CF1			RRF	STACK_1, F
$0827	$0CF0			RRF	STACK_0, F
$0828	$0CF8			RRF	STACK_8, F
$0829	$3001			MOVLW	0x01
$082A	$00A0			MOVWF	__math_tempbD
$082B	$	DALIGN32OK:
$082B	$0877			MOVF	STACK_7, W
$082C	$02F3			SUBWF	STACK_3, F
$082D	$1C03			BTFSS	STATUS, C
$082E	$2835			GOTO	ALTB32
$082F	$	AGEB32:
$082F	$307E			MOVLW	126
$0830	$0720			ADDWF	__math_tempbD, W
$0831	$07F3			ADDWF	STACK_3, F
$0832	$1803			BTFSC	STATUS, C
$0833	$2895			GOTO	JPDSETFOV32
$0834	$283A			GOTO	DARGOK32
$0835	$	ALTB32:
$0835	$307E			MOVLW	126
$0836	$0720			ADDWF	__math_tempbD, W
$0837	$07F3			ADDWF	STACK_3, F
$0838	$1C03			BTFSS	STATUS, C
$0839	$2898			GOTO	JPDSETFUN32
$083A	$	DARGOK32:
$083A	$3018			MOVLW	24
$083B	$07FA			ADDWF	STACK_10, F
$083C	$	DLOOP32:
$083C	$0DFD			RLF	STACK_13, F
$083D	$0DFC			RLF	STACK_12, F
$083E	$0DF8			RLF	STACK_8, F
$083F	$0DF0			RLF	STACK_0, F
$0840	$0DF1			RLF	STACK_1, F
$0841	$0DF2			RLF	STACK_2, F
$0842	$0DA0			RLF	__math_tempbD, F
$0843	$0874			MOVF	STACK_4, W
$0844	$02F0			SUBWF	STACK_0, F
$0845	$0875			MOVF	STACK_5, W
$0846	$1C03			BTFSS	STATUS, C
$0847	$0F75			INCFSZ	STACK_5, W
$0848	$	DS132:
$0848	$02F1			SUBWF	STACK_1, F
$0849	$0876			MOVF	STACK_6, W
$084A	$1C03			BTFSS	STATUS, C
$084B	$0F76			INCFSZ	STACK_6, W
$084C	$	DS232:
$084C	$02F2			SUBWF	STACK_2, F
$084D	$0D76			RLF	STACK_6, W
$084E	$04A0			IORWF	__math_tempbD, F
$084F	$1C20			BTFSS	__math_tempbD, 0
$0850	$2853			GOTO	DREST32
$0851	$147D			BSF	STACK_13, 0
$0852	$285E			GOTO	DOK32
$0853	$	DREST32:
$0853	$0874			MOVF	STACK_4, W
$0854	$07F0			ADDWF	STACK_0, F
$0855	$0875			MOVF	STACK_5, W
$0856	$1803			BTFSC	STATUS, C
$0857	$0F75			INCFSZ	STACK_5, W
$0858	$	DAREST32:
$0858	$07F1			ADDWF	STACK_1, F
$0859	$0876			MOVF	STACK_6, W
$085A	$1803			BTFSC	STATUS, C
$085B	$0A76			INCF	STACK_6, W
$085C	$07F2			ADDWF	STACK_2, F
$085D	$107D			BCF	STACK_13, 0
$085E	$	DOK32:
$085E	$03FA			DECF	STACK_10, F
$085F	$301F			MOVLW	31
$0860	$057A			ANDWF	STACK_10, W
$0861	$1D03			BTFSS	STATUS, Z
$0862	$283C			GOTO	DLOOP32
$0863	$	DROUND32:
$0863	$1B7B			BTFSC	STACK_11, 6
$0864	$1C7D			BTFSS	STACK_13, 0
$0865	$2885			GOTO	DIV32OK
$0866	$1003			BCF	STATUS, C
$0867	$0DF0			RLF	STACK_0, F
$0868	$0DF1			RLF	STACK_1, F
$0869	$0DF2			RLF	STACK_2, F
$086A	$0DA0			RLF	__math_tempbD, F
$086B	$0874			MOVF	STACK_4, W
$086C	$02F0			SUBWF	STACK_0, F
$086D	$0875			MOVF	STACK_5, W
$086E	$1C03			BTFSS	STATUS, C
$086F	$0F75			INCFSZ	STACK_5, W
$0870	$02F1			SUBWF	STACK_1, F
$0871	$0876			MOVF	STACK_6, W
$0872	$1C03			BTFSS	STATUS, C
$0873	$0F76			INCFSZ	STACK_6, W
$0874	$02F2			SUBWF	STACK_2, F
$0875	$0D76			RLF	STACK_6, W
$0876	$0420			IORWF	__math_tempbD, W
$0877	$3901			ANDLW	0x01
$0878	$07FD			ADDWF	STACK_13, F
$0879	$1803			BTFSC	STATUS, C
$087A	$0AFC			INCF	STACK_12, F
$087B	$1903			BTFSC	STATUS, Z
$087C	$0AF8			INCF	STACK_8, F
$087D	$1D03			BTFSS	STATUS, Z
$087E	$2885			GOTO	DIV32OK
$087F	$0CF8			RRF	STACK_8, F
$0880	$0CFC			RRF	STACK_12, F
$0881	$0CFD			RRF	STACK_13, F
$0882	$0AF3			INCF	STACK_3, F
$0883	$1903			BTFSC	STATUS, Z
$0884	$2895			GOTO	JPDSETFOV32
$0885	$	DIV32OK:
$0885	$1FFA			BTFSS	STACK_10, 7
$0886	$13F8			BCF	STACK_8, 7
$0887	$0878			MOVF	STACK_8, W
$0888	$00F2			MOVWF	STACK_2
$0889	$087C			MOVF	STACK_12, W
$088A	$00F1			MOVWF	STACK_1
$088B	$087D			MOVF	STACK_13, W
$088C	$00F0			MOVWF	STACK_0
$088D	$3000			MOVLW	0x00
$088E	$289A			GOTO	DIV32EEE
$088F	$	JPDSETFDZ32:
$088F	$3001			MOVLW	0x01
$0890	$23FF			CALL	_SETFDZ32
$0891	$289A			GOTO	DIV32EEE
$0892	$	JPDRES032:
$0892	$3002			MOVLW	0x02
$0893	$23CA			CALL	_RES032
$0894	$289A			GOTO	DIV32EEE
$0895	$	JPDSETFOV32:
$0895	$3004			MOVLW	0x04
$0896	$23B4			CALL	_SETFOV32
$0897	$289A			GOTO	DIV32EEE
$0898	$	JPDSETFUN32:
$0898	$3008			MOVLW	0x08
$0899	$23A6			CALL	_SETFUN32
$089A	$	DIV32EEE:
$089A	$0000			NOP
$089B	$0008			RETURN
$0BC2	$	_Sub_32x32_FP:
$0BC2	$1303			BCF	STATUS, RP1
$0BC3	$1283			BCF	STATUS, RP0
$0BC4	$3080			MOVLW	0x80
$0BC5	$06F6			XORWF	STACK_6, F
$0BC6	$118A			BCF	PCLATH, 3
$0BC7	$262E			CALL	_Add_32x32_FP
$0BC8	$158A			BSF	PCLATH, 3
$0BC9	$0008			RETURN
$0C04	$	_motor_RF:
;lfr_pid_runner.c,34 :: 		void motor_RF()         //RIGHT MOTOR FWD DIR
;lfr_pid_runner.c,36 :: 		PORTC.F7 = 1;
$0C04	$1303			BCF	STATUS, RP1
$0C05	$1283			BCF	STATUS, RP0
$0C06	$1787			BSF	PORTC, 7
;lfr_pid_runner.c,37 :: 		PORTC.F6 = 0;
$0C07	$1307			BCF	PORTC, 6
;lfr_pid_runner.c,38 :: 		}
$0C08	$0008			RETURN
$0C09	$	_motor_LB:
;lfr_pid_runner.c,52 :: 		void motor_LB()         //LEFT MOTOR REV DIR
;lfr_pid_runner.c,54 :: 		PORTC.F5 = 0;
$0C09	$1303			BCF	STATUS, RP1
$0C0A	$1283			BCF	STATUS, RP0
$0C0B	$1287			BCF	PORTC, 5
;lfr_pid_runner.c,55 :: 		PORTC.F4 = 1;
$0C0C	$1607			BSF	PORTC, 4
;lfr_pid_runner.c,56 :: 		}
$0C0D	$0008			RETURN
$0A81	$	_PWM1_Change_Duty:
$0A81	$1303			BCF	STATUS, RP1
$0A82	$1683			BSF	STATUS, RP0
$0A83	$0812			MOVF	PR2, 0
$0A84	$3F01			ADDLW	1
$0A85	$00F0			MOVWF	STACK_0
$0A86	$01F1			CLRF	STACK_0+1
$0A87	$1803			BTFSC	STATUS, C
$0A88	$0AF1			INCF	STACK_0+1, 1
$0A89	$1283			BCF	STATUS, RP0
$0A8A	$086E			MOVF	FARG_PWM1_Change_Duty+0, 0
$0A8B	$00F4			MOVWF	STACK_4
$0A8C	$01F5			CLRF	STACK_4+1
$0A8D	$21F4			CALL	_mul_16x16_s
$0A8E	$3006			MOVLW	6
$0A8F	$00F2			MOVWF	STACK_2
$0A90	$0870			MOVF	STACK_0, 0
$0A91	$00F4			MOVWF	STACK_4
$0A92	$0871			MOVF	STACK_0+1, 0
$0A93	$00F5			MOVWF	STACK_4+1
$0A94	$0872			MOVF	STACK_2, 0
$0A95	$	L_PWM1_Change_Duty_2:
$0A95	$1903			BTFSC	STATUS, Z
$0A96	$2A9C			GOTO	L_PWM1_Change_Duty_3
$0A97	$0CF5			RRF	STACK_4+1, 1
$0A98	$0CF4			RRF	STACK_4, 1
$0A99	$13F5			BCF	STACK_4+1, 7
$0A9A	$3FFF			ADDLW	255
$0A9B	$2A95			GOTO	L_PWM1_Change_Duty_2
$0A9C	$	L_PWM1_Change_Duty_3:
$0A9C	$0874			MOVF	STACK_4, 0
$0A9D	$00F0			MOVWF	STACK_0
$0A9E	$0DF0			RLF	STACK_0, 1
$0A9F	$1070			BCF	STACK_0, 0
$0AA0	$0DF0			RLF	STACK_0, 1
$0AA1	$1070			BCF	STACK_0, 0
$0AA2	$0DF0			RLF	STACK_0, 1
$0AA3	$1070			BCF	STACK_0, 0
$0AA4	$0DF0			RLF	STACK_0, 1
$0AA5	$1070			BCF	STACK_0, 0
$0AA6	$3030			MOVLW	48
$0AA7	$0570			ANDWF	STACK_0, 0
$0AA8	$00F3			MOVWF	STACK_3
$0AA9	$0874			MOVF	STACK_4, 0
$0AAA	$00F0			MOVWF	STACK_0
$0AAB	$0875			MOVF	STACK_4+1, 0
$0AAC	$00F1			MOVWF	STACK_0+1
$0AAD	$0CF1			RRF	STACK_0+1, 1
$0AAE	$0CF0			RRF	STACK_0, 1
$0AAF	$13F1			BCF	STACK_0+1, 7
$0AB0	$0CF1			RRF	STACK_0+1, 1
$0AB1	$0CF0			RRF	STACK_0, 1
$0AB2	$13F1			BCF	STACK_0+1, 7
$0AB3	$0870			MOVF	STACK_0, 0
$0AB4	$0095			MOVWF	CCPR1L
$0AB5	$300F			MOVLW	15
$0AB6	$0597			ANDWF	CCP1CON, 1
$0AB7	$0873			MOVF	STACK_3, 0
$0AB8	$0497			IORWF	CCP1CON, 1
$0AB9	$0008			RETURN
$0AEB	$	_PWM2_Change_Duty:
$0AEB	$1303			BCF	STATUS, RP1
$0AEC	$1683			BSF	STATUS, RP0
$0AED	$0812			MOVF	PR2, 0
$0AEE	$3F01			ADDLW	1
$0AEF	$00F0			MOVWF	STACK_0
$0AF0	$01F1			CLRF	STACK_0+1
$0AF1	$1803			BTFSC	STATUS, C
$0AF2	$0AF1			INCF	STACK_0+1, 1
$0AF3	$1283			BCF	STATUS, RP0
$0AF4	$086E			MOVF	FARG_PWM2_Change_Duty+0, 0
$0AF5	$00F4			MOVWF	STACK_4
$0AF6	$01F5			CLRF	STACK_4+1
$0AF7	$21F4			CALL	_mul_16x16_s
$0AF8	$3006			MOVLW	6
$0AF9	$00F2			MOVWF	STACK_2
$0AFA	$0870			MOVF	STACK_0, 0
$0AFB	$00F4			MOVWF	STACK_4
$0AFC	$0871			MOVF	STACK_0+1, 0
$0AFD	$00F5			MOVWF	STACK_4+1
$0AFE	$0872			MOVF	STACK_2, 0
$0AFF	$	L_PWM2_Change_Duty_0:
$0AFF	$1903			BTFSC	STATUS, Z
$0B00	$2B06			GOTO	L_PWM2_Change_Duty_1
$0B01	$0CF5			RRF	STACK_4+1, 1
$0B02	$0CF4			RRF	STACK_4, 1
$0B03	$13F5			BCF	STACK_4+1, 7
$0B04	$3FFF			ADDLW	255
$0B05	$2AFF			GOTO	L_PWM2_Change_Duty_0
$0B06	$	L_PWM2_Change_Duty_1:
$0B06	$0874			MOVF	STACK_4, 0
$0B07	$00F0			MOVWF	STACK_0
$0B08	$0DF0			RLF	STACK_0, 1
$0B09	$1070			BCF	STACK_0, 0
$0B0A	$0DF0			RLF	STACK_0, 1
$0B0B	$1070			BCF	STACK_0, 0
$0B0C	$0DF0			RLF	STACK_0, 1
$0B0D	$1070			BCF	STACK_0, 0
$0B0E	$0DF0			RLF	STACK_0, 1
$0B0F	$1070			BCF	STACK_0, 0
$0B10	$3030			MOVLW	48
$0B11	$0570			ANDWF	STACK_0, 0
$0B12	$00F3			MOVWF	STACK_3
$0B13	$0874			MOVF	STACK_4, 0
$0B14	$00F0			MOVWF	STACK_0
$0B15	$0875			MOVF	STACK_4+1, 0
$0B16	$00F1			MOVWF	STACK_0+1
$0B17	$0CF1			RRF	STACK_0+1, 1
$0B18	$0CF0			RRF	STACK_0, 1
$0B19	$13F1			BCF	STACK_0+1, 7
$0B1A	$0CF1			RRF	STACK_0+1, 1
$0B1B	$0CF0			RRF	STACK_0, 1
$0B1C	$13F1			BCF	STACK_0+1, 7
$0B1D	$0870			MOVF	STACK_0, 0
$0B1E	$009B			MOVWF	CCPR2L
$0B1F	$300F			MOVLW	15
$0B20	$059D			ANDWF	CCP2CON, 1
$0B21	$0873			MOVF	STACK_3, 0
$0B22	$049D			IORWF	CCP2CON, 1
$0B23	$0008			RETURN
$0BFA	$	_motor_LF:
;lfr_pid_runner.c,46 :: 		void motor_LF()         //LEFT MOTOR FWD DIR
;lfr_pid_runner.c,48 :: 		PORTC.F5 = 1;
$0BFA	$1303			BCF	STATUS, RP1
$0BFB	$1283			BCF	STATUS, RP0
$0BFC	$1687			BSF	PORTC, 5
;lfr_pid_runner.c,49 :: 		PORTC.F4 = 0;
$0BFD	$1207			BCF	PORTC, 4
;lfr_pid_runner.c,50 :: 		}
$0BFE	$0008			RETURN
$0BF5	$	_motor_RB:
;lfr_pid_runner.c,40 :: 		void motor_RB()         //RIGHT MOTOR REV DIR
;lfr_pid_runner.c,42 :: 		PORTC.F7 = 0;
$0BF5	$1303			BCF	STATUS, RP1
$0BF6	$1283			BCF	STATUS, RP0
$0BF7	$1387			BCF	PORTC, 7
;lfr_pid_runner.c,43 :: 		PORTC.F6 = 1;
$0BF8	$1707			BSF	PORTC, 6
;lfr_pid_runner.c,44 :: 		}
$0BF9	$0008			RETURN
$0B76	$	_Byte2Double:
$0B76	$1303			BCF	STATUS, RP1
$0B77	$1283			BCF	STATUS, RP0
$0B78	$	FLO08U32:
$0B78	$0870			MOVF	STACK_0, W
$0B79	$00F8			MOVWF	STACK_8
$0B7A	$01FB			CLRF	STACK_11
$0B7B	$01FC			CLRF	STACK_12
$0B7C	$309E			MOVLW	0x9E
$0B7D	$00F3			MOVWF	STACK_3
$0B7E	$01FA			CLRF	STACK_10
$0B7F	$01F2			CLRF	STACK_2
$0B80	$01F1			CLRF	STACK_1
$0B81	$01F0			CLRF	STACK_0
$0B82	$3002			MOVLW	0x02
$0B83	$00FC			MOVWF	STACK_12
$0B84	$20FD			CALL	_NRM4032
$0B85	$0008			RETURN
$089C	$	_Mul_32x32_FP:
$089C	$1303			BCF	STATUS, RP1
$089D	$1283			BCF	STATUS, RP0
$089E	$	FPM32:
$089E	$01FB			CLRF	STACK_11
$089F	$0873			MOVF	STACK_3, W
$08A0	$1D03			BTFSS	STATUS, Z
$08A1	$0877			MOVF	STACK_7, W
$08A2	$1903			BTFSC	STATUS, Z
$08A3	$28F3			GOTO	JPMRES032
$08A4	$	M32BNE0:
$08A4	$0872			MOVF	STACK_2, W
$08A5	$0676			XORWF	STACK_6, W
$08A6	$00FA			MOVWF	STACK_10
$08A7	$0877			MOVF	STACK_7, W
$08A8	$07F3			ADDWF	STACK_3, F
$08A9	$307E			MOVLW	126
$08AA	$1C03			BTFSS	STATUS, C
$08AB	$28B0			GOTO	MTUN32
$08AC	$02F3			SUBWF	STACK_3, F
$08AD	$1803			BTFSC	STATUS, C
$08AE	$28F6			GOTO	JPMSETFOV32
$08AF	$28B3			GOTO	MOK32
$08B0	$	MTUN32:
$08B0	$02F3			SUBWF	STACK_3, F
$08B1	$1C03			BTFSS	STATUS, C
$08B2	$28F9			GOTO	JPMSETFUN32
$08B3	$	MOK32:
$08B3	$0872			MOVF	STACK_2, W
$08B4	$00F8			MOVWF	STACK_8
$08B5	$0871			MOVF	STACK_1, W
$08B6	$00FC			MOVWF	STACK_12
$08B7	$0870			MOVF	STACK_0, W
$08B8	$00FD			MOVWF	STACK_13
$08B9	$17F8			BSF	STACK_8, 7
$08BA	$17F6			BSF	STACK_6, 7
$08BB	$1003			BCF	STATUS, C
$08BC	$01F2			CLRF	STACK_2
$08BD	$01F1			CLRF	STACK_1
$08BE	$01F0			CLRF	STACK_0
$08BF	$3018			MOVLW	24
$08C0	$00A0			MOVWF	__math_tempbD
$08C1	$	MLOOP32:
$08C1	$1C7D			BTFSS	STACK_13, 0
$08C2	$28CD			GOTO	MNOADD32
$08C3	$	MADD32:
$08C3	$0874			MOVF	STACK_4, W
$08C4	$07F0			ADDWF	STACK_0, F
$08C5	$0875			MOVF	STACK_5, W
$08C6	$1803			BTFSC	STATUS, C
$08C7	$0F75			INCFSZ	STACK_5, W
$08C8	$07F1			ADDWF	STACK_1, F
$08C9	$0876			MOVF	STACK_6, W
$08CA	$1803			BTFSC	STATUS, C
$08CB	$0F76			INCFSZ	STACK_6, W
$08CC	$07F2			ADDWF	STACK_2, F
$08CD	$	MNOADD32:
$08CD	$0CF2			RRF	STACK_2, F
$08CE	$0CF1			RRF	STACK_1, F
$08CF	$0CF0			RRF	STACK_0, F
$08D0	$0CF8			RRF	STACK_8, F
$08D1	$0CFC			RRF	STACK_12, F
$08D2	$0CFD			RRF	STACK_13, F
$08D3	$1003			BCF	STATUS, C
$08D4	$0BA0			DECFSZ	__math_tempbD, F
$08D5	$28C1			GOTO	MLOOP32
$08D6	$1BF2			BTFSC	STACK_2, 7
$08D7	$28DD			GOTO	MROUND32
$08D8	$0DF8			RLF	STACK_8, F
$08D9	$0DF0			RLF	STACK_0, F
$08DA	$0DF1			RLF	STACK_1, F
$08DB	$0DF2			RLF	STACK_2, F
$08DC	$03F3			DECF	STACK_3, F
$08DD	$	MROUND32:
$08DD	$1B7B			BTFSC	STACK_11, 6
$08DE	$1C70			BTFSS	STACK_0, 0
$08DF	$28EF			GOTO	MUL32OK
$08E0	$1FF8			BTFSS	STACK_8, 7
$08E1	$28EF			GOTO	MUL32OK
$08E2	$0AF0			INCF	STACK_0, F
$08E3	$1903			BTFSC	STATUS, Z
$08E4	$0AF1			INCF	STACK_1, F
$08E5	$1903			BTFSC	STATUS, Z
$08E6	$0AF2			INCF	STACK_2, F
$08E7	$1D03			BTFSS	STATUS, Z
$08E8	$28EF			GOTO	MUL32OK
$08E9	$0CF2			RRF	STACK_2, F
$08EA	$0CF1			RRF	STACK_1, F
$08EB	$0CF0			RRF	STACK_0, F
$08EC	$0AF3			INCF	STACK_3, F
$08ED	$1903			BTFSC	STATUS, Z
$08EE	$28F6			GOTO	JPMSETFOV32
$08EF	$	MUL32OK:
$08EF	$1FFA			BTFSS	STACK_10, 7
$08F0	$13F2			BCF	STACK_2, 7
$08F1	$3000			MOVLW	0x00
$08F2	$28FB			GOTO	MUL32EEE
$08F3	$	JPMRES032:
$08F3	$3001			MOVLW	0x01
$08F4	$23CA			CALL	_RES032
$08F5	$28FB			GOTO	MUL32EEE
$08F6	$	JPMSETFOV32:
$08F6	$3002			MOVLW	0x02
$08F7	$23B4			CALL	_SETFOV32
$08F8	$28FB			GOTO	MUL32EEE
$08F9	$	JPMSETFUN32:
$08F9	$3004			MOVLW	0x04
$08FA	$23A6			CALL	_SETFUN32
$08FB	$	MUL32EEE:
$08FB	$0000			NOP
$08FC	$0008			RETURN
$0959	$	_Compare_Double:
$0959	$1303			BCF	STATUS, RP1
$095A	$1283			BCF	STATUS, RP0
$095B	$01FA			CLRF	STACK_10
$095C	$0873			MOVF	STACK_3, W
$095D	$1D03			BTFSS	STATUS, Z
$095E	$147A			BSF	STACK_10, 0
$095F	$0877			MOVF	STACK_7, W
$0960	$1D03			BTFSS	STATUS, Z
$0961	$14FA			BSF	STACK_10, 1
$0962	$087A			MOVF	STACK_10, W
$0963	$1903			BTFSC	STATUS, Z
$0964	$29A5			GOTO	COMPARE_EQU
$0965	$3A03			XORLW	0x03
$0966	$1903			BTFSC	STATUS, Z
$0967	$2970			GOTO	COMPARE_NOTZERO
$0968	$187A			BTFSC	STACK_10, 0
$0969	$296D			GOTO	COMPARE_XNOTZERO
$096A	$	COMPARE_YNOTZERO:
$096A	$1FF6			BTFSS	STACK_6, 7
$096B	$29A3			GOTO	COMPARE_LT
$096C	$29A1			GOTO	COMPARE_GT
$096D	$	COMPARE_XNOTZERO:
$096D	$1FF2			BTFSS	STACK_2, 7
$096E	$29A1			GOTO	COMPARE_GT
$096F	$29A3			GOTO	COMPARE_LT
$0970	$	COMPARE_NOTZERO:
$0970	$0872			MOVF	STACK_2, W
$0971	$3980			ANDLW	0x80
$0972	$00FA			MOVWF	STACK_10
$0973	$13F2			BCF	STACK_2, 7
$0974	$0876			MOVF	STACK_6, W
$0975	$3980			ANDLW	0x80
$0976	$13F6			BCF	STACK_6, 7
$0977	$067A			XORWF	STACK_10, W
$0978	$1903			BTFSC	STATUS, Z
$0979	$297E			GOTO	COMPARE_TESTALL
$097A	$087A			MOVF	STACK_10, W
$097B	$1903			BTFSC	STATUS, Z
$097C	$29A1			GOTO	COMPARE_GT
$097D	$29A3			GOTO	COMPARE_LT
$097E	$	COMPARE_TESTALL:
$097E	$0877			MOVF	STACK_7, W
$097F	$0273			SUBWF	STACK_3, W
$0980	$1903			BTFSC	STATUS, Z
$0981	$2985			GOTO	COMPARE_C1
$0982	$1C03			BTFSS	STATUS, C
$0983	$2999			GOTO	GT_FALSE
$0984	$299D			GOTO	GT_TRUE
$0985	$	COMPARE_C1:
$0985	$0876			MOVF	STACK_6, W
$0986	$0272			SUBWF	STACK_2, W
$0987	$1903			BTFSC	STATUS, Z
$0988	$298C			GOTO	COMPARE_C2
$0989	$1C03			BTFSS	STATUS, C
$098A	$2999			GOTO	GT_FALSE
$098B	$299D			GOTO	GT_TRUE
$098C	$	COMPARE_C2:
$098C	$0875			MOVF	STACK_5, W
$098D	$0271			SUBWF	STACK_1, W
$098E	$1903			BTFSC	STATUS, Z
$098F	$2993			GOTO	COMPARE_C3
$0990	$1C03			BTFSS	STATUS, C
$0991	$2999			GOTO	GT_FALSE
$0992	$299D			GOTO	GT_TRUE
$0993	$	COMPARE_C3:
$0993	$0874			MOVF	STACK_4, W
$0994	$0270			SUBWF	STACK_0, W
$0995	$1903			BTFSC	STATUS, Z
$0996	$29A5			GOTO	COMPARE_EQU
$0997	$1803			BTFSC	STATUS, C
$0998	$299D			GOTO	GT_TRUE
$0999	$	GT_FALSE:
$0999	$08FA			MOVF	STACK_10, F
$099A	$1903			BTFSC	STATUS, Z
$099B	$29A3			GOTO	COMPARE_LT
$099C	$29A1			GOTO	COMPARE_GT
$099D	$	GT_TRUE:
$099D	$08FA			MOVF	STACK_10, F
$099E	$1903			BTFSC	STATUS, Z
$099F	$29A1			GOTO	COMPARE_GT
$09A0	$29A3			GOTO	COMPARE_LT
$09A1	$	COMPARE_GT:
$09A1	$1403			BSF	STATUS, C
$09A2	$0008			RETURN
$09A3	$	COMPARE_LT:
$09A3	$1003			BCF	STATUS, C
$09A4	$0008			RETURN
$09A5	$	COMPARE_EQU:
$09A5	$1403			BSF	STATUS, C
$09A6	$1503			BSF	STATUS, Z
$09A7	$0008			RETURN
$09A8	$0008			RETURN
$0A3E	$	_Double2Byte:
$0A3E	$1303			BCF	STATUS, RP1
$0A3F	$1283			BCF	STATUS, RP0
$0A40	$	INT32U08:
$0A40	$01FB			CLRF	STACK_11
$0A41	$01FC			CLRF	STACK_12
$0A42	$01FA			CLRF	STACK_10
$0A43	$0873			MOVF	STACK_3, W
$0A44	$1903			BTFSC	STATUS, Z
$0A45	$2A6B			GOTO	IRES008
$0A46	$13FA			BCF	STACK_10, 7
$0A47	$17F2			BSF	STACK_2, 7
$0A48	$3086			MOVLW	134
$0A49	$02F3			SUBWF	STACK_3, F
$0A4A	$1BF3			BTFSC	STACK_3, 7
$0A4B	$2A4F			GOTO	SETEXP08
$0A4C	$1903			BTFSC	STATUS, Z
$0A4D	$2A4F			GOTO	SETEXP08
$0A4E	$2A6D			GOTO	SETIOV08
$0A4F	$	SETEXP08:
$0A4F	$09F3			COMF	STACK_3, F
$0A50	$0AF3			INCF	STACK_3, F
$0A51	$3008			MOVLW	8
$0A52	$0273			SUBWF	STACK_3, W
$0A53	$1C03			BTFSS	STATUS, C
$0A54	$2A5C			GOTO	TSHIFT3208
$0A55	$00F3			MOVWF	STACK_3
$0A56	$0DF2			RLF	STACK_2, F
$0A57	$01F2			CLRF	STACK_2
$0A58	$0873			MOVF	STACK_3, W
$0A59	$1D03			BTFSS	STATUS, Z
$0A5A	$1003			BCF	STATUS, C
$0A5B	$2A63			GOTO	SHIFT3208OK
$0A5C	$	TSHIFT3208:
$0A5C	$0873			MOVF	STACK_3, W
$0A5D	$1903			BTFSC	STATUS, Z
$0A5E	$2A63			GOTO	SHIFT3208OK
$0A5F	$	SHIFT3208:
$0A5F	$1003			BCF	STATUS, C
$0A60	$0CF2			RRF	STACK_2, F
$0A61	$0BF3			DECFSZ	STACK_3, F
$0A62	$2A5F			GOTO	SHIFT3208
$0A63	$	SHIFT3208OK:
$0A63	$1B7B			BTFSC	STACK_11, 6
$0A64	$1C72			BTFSS	STACK_2, 0
$0A65	$2A6B			GOTO	INT3208OK
$0A66	$1C03			BTFSS	STATUS, C
$0A67	$2A6B			GOTO	INT3208OK
$0A68	$0AF2			INCF	STACK_2, F
$0A69	$1903			BTFSC	STATUS, Z
$0A6A	$2A72			GOTO	D2B_JPKSETIOV3224
$0A6B	$	INT3208OK:
$0A6B	$	IRES008:
$0A6B	$01F1			CLRF	STACK_1
$0A6C	$2A75			GOTO	INT3208EOK
$0A6D	$	SETIOV08:
$0A6D	$147B			BSF	STACK_11, 0
$0A6E	$1FFB			BTFSS	STACK_11, 7
$0A6F	$2A78			GOTO	INT3208EER
$0A70	$01F1			CLRF	STACK_1
$0A71	$2A78			GOTO	INT3208EER
$0A72	$	D2B_JPKSETIOV3224:
$0A72	$3001			MOVLW	0x01
$0A73	$00FC			MOVWF	STACK_12
$0A74	$2A7A			GOTO	INT3208EEE
$0A75	$	INT3208EOK:
$0A75	$3000			MOVLW	0x00
$0A76	$00FC			MOVWF	STACK_12
$0A77	$2A7A			GOTO	INT3208EEE
$0A78	$	INT3208EER:
$0A78	$30FF			MOVLW	0xFF
$0A79	$00FC			MOVWF	STACK_12
$0A7A	$	INT3208EEE:
$0A7A	$08FC			MOVF	STACK_12, F
$0A7B	$1903			BTFSC	STATUS, Z
$0A7C	$2A7E			GOTO	L_Double2Byte_0
$0A7D	$2397			CALL	_SETIOV3224
$0A7E	$	L_Double2Byte_0:
$0A7E	$0872			MOVF	STACK_2, W
$0A7F	$00F0			MOVWF	STACK_0
$0A80	$0008			RETURN
$0B86	$	_initport:
;lfr_pid_runner.c,14 :: 		void initport()
;lfr_pid_runner.c,16 :: 		ADCON1 =0x06;          //TURN OFF ADC AND CONFIGURE A AND E AS DIG I/O
$0B86	$3006			MOVLW	6
$0B87	$1303			BCF	STATUS, RP1
$0B88	$1683			BSF	STATUS, RP0
$0B89	$009F			MOVWF	ADCON1
;lfr_pid_runner.c,17 :: 		PORTA = 0;             //CLEAR PORTA
$0B8A	$1283			BCF	STATUS, RP0
$0B8B	$0185			CLRF	PORTA, 1
;lfr_pid_runner.c,18 :: 		PORTE = 0;             //CLEAR PORTE
$0B8C	$0189			CLRF	PORTE, 1
;lfr_pid_runner.c,19 :: 		TRISA = 0x3F;          //INITIALIZE PORTA AS INPUT
$0B8D	$303F			MOVLW	63
$0B8E	$1683			BSF	STATUS, RP0
$0B8F	$0085			MOVWF	TRISA
;lfr_pid_runner.c,20 :: 		TRISE = 0x03;          //INITIALIZE PORTE AS INPUT
$0B90	$3003			MOVLW	3
$0B91	$0089			MOVWF	TRISE
;lfr_pid_runner.c,21 :: 		TRISD = 0x00;          //INITIALIZE PORTD AS OUTPUT
$0B92	$0188			CLRF	TRISD, 1
;lfr_pid_runner.c,22 :: 		TRISC = 0b00000000;    //INITIALIZE PORTC AS OUTPUT
$0B93	$0187			CLRF	TRISC, 1
;lfr_pid_runner.c,23 :: 		TRISB = 0b11000000;    //INITIALIZE PORTB AS INPUT  FOR TSOP
$0B94	$30C0			MOVLW	192
$0B95	$0086			MOVWF	TRISB
;lfr_pid_runner.c,24 :: 		}
$0B96	$0008			RETURN
$0B4F	$	_initpwm:
;lfr_pid_runner.c,26 :: 		void initpwm()
;lfr_pid_runner.c,28 :: 		PWM1_Init(5000);
$0B4F	$1303			BCF	STATUS, RP1
$0B50	$1283			BCF	STATUS, RP0
$0B51	$1012			BCF	T2CON, T2CKPS0
$0B52	$1092			BCF	T2CON, T2CKPS1
$0B53	$30C7			MOVLW	199
$0B54	$1683			BSF	STATUS, RP0
$0B55	$0092			MOVWF	PR2
$0B56	$23EF			CALL	_PWM1_Init
;lfr_pid_runner.c,29 :: 		PWM2_Init(5000);
$0B57	$1012			BCF	T2CON, T2CKPS0
$0B58	$1092			BCF	T2CON, T2CKPS1
$0B59	$30C7			MOVLW	199
$0B5A	$1683			BSF	STATUS, RP0
$0B5B	$0092			MOVWF	PR2
$0B5C	$23E9			CALL	_PWM2_Init
;lfr_pid_runner.c,30 :: 		Pwm1_Start();          //RIGHT MOTOR
$0B5D	$23DB			CALL	_PWM1_Start
;lfr_pid_runner.c,31 :: 		Pwm2_Start();          //LEFT MOTOR
$0B5E	$23D3			CALL	_PWM2_Start
;lfr_pid_runner.c,32 :: 		}
$0B5F	$0008			RETURN
$06D6	$	_indicator:
;lfr_pid_runner.c,57 :: 		void indicator()        //COPY THE SENSOR OUTPUT TO PORTD-INDICATOR
;lfr_pid_runner.c,59 :: 		PORTD.F7 = PORTA.F0;
$06D6	$3001			MOVLW	1
$06D7	$1303			BCF	STATUS, RP1
$06D8	$1283			BCF	STATUS, RP0
$06D9	$0505			ANDWF	PORTA, 0
$06DA	$00F0			MOVWF	STACK_0
$06DB	$3000			MOVLW	0
$06DC	$1870			BTFSC	STACK_0, 0
$06DD	$3080			MOVLW	128
$06DE	$0608			XORWF	PORTD, 0
$06DF	$3980			ANDLW	128
$06E0	$0688			XORWF	PORTD, 1
;lfr_pid_runner.c,60 :: 		PORTD.F6 = PORTA.F1;
$06E1	$3000			MOVLW	0
$06E2	$1885			BTFSC	PORTA, 1
$06E3	$3001			MOVLW	1
$06E4	$00F1			MOVWF	STACK_1
$06E5	$3000			MOVLW	0
$06E6	$1871			BTFSC	STACK_1, 0
$06E7	$3040			MOVLW	64
$06E8	$0608			XORWF	PORTD, 0
$06E9	$3940			ANDLW	64
$06EA	$0688			XORWF	PORTD, 1
;lfr_pid_runner.c,61 :: 		PORTD.F5 = PORTA.F2;
$06EB	$3000			MOVLW	0
$06EC	$1905			BTFSC	PORTA, 2
$06ED	$3001			MOVLW	1
$06EE	$00F1			MOVWF	STACK_1
$06EF	$3000			MOVLW	0
$06F0	$1871			BTFSC	STACK_1, 0
$06F1	$3020			MOVLW	32
$06F2	$0608			XORWF	PORTD, 0
$06F3	$3920			ANDLW	32
$06F4	$0688			XORWF	PORTD, 1
;lfr_pid_runner.c,62 :: 		PORTD.F4 = PORTA.F3;
$06F5	$3000			MOVLW	0
$06F6	$1985			BTFSC	PORTA, 3
$06F7	$3001			MOVLW	1
$06F8	$00F1			MOVWF	STACK_1
$06F9	$3000			MOVLW	0
$06FA	$1871			BTFSC	STACK_1, 0
$06FB	$3010			MOVLW	16
$06FC	$0608			XORWF	PORTD, 0
$06FD	$3910			ANDLW	16
$06FE	$0688			XORWF	PORTD, 1
;lfr_pid_runner.c,63 :: 		PORTD.F3 = PORTA.F4;
$06FF	$3000			MOVLW	0
$0700	$1A05			BTFSC	PORTA, 4
$0701	$3001			MOVLW	1
$0702	$00F1			MOVWF	STACK_1
$0703	$3000			MOVLW	0
$0704	$1871			BTFSC	STACK_1, 0
$0705	$3008			MOVLW	8
$0706	$0608			XORWF	PORTD, 0
$0707	$3908			ANDLW	8
$0708	$0688			XORWF	PORTD, 1
;lfr_pid_runner.c,64 :: 		PORTD.F2 = PORTA.F5;
$0709	$3000			MOVLW	0
$070A	$1A85			BTFSC	PORTA, 5
$070B	$3001			MOVLW	1
$070C	$00F1			MOVWF	STACK_1
$070D	$3000			MOVLW	0
$070E	$1871			BTFSC	STACK_1, 0
$070F	$3004			MOVLW	4
$0710	$0608			XORWF	PORTD, 0
$0711	$3904			ANDLW	4
$0712	$0688			XORWF	PORTD, 1
;lfr_pid_runner.c,65 :: 		PORTD.F1 = PORTE.F0;
$0713	$3001			MOVLW	1
$0714	$0509			ANDWF	PORTE, 0
$0715	$00F0			MOVWF	STACK_0
$0716	$3000			MOVLW	0
$0717	$1870			BTFSC	STACK_0, 0
$0718	$3002			MOVLW	2
$0719	$0608			XORWF	PORTD, 0
$071A	$3902			ANDLW	2
$071B	$0688			XORWF	PORTD, 1
;lfr_pid_runner.c,66 :: 		PORTD.F0 = PORTE.F1;
$071C	$3000			MOVLW	0
$071D	$1889			BTFSC	PORTE, 1
$071E	$3001			MOVLW	1
$071F	$00F1			MOVWF	STACK_1
$0720	$3000			MOVLW	0
$0721	$1871			BTFSC	STACK_1, 0
$0722	$3001			MOVLW	1
$0723	$0608			XORWF	PORTD, 0
$0724	$3901			ANDLW	1
$0725	$0688			XORWF	PORTD, 1
;lfr_pid_runner.c,67 :: 		}
$0726	$0008			RETURN
$04ED	$	_CalcError:
;lfr_pid_runner.c,68 :: 		void CalcError()				//calculates the current error
;lfr_pid_runner.c,70 :: 		s1 = 0;
$04ED	$1303			BCF	STATUS, RP1
$04EE	$1283			BCF	STATUS, RP0
$04EF	$01A1			CLRF	_s1
$04F0	$01A2			CLRF	_s1+1
;lfr_pid_runner.c,71 :: 		s2 = 0;
$04F1	$01A3			CLRF	_s2
$04F2	$01A4			CLRF	_s2+1
;lfr_pid_runner.c,72 :: 		s3 = 0;
$04F3	$01A5			CLRF	_s3
$04F4	$01A6			CLRF	_s3+1
;lfr_pid_runner.c,73 :: 		s4 = 0;
$04F5	$01A7			CLRF	_s4
$04F6	$01A8			CLRF	_s4+1
;lfr_pid_runner.c,74 :: 		s5 = 0;
$04F7	$01A9			CLRF	_s5
$04F8	$01AA			CLRF	_s5+1
;lfr_pid_runner.c,75 :: 		s6 = 0;
$04F9	$01AB			CLRF	_s6
$04FA	$01AC			CLRF	_s6+1
;lfr_pid_runner.c,76 :: 		s7 = 0;
$04FB	$01AD			CLRF	_s7
$04FC	$01AE			CLRF	_s7+1
;lfr_pid_runner.c,77 :: 		s8 = 0;
$04FD	$01AF			CLRF	_s8
$04FE	$01B0			CLRF	_s8+1
;lfr_pid_runner.c,79 :: 		if(PORTA.F0)
$04FF	$1C05			BTFSS	PORTA, 0
$0500	$2D07			GOTO	L_CalcError_0
;lfr_pid_runner.c,81 :: 		lastreading='r';
$0501	$3072			MOVLW	114
$0502	$00B1			MOVWF	_lastreading
;lfr_pid_runner.c,82 :: 		s1 = 1;
$0503	$3001			MOVLW	1
$0504	$00A1			MOVWF	_s1
$0505	$3000			MOVLW	0
$0506	$00A2			MOVWF	_s1+1
;lfr_pid_runner.c,83 :: 		}
$0507	$	L_CalcError_0:
;lfr_pid_runner.c,84 :: 		if(PORTA.F1)
$0507	$1C85			BTFSS	PORTA, 1
$0508	$2D0D			GOTO	L_CalcError_1
;lfr_pid_runner.c,86 :: 		s2 = 1;
$0509	$3001			MOVLW	1
$050A	$00A3			MOVWF	_s2
$050B	$3000			MOVLW	0
$050C	$00A4			MOVWF	_s2+1
;lfr_pid_runner.c,87 :: 		}
$050D	$	L_CalcError_1:
;lfr_pid_runner.c,88 :: 		if(PORTA.F2)
$050D	$1D05			BTFSS	PORTA, 2
$050E	$2D13			GOTO	L_CalcError_2
;lfr_pid_runner.c,90 :: 		s3 = 1;
$050F	$3001			MOVLW	1
$0510	$00A5			MOVWF	_s3
$0511	$3000			MOVLW	0
$0512	$00A6			MOVWF	_s3+1
;lfr_pid_runner.c,91 :: 		}
$0513	$	L_CalcError_2:
;lfr_pid_runner.c,92 :: 		if(PORTA.F3)
$0513	$1D85			BTFSS	PORTA, 3
$0514	$2D19			GOTO	L_CalcError_3
;lfr_pid_runner.c,95 :: 		s4 = 1;
$0515	$3001			MOVLW	1
$0516	$00A7			MOVWF	_s4
$0517	$3000			MOVLW	0
$0518	$00A8			MOVWF	_s4+1
;lfr_pid_runner.c,96 :: 		}
$0519	$	L_CalcError_3:
;lfr_pid_runner.c,97 :: 		if(PORTA.F4)
$0519	$1E05			BTFSS	PORTA, 4
$051A	$2D1F			GOTO	L_CalcError_4
;lfr_pid_runner.c,99 :: 		s5 = 1;
$051B	$3001			MOVLW	1
$051C	$00A9			MOVWF	_s5
$051D	$3000			MOVLW	0
$051E	$00AA			MOVWF	_s5+1
;lfr_pid_runner.c,100 :: 		}
$051F	$	L_CalcError_4:
;lfr_pid_runner.c,101 :: 		if(PORTA.F5)
$051F	$1E85			BTFSS	PORTA, 5
$0520	$2D25			GOTO	L_CalcError_5
;lfr_pid_runner.c,103 :: 		s6 = 1;
$0521	$3001			MOVLW	1
$0522	$00AB			MOVWF	_s6
$0523	$3000			MOVLW	0
$0524	$00AC			MOVWF	_s6+1
$0525	$	L_CalcError_5:
;lfr_pid_runner.c,104 :: 		if(PORTE.F0)
$0525	$1C09			BTFSS	PORTE, 0
$0526	$2D2B			GOTO	L_CalcError_6
;lfr_pid_runner.c,107 :: 		s7 = 1;
$0527	$3001			MOVLW	1
$0528	$00AD			MOVWF	_s7
$0529	$3000			MOVLW	0
$052A	$00AE			MOVWF	_s7+1
;lfr_pid_runner.c,108 :: 		}
$052B	$	L_CalcError_6:
;lfr_pid_runner.c,109 :: 		if(PORTE.F1)
$052B	$1C89			BTFSS	PORTE, 1
$052C	$2D33			GOTO	L_CalcError_7
;lfr_pid_runner.c,111 :: 		lastreading='l';
$052D	$306C			MOVLW	108
$052E	$00B1			MOVWF	_lastreading
;lfr_pid_runner.c,112 :: 		s8 = 1;
$052F	$3001			MOVLW	1
$0530	$00AF			MOVWF	_s8
$0531	$3000			MOVLW	0
$0532	$00B0			MOVWF	_s8+1
;lfr_pid_runner.c,113 :: 		}
$0533	$	L_CalcError_7:
;lfr_pid_runner.c,114 :: 		perror = error;
$0533	$0836			MOVF	_error, 0
$0534	$00B2			MOVWF	_perror
$0535	$0837			MOVF	_error+1, 0
$0536	$00B3			MOVWF	_perror+1
$0537	$0838			MOVF	_error+2, 0
$0538	$00B4			MOVWF	_perror+2
$0539	$0839			MOVF	_error+3, 0
$053A	$00B5			MOVWF	_perror+3
;lfr_pid_runner.c,118 :: 		error = (s1 * 1) + (s2 * 2) + (s3 * 3) + (s4 * 4) + (s5 * 5) + (s6 * 6) +(s7 * 7) + (s8*8);
$053B	$3001			MOVLW	1
$053C	$00F4			MOVWF	STACK_4
$053D	$0823			MOVF	_s2, 0
$053E	$00F0			MOVWF	STACK_0
$053F	$0824			MOVF	_s2+1, 0
$0540	$00F1			MOVWF	STACK_0+1
$0541	$0874			MOVF	STACK_4, 0
$0542	$	L_CalcError_33:
$0542	$1903			BTFSC	STATUS, Z
$0543	$2D49			GOTO	L_CalcError_34
$0544	$0DF0			RLF	STACK_0, 1
$0545	$0DF1			RLF	STACK_0+1, 1
$0546	$1070			BCF	STACK_0, 0
$0547	$3FFF			ADDLW	255
$0548	$2D42			GOTO	L_CalcError_33
$0549	$	L_CalcError_34:
$0549	$0870			MOVF	STACK_0, 0
$054A	$0721			ADDWF	_s1, 0
$054B	$00E2			MOVWF	FLOC_CalcError+0
$054C	$0822			MOVF	_s1+1, 0
$054D	$1803			BTFSC	STATUS, C
$054E	$3F01			ADDLW	1
$054F	$0771			ADDWF	STACK_0+1, 0
$0550	$00E3			MOVWF	FLOC_CalcError+1
$0551	$0825			MOVF	_s3, 0
$0552	$00F0			MOVWF	STACK_0
$0553	$0826			MOVF	_s3+1, 0
$0554	$00F1			MOVWF	STACK_0+1
$0555	$3003			MOVLW	3
$0556	$00F4			MOVWF	STACK_4
$0557	$3000			MOVLW	0
$0558	$00F5			MOVWF	STACK_4+1
$0559	$158A			BSF	PCLATH, 3
$055A	$2324			CALL	_mul_16x16_u
$055B	$118A			BCF	PCLATH, 3
$055C	$0870			MOVF	STACK_0, 0
$055D	$07E2			ADDWF	FLOC_CalcError+0, 1
$055E	$0871			MOVF	STACK_0+1, 0
$055F	$1803			BTFSC	STATUS, C
$0560	$3F01			ADDLW	1
$0561	$07E3			ADDWF	FLOC_CalcError+1, 1
$0562	$3002			MOVLW	2
$0563	$00F4			MOVWF	STACK_4
$0564	$0827			MOVF	_s4, 0
$0565	$00F0			MOVWF	STACK_0
$0566	$0828			MOVF	_s4+1, 0
$0567	$00F1			MOVWF	STACK_0+1
$0568	$0874			MOVF	STACK_4, 0
$0569	$	L_CalcError_35:
$0569	$1903			BTFSC	STATUS, Z
$056A	$2D70			GOTO	L_CalcError_36
$056B	$0DF0			RLF	STACK_0, 1
$056C	$0DF1			RLF	STACK_0+1, 1
$056D	$1070			BCF	STACK_0, 0
$056E	$3FFF			ADDLW	255
$056F	$2D69			GOTO	L_CalcError_35
$0570	$	L_CalcError_36:
$0570	$0870			MOVF	STACK_0, 0
$0571	$07E2			ADDWF	FLOC_CalcError+0, 1
$0572	$0871			MOVF	STACK_0+1, 0
$0573	$1803			BTFSC	STATUS, C
$0574	$3F01			ADDLW	1
$0575	$07E3			ADDWF	FLOC_CalcError+1, 1
$0576	$0829			MOVF	_s5, 0
$0577	$00F0			MOVWF	STACK_0
$0578	$082A			MOVF	_s5+1, 0
$0579	$00F1			MOVWF	STACK_0+1
$057A	$3005			MOVLW	5
$057B	$00F4			MOVWF	STACK_4
$057C	$3000			MOVLW	0
$057D	$00F5			MOVWF	STACK_4+1
$057E	$158A			BSF	PCLATH, 3
$057F	$2324			CALL	_mul_16x16_u
$0580	$118A			BCF	PCLATH, 3
$0581	$0870			MOVF	STACK_0, 0
$0582	$07E2			ADDWF	FLOC_CalcError+0, 1
$0583	$0871			MOVF	STACK_0+1, 0
$0584	$1803			BTFSC	STATUS, C
$0585	$3F01			ADDLW	1
$0586	$07E3			ADDWF	FLOC_CalcError+1, 1
$0587	$082B			MOVF	_s6, 0
$0588	$00F0			MOVWF	STACK_0
$0589	$082C			MOVF	_s6+1, 0
$058A	$00F1			MOVWF	STACK_0+1
$058B	$3006			MOVLW	6
$058C	$00F4			MOVWF	STACK_4
$058D	$3000			MOVLW	0
$058E	$00F5			MOVWF	STACK_4+1
$058F	$158A			BSF	PCLATH, 3
$0590	$2324			CALL	_mul_16x16_u
$0591	$118A			BCF	PCLATH, 3
$0592	$0870			MOVF	STACK_0, 0
$0593	$07E2			ADDWF	FLOC_CalcError+0, 1
$0594	$0871			MOVF	STACK_0+1, 0
$0595	$1803			BTFSC	STATUS, C
$0596	$3F01			ADDLW	1
$0597	$07E3			ADDWF	FLOC_CalcError+1, 1
$0598	$082D			MOVF	_s7, 0
$0599	$00F0			MOVWF	STACK_0
$059A	$082E			MOVF	_s7+1, 0
$059B	$00F1			MOVWF	STACK_0+1
$059C	$3007			MOVLW	7
$059D	$00F4			MOVWF	STACK_4
$059E	$3000			MOVLW	0
$059F	$00F5			MOVWF	STACK_4+1
$05A0	$158A			BSF	PCLATH, 3
$05A1	$2324			CALL	_mul_16x16_u
$05A2	$118A			BCF	PCLATH, 3
$05A3	$0870			MOVF	STACK_0, 0
$05A4	$07E2			ADDWF	FLOC_CalcError+0, 1
$05A5	$0871			MOVF	STACK_0+1, 0
$05A6	$1803			BTFSC	STATUS, C
$05A7	$3F01			ADDLW	1
$05A8	$07E3			ADDWF	FLOC_CalcError+1, 1
$05A9	$3003			MOVLW	3
$05AA	$00F4			MOVWF	STACK_4
$05AB	$082F			MOVF	_s8, 0
$05AC	$00F0			MOVWF	STACK_0
$05AD	$0830			MOVF	_s8+1, 0
$05AE	$00F1			MOVWF	STACK_0+1
$05AF	$0874			MOVF	STACK_4, 0
$05B0	$	L_CalcError_37:
$05B0	$1903			BTFSC	STATUS, Z
$05B1	$2DB7			GOTO	L_CalcError_38
$05B2	$0DF0			RLF	STACK_0, 1
$05B3	$0DF1			RLF	STACK_0+1, 1
$05B4	$1070			BCF	STACK_0, 0
$05B5	$3FFF			ADDLW	255
$05B6	$2DB0			GOTO	L_CalcError_37
$05B7	$	L_CalcError_38:
$05B7	$0862			MOVF	FLOC_CalcError+0, 0
$05B8	$07F0			ADDWF	STACK_0, 1
$05B9	$0863			MOVF	FLOC_CalcError+1, 0
$05BA	$1803			BTFSC	STATUS, C
$05BB	$3F01			ADDLW	1
$05BC	$07F1			ADDWF	STACK_0+1, 1
$05BD	$158A			BSF	PCLATH, 3
$05BE	$2360			CALL	_word2double
$05BF	$118A			BCF	PCLATH, 3
$05C0	$0870			MOVF	STACK_0, 0
$05C1	$00E2			MOVWF	FLOC_CalcError+0
$05C2	$0871			MOVF	STACK_0+1, 0
$05C3	$00E3			MOVWF	FLOC_CalcError+1
$05C4	$0872			MOVF	STACK_0+2, 0
$05C5	$00E4			MOVWF	FLOC_CalcError+2
$05C6	$0873			MOVF	STACK_0+3, 0
$05C7	$00E5			MOVWF	FLOC_CalcError+3
$05C8	$0862			MOVF	FLOC_CalcError+0, 0
$05C9	$00B6			MOVWF	_error
$05CA	$0863			MOVF	FLOC_CalcError+1, 0
$05CB	$00B7			MOVWF	_error+1
$05CC	$0864			MOVF	FLOC_CalcError+2, 0
$05CD	$00B8			MOVWF	_error+2
$05CE	$0865			MOVF	FLOC_CalcError+3, 0
$05CF	$00B9			MOVWF	_error+3
;lfr_pid_runner.c,119 :: 		error = (error)/(s1+s2+s3+s4+s5+s6+s7+s8);
$05D0	$0823			MOVF	_s2, 0
$05D1	$0721			ADDWF	_s1, 0
$05D2	$00F0			MOVWF	STACK_0
$05D3	$0822			MOVF	_s1+1, 0
$05D4	$1803			BTFSC	STATUS, C
$05D5	$3F01			ADDLW	1
$05D6	$0724			ADDWF	_s2+1, 0
$05D7	$00F1			MOVWF	STACK_0+1
$05D8	$0825			MOVF	_s3, 0
$05D9	$07F0			ADDWF	STACK_0, 1
$05DA	$0826			MOVF	_s3+1, 0
$05DB	$1803			BTFSC	STATUS, C
$05DC	$3F01			ADDLW	1
$05DD	$07F1			ADDWF	STACK_0+1, 1
$05DE	$0827			MOVF	_s4, 0
$05DF	$07F0			ADDWF	STACK_0, 1
$05E0	$0828			MOVF	_s4+1, 0
$05E1	$1803			BTFSC	STATUS, C
$05E2	$3F01			ADDLW	1
$05E3	$07F1			ADDWF	STACK_0+1, 1
$05E4	$0829			MOVF	_s5, 0
$05E5	$07F0			ADDWF	STACK_0, 1
$05E6	$082A			MOVF	_s5+1, 0
$05E7	$1803			BTFSC	STATUS, C
$05E8	$3F01			ADDLW	1
$05E9	$07F1			ADDWF	STACK_0+1, 1
$05EA	$082B			MOVF	_s6, 0
$05EB	$07F0			ADDWF	STACK_0, 1
$05EC	$082C			MOVF	_s6+1, 0
$05ED	$1803			BTFSC	STATUS, C
$05EE	$3F01			ADDLW	1
$05EF	$07F1			ADDWF	STACK_0+1, 1
$05F0	$082D			MOVF	_s7, 0
$05F1	$07F0			ADDWF	STACK_0, 1
$05F2	$082E			MOVF	_s7+1, 0
$05F3	$1803			BTFSC	STATUS, C
$05F4	$3F01			ADDLW	1
$05F5	$07F1			ADDWF	STACK_0+1, 1
$05F6	$082F			MOVF	_s8, 0
$05F7	$07F0			ADDWF	STACK_0, 1
$05F8	$0830			MOVF	_s8+1, 0
$05F9	$1803			BTFSC	STATUS, C
$05FA	$3F01			ADDLW	1
$05FB	$07F1			ADDWF	STACK_0+1, 1
$05FC	$158A			BSF	PCLATH, 3
$05FD	$2360			CALL	_word2double
$05FE	$118A			BCF	PCLATH, 3
$05FF	$0870			MOVF	STACK_0, 0
$0600	$00F4			MOVWF	STACK_4
$0601	$0871			MOVF	STACK_0+1, 0
$0602	$00F5			MOVWF	STACK_4+1
$0603	$0872			MOVF	STACK_0+2, 0
$0604	$00F6			MOVWF	STACK_4+2
$0605	$0873			MOVF	STACK_0+3, 0
$0606	$00F7			MOVWF	STACK_4+3
$0607	$0862			MOVF	FLOC_CalcError+0, 0
$0608	$00F0			MOVWF	STACK_0
$0609	$0863			MOVF	FLOC_CalcError+1, 0
$060A	$00F1			MOVWF	STACK_0+1
$060B	$0864			MOVF	FLOC_CalcError+2, 0
$060C	$00F2			MOVWF	STACK_0+2
$060D	$0865			MOVF	FLOC_CalcError+3, 0
$060E	$00F3			MOVWF	STACK_0+3
$060F	$158A			BSF	PCLATH, 3
$0610	$2000			CALL	_div_32x32_fp
$0611	$118A			BCF	PCLATH, 3
$0612	$0870			MOVF	STACK_0, 0
$0613	$00B6			MOVWF	_error
$0614	$0871			MOVF	STACK_0+1, 0
$0615	$00B7			MOVWF	_error+1
$0616	$0872			MOVF	STACK_0+2, 0
$0617	$00B8			MOVWF	_error+2
$0618	$0873			MOVF	STACK_0+3, 0
$0619	$00B9			MOVWF	_error+3
;lfr_pid_runner.c,120 :: 		error = error - 4;
$061A	$3000			MOVLW	0
$061B	$00F4			MOVWF	STACK_4
$061C	$3000			MOVLW	0
$061D	$00F5			MOVWF	STACK_4+1
$061E	$3000			MOVLW	0
$061F	$00F6			MOVWF	STACK_4+2
$0620	$3081			MOVLW	129
$0621	$00F7			MOVWF	STACK_4+3
$0622	$158A			BSF	PCLATH, 3
$0623	$23C2			CALL	_sub_32x32_fp
$0624	$118A			BCF	PCLATH, 3
$0625	$0870			MOVF	STACK_0, 0
$0626	$00B6			MOVWF	_error
$0627	$0871			MOVF	STACK_0+1, 0
$0628	$00B7			MOVWF	_error+1
$0629	$0872			MOVF	STACK_0+2, 0
$062A	$00B8			MOVWF	_error+2
$062B	$0873			MOVF	STACK_0+3, 0
$062C	$00B9			MOVWF	_error+3
;lfr_pid_runner.c,121 :: 		}
$062D	$0008			RETURN
$02B8	$	_tsop_f_sense:
;lfr_pid_runner.c,122 :: 		void tsop_f_sense()
;lfr_pid_runner.c,124 :: 		if((s1+s2+s3+s4+s5+s6+s7+s8) == 0)		  //ROBOT HAS OVERSHOOT
$02B8	$1303			BCF	STATUS, RP1
$02B9	$1283			BCF	STATUS, RP0
$02BA	$0823			MOVF	_s2, 0
$02BB	$0721			ADDWF	_s1, 0
$02BC	$00F0			MOVWF	STACK_0
$02BD	$0822			MOVF	_s1+1, 0
$02BE	$1803			BTFSC	STATUS, C
$02BF	$3F01			ADDLW	1
$02C0	$0724			ADDWF	_s2+1, 0
$02C1	$00F1			MOVWF	STACK_0+1
$02C2	$0825			MOVF	_s3, 0
$02C3	$07F0			ADDWF	STACK_0, 1
$02C4	$0826			MOVF	_s3+1, 0
$02C5	$1803			BTFSC	STATUS, C
$02C6	$3F01			ADDLW	1
$02C7	$07F1			ADDWF	STACK_0+1, 1
$02C8	$0827			MOVF	_s4, 0
$02C9	$07F0			ADDWF	STACK_0, 1
$02CA	$0828			MOVF	_s4+1, 0
$02CB	$1803			BTFSC	STATUS, C
$02CC	$3F01			ADDLW	1
$02CD	$07F1			ADDWF	STACK_0+1, 1
$02CE	$0829			MOVF	_s5, 0
$02CF	$07F0			ADDWF	STACK_0, 1
$02D0	$082A			MOVF	_s5+1, 0
$02D1	$1803			BTFSC	STATUS, C
$02D2	$3F01			ADDLW	1
$02D3	$07F1			ADDWF	STACK_0+1, 1
$02D4	$082B			MOVF	_s6, 0
$02D5	$07F0			ADDWF	STACK_0, 1
$02D6	$082C			MOVF	_s6+1, 0
$02D7	$1803			BTFSC	STATUS, C
$02D8	$3F01			ADDLW	1
$02D9	$07F1			ADDWF	STACK_0+1, 1
$02DA	$082D			MOVF	_s7, 0
$02DB	$07F0			ADDWF	STACK_0, 1
$02DC	$082E			MOVF	_s7+1, 0
$02DD	$1803			BTFSC	STATUS, C
$02DE	$3F01			ADDLW	1
$02DF	$07F1			ADDWF	STACK_0+1, 1
$02E0	$082F			MOVF	_s8, 0
$02E1	$0770			ADDWF	STACK_0, 0
$02E2	$00F4			MOVWF	STACK_4
$02E3	$0871			MOVF	STACK_0+1, 0
$02E4	$1803			BTFSC	STATUS, C
$02E5	$3F01			ADDLW	1
$02E6	$0730			ADDWF	_s8+1, 0
$02E7	$00F5			MOVWF	STACK_4+1
$02E8	$3000			MOVLW	0
$02E9	$0675			XORWF	STACK_4+1, 0
$02EA	$1D03			BTFSS	STATUS, Z
$02EB	$2AEE			GOTO	L_tsop_f_sense_39
$02EC	$3000			MOVLW	0
$02ED	$0674			XORWF	STACK_4, 0
$02EE	$	L_tsop_f_sense_39:
$02EE	$1D03			BTFSS	STATUS, Z
$02EF	$2CEC			GOTO	L_tsop_f_sense_8
;lfr_pid_runner.c,126 :: 		if(lastreading == 'r')				  //CHECKS IF THE LAST SENSOR ACTIVATED WAS RIGHT
$02F0	$0831			MOVF	_lastreading, 0
$02F1	$3A72			XORLW	114
$02F2	$1D03			BTFSS	STATUS, Z
$02F3	$2B14			GOTO	L_tsop_f_sense_9
;lfr_pid_runner.c,128 :: 		motor_RF();						        //TURN RIGHT AT FULL SPEED
$02F4	$158A			BSF	PCLATH, 3
$02F5	$2404			CALL	_motor_RF
$02F6	$118A			BCF	PCLATH, 3
;lfr_pid_runner.c,129 :: 		motor_LB();
$02F7	$158A			BSF	PCLATH, 3
$02F8	$2409			CALL	_motor_LB
$02F9	$118A			BCF	PCLATH, 3
;lfr_pid_runner.c,130 :: 		PWM1_CHANGE_DUTY(255);
$02FA	$30FF			MOVLW	255
$02FB	$00EE			MOVWF	FARG_PWM1_Change_Duty+0
$02FC	$158A			BSF	PCLATH, 3
$02FD	$2281			CALL	_PWM1_Change_Duty
$02FE	$118A			BCF	PCLATH, 3
;lfr_pid_runner.c,131 :: 		PWM2_CHANGE_DUTY(255);
$02FF	$30FF			MOVLW	255
$0300	$00EE			MOVWF	FARG_PWM2_Change_Duty+0
$0301	$158A			BSF	PCLATH, 3
$0302	$22EB			CALL	_PWM2_Change_Duty
$0303	$118A			BCF	PCLATH, 3
;lfr_pid_runner.c,132 :: 		delay_ms(10);
$0304	$300D			MOVLW	13
$0305	$00FB			MOVWF	STACK_11
$0306	$30FF			MOVLW	255
$0307	$00FA			MOVWF	STACK_10
$0308	$0BFB			DECFSZ	STACK_11, F
$0309	$2B0B			GOTO	$+2
$030A	$2B0E			GOTO	$+4
$030B	$0BFA			DECFSZ	STACK_10, F
$030C	$2B0B			GOTO	$-1
$030D	$2B08			GOTO	$-5
$030E	$30F3			MOVLW	243
$030F	$00FA			MOVWF	STACK_10
$0310	$0BFA			DECFSZ	STACK_10, F
$0311	$2B10			GOTO	$-1
$0312	$0000			NOP
;lfr_pid_runner.c,133 :: 		}
$0313	$2CDD			GOTO	L_tsop_f_sense_10
$0314	$	L_tsop_f_sense_9:
;lfr_pid_runner.c,134 :: 		else if(lastreading == 'l')			  //CHECKS IF THE LAST SENSOR ACTIVATED WAS LEFT
$0314	$0831			MOVF	_lastreading, 0
$0315	$3A6C			XORLW	108
$0316	$1D03			BTFSS	STATUS, Z
$0317	$2B38			GOTO	L_tsop_f_sense_11
;lfr_pid_runner.c,136 :: 		motor_LF();					        	//TURN LEFT AT FULL SPEED
$0318	$158A			BSF	PCLATH, 3
$0319	$23FA			CALL	_motor_LF
$031A	$118A			BCF	PCLATH, 3
;lfr_pid_runner.c,137 :: 		motor_RB();
$031B	$158A			BSF	PCLATH, 3
$031C	$23F5			CALL	_motor_RB
$031D	$118A			BCF	PCLATH, 3
;lfr_pid_runner.c,138 :: 		PWM1_CHANGE_DUTY(255);
$031E	$30FF			MOVLW	255
$031F	$00EE			MOVWF	FARG_PWM1_Change_Duty+0
$0320	$158A			BSF	PCLATH, 3
$0321	$2281			CALL	_PWM1_Change_Duty
$0322	$118A			BCF	PCLATH, 3
;lfr_pid_runner.c,139 :: 		PWM2_CHANGE_DUTY(255);
$0323	$30FF			MOVLW	255
$0324	$00EE			MOVWF	FARG_PWM2_Change_Duty+0
$0325	$158A			BSF	PCLATH, 3
$0326	$22EB			CALL	_PWM2_Change_Duty
$0327	$118A			BCF	PCLATH, 3
;lfr_pid_runner.c,140 :: 		delay_ms(10);
$0328	$300D			MOVLW	13
$0329	$00FB			MOVWF	STACK_11
$032A	$30FF			MOVLW	255
$032B	$00FA			MOVWF	STACK_10
$032C	$0BFB			DECFSZ	STACK_11, F
$032D	$2B2F			GOTO	$+2
$032E	$2B32			GOTO	$+4
$032F	$0BFA			DECFSZ	STACK_10, F
$0330	$2B2F			GOTO	$-1
$0331	$2B2C			GOTO	$-5
$0332	$30F3			MOVLW	243
$0333	$00FA			MOVWF	STACK_10
$0334	$0BFA			DECFSZ	STACK_10, F
$0335	$2B34			GOTO	$-1
$0336	$0000			NOP
;lfr_pid_runner.c,141 :: 		}
$0337	$2CDD			GOTO	L_tsop_f_sense_12
$0338	$	L_tsop_f_sense_11:
;lfr_pid_runner.c,144 :: 		PROPORTIONAL = error * kp;
$0338	$083E			MOVF	_Kp, 0
$0339	$00F0			MOVWF	STACK_0
$033A	$158A			BSF	PCLATH, 3
$033B	$2376			CALL	_byte2double
$033C	$118A			BCF	PCLATH, 3
$033D	$0836			MOVF	_error, 0
$033E	$00F4			MOVWF	STACK_4
$033F	$0837			MOVF	_error+1, 0
$0340	$00F5			MOVWF	STACK_4+1
$0341	$0838			MOVF	_error+2, 0
$0342	$00F6			MOVWF	STACK_4+2
$0343	$0839			MOVF	_error+3, 0
$0344	$00F7			MOVWF	STACK_4+3
$0345	$158A			BSF	PCLATH, 3
$0346	$209C			CALL	_mul_32x32_fp
$0347	$118A			BCF	PCLATH, 3
$0348	$0870			MOVF	STACK_0, 0
$0349	$00EA			MOVWF	FLOC_tsop_f_sense+8
$034A	$0871			MOVF	STACK_0+1, 0
$034B	$00EB			MOVWF	FLOC_tsop_f_sense+9
$034C	$0872			MOVF	STACK_0+2, 0
$034D	$00EC			MOVWF	FLOC_tsop_f_sense+10
$034E	$0873			MOVF	STACK_0+3, 0
$034F	$00ED			MOVWF	FLOC_tsop_f_sense+11
$0350	$086A			MOVF	FLOC_tsop_f_sense+8, 0
$0351	$00BA			MOVWF	_PROPORTIONAL
$0352	$086B			MOVF	FLOC_tsop_f_sense+9, 0
$0353	$00BB			MOVWF	_PROPORTIONAL+1
$0354	$086C			MOVF	FLOC_tsop_f_sense+10, 0
$0355	$00BC			MOVWF	_PROPORTIONAL+2
$0356	$086D			MOVF	FLOC_tsop_f_sense+11, 0
$0357	$00BD			MOVWF	_PROPORTIONAL+3
;lfr_pid_runner.c,145 :: 		INTEGRAL += error ;
$0358	$083F			MOVF	_INTEGRAL, 0
$0359	$00F0			MOVWF	STACK_0
$035A	$0840			MOVF	_INTEGRAL+1, 0
$035B	$00F1			MOVWF	STACK_0+1
$035C	$0841			MOVF	_INTEGRAL+2, 0
$035D	$00F2			MOVWF	STACK_0+2
$035E	$0842			MOVF	_INTEGRAL+3, 0
$035F	$00F3			MOVWF	STACK_0+3
$0360	$0836			MOVF	_error, 0
$0361	$00F4			MOVWF	STACK_4
$0362	$0837			MOVF	_error+1, 0
$0363	$00F5			MOVWF	STACK_4+1
$0364	$0838			MOVF	_error+2, 0
$0365	$00F6			MOVWF	STACK_4+2
$0366	$0839			MOVF	_error+3, 0
$0367	$00F7			MOVWF	STACK_4+3
$0368	$262E			CALL	_add_32x32_fp
$0369	$0870			MOVF	STACK_0, 0
$036A	$00E2			MOVWF	FLOC_tsop_f_sense+0
$036B	$0871			MOVF	STACK_0+1, 0
$036C	$00E3			MOVWF	FLOC_tsop_f_sense+1
$036D	$0872			MOVF	STACK_0+2, 0
$036E	$00E4			MOVWF	FLOC_tsop_f_sense+2
$036F	$0873			MOVF	STACK_0+3, 0
$0370	$00E5			MOVWF	FLOC_tsop_f_sense+3
$0371	$0862			MOVF	FLOC_tsop_f_sense+0, 0
$0372	$00BF			MOVWF	_INTEGRAL
$0373	$0863			MOVF	FLOC_tsop_f_sense+1, 0
$0374	$00C0			MOVWF	_INTEGRAL+1
$0375	$0864			MOVF	FLOC_tsop_f_sense+2, 0
$0376	$00C1			MOVWF	_INTEGRAL+2
$0377	$0865			MOVF	FLOC_tsop_f_sense+3, 0
$0378	$00C2			MOVWF	_INTEGRAL+3
;lfr_pid_runner.c,146 :: 		INTEGRAL *= ki;
$0379	$0843			MOVF	_Ki, 0
$037A	$00F0			MOVWF	STACK_0
$037B	$158A			BSF	PCLATH, 3
$037C	$2376			CALL	_byte2double
$037D	$118A			BCF	PCLATH, 3
$037E	$0862			MOVF	FLOC_tsop_f_sense+0, 0
$037F	$00F4			MOVWF	STACK_4
$0380	$0863			MOVF	FLOC_tsop_f_sense+1, 0
$0381	$00F5			MOVWF	STACK_4+1
$0382	$0864			MOVF	FLOC_tsop_f_sense+2, 0
$0383	$00F6			MOVWF	STACK_4+2
$0384	$0865			MOVF	FLOC_tsop_f_sense+3, 0
$0385	$00F7			MOVWF	STACK_4+3
$0386	$158A			BSF	PCLATH, 3
$0387	$209C			CALL	_mul_32x32_fp
$0388	$118A			BCF	PCLATH, 3
$0389	$0870			MOVF	STACK_0, 0
$038A	$00E2			MOVWF	FLOC_tsop_f_sense+0
$038B	$0871			MOVF	STACK_0+1, 0
$038C	$00E3			MOVWF	FLOC_tsop_f_sense+1
$038D	$0872			MOVF	STACK_0+2, 0
$038E	$00E4			MOVWF	FLOC_tsop_f_sense+2
$038F	$0873			MOVF	STACK_0+3, 0
$0390	$00E5			MOVWF	FLOC_tsop_f_sense+3
$0391	$0862			MOVF	FLOC_tsop_f_sense+0, 0
$0392	$00BF			MOVWF	_INTEGRAL
$0393	$0863			MOVF	FLOC_tsop_f_sense+1, 0
$0394	$00C0			MOVWF	_INTEGRAL+1
$0395	$0864			MOVF	FLOC_tsop_f_sense+2, 0
$0396	$00C1			MOVWF	_INTEGRAL+2
$0397	$0865			MOVF	FLOC_tsop_f_sense+3, 0
$0398	$00C2			MOVWF	_INTEGRAL+3
;lfr_pid_runner.c,147 :: 		DERIVATIVE = (error - perror);
$0399	$0832			MOVF	_perror, 0
$039A	$00F4			MOVWF	STACK_4
$039B	$0833			MOVF	_perror+1, 0
$039C	$00F5			MOVWF	STACK_4+1
$039D	$0834			MOVF	_perror+2, 0
$039E	$00F6			MOVWF	STACK_4+2
$039F	$0835			MOVF	_perror+3, 0
$03A0	$00F7			MOVWF	STACK_4+3
$03A1	$0836			MOVF	_error, 0
$03A2	$00F0			MOVWF	STACK_0
$03A3	$0837			MOVF	_error+1, 0
$03A4	$00F1			MOVWF	STACK_0+1
$03A5	$0838			MOVF	_error+2, 0
$03A6	$00F2			MOVWF	STACK_0+2
$03A7	$0839			MOVF	_error+3, 0
$03A8	$00F3			MOVWF	STACK_0+3
$03A9	$158A			BSF	PCLATH, 3
$03AA	$23C2			CALL	_sub_32x32_fp
$03AB	$118A			BCF	PCLATH, 3
$03AC	$0870			MOVF	STACK_0, 0
$03AD	$00E6			MOVWF	FLOC_tsop_f_sense+4
$03AE	$0871			MOVF	STACK_0+1, 0
$03AF	$00E7			MOVWF	FLOC_tsop_f_sense+5
$03B0	$0872			MOVF	STACK_0+2, 0
$03B1	$00E8			MOVWF	FLOC_tsop_f_sense+6
$03B2	$0873			MOVF	STACK_0+3, 0
$03B3	$00E9			MOVWF	FLOC_tsop_f_sense+7
$03B4	$0866			MOVF	FLOC_tsop_f_sense+4, 0
$03B5	$00C4			MOVWF	_DERIVATIVE
$03B6	$0867			MOVF	FLOC_tsop_f_sense+5, 0
$03B7	$00C5			MOVWF	_DERIVATIVE+1
$03B8	$0868			MOVF	FLOC_tsop_f_sense+6, 0
$03B9	$00C6			MOVWF	_DERIVATIVE+2
$03BA	$0869			MOVF	FLOC_tsop_f_sense+7, 0
$03BB	$00C7			MOVWF	_DERIVATIVE+3
;lfr_pid_runner.c,148 :: 		correction = ( (PROPORTIONAL) + (INTEGRAL) + (DERIVATIVE*kd));
$03BC	$086A			MOVF	FLOC_tsop_f_sense+8, 0
$03BD	$00F0			MOVWF	STACK_0
$03BE	$086B			MOVF	FLOC_tsop_f_sense+9, 0
$03BF	$00F1			MOVWF	STACK_0+1
$03C0	$086C			MOVF	FLOC_tsop_f_sense+10, 0
$03C1	$00F2			MOVWF	STACK_0+2
$03C2	$086D			MOVF	FLOC_tsop_f_sense+11, 0
$03C3	$00F3			MOVWF	STACK_0+3
$03C4	$0862			MOVF	FLOC_tsop_f_sense+0, 0
$03C5	$00F4			MOVWF	STACK_4
$03C6	$0863			MOVF	FLOC_tsop_f_sense+1, 0
$03C7	$00F5			MOVWF	STACK_4+1
$03C8	$0864			MOVF	FLOC_tsop_f_sense+2, 0
$03C9	$00F6			MOVWF	STACK_4+2
$03CA	$0865			MOVF	FLOC_tsop_f_sense+3, 0
$03CB	$00F7			MOVWF	STACK_4+3
$03CC	$262E			CALL	_add_32x32_fp
$03CD	$0870			MOVF	STACK_0, 0
$03CE	$00E2			MOVWF	FLOC_tsop_f_sense+0
$03CF	$0871			MOVF	STACK_0+1, 0
$03D0	$00E3			MOVWF	FLOC_tsop_f_sense+1
$03D1	$0872			MOVF	STACK_0+2, 0
$03D2	$00E4			MOVWF	FLOC_tsop_f_sense+2
$03D3	$0873			MOVF	STACK_0+3, 0
$03D4	$00E5			MOVWF	FLOC_tsop_f_sense+3
$03D5	$084C			MOVF	_Kd, 0
$03D6	$00F0			MOVWF	STACK_0
$03D7	$158A			BSF	PCLATH, 3
$03D8	$2376			CALL	_byte2double
$03D9	$118A			BCF	PCLATH, 3
$03DA	$0866			MOVF	FLOC_tsop_f_sense+4, 0
$03DB	$00F4			MOVWF	STACK_4
$03DC	$0867			MOVF	FLOC_tsop_f_sense+5, 0
$03DD	$00F5			MOVWF	STACK_4+1
$03DE	$0868			MOVF	FLOC_tsop_f_sense+6, 0
$03DF	$00F6			MOVWF	STACK_4+2
$03E0	$0869			MOVF	FLOC_tsop_f_sense+7, 0
$03E1	$00F7			MOVWF	STACK_4+3
$03E2	$158A			BSF	PCLATH, 3
$03E3	$209C			CALL	_mul_32x32_fp
$03E4	$118A			BCF	PCLATH, 3
$03E5	$0862			MOVF	FLOC_tsop_f_sense+0, 0
$03E6	$00F4			MOVWF	STACK_4
$03E7	$0863			MOVF	FLOC_tsop_f_sense+1, 0
$03E8	$00F5			MOVWF	STACK_4+1
$03E9	$0864			MOVF	FLOC_tsop_f_sense+2, 0
$03EA	$00F6			MOVWF	STACK_4+2
$03EB	$0865			MOVF	FLOC_tsop_f_sense+3, 0
$03EC	$00F7			MOVWF	STACK_4+3
$03ED	$262E			CALL	_add_32x32_fp
$03EE	$0870			MOVF	STACK_0, 0
$03EF	$00E6			MOVWF	FLOC_tsop_f_sense+4
$03F0	$0871			MOVF	STACK_0+1, 0
$03F1	$00E7			MOVWF	FLOC_tsop_f_sense+5
$03F2	$0872			MOVF	STACK_0+2, 0
$03F3	$00E8			MOVWF	FLOC_tsop_f_sense+6
$03F4	$0873			MOVF	STACK_0+3, 0
$03F5	$00E9			MOVWF	FLOC_tsop_f_sense+7
$03F6	$0866			MOVF	FLOC_tsop_f_sense+4, 0
$03F7	$00C8			MOVWF	_correction
$03F8	$0867			MOVF	FLOC_tsop_f_sense+5, 0
$03F9	$00C9			MOVWF	_correction+1
$03FA	$0868			MOVF	FLOC_tsop_f_sense+6, 0
$03FB	$00CA			MOVWF	_correction+2
$03FC	$0869			MOVF	FLOC_tsop_f_sense+7, 0
$03FD	$00CB			MOVWF	_correction+3
;lfr_pid_runner.c,149 :: 		rightpulse =  basespeed + correction;
$03FE	$0851			MOVF	_basespeed, 0
$03FF	$00F0			MOVWF	STACK_0
$0400	$158A			BSF	PCLATH, 3
$0401	$2376			CALL	_byte2double
$0402	$118A			BCF	PCLATH, 3
$0403	$0870			MOVF	STACK_0, 0
$0404	$00E2			MOVWF	FLOC_tsop_f_sense+0
$0405	$0871			MOVF	STACK_0+1, 0
$0406	$00E3			MOVWF	FLOC_tsop_f_sense+1
$0407	$0872			MOVF	STACK_0+2, 0
$0408	$00E4			MOVWF	FLOC_tsop_f_sense+2
$0409	$0873			MOVF	STACK_0+3, 0
$040A	$00E5			MOVWF	FLOC_tsop_f_sense+3
$040B	$0862			MOVF	FLOC_tsop_f_sense+0, 0
$040C	$00F0			MOVWF	STACK_0
$040D	$0863			MOVF	FLOC_tsop_f_sense+1, 0
$040E	$00F1			MOVWF	STACK_0+1
$040F	$0864			MOVF	FLOC_tsop_f_sense+2, 0
$0410	$00F2			MOVWF	STACK_0+2
$0411	$0865			MOVF	FLOC_tsop_f_sense+3, 0
$0412	$00F3			MOVWF	STACK_0+3
$0413	$0866			MOVF	FLOC_tsop_f_sense+4, 0
$0414	$00F4			MOVWF	STACK_4
$0415	$0867			MOVF	FLOC_tsop_f_sense+5, 0
$0416	$00F5			MOVWF	STACK_4+1
$0417	$0868			MOVF	FLOC_tsop_f_sense+6, 0
$0418	$00F6			MOVWF	STACK_4+2
$0419	$0869			MOVF	FLOC_tsop_f_sense+7, 0
$041A	$00F7			MOVWF	STACK_4+3
$041B	$262E			CALL	_add_32x32_fp
$041C	$0870			MOVF	STACK_0, 0
$041D	$00CD			MOVWF	_rightpulse
$041E	$0871			MOVF	STACK_0+1, 0
$041F	$00CE			MOVWF	_rightpulse+1
$0420	$0872			MOVF	STACK_0+2, 0
$0421	$00CF			MOVWF	_rightpulse+2
$0422	$0873			MOVF	STACK_0+3, 0
$0423	$00D0			MOVWF	_rightpulse+3
;lfr_pid_runner.c,150 :: 		leftpulse = basespeed - correction;
$0424	$0866			MOVF	FLOC_tsop_f_sense+4, 0
$0425	$00F4			MOVWF	STACK_4
$0426	$0867			MOVF	FLOC_tsop_f_sense+5, 0
$0427	$00F5			MOVWF	STACK_4+1
$0428	$0868			MOVF	FLOC_tsop_f_sense+6, 0
$0429	$00F6			MOVWF	STACK_4+2
$042A	$0869			MOVF	FLOC_tsop_f_sense+7, 0
$042B	$00F7			MOVWF	STACK_4+3
$042C	$0862			MOVF	FLOC_tsop_f_sense+0, 0
$042D	$00F0			MOVWF	STACK_0
$042E	$0863			MOVF	FLOC_tsop_f_sense+1, 0
$042F	$00F1			MOVWF	STACK_0+1
$0430	$0864			MOVF	FLOC_tsop_f_sense+2, 0
$0431	$00F2			MOVWF	STACK_0+2
$0432	$0865			MOVF	FLOC_tsop_f_sense+3, 0
$0433	$00F3			MOVWF	STACK_0+3
$0434	$158A			BSF	PCLATH, 3
$0435	$23C2			CALL	_sub_32x32_fp
$0436	$118A			BCF	PCLATH, 3
$0437	$0870			MOVF	STACK_0, 0
$0438	$00D2			MOVWF	_leftpulse
$0439	$0871			MOVF	STACK_0+1, 0
$043A	$00D3			MOVWF	_leftpulse+1
$043B	$0872			MOVF	STACK_0+2, 0
$043C	$00D4			MOVWF	_leftpulse+2
$043D	$0873			MOVF	STACK_0+3, 0
$043E	$00D5			MOVWF	_leftpulse+3
;lfr_pid_runner.c,151 :: 		motor_RF();
$043F	$158A			BSF	PCLATH, 3
$0440	$2404			CALL	_motor_RF
$0441	$118A			BCF	PCLATH, 3
;lfr_pid_runner.c,152 :: 		motor_LF();
$0442	$158A			BSF	PCLATH, 3
$0443	$23FA			CALL	_motor_LF
$0444	$118A			BCF	PCLATH, 3
;lfr_pid_runner.c,154 :: 		if(leftpulse > 255)                  //LEFT CORRECTION EXCEED
$0445	$0852			MOVF	_leftpulse, 0
$0446	$00F4			MOVWF	STACK_4
$0447	$0853			MOVF	_leftpulse+1, 0
$0448	$00F5			MOVWF	STACK_4+1
$0449	$0854			MOVF	_leftpulse+2, 0
$044A	$00F6			MOVWF	STACK_4+2
$044B	$0855			MOVF	_leftpulse+3, 0
$044C	$00F7			MOVWF	STACK_4+3
$044D	$3000			MOVLW	0
$044E	$00F0			MOVWF	STACK_0
$044F	$3000			MOVLW	0
$0450	$00F1			MOVWF	STACK_0+1
$0451	$307F			MOVLW	127
$0452	$00F2			MOVWF	STACK_0+2
$0453	$3086			MOVLW	134
$0454	$00F3			MOVWF	STACK_0+3
$0455	$158A			BSF	PCLATH, 3
$0456	$2159			CALL	_compare_double
$0457	$118A			BCF	PCLATH, 3
$0458	$3001			MOVLW	1
$0459	$1803			BTFSC	STATUS, C
$045A	$3000			MOVLW	0
$045B	$00F0			MOVWF	STACK_0
$045C	$0870			MOVF	STACK_0, 0
$045D	$1903			BTFSC	STATUS, Z
$045E	$2C67			GOTO	L_tsop_f_sense_13
;lfr_pid_runner.c,155 :: 		leftpulse = 255;
$045F	$3000			MOVLW	0
$0460	$00D2			MOVWF	_leftpulse
$0461	$3000			MOVLW	0
$0462	$00D3			MOVWF	_leftpulse+1
$0463	$307F			MOVLW	127
$0464	$00D4			MOVWF	_leftpulse+2
$0465	$3086			MOVLW	134
$0466	$00D5			MOVWF	_leftpulse+3
$0467	$	L_tsop_f_sense_13:
;lfr_pid_runner.c,157 :: 		if(rightpulse > 255)                 //RIGHT CORRECTION EXCEED
$0467	$084D			MOVF	_rightpulse, 0
$0468	$00F4			MOVWF	STACK_4
$0469	$084E			MOVF	_rightpulse+1, 0
$046A	$00F5			MOVWF	STACK_4+1
$046B	$084F			MOVF	_rightpulse+2, 0
$046C	$00F6			MOVWF	STACK_4+2
$046D	$0850			MOVF	_rightpulse+3, 0
$046E	$00F7			MOVWF	STACK_4+3
$046F	$3000			MOVLW	0
$0470	$00F0			MOVWF	STACK_0
$0471	$3000			MOVLW	0
$0472	$00F1			MOVWF	STACK_0+1
$0473	$307F			MOVLW	127
$0474	$00F2			MOVWF	STACK_0+2
$0475	$3086			MOVLW	134
$0476	$00F3			MOVWF	STACK_0+3
$0477	$158A			BSF	PCLATH, 3
$0478	$2159			CALL	_compare_double
$0479	$118A			BCF	PCLATH, 3
$047A	$3001			MOVLW	1
$047B	$1803			BTFSC	STATUS, C
$047C	$3000			MOVLW	0
$047D	$00F0			MOVWF	STACK_0
$047E	$0870			MOVF	STACK_0, 0
$047F	$1903			BTFSC	STATUS, Z
$0480	$2C89			GOTO	L_tsop_f_sense_14
;lfr_pid_runner.c,158 :: 		rightpulse = 255;
$0481	$3000			MOVLW	0
$0482	$00CD			MOVWF	_rightpulse
$0483	$3000			MOVLW	0
$0484	$00CE			MOVWF	_rightpulse+1
$0485	$307F			MOVLW	127
$0486	$00CF			MOVWF	_rightpulse+2
$0487	$3086			MOVLW	134
$0488	$00D0			MOVWF	_rightpulse+3
$0489	$	L_tsop_f_sense_14:
;lfr_pid_runner.c,159 :: 		if(leftpulse < 0)                  //LEFT CORRECTION EXCEED
$0489	$01F4			CLRF	STACK_4
$048A	$01F5			CLRF	STACK_4+1
$048B	$01F6			CLRF	STACK_4+2
$048C	$01F7			CLRF	STACK_4+3
$048D	$0852			MOVF	_leftpulse, 0
$048E	$00F0			MOVWF	STACK_0
$048F	$0853			MOVF	_leftpulse+1, 0
$0490	$00F1			MOVWF	STACK_0+1
$0491	$0854			MOVF	_leftpulse+2, 0
$0492	$00F2			MOVWF	STACK_0+2
$0493	$0855			MOVF	_leftpulse+3, 0
$0494	$00F3			MOVWF	STACK_0+3
$0495	$158A			BSF	PCLATH, 3
$0496	$2159			CALL	_compare_double
$0497	$118A			BCF	PCLATH, 3
$0498	$3001			MOVLW	1
$0499	$1803			BTFSC	STATUS, C
$049A	$3000			MOVLW	0
$049B	$00F0			MOVWF	STACK_0
$049C	$0870			MOVF	STACK_0, 0
$049D	$1903			BTFSC	STATUS, Z
$049E	$2CA3			GOTO	L_tsop_f_sense_15
;lfr_pid_runner.c,160 :: 		leftpulse = 0;
$049F	$01D2			CLRF	_leftpulse
$04A0	$01D3			CLRF	_leftpulse+1
$04A1	$01D4			CLRF	_leftpulse+2
$04A2	$01D5			CLRF	_leftpulse+3
$04A3	$	L_tsop_f_sense_15:
;lfr_pid_runner.c,161 :: 		if(rightpulse < 0)                   //RIGHT CORRECTION EXCEED
$04A3	$01F4			CLRF	STACK_4
$04A4	$01F5			CLRF	STACK_4+1
$04A5	$01F6			CLRF	STACK_4+2
$04A6	$01F7			CLRF	STACK_4+3
$04A7	$084D			MOVF	_rightpulse, 0
$04A8	$00F0			MOVWF	STACK_0
$04A9	$084E			MOVF	_rightpulse+1, 0
$04AA	$00F1			MOVWF	STACK_0+1
$04AB	$084F			MOVF	_rightpulse+2, 0
$04AC	$00F2			MOVWF	STACK_0+2
$04AD	$0850			MOVF	_rightpulse+3, 0
$04AE	$00F3			MOVWF	STACK_0+3
$04AF	$158A			BSF	PCLATH, 3
$04B0	$2159			CALL	_compare_double
$04B1	$118A			BCF	PCLATH, 3
$04B2	$3001			MOVLW	1
$04B3	$1803			BTFSC	STATUS, C
$04B4	$3000			MOVLW	0
$04B5	$00F0			MOVWF	STACK_0
$04B6	$0870			MOVF	STACK_0, 0
$04B7	$1903			BTFSC	STATUS, Z
$04B8	$2CBD			GOTO	L_tsop_f_sense_16
;lfr_pid_runner.c,162 :: 		rightpulse = 0;
$04B9	$01CD			CLRF	_rightpulse
$04BA	$01CE			CLRF	_rightpulse+1
$04BB	$01CF			CLRF	_rightpulse+2
$04BC	$01D0			CLRF	_rightpulse+3
$04BD	$	L_tsop_f_sense_16:
;lfr_pid_runner.c,163 :: 		PWM1_CHANGE_DUTY(leftpulse);
$04BD	$0852			MOVF	_leftpulse, 0
$04BE	$00F0			MOVWF	STACK_0
$04BF	$0853			MOVF	_leftpulse+1, 0
$04C0	$00F1			MOVWF	STACK_0+1
$04C1	$0854			MOVF	_leftpulse+2, 0
$04C2	$00F2			MOVWF	STACK_0+2
$04C3	$0855			MOVF	_leftpulse+3, 0
$04C4	$00F3			MOVWF	STACK_0+3
$04C5	$158A			BSF	PCLATH, 3
$04C6	$223E			CALL	_double2byte
$04C7	$118A			BCF	PCLATH, 3
$04C8	$0870			MOVF	STACK_0, 0
$04C9	$00EE			MOVWF	FARG_PWM1_Change_Duty+0
$04CA	$158A			BSF	PCLATH, 3
$04CB	$2281			CALL	_PWM1_Change_Duty
$04CC	$118A			BCF	PCLATH, 3
;lfr_pid_runner.c,164 :: 		PWM2_CHANGE_DUTY(rightpulse);
$04CD	$084D			MOVF	_rightpulse, 0
$04CE	$00F0			MOVWF	STACK_0
$04CF	$084E			MOVF	_rightpulse+1, 0
$04D0	$00F1			MOVWF	STACK_0+1
$04D1	$084F			MOVF	_rightpulse+2, 0
$04D2	$00F2			MOVWF	STACK_0+2
$04D3	$0850			MOVF	_rightpulse+3, 0
$04D4	$00F3			MOVWF	STACK_0+3
$04D5	$158A			BSF	PCLATH, 3
$04D6	$223E			CALL	_double2byte
$04D7	$118A			BCF	PCLATH, 3
$04D8	$0870			MOVF	STACK_0, 0
$04D9	$00EE			MOVWF	FARG_PWM2_Change_Duty+0
$04DA	$158A			BSF	PCLATH, 3
$04DB	$22EB			CALL	_PWM2_Change_Duty
$04DC	$118A			BCF	PCLATH, 3
;lfr_pid_runner.c,165 :: 		}
$04DD	$	L_tsop_f_sense_12:
$04DD	$	L_tsop_f_sense_10:
;lfr_pid_runner.c,166 :: 		delay_ms(10);
$04DD	$300D			MOVLW	13
$04DE	$00FB			MOVWF	STACK_11
$04DF	$30FF			MOVLW	255
$04E0	$00FA			MOVWF	STACK_10
$04E1	$0BFB			DECFSZ	STACK_11, F
$04E2	$2CE4			GOTO	$+2
$04E3	$2CE7			GOTO	$+4
$04E4	$0BFA			DECFSZ	STACK_10, F
$04E5	$2CE4			GOTO	$-1
$04E6	$2CE1			GOTO	$-5
$04E7	$30F3			MOVLW	243
$04E8	$00FA			MOVWF	STACK_10
$04E9	$0BFA			DECFSZ	STACK_10, F
$04EA	$2CE9			GOTO	$-1
$04EB	$0000			NOP
;lfr_pid_runner.c,167 :: 		}
$04EC	$	L_tsop_f_sense_8:
;lfr_pid_runner.c,168 :: 		}
$04EC	$0008			RETURN
$09A9	$	GlobalInilfr_pid_runner:
$09A9	$30BE			MOVLW	190
$09AA	$1303			BCF	STATUS, RP1
$09AB	$1283			BCF	STATUS, RP0
$09AC	$00D1			MOVWF	_basespeed+0
$09AD	$3014			MOVLW	20
$09AE	$00BE			MOVWF	_Kp+0
$09AF	$3005			MOVLW	5
$09B0	$00C3			MOVWF	_Ki+0
$09B1	$3003			MOVLW	3
$09B2	$00CC			MOVWF	_Kd+0
$09B3	$3000			MOVLW	0
$09B4	$00CD			MOVWF	_rightpulse+0
$09B5	$3000			MOVLW	0
$09B6	$00CE			MOVWF	_rightpulse+1
$09B7	$3000			MOVLW	0
$09B8	$00CF			MOVWF	_rightpulse+2
$09B9	$3000			MOVLW	0
$09BA	$00D0			MOVWF	_rightpulse+3
$09BB	$3000			MOVLW	0
$09BC	$00D2			MOVWF	_leftpulse+0
$09BD	$3000			MOVLW	0
$09BE	$00D3			MOVWF	_leftpulse+1
$09BF	$3000			MOVLW	0
$09C0	$00D4			MOVWF	_leftpulse+2
$09C1	$3000			MOVLW	0
$09C2	$00D5			MOVWF	_leftpulse+3
$09C3	$3000			MOVLW	0
$09C4	$00B2			MOVWF	_perror+0
$09C5	$3000			MOVLW	0
$09C6	$00B3			MOVWF	_perror+1
$09C7	$3000			MOVLW	0
$09C8	$00B4			MOVWF	_perror+2
$09C9	$3000			MOVLW	0
$09CA	$00B5			MOVWF	_perror+3
$09CB	$3000			MOVLW	0
$09CC	$00B6			MOVWF	_error+0
$09CD	$3000			MOVLW	0
$09CE	$00B7			MOVWF	_error+1
$09CF	$3000			MOVLW	0
$09D0	$00B8			MOVWF	_error+2
$09D1	$3000			MOVLW	0
$09D2	$00B9			MOVWF	_error+3
$09D3	$3000			MOVLW	0
$09D4	$00BA			MOVWF	_PROPORTIONAL+0
$09D5	$3000			MOVLW	0
$09D6	$00BB			MOVWF	_PROPORTIONAL+1
$09D7	$3000			MOVLW	0
$09D8	$00BC			MOVWF	_PROPORTIONAL+2
$09D9	$3000			MOVLW	0
$09DA	$00BD			MOVWF	_PROPORTIONAL+3
$09DB	$3000			MOVLW	0
$09DC	$00BF			MOVWF	_INTEGRAL+0
$09DD	$3000			MOVLW	0
$09DE	$00C0			MOVWF	_INTEGRAL+1
$09DF	$3000			MOVLW	0
$09E0	$00C1			MOVWF	_INTEGRAL+2
$09E1	$3000			MOVLW	0
$09E2	$00C2			MOVWF	_INTEGRAL+3
$09E3	$3000			MOVLW	0
$09E4	$00C4			MOVWF	_DERIVATIVE+0
$09E5	$3000			MOVLW	0
$09E6	$00C5			MOVWF	_DERIVATIVE+1
$09E7	$3000			MOVLW	0
$09E8	$00C6			MOVWF	_DERIVATIVE+2
$09E9	$3000			MOVLW	0
$09EA	$00C7			MOVWF	_DERIVATIVE+3
$09EB	$3000			MOVLW	0
$09EC	$00C8			MOVWF	_correction+0
$09ED	$3000			MOVLW	0
$09EE	$00C9			MOVWF	_correction+1
$09EF	$3000			MOVLW	0
$09F0	$00CA			MOVWF	_correction+2
$09F1	$3000			MOVLW	0
$09F2	$00CB			MOVWF	_correction+3
$09F3	$0008			RETURN
$0727	$	_Equals_Double:
$0727	$1303			BCF	STATUS, RP1
$0728	$1283			BCF	STATUS, RP0
$0729	$0873			MOVF	STACK_3, W
$072A	$0677			XORWF	STACK_7, W
$072B	$1D03			BTFSS	STATUS, Z
$072C	$2F3A			GOTO	EQU_FALSE
$072D	$0872			MOVF	STACK_2, W
$072E	$0676			XORWF	STACK_6, W
$072F	$1D03			BTFSS	STATUS, Z
$0730	$2F3A			GOTO	EQU_FALSE
$0731	$0871			MOVF	STACK_1, W
$0732	$0675			XORWF	STACK_5, W
$0733	$1D03			BTFSS	STATUS, Z
$0734	$2F3A			GOTO	EQU_FALSE
$0735	$0870			MOVF	STACK_0, W
$0736	$0674			XORWF	STACK_4, W
$0737	$1903			BTFSC	STATUS, Z
$0738	$1503			BSF	STATUS, Z
$0739	$0008			RETURN
$073A	$	EQU_FALSE:
$073A	$1103			BCF	STATUS, Z
$073B	$0008			RETURN
$073C	$0008			RETURN
$0004	$	_main:
;lfr_pid_runner.c,171 :: 		void main()
;lfr_pid_runner.c,174 :: 		initport();
$0004	$158A			BSF	PCLATH, 3
$0005	$21A9			CALL	GlobalInilfr_pid_runner
$0006	$118A			BCF	PCLATH, 3
$0007	$158A			BSF	PCLATH, 3
$0008	$2386			CALL	_initport
$0009	$118A			BCF	PCLATH, 3
;lfr_pid_runner.c,175 :: 		initpwm();
$000A	$158A			BSF	PCLATH, 3
$000B	$234F			CALL	_initpwm
$000C	$118A			BCF	PCLATH, 3
;lfr_pid_runner.c,176 :: 		while(1)
$000D	$	L_main_17:
;lfr_pid_runner.c,178 :: 		indicator();
$000D	$26D6			CALL	_indicator
;lfr_pid_runner.c,179 :: 		CalcError();
$000E	$24ED			CALL	_CalcError
;lfr_pid_runner.c,180 :: 		if((error == 0) && (s4==1) && ((s1+s2+s3+s5+s6+s7+s8)==0))
$000F	$01F4			CLRF	STACK_4
$0010	$01F5			CLRF	STACK_4+1
$0011	$01F6			CLRF	STACK_4+2
$0012	$01F7			CLRF	STACK_4+3
$0013	$0836			MOVF	_error, 0
$0014	$00F0			MOVWF	STACK_0
$0015	$0837			MOVF	_error+1, 0
$0016	$00F1			MOVWF	STACK_0+1
$0017	$0838			MOVF	_error+2, 0
$0018	$00F2			MOVWF	STACK_0+2
$0019	$0839			MOVF	_error+3, 0
$001A	$00F3			MOVWF	STACK_0+3
$001B	$2727			CALL	_equals_double
$001C	$3001			MOVLW	1
$001D	$1D03			BTFSS	STATUS, Z
$001E	$3000			MOVLW	0
$001F	$00F0			MOVWF	STACK_0
$0020	$0870			MOVF	STACK_0, 0
$0021	$1903			BTFSC	STATUS, Z
$0022	$287A			GOTO	L_main_21
$0023	$3000			MOVLW	0
$0024	$0628			XORWF	_s4+1, 0
$0025	$1D03			BTFSS	STATUS, Z
$0026	$2829			GOTO	L_main_40
$0027	$3001			MOVLW	1
$0028	$0627			XORWF	_s4, 0
$0029	$	L_main_40:
$0029	$1D03			BTFSS	STATUS, Z
$002A	$287A			GOTO	L_main_21
$002B	$0823			MOVF	_s2, 0
$002C	$0721			ADDWF	_s1, 0
$002D	$00F0			MOVWF	STACK_0
$002E	$0822			MOVF	_s1+1, 0
$002F	$1803			BTFSC	STATUS, C
$0030	$3F01			ADDLW	1
$0031	$0724			ADDWF	_s2+1, 0
$0032	$00F1			MOVWF	STACK_0+1
$0033	$0825			MOVF	_s3, 0
$0034	$07F0			ADDWF	STACK_0, 1
$0035	$0826			MOVF	_s3+1, 0
$0036	$1803			BTFSC	STATUS, C
$0037	$3F01			ADDLW	1
$0038	$07F1			ADDWF	STACK_0+1, 1
$0039	$0829			MOVF	_s5, 0
$003A	$07F0			ADDWF	STACK_0, 1
$003B	$082A			MOVF	_s5+1, 0
$003C	$1803			BTFSC	STATUS, C
$003D	$3F01			ADDLW	1
$003E	$07F1			ADDWF	STACK_0+1, 1
$003F	$082B			MOVF	_s6, 0
$0040	$07F0			ADDWF	STACK_0, 1
$0041	$082C			MOVF	_s6+1, 0
$0042	$1803			BTFSC	STATUS, C
$0043	$3F01			ADDLW	1
$0044	$07F1			ADDWF	STACK_0+1, 1
$0045	$082D			MOVF	_s7, 0
$0046	$07F0			ADDWF	STACK_0, 1
$0047	$082E			MOVF	_s7+1, 0
$0048	$1803			BTFSC	STATUS, C
$0049	$3F01			ADDLW	1
$004A	$07F1			ADDWF	STACK_0+1, 1
$004B	$082F			MOVF	_s8, 0
$004C	$0770			ADDWF	STACK_0, 0
$004D	$00F4			MOVWF	STACK_4
$004E	$0871			MOVF	STACK_0+1, 0
$004F	$1803			BTFSC	STATUS, C
$0050	$3F01			ADDLW	1
$0051	$0730			ADDWF	_s8+1, 0
$0052	$00F5			MOVWF	STACK_4+1
$0053	$3000			MOVLW	0
$0054	$0675			XORWF	STACK_4+1, 0
$0055	$1D03			BTFSS	STATUS, Z
$0056	$2859			GOTO	L_main_41
$0057	$3000			MOVLW	0
$0058	$0674			XORWF	STACK_4, 0
$0059	$	L_main_41:
$0059	$1D03			BTFSS	STATUS, Z
$005A	$287A			GOTO	L_main_21
$005B	$	L287_ex_L_main_21:
;lfr_pid_runner.c,182 :: 		motor_LF();					        	    //FWD AT FULL SPEED
$005B	$158A			BSF	PCLATH, 3
$005C	$23FA			CALL	_motor_LF
$005D	$118A			BCF	PCLATH, 3
;lfr_pid_runner.c,183 :: 		motor_RF();
$005E	$158A			BSF	PCLATH, 3
$005F	$2404			CALL	_motor_RF
$0060	$118A			BCF	PCLATH, 3
;lfr_pid_runner.c,184 :: 		PWM1_CHANGE_DUTY(255);
$0061	$30FF			MOVLW	255
$0062	$00EE			MOVWF	FARG_PWM1_Change_Duty+0
$0063	$158A			BSF	PCLATH, 3
$0064	$2281			CALL	_PWM1_Change_Duty
$0065	$118A			BCF	PCLATH, 3
;lfr_pid_runner.c,185 :: 		PWM2_CHANGE_DUTY(255);
$0066	$30FF			MOVLW	255
$0067	$00EE			MOVWF	FARG_PWM2_Change_Duty+0
$0068	$158A			BSF	PCLATH, 3
$0069	$22EB			CALL	_PWM2_Change_Duty
$006A	$118A			BCF	PCLATH, 3
;lfr_pid_runner.c,186 :: 		delay_ms(10);
$006B	$300D			MOVLW	13
$006C	$00FB			MOVWF	STACK_11
$006D	$30FF			MOVLW	255
$006E	$00FA			MOVWF	STACK_10
$006F	$0BFB			DECFSZ	STACK_11, F
$0070	$2872			GOTO	$+2
$0071	$2875			GOTO	$+4
$0072	$0BFA			DECFSZ	STACK_10, F
$0073	$2872			GOTO	$-1
$0074	$286F			GOTO	$-5
$0075	$30F3			MOVLW	243
$0076	$00FA			MOVWF	STACK_10
$0077	$0BFA			DECFSZ	STACK_10, F
$0078	$2877			GOTO	$-1
$0079	$0000			NOP
;lfr_pid_runner.c,187 :: 		}
$007A	$	L_main_21:
;lfr_pid_runner.c,188 :: 		if(PORTB.F7 == 0)                     //TSOP SENESE
$007A	$3000			MOVLW	0
$007B	$1B86			BTFSC	PORTB, 7
$007C	$3001			MOVLW	1
$007D	$00F4			MOVWF	STACK_4
$007E	$0874			MOVF	STACK_4, 0
$007F	$3A00			XORLW	0
$0080	$1D03			BTFSS	STATUS, Z
$0081	$2884			GOTO	L_main_22
;lfr_pid_runner.c,190 :: 		tsop_f_sense();
$0082	$22B8			CALL	_tsop_f_sense
;lfr_pid_runner.c,191 :: 		}
$0083	$2AB6			GOTO	L_main_23
$0084	$	L_main_22:
;lfr_pid_runner.c,193 :: 		if((s1+s2+s3+s4+s5+s6+s7+s8) == 0)		//ROBOT HAS OVERSHOOT
$0084	$0823			MOVF	_s2, 0
$0085	$0721			ADDWF	_s1, 0
$0086	$00F0			MOVWF	STACK_0
$0087	$0822			MOVF	_s1+1, 0
$0088	$1803			BTFSC	STATUS, C
$0089	$3F01			ADDLW	1
$008A	$0724			ADDWF	_s2+1, 0
$008B	$00F1			MOVWF	STACK_0+1
$008C	$0825			MOVF	_s3, 0
$008D	$07F0			ADDWF	STACK_0, 1
$008E	$0826			MOVF	_s3+1, 0
$008F	$1803			BTFSC	STATUS, C
$0090	$3F01			ADDLW	1
$0091	$07F1			ADDWF	STACK_0+1, 1
$0092	$0827			MOVF	_s4, 0
$0093	$07F0			ADDWF	STACK_0, 1
$0094	$0828			MOVF	_s4+1, 0
$0095	$1803			BTFSC	STATUS, C
$0096	$3F01			ADDLW	1
$0097	$07F1			ADDWF	STACK_0+1, 1
$0098	$0829			MOVF	_s5, 0
$0099	$07F0			ADDWF	STACK_0, 1
$009A	$082A			MOVF	_s5+1, 0
$009B	$1803			BTFSC	STATUS, C
$009C	$3F01			ADDLW	1
$009D	$07F1			ADDWF	STACK_0+1, 1
$009E	$082B			MOVF	_s6, 0
$009F	$07F0			ADDWF	STACK_0, 1
$00A0	$082C			MOVF	_s6+1, 0
$00A1	$1803			BTFSC	STATUS, C
$00A2	$3F01			ADDLW	1
$00A3	$07F1			ADDWF	STACK_0+1, 1
$00A4	$082D			MOVF	_s7, 0
$00A5	$07F0			ADDWF	STACK_0, 1
$00A6	$082E			MOVF	_s7+1, 0
$00A7	$1803			BTFSC	STATUS, C
$00A8	$3F01			ADDLW	1
$00A9	$07F1			ADDWF	STACK_0+1, 1
$00AA	$082F			MOVF	_s8, 0
$00AB	$0770			ADDWF	STACK_0, 0
$00AC	$00F4			MOVWF	STACK_4
$00AD	$0871			MOVF	STACK_0+1, 0
$00AE	$1803			BTFSC	STATUS, C
$00AF	$3F01			ADDLW	1
$00B0	$0730			ADDWF	_s8+1, 0
$00B1	$00F5			MOVWF	STACK_4+1
$00B2	$3000			MOVLW	0
$00B3	$0675			XORWF	STACK_4+1, 0
$00B4	$1D03			BTFSS	STATUS, Z
$00B5	$28B8			GOTO	L_main_42
$00B6	$3000			MOVLW	0
$00B7	$0674			XORWF	STACK_4, 0
$00B8	$	L_main_42:
$00B8	$1D03			BTFSS	STATUS, Z
$00B9	$2902			GOTO	L_main_24
;lfr_pid_runner.c,195 :: 		if(lastreading == 'r')				  //CHECKS IF THE LAST SENSOR ACTIVATED WAS RIGHT
$00BA	$0831			MOVF	_lastreading, 0
$00BB	$3A72			XORLW	114
$00BC	$1D03			BTFSS	STATUS, Z
$00BD	$28DE			GOTO	L_main_25
;lfr_pid_runner.c,197 :: 		motor_RB();						        //TURN RIGHT AT FULL SPEED
$00BE	$158A			BSF	PCLATH, 3
$00BF	$23F5			CALL	_motor_RB
$00C0	$118A			BCF	PCLATH, 3
;lfr_pid_runner.c,198 :: 		motor_LF();
$00C1	$158A			BSF	PCLATH, 3
$00C2	$23FA			CALL	_motor_LF
$00C3	$118A			BCF	PCLATH, 3
;lfr_pid_runner.c,199 :: 		PWM1_CHANGE_DUTY(255);
$00C4	$30FF			MOVLW	255
$00C5	$00EE			MOVWF	FARG_PWM1_Change_Duty+0
$00C6	$158A			BSF	PCLATH, 3
$00C7	$2281			CALL	_PWM1_Change_Duty
$00C8	$118A			BCF	PCLATH, 3
;lfr_pid_runner.c,200 :: 		PWM2_CHANGE_DUTY(255);
$00C9	$30FF			MOVLW	255
$00CA	$00EE			MOVWF	FARG_PWM2_Change_Duty+0
$00CB	$158A			BSF	PCLATH, 3
$00CC	$22EB			CALL	_PWM2_Change_Duty
$00CD	$118A			BCF	PCLATH, 3
;lfr_pid_runner.c,201 :: 		delay_ms(10);
$00CE	$300D			MOVLW	13
$00CF	$00FB			MOVWF	STACK_11
$00D0	$30FF			MOVLW	255
$00D1	$00FA			MOVWF	STACK_10
$00D2	$0BFB			DECFSZ	STACK_11, F
$00D3	$28D5			GOTO	$+2
$00D4	$28D8			GOTO	$+4
$00D5	$0BFA			DECFSZ	STACK_10, F
$00D6	$28D5			GOTO	$-1
$00D7	$28D2			GOTO	$-5
$00D8	$30F3			MOVLW	243
$00D9	$00FA			MOVWF	STACK_10
$00DA	$0BFA			DECFSZ	STACK_10, F
$00DB	$28DA			GOTO	$-1
$00DC	$0000			NOP
;lfr_pid_runner.c,202 :: 		}
$00DD	$2901			GOTO	L_main_26
$00DE	$	L_main_25:
;lfr_pid_runner.c,203 :: 		else if(lastreading == 'l')			  //CHECKS IF THE LAST SENSOR ACTIVATED WAS LEFT
$00DE	$0831			MOVF	_lastreading, 0
$00DF	$3A6C			XORLW	108
$00E0	$1D03			BTFSS	STATUS, Z
$00E1	$2901			GOTO	L_main_27
;lfr_pid_runner.c,205 :: 		motor_LB();					        	//TURN LEFT AT FULL SPEED
$00E2	$158A			BSF	PCLATH, 3
$00E3	$2409			CALL	_motor_LB
$00E4	$118A			BCF	PCLATH, 3
;lfr_pid_runner.c,206 :: 		motor_RF();
$00E5	$158A			BSF	PCLATH, 3
$00E6	$2404			CALL	_motor_RF
$00E7	$118A			BCF	PCLATH, 3
;lfr_pid_runner.c,207 :: 		PWM1_CHANGE_DUTY(255);
$00E8	$30FF			MOVLW	255
$00E9	$00EE			MOVWF	FARG_PWM1_Change_Duty+0
$00EA	$158A			BSF	PCLATH, 3
$00EB	$2281			CALL	_PWM1_Change_Duty
$00EC	$118A			BCF	PCLATH, 3
;lfr_pid_runner.c,208 :: 		PWM2_CHANGE_DUTY(255);
$00ED	$30FF			MOVLW	255
$00EE	$00EE			MOVWF	FARG_PWM2_Change_Duty+0
$00EF	$158A			BSF	PCLATH, 3
$00F0	$22EB			CALL	_PWM2_Change_Duty
$00F1	$118A			BCF	PCLATH, 3
;lfr_pid_runner.c,209 :: 		delay_ms(10);
$00F2	$300D			MOVLW	13
$00F3	$00FB			MOVWF	STACK_11
$00F4	$30FF			MOVLW	255
$00F5	$00FA			MOVWF	STACK_10
$00F6	$0BFB			DECFSZ	STACK_11, F
$00F7	$28F9			GOTO	$+2
$00F8	$28FC			GOTO	$+4
$00F9	$0BFA			DECFSZ	STACK_10, F
$00FA	$28F9			GOTO	$-1
$00FB	$28F6			GOTO	$-5
$00FC	$30F3			MOVLW	243
$00FD	$00FA			MOVWF	STACK_10
$00FE	$0BFA			DECFSZ	STACK_10, F
$00FF	$28FE			GOTO	$-1
$0100	$0000			NOP
;lfr_pid_runner.c,210 :: 		}
$0101	$	L_main_27:
$0101	$	L_main_26:
;lfr_pid_runner.c,211 :: 		}
$0101	$2AA7			GOTO	L_main_28
$0102	$	L_main_24:
;lfr_pid_runner.c,214 :: 		PROPORTIONAL = error * kp;
$0102	$083E			MOVF	_Kp, 0
$0103	$00F0			MOVWF	STACK_0
$0104	$158A			BSF	PCLATH, 3
$0105	$2376			CALL	_byte2double
$0106	$118A			BCF	PCLATH, 3
$0107	$0836			MOVF	_error, 0
$0108	$00F4			MOVWF	STACK_4
$0109	$0837			MOVF	_error+1, 0
$010A	$00F5			MOVWF	STACK_4+1
$010B	$0838			MOVF	_error+2, 0
$010C	$00F6			MOVWF	STACK_4+2
$010D	$0839			MOVF	_error+3, 0
$010E	$00F7			MOVWF	STACK_4+3
$010F	$158A			BSF	PCLATH, 3
$0110	$209C			CALL	_mul_32x32_fp
$0111	$118A			BCF	PCLATH, 3
$0112	$0870			MOVF	STACK_0, 0
$0113	$00DE			MOVWF	FLOC_main+8
$0114	$0871			MOVF	STACK_0+1, 0
$0115	$00DF			MOVWF	FLOC_main+9
$0116	$0872			MOVF	STACK_0+2, 0
$0117	$00E0			MOVWF	FLOC_main+10
$0118	$0873			MOVF	STACK_0+3, 0
$0119	$00E1			MOVWF	FLOC_main+11
$011A	$085E			MOVF	FLOC_main+8, 0
$011B	$00BA			MOVWF	_PROPORTIONAL
$011C	$085F			MOVF	FLOC_main+9, 0
$011D	$00BB			MOVWF	_PROPORTIONAL+1
$011E	$0860			MOVF	FLOC_main+10, 0
$011F	$00BC			MOVWF	_PROPORTIONAL+2
$0120	$0861			MOVF	FLOC_main+11, 0
$0121	$00BD			MOVWF	_PROPORTIONAL+3
;lfr_pid_runner.c,215 :: 		INTEGRAL += error ;
$0122	$083F			MOVF	_INTEGRAL, 0
$0123	$00F0			MOVWF	STACK_0
$0124	$0840			MOVF	_INTEGRAL+1, 0
$0125	$00F1			MOVWF	STACK_0+1
$0126	$0841			MOVF	_INTEGRAL+2, 0
$0127	$00F2			MOVWF	STACK_0+2
$0128	$0842			MOVF	_INTEGRAL+3, 0
$0129	$00F3			MOVWF	STACK_0+3
$012A	$0836			MOVF	_error, 0
$012B	$00F4			MOVWF	STACK_4
$012C	$0837			MOVF	_error+1, 0
$012D	$00F5			MOVWF	STACK_4+1
$012E	$0838			MOVF	_error+2, 0
$012F	$00F6			MOVWF	STACK_4+2
$0130	$0839			MOVF	_error+3, 0
$0131	$00F7			MOVWF	STACK_4+3
$0132	$262E			CALL	_add_32x32_fp
$0133	$0870			MOVF	STACK_0, 0
$0134	$00D6			MOVWF	FLOC_main+0
$0135	$0871			MOVF	STACK_0+1, 0
$0136	$00D7			MOVWF	FLOC_main+1
$0137	$0872			MOVF	STACK_0+2, 0
$0138	$00D8			MOVWF	FLOC_main+2
$0139	$0873			MOVF	STACK_0+3, 0
$013A	$00D9			MOVWF	FLOC_main+3
$013B	$0856			MOVF	FLOC_main+0, 0
$013C	$00BF			MOVWF	_INTEGRAL
$013D	$0857			MOVF	FLOC_main+1, 0
$013E	$00C0			MOVWF	_INTEGRAL+1
$013F	$0858			MOVF	FLOC_main+2, 0
$0140	$00C1			MOVWF	_INTEGRAL+2
$0141	$0859			MOVF	FLOC_main+3, 0
$0142	$00C2			MOVWF	_INTEGRAL+3
;lfr_pid_runner.c,216 :: 		INTEGRAL *= ki;
$0143	$0843			MOVF	_Ki, 0
$0144	$00F0			MOVWF	STACK_0
$0145	$158A			BSF	PCLATH, 3
$0146	$2376			CALL	_byte2double
$0147	$118A			BCF	PCLATH, 3
$0148	$0856			MOVF	FLOC_main+0, 0
$0149	$00F4			MOVWF	STACK_4
$014A	$0857			MOVF	FLOC_main+1, 0
$014B	$00F5			MOVWF	STACK_4+1
$014C	$0858			MOVF	FLOC_main+2, 0
$014D	$00F6			MOVWF	STACK_4+2
$014E	$0859			MOVF	FLOC_main+3, 0
$014F	$00F7			MOVWF	STACK_4+3
$0150	$158A			BSF	PCLATH, 3
$0151	$209C			CALL	_mul_32x32_fp
$0152	$118A			BCF	PCLATH, 3
$0153	$0870			MOVF	STACK_0, 0
$0154	$00D6			MOVWF	FLOC_main+0
$0155	$0871			MOVF	STACK_0+1, 0
$0156	$00D7			MOVWF	FLOC_main+1
$0157	$0872			MOVF	STACK_0+2, 0
$0158	$00D8			MOVWF	FLOC_main+2
$0159	$0873			MOVF	STACK_0+3, 0
$015A	$00D9			MOVWF	FLOC_main+3
$015B	$0856			MOVF	FLOC_main+0, 0
$015C	$00BF			MOVWF	_INTEGRAL
$015D	$0857			MOVF	FLOC_main+1, 0
$015E	$00C0			MOVWF	_INTEGRAL+1
$015F	$0858			MOVF	FLOC_main+2, 0
$0160	$00C1			MOVWF	_INTEGRAL+2
$0161	$0859			MOVF	FLOC_main+3, 0
$0162	$00C2			MOVWF	_INTEGRAL+3
;lfr_pid_runner.c,217 :: 		DERIVATIVE = (error - perror);
$0163	$0832			MOVF	_perror, 0
$0164	$00F4			MOVWF	STACK_4
$0165	$0833			MOVF	_perror+1, 0
$0166	$00F5			MOVWF	STACK_4+1
$0167	$0834			MOVF	_perror+2, 0
$0168	$00F6			MOVWF	STACK_4+2
$0169	$0835			MOVF	_perror+3, 0
$016A	$00F7			MOVWF	STACK_4+3
$016B	$0836			MOVF	_error, 0
$016C	$00F0			MOVWF	STACK_0
$016D	$0837			MOVF	_error+1, 0
$016E	$00F1			MOVWF	STACK_0+1
$016F	$0838			MOVF	_error+2, 0
$0170	$00F2			MOVWF	STACK_0+2
$0171	$0839			MOVF	_error+3, 0
$0172	$00F3			MOVWF	STACK_0+3
$0173	$158A			BSF	PCLATH, 3
$0174	$23C2			CALL	_sub_32x32_fp
$0175	$118A			BCF	PCLATH, 3
$0176	$0870			MOVF	STACK_0, 0
$0177	$00DA			MOVWF	FLOC_main+4
$0178	$0871			MOVF	STACK_0+1, 0
$0179	$00DB			MOVWF	FLOC_main+5
$017A	$0872			MOVF	STACK_0+2, 0
$017B	$00DC			MOVWF	FLOC_main+6
$017C	$0873			MOVF	STACK_0+3, 0
$017D	$00DD			MOVWF	FLOC_main+7
$017E	$085A			MOVF	FLOC_main+4, 0
$017F	$00C4			MOVWF	_DERIVATIVE
$0180	$085B			MOVF	FLOC_main+5, 0
$0181	$00C5			MOVWF	_DERIVATIVE+1
$0182	$085C			MOVF	FLOC_main+6, 0
$0183	$00C6			MOVWF	_DERIVATIVE+2
$0184	$085D			MOVF	FLOC_main+7, 0
$0185	$00C7			MOVWF	_DERIVATIVE+3
;lfr_pid_runner.c,218 :: 		correction = ( (PROPORTIONAL) + (INTEGRAL) + (DERIVATIVE*kd));
$0186	$085E			MOVF	FLOC_main+8, 0
$0187	$00F0			MOVWF	STACK_0
$0188	$085F			MOVF	FLOC_main+9, 0
$0189	$00F1			MOVWF	STACK_0+1
$018A	$0860			MOVF	FLOC_main+10, 0
$018B	$00F2			MOVWF	STACK_0+2
$018C	$0861			MOVF	FLOC_main+11, 0
$018D	$00F3			MOVWF	STACK_0+3
$018E	$0856			MOVF	FLOC_main+0, 0
$018F	$00F4			MOVWF	STACK_4
$0190	$0857			MOVF	FLOC_main+1, 0
$0191	$00F5			MOVWF	STACK_4+1
$0192	$0858			MOVF	FLOC_main+2, 0
$0193	$00F6			MOVWF	STACK_4+2
$0194	$0859			MOVF	FLOC_main+3, 0
$0195	$00F7			MOVWF	STACK_4+3
$0196	$262E			CALL	_add_32x32_fp
$0197	$0870			MOVF	STACK_0, 0
$0198	$00D6			MOVWF	FLOC_main+0
$0199	$0871			MOVF	STACK_0+1, 0
$019A	$00D7			MOVWF	FLOC_main+1
$019B	$0872			MOVF	STACK_0+2, 0
$019C	$00D8			MOVWF	FLOC_main+2
$019D	$0873			MOVF	STACK_0+3, 0
$019E	$00D9			MOVWF	FLOC_main+3
$019F	$084C			MOVF	_Kd, 0
$01A0	$00F0			MOVWF	STACK_0
$01A1	$158A			BSF	PCLATH, 3
$01A2	$2376			CALL	_byte2double
$01A3	$118A			BCF	PCLATH, 3
$01A4	$085A			MOVF	FLOC_main+4, 0
$01A5	$00F4			MOVWF	STACK_4
$01A6	$085B			MOVF	FLOC_main+5, 0
$01A7	$00F5			MOVWF	STACK_4+1
$01A8	$085C			MOVF	FLOC_main+6, 0
$01A9	$00F6			MOVWF	STACK_4+2
$01AA	$085D			MOVF	FLOC_main+7, 0
$01AB	$00F7			MOVWF	STACK_4+3
$01AC	$158A			BSF	PCLATH, 3
$01AD	$209C			CALL	_mul_32x32_fp
$01AE	$118A			BCF	PCLATH, 3
$01AF	$0856			MOVF	FLOC_main+0, 0
$01B0	$00F4			MOVWF	STACK_4
$01B1	$0857			MOVF	FLOC_main+1, 0
$01B2	$00F5			MOVWF	STACK_4+1
$01B3	$0858			MOVF	FLOC_main+2, 0
$01B4	$00F6			MOVWF	STACK_4+2
$01B5	$0859			MOVF	FLOC_main+3, 0
$01B6	$00F7			MOVWF	STACK_4+3
$01B7	$262E			CALL	_add_32x32_fp
$01B8	$0870			MOVF	STACK_0, 0
$01B9	$00DA			MOVWF	FLOC_main+4
$01BA	$0871			MOVF	STACK_0+1, 0
$01BB	$00DB			MOVWF	FLOC_main+5
$01BC	$0872			MOVF	STACK_0+2, 0
$01BD	$00DC			MOVWF	FLOC_main+6
$01BE	$0873			MOVF	STACK_0+3, 0
$01BF	$00DD			MOVWF	FLOC_main+7
$01C0	$085A			MOVF	FLOC_main+4, 0
$01C1	$00C8			MOVWF	_correction
$01C2	$085B			MOVF	FLOC_main+5, 0
$01C3	$00C9			MOVWF	_correction+1
$01C4	$085C			MOVF	FLOC_main+6, 0
$01C5	$00CA			MOVWF	_correction+2
$01C6	$085D			MOVF	FLOC_main+7, 0
$01C7	$00CB			MOVWF	_correction+3
;lfr_pid_runner.c,219 :: 		rightpulse =  basespeed + correction;
$01C8	$0851			MOVF	_basespeed, 0
$01C9	$00F0			MOVWF	STACK_0
$01CA	$158A			BSF	PCLATH, 3
$01CB	$2376			CALL	_byte2double
$01CC	$118A			BCF	PCLATH, 3
$01CD	$0870			MOVF	STACK_0, 0
$01CE	$00D6			MOVWF	FLOC_main+0
$01CF	$0871			MOVF	STACK_0+1, 0
$01D0	$00D7			MOVWF	FLOC_main+1
$01D1	$0872			MOVF	STACK_0+2, 0
$01D2	$00D8			MOVWF	FLOC_main+2
$01D3	$0873			MOVF	STACK_0+3, 0
$01D4	$00D9			MOVWF	FLOC_main+3
$01D5	$0856			MOVF	FLOC_main+0, 0
$01D6	$00F0			MOVWF	STACK_0
$01D7	$0857			MOVF	FLOC_main+1, 0
$01D8	$00F1			MOVWF	STACK_0+1
$01D9	$0858			MOVF	FLOC_main+2, 0
$01DA	$00F2			MOVWF	STACK_0+2
$01DB	$0859			MOVF	FLOC_main+3, 0
$01DC	$00F3			MOVWF	STACK_0+3
$01DD	$085A			MOVF	FLOC_main+4, 0
$01DE	$00F4			MOVWF	STACK_4
$01DF	$085B			MOVF	FLOC_main+5, 0
$01E0	$00F5			MOVWF	STACK_4+1
$01E1	$085C			MOVF	FLOC_main+6, 0
$01E2	$00F6			MOVWF	STACK_4+2
$01E3	$085D			MOVF	FLOC_main+7, 0
$01E4	$00F7			MOVWF	STACK_4+3
$01E5	$262E			CALL	_add_32x32_fp
$01E6	$0870			MOVF	STACK_0, 0
$01E7	$00CD			MOVWF	_rightpulse
$01E8	$0871			MOVF	STACK_0+1, 0
$01E9	$00CE			MOVWF	_rightpulse+1
$01EA	$0872			MOVF	STACK_0+2, 0
$01EB	$00CF			MOVWF	_rightpulse+2
$01EC	$0873			MOVF	STACK_0+3, 0
$01ED	$00D0			MOVWF	_rightpulse+3
;lfr_pid_runner.c,220 :: 		leftpulse = basespeed - correction;
$01EE	$085A			MOVF	FLOC_main+4, 0
$01EF	$00F4			MOVWF	STACK_4
$01F0	$085B			MOVF	FLOC_main+5, 0
$01F1	$00F5			MOVWF	STACK_4+1
$01F2	$085C			MOVF	FLOC_main+6, 0
$01F3	$00F6			MOVWF	STACK_4+2
$01F4	$085D			MOVF	FLOC_main+7, 0
$01F5	$00F7			MOVWF	STACK_4+3
$01F6	$0856			MOVF	FLOC_main+0, 0
$01F7	$00F0			MOVWF	STACK_0
$01F8	$0857			MOVF	FLOC_main+1, 0
$01F9	$00F1			MOVWF	STACK_0+1
$01FA	$0858			MOVF	FLOC_main+2, 0
$01FB	$00F2			MOVWF	STACK_0+2
$01FC	$0859			MOVF	FLOC_main+3, 0
$01FD	$00F3			MOVWF	STACK_0+3
$01FE	$158A			BSF	PCLATH, 3
$01FF	$23C2			CALL	_sub_32x32_fp
$0200	$118A			BCF	PCLATH, 3
$0201	$0870			MOVF	STACK_0, 0
$0202	$00D2			MOVWF	_leftpulse
$0203	$0871			MOVF	STACK_0+1, 0
$0204	$00D3			MOVWF	_leftpulse+1
$0205	$0872			MOVF	STACK_0+2, 0
$0206	$00D4			MOVWF	_leftpulse+2
$0207	$0873			MOVF	STACK_0+3, 0
$0208	$00D5			MOVWF	_leftpulse+3
;lfr_pid_runner.c,221 :: 		motor_RF();
$0209	$158A			BSF	PCLATH, 3
$020A	$2404			CALL	_motor_RF
$020B	$118A			BCF	PCLATH, 3
;lfr_pid_runner.c,222 :: 		motor_LF();
$020C	$158A			BSF	PCLATH, 3
$020D	$23FA			CALL	_motor_LF
$020E	$118A			BCF	PCLATH, 3
;lfr_pid_runner.c,224 :: 		if(leftpulse > 255)                  //LEFT CORRECTION EXCEED
$020F	$0852			MOVF	_leftpulse, 0
$0210	$00F4			MOVWF	STACK_4
$0211	$0853			MOVF	_leftpulse+1, 0
$0212	$00F5			MOVWF	STACK_4+1
$0213	$0854			MOVF	_leftpulse+2, 0
$0214	$00F6			MOVWF	STACK_4+2
$0215	$0855			MOVF	_leftpulse+3, 0
$0216	$00F7			MOVWF	STACK_4+3
$0217	$3000			MOVLW	0
$0218	$00F0			MOVWF	STACK_0
$0219	$3000			MOVLW	0
$021A	$00F1			MOVWF	STACK_0+1
$021B	$307F			MOVLW	127
$021C	$00F2			MOVWF	STACK_0+2
$021D	$3086			MOVLW	134
$021E	$00F3			MOVWF	STACK_0+3
$021F	$158A			BSF	PCLATH, 3
$0220	$2159			CALL	_compare_double
$0221	$118A			BCF	PCLATH, 3
$0222	$3001			MOVLW	1
$0223	$1803			BTFSC	STATUS, C
$0224	$3000			MOVLW	0
$0225	$00F0			MOVWF	STACK_0
$0226	$0870			MOVF	STACK_0, 0
$0227	$1903			BTFSC	STATUS, Z
$0228	$2A31			GOTO	L_main_29
;lfr_pid_runner.c,225 :: 		leftpulse = 255;
$0229	$3000			MOVLW	0
$022A	$00D2			MOVWF	_leftpulse
$022B	$3000			MOVLW	0
$022C	$00D3			MOVWF	_leftpulse+1
$022D	$307F			MOVLW	127
$022E	$00D4			MOVWF	_leftpulse+2
$022F	$3086			MOVLW	134
$0230	$00D5			MOVWF	_leftpulse+3
$0231	$	L_main_29:
;lfr_pid_runner.c,227 :: 		if(rightpulse > 255)                 //RIGHT CORRECTION EXCEED
$0231	$084D			MOVF	_rightpulse, 0
$0232	$00F4			MOVWF	STACK_4
$0233	$084E			MOVF	_rightpulse+1, 0
$0234	$00F5			MOVWF	STACK_4+1
$0235	$084F			MOVF	_rightpulse+2, 0
$0236	$00F6			MOVWF	STACK_4+2
$0237	$0850			MOVF	_rightpulse+3, 0
$0238	$00F7			MOVWF	STACK_4+3
$0239	$3000			MOVLW	0
$023A	$00F0			MOVWF	STACK_0
$023B	$3000			MOVLW	0
$023C	$00F1			MOVWF	STACK_0+1
$023D	$307F			MOVLW	127
$023E	$00F2			MOVWF	STACK_0+2
$023F	$3086			MOVLW	134
$0240	$00F3			MOVWF	STACK_0+3
$0241	$158A			BSF	PCLATH, 3
$0242	$2159			CALL	_compare_double
$0243	$118A			BCF	PCLATH, 3
$0244	$3001			MOVLW	1
$0245	$1803			BTFSC	STATUS, C
$0246	$3000			MOVLW	0
$0247	$00F0			MOVWF	STACK_0
$0248	$0870			MOVF	STACK_0, 0
$0249	$1903			BTFSC	STATUS, Z
$024A	$2A53			GOTO	L_main_30
;lfr_pid_runner.c,228 :: 		rightpulse = 255;
$024B	$3000			MOVLW	0
$024C	$00CD			MOVWF	_rightpulse
$024D	$3000			MOVLW	0
$024E	$00CE			MOVWF	_rightpulse+1
$024F	$307F			MOVLW	127
$0250	$00CF			MOVWF	_rightpulse+2
$0251	$3086			MOVLW	134
$0252	$00D0			MOVWF	_rightpulse+3
$0253	$	L_main_30:
;lfr_pid_runner.c,229 :: 		if(leftpulse < 0)                  //LEFT CORRECTION EXCEED
$0253	$01F4			CLRF	STACK_4
$0254	$01F5			CLRF	STACK_4+1
$0255	$01F6			CLRF	STACK_4+2
$0256	$01F7			CLRF	STACK_4+3
$0257	$0852			MOVF	_leftpulse, 0
$0258	$00F0			MOVWF	STACK_0
$0259	$0853			MOVF	_leftpulse+1, 0
$025A	$00F1			MOVWF	STACK_0+1
$025B	$0854			MOVF	_leftpulse+2, 0
$025C	$00F2			MOVWF	STACK_0+2
$025D	$0855			MOVF	_leftpulse+3, 0
$025E	$00F3			MOVWF	STACK_0+3
$025F	$158A			BSF	PCLATH, 3
$0260	$2159			CALL	_compare_double
$0261	$118A			BCF	PCLATH, 3
$0262	$3001			MOVLW	1
$0263	$1803			BTFSC	STATUS, C
$0264	$3000			MOVLW	0
$0265	$00F0			MOVWF	STACK_0
$0266	$0870			MOVF	STACK_0, 0
$0267	$1903			BTFSC	STATUS, Z
$0268	$2A6D			GOTO	L_main_31
;lfr_pid_runner.c,230 :: 		leftpulse = 0;
$0269	$01D2			CLRF	_leftpulse
$026A	$01D3			CLRF	_leftpulse+1
$026B	$01D4			CLRF	_leftpulse+2
$026C	$01D5			CLRF	_leftpulse+3
$026D	$	L_main_31:
;lfr_pid_runner.c,231 :: 		if(rightpulse < 0)                   //RIGHT CORRECTION EXCEED
$026D	$01F4			CLRF	STACK_4
$026E	$01F5			CLRF	STACK_4+1
$026F	$01F6			CLRF	STACK_4+2
$0270	$01F7			CLRF	STACK_4+3
$0271	$084D			MOVF	_rightpulse, 0
$0272	$00F0			MOVWF	STACK_0
$0273	$084E			MOVF	_rightpulse+1, 0
$0274	$00F1			MOVWF	STACK_0+1
$0275	$084F			MOVF	_rightpulse+2, 0
$0276	$00F2			MOVWF	STACK_0+2
$0277	$0850			MOVF	_rightpulse+3, 0
$0278	$00F3			MOVWF	STACK_0+3
$0279	$158A			BSF	PCLATH, 3
$027A	$2159			CALL	_compare_double
$027B	$118A			BCF	PCLATH, 3
$027C	$3001			MOVLW	1
$027D	$1803			BTFSC	STATUS, C
$027E	$3000			MOVLW	0
$027F	$00F0			MOVWF	STACK_0
$0280	$0870			MOVF	STACK_0, 0
$0281	$1903			BTFSC	STATUS, Z
$0282	$2A87			GOTO	L_main_32
;lfr_pid_runner.c,232 :: 		rightpulse = 0;
$0283	$01CD			CLRF	_rightpulse
$0284	$01CE			CLRF	_rightpulse+1
$0285	$01CF			CLRF	_rightpulse+2
$0286	$01D0			CLRF	_rightpulse+3
$0287	$	L_main_32:
;lfr_pid_runner.c,233 :: 		PWM1_CHANGE_DUTY(rightpulse);
$0287	$084D			MOVF	_rightpulse, 0
$0288	$00F0			MOVWF	STACK_0
$0289	$084E			MOVF	_rightpulse+1, 0
$028A	$00F1			MOVWF	STACK_0+1
$028B	$084F			MOVF	_rightpulse+2, 0
$028C	$00F2			MOVWF	STACK_0+2
$028D	$0850			MOVF	_rightpulse+3, 0
$028E	$00F3			MOVWF	STACK_0+3
$028F	$158A			BSF	PCLATH, 3
$0290	$223E			CALL	_double2byte
$0291	$118A			BCF	PCLATH, 3
$0292	$0870			MOVF	STACK_0, 0
$0293	$00EE			MOVWF	FARG_PWM1_Change_Duty+0
$0294	$158A			BSF	PCLATH, 3
$0295	$2281			CALL	_PWM1_Change_Duty
$0296	$118A			BCF	PCLATH, 3
;lfr_pid_runner.c,234 :: 		PWM2_CHANGE_DUTY(leftpulse);
$0297	$0852			MOVF	_leftpulse, 0
$0298	$00F0			MOVWF	STACK_0
$0299	$0853			MOVF	_leftpulse+1, 0
$029A	$00F1			MOVWF	STACK_0+1
$029B	$0854			MOVF	_leftpulse+2, 0
$029C	$00F2			MOVWF	STACK_0+2
$029D	$0855			MOVF	_leftpulse+3, 0
$029E	$00F3			MOVWF	STACK_0+3
$029F	$158A			BSF	PCLATH, 3
$02A0	$223E			CALL	_double2byte
$02A1	$118A			BCF	PCLATH, 3
$02A2	$0870			MOVF	STACK_0, 0
$02A3	$00EE			MOVWF	FARG_PWM2_Change_Duty+0
$02A4	$158A			BSF	PCLATH, 3
$02A5	$22EB			CALL	_PWM2_Change_Duty
$02A6	$118A			BCF	PCLATH, 3
;lfr_pid_runner.c,235 :: 		}
$02A7	$	L_main_28:
;lfr_pid_runner.c,236 :: 		delay_ms(10);
$02A7	$300D			MOVLW	13
$02A8	$00FB			MOVWF	STACK_11
$02A9	$30FF			MOVLW	255
$02AA	$00FA			MOVWF	STACK_10
$02AB	$0BFB			DECFSZ	STACK_11, F
$02AC	$2AAE			GOTO	$+2
$02AD	$2AB1			GOTO	$+4
$02AE	$0BFA			DECFSZ	STACK_10, F
$02AF	$2AAE			GOTO	$-1
$02B0	$2AAB			GOTO	$-5
$02B1	$30F3			MOVLW	243
$02B2	$00FA			MOVWF	STACK_10
$02B3	$0BFA			DECFSZ	STACK_10, F
$02B4	$2AB3			GOTO	$-1
$02B5	$0000			NOP
;lfr_pid_runner.c,237 :: 		}
$02B6	$	L_main_23:
;lfr_pid_runner.c,238 :: 		}
$02B6	$280D			GOTO	L_main_17
;lfr_pid_runner.c,239 :: 		}
$02B7	$2AB7			GOTO	$


//** Procedures locations **
//ADDRESS		PROCEDURE
//----------------------------------------------
$0004		main
$02B8		tsop_f_sense
$04ED		CalcError
$062E		Add_32x32_FP
$06D6		indicator
$0727		Equals_Double
$0800		Div_32x32_FP
$089C		Mul_32x32_FP
$08FD		NRM4032
$0959		Compare_Double
$09A9		GlobalInilfr_pid_runner
$09F4		Mul_16x16_S
$0A3E		Double2Byte
$0A81		PWM1_Change_Duty
$0ABA		NRM3232
$0AEB		PWM2_Change_Duty
$0B24		Mul_16x16_U
$0B4F		initpwm
$0B60		Word2Double
$0B76		Byte2Double
$0B86		initport
$0B97		SETIOV3224
$0BA6		SETFUN32
$0BB4		SETFOV32
$0BC2		Sub_32x32_FP
$0BCA		RES032
$0BD3		PWM2_Start
$0BDB		PWM1_Start
$0BE3		FIXSIGN32
$0BE9		PWM2_Init
$0BEF		PWM1_Init
$0BF5		motor_RB
$0BFA		motor_LF
$0BFF		SETFDZ32
$0C04		motor_RF
$0C09		motor_LB


//** Labels locations **
//ADDRESS		LABEL
//----------------------------------------------
$0004		_main:
$000D		L_main_17:
$0029		L_main_40:
$0059		L_main_41:
$005B		L287_ex_L_main_21:
$007A		L_main_21:
$0084		L_main_22:
$00B8		L_main_42:
$00DE		L_main_25:
$0101		L_main_26:
$0101		L_main_27:
$0102		L_main_24:
$0231		L_main_29:
$0253		L_main_30:
$026D		L_main_31:
$0287		L_main_32:
$02A7		L_main_28:
$02B6		L_main_23:
$02B8		_tsop_f_sense:
$02EE		L_tsop_f_sense_39:
$0314		L_tsop_f_sense_9:
$0338		L_tsop_f_sense_11:
$0467		L_tsop_f_sense_13:
$0489		L_tsop_f_sense_14:
$04A3		L_tsop_f_sense_15:
$04BD		L_tsop_f_sense_16:
$04DD		L_tsop_f_sense_10:
$04DD		L_tsop_f_sense_12:
$04EC		L_tsop_f_sense_8:
$04ED		_CalcError:
$0507		L_CalcError_0:
$050D		L_CalcError_1:
$0513		L_CalcError_2:
$0519		L_CalcError_3:
$051F		L_CalcError_4:
$0525		L_CalcError_5:
$052B		L_CalcError_6:
$0533		L_CalcError_7:
$0542		L_CalcError_33:
$0549		L_CalcError_34:
$0569		L_CalcError_35:
$0570		L_CalcError_36:
$05B0		L_CalcError_37:
$05B7		L_CalcError_38:
$062E		_Add_32x32_FP:
$0651		USEA32:
$067A		ALIGNB32:
$067D		ALOOPB32:
$0684		ALIGNED32:
$0691		AOK32:
$06AA		ACOMP32:
$06BA		JMPNRMRND4032:
$06C0		JMPNRM4032:
$06C6		JMPNRM32:
$06CC		ADD_JMPSETFOV32:
$06D2		JMPEEE:
$06D4		ADD32EEE:
$06D6		_indicator:
$0727		_Equals_Double:
$073A		EQU_FALSE:
$0800		_Div_32x32_FP:
$0802		FPD32:
$0808		D32BNE0:
$080E		TALIGN32:
$081A		TS1ALIGN32:
$081E		TS2ALIGN32:
$082B		DALIGN32OK:
$082F		AGEB32:
$0835		ALTB32:
$083A		DARGOK32:
$083C		DLOOP32:
$0848		DS132:
$084C		DS232:
$0853		DREST32:
$0858		DAREST32:
$085E		DOK32:
$0863		DROUND32:
$0885		DIV32OK:
$088F		JPDSETFDZ32:
$0892		JPDRES032:
$0895		JPDSETFOV32:
$0898		JPDSETFUN32:
$089A		DIV32EEE:
$089C		_Mul_32x32_FP:
$089E		FPM32:
$08A4		M32BNE0:
$08B0		MTUN32:
$08B3		MOK32:
$08C1		MLOOP32:
$08C3		MADD32:
$08CD		MNOADD32:
$08DD		MROUND32:
$08EF		MUL32OK:
$08F3		JPMRES032:
$08F6		JPMSETFOV32:
$08F9		JPMSETFUN32:
$08FB		MUL32EEE:
$08FD		_NRM4032:
$0906		NRM4032:
$0926		NORM4032:
$092C		NORM4032A:
$0935		NRMRND4032:
$0948		JMPRES032:
$094C		JMPSETFUN32:
$0950		JMPFIXSIGN32:
$0954		JMPSETFOV32:
$0957		NRM4032EEE:
$0959		_Compare_Double:
$096A		COMPARE_YNOTZERO:
$096D		COMPARE_XNOTZERO:
$0970		COMPARE_NOTZERO:
$097E		COMPARE_TESTALL:
$0985		COMPARE_C1:
$098C		COMPARE_C2:
$0993		COMPARE_C3:
$0999		GT_FALSE:
$099D		GT_TRUE:
$09A1		COMPARE_GT:
$09A3		COMPARE_LT:
$09A5		COMPARE_EQU:
$09A9		GlobalInilfr_pid_runner:
$09F4		_Mul_16x16_S:
$0A3E		_Double2Byte:
$0A40		INT32U08:
$0A4F		SETEXP08:
$0A5C		TSHIFT3208:
$0A5F		SHIFT3208:
$0A63		SHIFT3208OK:
$0A6B		INT3208OK:
$0A6B		IRES008:
$0A6D		SETIOV08:
$0A72		D2B_JPKSETIOV3224:
$0A75		INT3208EOK:
$0A78		INT3208EER:
$0A7A		INT3208EEE:
$0A7E		L_Double2Byte_0:
$0A81		_PWM1_Change_Duty:
$0A95		L_PWM1_Change_Duty_2:
$0A9C		L_PWM1_Change_Duty_3:
$0ABA		_NRM3232:
$0AD1		NORM3232:
$0AD7		NORM3232A:
$0ADF		JPNRES032:
$0AE3		JPNSETFUN32:
$0AE7		JMPNFIXSIGN32:
$0AEA		NORM32EEE:
$0AEB		_PWM2_Change_Duty:
$0AFF		L_PWM2_Change_Duty_0:
$0B06		L_PWM2_Change_Duty_1:
$0B24		_Mul_16x16_U:
$0B4F		_initpwm:
$0B60		_Word2Double:
$0B69		FLO16U32:
$0B76		_Byte2Double:
$0B78		FLO08U32:
$0B86		_initport:
$0B97		_SETIOV3224:
$0BA4		SETIOV3224EEE:
$0BA6		_SETFUN32:
$0BB2		SETFUN32EEE:
$0BB4		_SETFOV32:
$0BC0		SETFOV32EEE:
$0BC2		_Sub_32x32_FP:
$0BCA		_RES032:
$0BD3		_PWM2_Start:
$0BDB		_PWM1_Start:
$0BE3		_FIXSIGN32:
$0BE9		_PWM2_Init:
$0BEF		_PWM1_Init:
$0BF5		_motor_RB:
$0BFA		_motor_LF:
$0BFF		_SETFDZ32:
$0C04		_motor_RF:
$0C09		_motor_LB:


//** Variables locations **
//ADDRESS		VARIABLE
//----------------------------------------------
$0000		INDF
$0002		PCL
$0003		STATUS
$0004		FSR
$0005		PORTA
$0006		PORTB
$0007		PORTC
$0008		PORTD
$0009		PORTE
$000A		PCLATH
$0012		T2CON
$0015		CCPR1L
$0017		CCP1CON
$001B		CCPR2L
$001D		CCP2CON
$0020		___math_tempbD
$0021		_s1
$0023		_s2
$0025		_s3
$0027		_s4
$0029		_s5
$002B		_s6
$002D		_s7
$002F		_s8
$0031		_lastreading
$0032		_perror
$0036		_error
$003A		_PROPORTIONAL
$003E		_Kp
$003F		_INTEGRAL
$0043		_Ki
$0044		_DERIVATIVE
$0048		_correction
$004C		_Kd
$004D		_rightpulse
$0051		_basespeed
$0052		_leftpulse
$0056		
$0062		
$0062		
$006E		FARG_PWM1_Change_Duty+0
$006E		FARG_PWM2_Change_Duty+0
$0070		STACK_0
$0071		STACK_1
$0072		STACK_2
$0073		STACK_3
$0074		STACK_4
$0075		STACK_5
$0076		STACK_6
$0077		STACK_7
$0078		STACK_8
$0079		STACK_9
$007A		STACK_10
$007B		STACK_11
$007C		STACK_12
$007D		STACK_13
$007E		STACK_14
$007F		STACK_15
$0085		TRISA
$0086		TRISB
$0087		TRISC
$0088		TRISD
$0089		TRISE
$0092		PR2
$009F		ADCON1
$00A0		FARG_PWM1_Init+0
$00A0		FARG_PWM2_Init+0


