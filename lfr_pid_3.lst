;  ASM code generated by mikroVirtualMachine for PIC - V. 8.2.0.0
;  Date/Time: 2/28/2011 9:50:23 PM
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$2804			GOTO	_main
$09A0	$	_RES032:
$09A0	$1303			BCF	STATUS, RP1
$09A1	$1283			BCF	STATUS, RP0
$09A2	$01F2			CLRF	STACK_2
$09A3	$01F1			CLRF	STACK_1
$09A4	$01F0			CLRF	STACK_0
$09A5	$01F8			CLRF	STACK_8
$09A6	$01F3			CLRF	STACK_3
$09A7	$3000			MOVLW	0
$09A8	$0008			RETURN
$0992	$	_SETFUN32:
$0992	$1303			BCF	STATUS, RP1
$0993	$1283			BCF	STATUS, RP0
$0994	$157B			BSF	STACK_11, 2
$0995	$1FFB			BTFSS	STACK_11, 7
$0996	$299E			GOTO	SETFUN32EEE
$0997	$3001			MOVLW	0x01
$0998	$00F3			MOVWF	STACK_3
$0999	$01F2			CLRF	STACK_2
$099A	$01F1			CLRF	STACK_1
$099B	$01F0			CLRF	STACK_0
$099C	$0DFA			RLF	STACK_10, F
$099D	$0CF2			RRF	STACK_2, F
$099E	$	SETFUN32EEE:
$099E	$30FF			MOVLW	0xFF
$099F	$0008			RETURN
$09B9	$	_FIXSIGN32:
$09B9	$1303			BCF	STATUS, RP1
$09BA	$1283			BCF	STATUS, RP0
$09BB	$1FFA			BTFSS	STACK_10, 7
$09BC	$13F2			BCF	STACK_2, 7
$09BD	$3000			MOVLW	0
$09BE	$0008			RETURN
$0984	$	_SETFOV32:
$0984	$1303			BCF	STATUS, RP1
$0985	$1283			BCF	STATUS, RP0
$0986	$14FB			BSF	STACK_11, 1
$0987	$1FFB			BTFSS	STACK_11, 7
$0988	$2990			GOTO	SETFOV32EEE
$0989	$30FF			MOVLW	0xFF
$098A	$00F3			MOVWF	STACK_3
$098B	$00F2			MOVWF	STACK_2
$098C	$00F1			MOVWF	STACK_1
$098D	$00F0			MOVWF	STACK_0
$098E	$0DFA			RLF	STACK_10, F
$098F	$0CF2			RRF	STACK_2, F
$0990	$	SETFOV32EEE:
$0990	$30FF			MOVLW	0xFF
$0991	$0008			RETURN
$05A8	$	_NRM4032:
$05A8	$1303			BCF	STATUS, RP1
$05A9	$1283			BCF	STATUS, RP0
$05AA	$187C			BTFSC	STACK_12, 0
$05AB	$2DE0			GOTO	NRMRND4032
$05AC	$18FC			BTFSC	STACK_12, 1
$05AD	$2DB1			GOTO	NRM4032
$05AE	$197C			BTFSC	STACK_12, 2
$05AF	$2E05			GOTO	JMPSETFOV32
$05B0	$2DAA			GOTO	$-6
$05B1	$	NRM4032:
$05B1	$01A0			CLRF	__math_tempbD
$05B2	$0872			MOVF	STACK_2, W
$05B3	$1D03			BTFSS	STATUS, Z
$05B4	$2DD1			GOTO	NORM4032
$05B5	$0871			MOVF	STACK_1, W
$05B6	$00F2			MOVWF	STACK_2
$05B7	$0870			MOVF	STACK_0, W
$05B8	$00F1			MOVWF	STACK_1
$05B9	$0878			MOVF	STACK_8, W
$05BA	$00F0			MOVWF	STACK_0
$05BB	$01F8			CLRF	STACK_8
$05BC	$15A0			BSF	__math_tempbD, 3
$05BD	$0872			MOVF	STACK_2, W
$05BE	$1D03			BTFSS	STATUS, Z
$05BF	$2DD1			GOTO	NORM4032
$05C0	$0871			MOVF	STACK_1, W
$05C1	$00F2			MOVWF	STACK_2
$05C2	$0870			MOVF	STACK_0, W
$05C3	$00F1			MOVWF	STACK_1
$05C4	$01F0			CLRF	STACK_0
$05C5	$11A0			BCF	__math_tempbD, 3
$05C6	$1620			BSF	__math_tempbD, 4
$05C7	$0872			MOVF	STACK_2, W
$05C8	$1D03			BTFSS	STATUS, Z
$05C9	$2DD1			GOTO	NORM4032
$05CA	$0871			MOVF	STACK_1, W
$05CB	$00F2			MOVWF	STACK_2
$05CC	$01F1			CLRF	STACK_1
$05CD	$15A0			BSF	__math_tempbD, 3
$05CE	$0872			MOVF	STACK_2, W
$05CF	$1903			BTFSC	STATUS, Z
$05D0	$2DF3			GOTO	JMPRES032
$05D1	$	NORM4032:
$05D1	$0820			MOVF	__math_tempbD, W
$05D2	$02F3			SUBWF	STACK_3, F
$05D3	$1D03			BTFSS	STATUS, Z
$05D4	$1C03			BTFSS	STATUS, C
$05D5	$2DF9			GOTO	JMPSETFUN32
$05D6	$1003			BCF	STATUS, C
$05D7	$	NORM4032A:
$05D7	$1BF2			BTFSC	STACK_2, 7
$05D8	$2DE0			GOTO	NRMRND4032
$05D9	$0DF8			RLF	STACK_8, F
$05DA	$0DF0			RLF	STACK_0, F
$05DB	$0DF1			RLF	STACK_1, F
$05DC	$0DF2			RLF	STACK_2, F
$05DD	$0BF3			DECFSZ	STACK_3, F
$05DE	$2DD7			GOTO	NORM4032A
$05DF	$2DF9			GOTO	JMPSETFUN32
$05E0	$	NRMRND4032:
$05E0	$1B7B			BTFSC	STACK_11, 6
$05E1	$1C70			BTFSS	STACK_0, 0
$05E2	$2DFF			GOTO	JMPFIXSIGN32
$05E3	$1FF8			BTFSS	STACK_8, 7
$05E4	$2DFF			GOTO	JMPFIXSIGN32
$05E5	$0AF0			INCF	STACK_0, F
$05E6	$1903			BTFSC	STATUS, Z
$05E7	$0AF1			INCF	STACK_1, F
$05E8	$1903			BTFSC	STATUS, Z
$05E9	$0AF2			INCF	STACK_2, F
$05EA	$1D03			BTFSS	STATUS, Z
$05EB	$2DFF			GOTO	JMPFIXSIGN32
$05EC	$0CF2			RRF	STACK_2, F
$05ED	$0CF1			RRF	STACK_1, F
$05EE	$0CF0			RRF	STACK_0, F
$05EF	$0AF3			INCF	STACK_3, F
$05F0	$1903			BTFSC	STATUS, Z
$05F1	$2E05			GOTO	JMPSETFOV32
$05F2	$2DFF			GOTO	JMPFIXSIGN32
$05F3	$	JMPRES032:
$05F3	$3001			MOVLW	0x01
$05F4	$00FC			MOVWF	STACK_12
$05F5	$158A			BSF	PCLATH, 3
$05F6	$21A0			CALL	_RES032
$05F7	$118A			BCF	PCLATH, 3
$05F8	$2E0A			GOTO	NRM4032EEE
$05F9	$	JMPSETFUN32:
$05F9	$3002			MOVLW	0x02
$05FA	$00FC			MOVWF	STACK_12
$05FB	$158A			BSF	PCLATH, 3
$05FC	$2192			CALL	_SETFUN32
$05FD	$118A			BCF	PCLATH, 3
$05FE	$2E0A			GOTO	NRM4032EEE
$05FF	$	JMPFIXSIGN32:
$05FF	$3004			MOVLW	0x04
$0600	$00FC			MOVWF	STACK_12
$0601	$158A			BSF	PCLATH, 3
$0602	$21B9			CALL	_FIXSIGN32
$0603	$118A			BCF	PCLATH, 3
$0604	$2E0A			GOTO	NRM4032EEE
$0605	$	JMPSETFOV32:
$0605	$3008			MOVLW	0x08
$0606	$00FC			MOVWF	STACK_12
$0607	$158A			BSF	PCLATH, 3
$0608	$2184			CALL	_SETFOV32
$0609	$118A			BCF	PCLATH, 3
$060A	$	NRM4032EEE:
$060A	$0000			NOP
$060B	$0008			RETURN
$087E	$	_NRM3232:
$087E	$1303			BCF	STATUS, RP1
$087F	$1283			BCF	STATUS, RP0
$0880	$01A0			CLRF	__math_tempbD
$0881	$0872			MOVF	STACK_2, W
$0882	$1D03			BTFSS	STATUS, Z
$0883	$2895			GOTO	NORM3232
$0884	$0871			MOVF	STACK_1, W
$0885	$00F2			MOVWF	STACK_2
$0886	$0870			MOVF	STACK_0, W
$0887	$00F1			MOVWF	STACK_1
$0888	$01F0			CLRF	STACK_0
$0889	$15A0			BSF	__math_tempbD, 3
$088A	$0872			MOVF	STACK_2, W
$088B	$1D03			BTFSS	STATUS, Z
$088C	$2895			GOTO	NORM3232
$088D	$0871			MOVF	STACK_1, W
$088E	$00F2			MOVWF	STACK_2
$088F	$01F1			CLRF	STACK_1
$0890	$11A0			BCF	__math_tempbD, 3
$0891	$1620			BSF	__math_tempbD, 4
$0892	$0872			MOVF	STACK_2, W
$0893	$1903			BTFSC	STATUS, Z
$0894	$28A3			GOTO	JPNRES032
$0895	$	NORM3232:
$0895	$0820			MOVF	__math_tempbD, W
$0896	$02F3			SUBWF	STACK_3, F
$0897	$1D03			BTFSS	STATUS, Z
$0898	$1C03			BTFSS	STATUS, C
$0899	$28A7			GOTO	JPNSETFUN32
$089A	$1003			BCF	STATUS, C
$089B	$	NORM3232A:
$089B	$1BF2			BTFSC	STACK_2, 7
$089C	$28AB			GOTO	JMPNFIXSIGN32
$089D	$0DF0			RLF	STACK_0, F
$089E	$0DF1			RLF	STACK_1, F
$089F	$0DF2			RLF	STACK_2, F
$08A0	$0BF3			DECFSZ	STACK_3, F
$08A1	$289B			GOTO	NORM3232A
$08A2	$28A7			GOTO	JPNSETFUN32
$08A3	$	JPNRES032:
$08A3	$3001			MOVLW	0x01
$08A4	$00FC			MOVWF	STACK_12
$08A5	$21A0			CALL	_RES032
$08A6	$28AE			GOTO	NORM32EEE
$08A7	$	JPNSETFUN32:
$08A7	$3002			MOVLW	0x02
$08A8	$00FC			MOVWF	STACK_12
$08A9	$2192			CALL	_SETFUN32
$08AA	$28AE			GOTO	NORM32EEE
$08AB	$	JMPNFIXSIGN32:
$08AB	$3004			MOVLW	0x04
$08AC	$00FC			MOVWF	STACK_12
$08AD	$21B9			CALL	_FIXSIGN32
$08AE	$	NORM32EEE:
$08AE	$0008			RETURN
$09DF	$	_SETFDZ32:
$09DF	$1303			BCF	STATUS, RP1
$09E0	$1283			BCF	STATUS, RP0
$09E1	$15FB			BSF	STACK_11, 3
$09E2	$30FF			MOVLW	0xFF
$09E3	$0008			RETURN
$03F9	$	_Add_32x32_FP:
$03F9	$1303			BCF	STATUS, RP1
$03FA	$1283			BCF	STATUS, RP0
$03FB	$0872			MOVF	STACK_2, W
$03FC	$0676			XORWF	STACK_6, W
$03FD	$00A0			MOVWF	__math_tempbD
$03FE	$01F8			CLRF	STACK_8
$03FF	$01F9			CLRF	STACK_9
$0400	$0873			MOVF	STACK_3, W
$0401	$0277			SUBWF	STACK_7, W
$0402	$1C03			BTFSS	STATUS, C
$0403	$2C1C			GOTO	USEA32
$0404	$0877			MOVF	STACK_7, W
$0405	$00FD			MOVWF	STACK_13
$0406	$0873			MOVF	STACK_3, W
$0407	$00F7			MOVWF	STACK_7
$0408	$087D			MOVF	STACK_13, W
$0409	$00F3			MOVWF	STACK_3
$040A	$0876			MOVF	STACK_6, W
$040B	$00FD			MOVWF	STACK_13
$040C	$0872			MOVF	STACK_2, W
$040D	$00F6			MOVWF	STACK_6
$040E	$087D			MOVF	STACK_13, W
$040F	$00F2			MOVWF	STACK_2
$0410	$0875			MOVF	STACK_5, W
$0411	$00FD			MOVWF	STACK_13
$0412	$0871			MOVF	STACK_1, W
$0413	$00F5			MOVWF	STACK_5
$0414	$087D			MOVF	STACK_13, W
$0415	$00F1			MOVWF	STACK_1
$0416	$0874			MOVF	STACK_4, W
$0417	$00FD			MOVWF	STACK_13
$0418	$0870			MOVF	STACK_0, W
$0419	$00F4			MOVWF	STACK_4
$041A	$087D			MOVF	STACK_13, W
$041B	$00F0			MOVWF	STACK_0
$041C	$	USEA32:
$041C	$0877			MOVF	STACK_7, W
$041D	$1903			BTFSC	STATUS, Z
$041E	$2C99			GOTO	JMPEEE
$041F	$0872			MOVF	STACK_2, W
$0420	$00FA			MOVWF	STACK_10
$0421	$17F2			BSF	STACK_2, 7
$0422	$17F6			BSF	STACK_6, 7
$0423	$0877			MOVF	STACK_7, W
$0424	$0273			SUBWF	STACK_3, W
$0425	$00F7			MOVWF	STACK_7
$0426	$1903			BTFSC	STATUS, Z
$0427	$2C4F			GOTO	ALIGNED32
$0428	$3008			MOVLW	8
$0429	$0277			SUBWF	STACK_7, W
$042A	$1C03			BTFSS	STATUS, C
$042B	$2C45			GOTO	ALIGNB32
$042C	$00F7			MOVWF	STACK_7
$042D	$0874			MOVF	STACK_4, W
$042E	$00F9			MOVWF	STACK_9
$042F	$0875			MOVF	STACK_5, W
$0430	$00F4			MOVWF	STACK_4
$0431	$0876			MOVF	STACK_6, W
$0432	$00F5			MOVWF	STACK_5
$0433	$01F6			CLRF	STACK_6
$0434	$3008			MOVLW	8
$0435	$0277			SUBWF	STACK_7, W
$0436	$1C03			BTFSS	STATUS, C
$0437	$2C45			GOTO	ALIGNB32
$0438	$00F7			MOVWF	STACK_7
$0439	$0874			MOVF	STACK_4, W
$043A	$00F9			MOVWF	STACK_9
$043B	$0875			MOVF	STACK_5, W
$043C	$00F4			MOVWF	STACK_4
$043D	$01F5			CLRF	STACK_5
$043E	$3008			MOVLW	8
$043F	$0277			SUBWF	STACK_7, W
$0440	$1C03			BTFSS	STATUS, C
$0441	$2C45			GOTO	ALIGNB32
$0442	$087A			MOVF	STACK_10, W
$0443	$00F2			MOVWF	STACK_2
$0444	$2C99			GOTO	JMPEEE
$0445	$	ALIGNB32:
$0445	$0877			MOVF	STACK_7, W
$0446	$1903			BTFSC	STATUS, Z
$0447	$2C4F			GOTO	ALIGNED32
$0448	$	ALOOPB32:
$0448	$1003			BCF	STATUS, C
$0449	$0CF6			RRF	STACK_6, F
$044A	$0CF5			RRF	STACK_5, F
$044B	$0CF4			RRF	STACK_4, F
$044C	$0CF9			RRF	STACK_9, F
$044D	$0BF7			DECFSZ	STACK_7, F
$044E	$2C48			GOTO	ALOOPB32
$044F	$	ALIGNED32:
$044F	$1FA0			BTFSS	__math_tempbD, 7
$0450	$2C5C			GOTO	AOK32
$0451	$09F9			COMF	STACK_9, F
$0452	$09F4			COMF	STACK_4, F
$0453	$09F5			COMF	STACK_5, F
$0454	$09F6			COMF	STACK_6, F
$0455	$0AF9			INCF	STACK_9, F
$0456	$1903			BTFSC	STATUS, Z
$0457	$0AF4			INCF	STACK_4, F
$0458	$1903			BTFSC	STATUS, Z
$0459	$0AF5			INCF	STACK_5, F
$045A	$1903			BTFSC	STATUS, Z
$045B	$0AF6			INCF	STACK_6, F
$045C	$	AOK32:
$045C	$0879			MOVF	STACK_9, W
$045D	$07F8			ADDWF	STACK_8, F
$045E	$0874			MOVF	STACK_4, W
$045F	$1803			BTFSC	STATUS, C
$0460	$0F74			INCFSZ	STACK_4, W
$0461	$07F0			ADDWF	STACK_0, F
$0462	$0875			MOVF	STACK_5, W
$0463	$1803			BTFSC	STATUS, C
$0464	$0F75			INCFSZ	STACK_5, W
$0465	$07F1			ADDWF	STACK_1, F
$0466	$0876			MOVF	STACK_6, W
$0467	$1803			BTFSC	STATUS, C
$0468	$0F76			INCFSZ	STACK_6, W
$0469	$07F2			ADDWF	STACK_2, F
$046A	$1BA0			BTFSC	__math_tempbD, 7
$046B	$2C75			GOTO	ACOMP32
$046C	$1C03			BTFSS	STATUS, C
$046D	$2C85			GOTO	JMPNRMRND4032
$046E	$0CF2			RRF	STACK_2, F
$046F	$0CF1			RRF	STACK_1, F
$0470	$0CF0			RRF	STACK_0, F
$0471	$0CF8			RRF	STACK_8, F
$0472	$0FF3			INCFSZ	STACK_3, F
$0473	$2C85			GOTO	JMPNRMRND4032
$0474	$2C93			GOTO	ADD_JMPSETFOV32
$0475	$	ACOMP32:
$0475	$1803			BTFSC	STATUS, C
$0476	$2C89			GOTO	JMPNRM4032
$0477	$09F8			COMF	STACK_8, F
$0478	$09F0			COMF	STACK_0, F
$0479	$09F1			COMF	STACK_1, F
$047A	$09F2			COMF	STACK_2, F
$047B	$0AF8			INCF	STACK_8, F
$047C	$1903			BTFSC	STATUS, Z
$047D	$0AF0			INCF	STACK_0, F
$047E	$1903			BTFSC	STATUS, Z
$047F	$0AF1			INCF	STACK_1, F
$0480	$1903			BTFSC	STATUS, Z
$0481	$0AF2			INCF	STACK_2, F
$0482	$3080			MOVLW	0x80
$0483	$06FA			XORWF	STACK_10, F
$0484	$2C8D			GOTO	JMPNRM32
$0485	$	JMPNRMRND4032:
$0485	$3001			MOVLW	0x01
$0486	$00FC			MOVWF	STACK_12
$0487	$25A8			CALL	_NRM4032
$0488	$2C9B			GOTO	ADD32EEE
$0489	$	JMPNRM4032:
$0489	$3002			MOVLW	0x02
$048A	$00FC			MOVWF	STACK_12
$048B	$25A8			CALL	_NRM4032
$048C	$2C9B			GOTO	ADD32EEE
$048D	$	JMPNRM32:
$048D	$3004			MOVLW	0x04
$048E	$00FC			MOVWF	STACK_12
$048F	$158A			BSF	PCLATH, 3
$0490	$207E			CALL	_NRM3232
$0491	$118A			BCF	PCLATH, 3
$0492	$2C9B			GOTO	ADD32EEE
$0493	$	ADD_JMPSETFOV32:
$0493	$3008			MOVLW	0x08
$0494	$00FC			MOVWF	STACK_12
$0495	$158A			BSF	PCLATH, 3
$0496	$2184			CALL	_SETFOV32
$0497	$118A			BCF	PCLATH, 3
$0498	$2C9B			GOTO	ADD32EEE
$0499	$	JMPEEE:
$0499	$3000			MOVLW	0x00
$049A	$00FC			MOVWF	STACK_12
$049B	$	ADD32EEE:
$049B	$0000			NOP
$049C	$0008			RETURN
$09A9	$	_PWM1_Start:
$09A9	$1303			BCF	STATUS, RP1
$09AA	$1683			BSF	STATUS, RP0
$09AB	$1107			BCF	TRISC, 2
$09AC	$1283			BCF	STATUS, RP0
$09AD	$1512			BSF	T2CON, 2
$09AE	$300C			MOVLW	12
$09AF	$0497			IORWF	CCP1CON, 1
$09B0	$0008			RETURN
$09B1	$	_PWM2_Start:
$09B1	$1303			BCF	STATUS, RP1
$09B2	$1683			BSF	STATUS, RP0
$09B3	$1087			BCF	TRISC, 1
$09B4	$1283			BCF	STATUS, RP0
$09B5	$1512			BSF	T2CON, 2
$09B6	$300C			MOVLW	12
$09B7	$049D			IORWF	CCP2CON, 1
$09B8	$0008			RETURN
$09C5	$	_PWM1_Init:
$09C5	$1303			BCF	STATUS, RP1
$09C6	$1283			BCF	STATUS, RP0
$09C7	$0195			CLRF	CCPR1L, 1
$09C8	$1217			BCF	CCP1CON, 4
$09C9	$1297			BCF	CCP1CON, 5
$09CA	$0008			RETURN
$09BF	$	_PWM2_Init:
$09BF	$1303			BCF	STATUS, RP1
$09C0	$1283			BCF	STATUS, RP0
$09C1	$019B			CLRF	CCPR2L, 1
$09C2	$121D			BCF	CCP2CON, 4
$09C3	$129D			BCF	CCP2CON, 5
$09C4	$0008			RETURN
$08EA	$	_Mul_16x16_U:
$08EA	$1303			BCF	STATUS, RP1
$08EB	$1283			BCF	STATUS, RP0
$08EC	$01FB			CLRF	STACK_11
$08ED	$01FA			CLRF	STACK_10
$08EE	$01F9			CLRF	STACK_9
$08EF	$3080			MOVLW	128
$08F0	$00F8			MOVWF	STACK_8
$08F1	$0CF1			RRF	STACK_1, F
$08F2	$0CF0			RRF	STACK_0, F
$08F3	$1C03			BTFSS	STATUS, C
$08F4	$28FE			GOTO	$+10
$08F5	$0874			MOVF	STACK_4, W
$08F6	$07F9			ADDWF	STACK_9, F
$08F7	$0875			MOVF	STACK_5, W
$08F8	$1803			BTFSC	STATUS, C
$08F9	$0F75			INCFSZ	STACK_5, W
$08FA	$07FA			ADDWF	STACK_10, F
$08FB	$1803			BTFSC	STATUS, C
$08FC	$0AFB			INCF	STACK_11, F
$08FD	$1003			BCF	STATUS, C
$08FE	$1FF0			BTFSS	STACK_0, 7
$08FF	$2906			GOTO	$+7
$0900	$0874			MOVF	STACK_4, W
$0901	$07FA			ADDWF	STACK_10, F
$0902	$0875			MOVF	STACK_5, W
$0903	$1803			BTFSC	STATUS, C
$0904	$0F75			INCFSZ	STACK_5, W
$0905	$07FB			ADDWF	STACK_11, F
$0906	$0CFB			RRF	STACK_11, F
$0907	$0CFA			RRF	STACK_10, F
$0908	$0CF9			RRF	STACK_9, F
$0909	$0CF8			RRF	STACK_8, F
$090A	$1C03			BTFSS	STATUS, C
$090B	$28F1			GOTO	$-26
$090C	$087B			MOVF	STACK_11, W
$090D	$00F3			MOVWF	STACK_3
$090E	$087A			MOVF	STACK_10, W
$090F	$00F2			MOVWF	STACK_2
$0910	$0879			MOVF	STACK_9, W
$0911	$00F1			MOVWF	STACK_1
$0912	$0878			MOVF	STACK_8, W
$0913	$00F0			MOVWF	STACK_0
$0914	$0008			RETURN
$0928	$	_Word2Double:
$0928	$1303			BCF	STATUS, RP1
$0929	$1283			BCF	STATUS, RP0
$092A	$0870			MOVF	STACK_0, W
$092B	$00F8			MOVWF	STACK_8
$092C	$0871			MOVF	STACK_1, W
$092D	$00F0			MOVWF	STACK_0
$092E	$01F1			CLRF	STACK_1
$092F	$01F2			CLRF	STACK_2
$0930	$01F3			CLRF	STACK_3
$0931	$	FLO16U32:
$0931	$01FB			CLRF	STACK_11
$0932	$01FC			CLRF	STACK_12
$0933	$3096			MOVLW	150
$0934	$00F3			MOVWF	STACK_3
$0935	$01FA			CLRF	STACK_10
$0936	$0870			MOVF	STACK_0, W
$0937	$00F1			MOVWF	STACK_1
$0938	$0878			MOVF	STACK_8, W
$0939	$00F0			MOVWF	STACK_0
$093A	$01F8			CLRF	STACK_8
$093B	$01F2			CLRF	STACK_2
$093C	$207E			CALL	_NRM3232
$093D	$0008			RETURN
$049D	$	_Div_32x32_FP:
$049D	$1303			BCF	STATUS, RP1
$049E	$1283			BCF	STATUS, RP0
$049F	$	FPD32:
$049F	$0877			MOVF	STACK_7, W
$04A0	$1903			BTFSC	STATUS, Z
$04A1	$2D2C			GOTO	JPDSETFDZ32
$04A2	$0873			MOVF	STACK_3, W
$04A3	$1903			BTFSC	STATUS, Z
$04A4	$2D31			GOTO	JPDRES032
$04A5	$	D32BNE0:
$04A5	$0872			MOVF	STACK_2, W
$04A6	$0676			XORWF	STACK_6, W
$04A7	$3980			ANDLW	128
$04A8	$00FA			MOVWF	STACK_10
$04A9	$17F2			BSF	STACK_2, 7
$04AA	$17F6			BSF	STACK_6, 7
$04AB	$	TALIGN32:
$04AB	$01A0			CLRF	__math_tempbD
$04AC	$0872			MOVF	STACK_2, W
$04AD	$00F8			MOVWF	STACK_8
$04AE	$0871			MOVF	STACK_1, W
$04AF	$00FC			MOVWF	STACK_12
$04B0	$0870			MOVF	STACK_0, W
$04B1	$00FD			MOVWF	STACK_13
$04B2	$0874			MOVF	STACK_4, W
$04B3	$02FD			SUBWF	STACK_13, F
$04B4	$0875			MOVF	STACK_5, W
$04B5	$1C03			BTFSS	STATUS, C
$04B6	$0F75			INCFSZ	STACK_5, W
$04B7	$	TS1ALIGN32:
$04B7	$02FC			SUBWF	STACK_12, F
$04B8	$0876			MOVF	STACK_6, W
$04B9	$1C03			BTFSS	STATUS, C
$04BA	$0F76			INCFSZ	STACK_6, W
$04BB	$	TS2ALIGN32:
$04BB	$02F8			SUBWF	STACK_8, F
$04BC	$01F8			CLRF	STACK_8
$04BD	$01FC			CLRF	STACK_12
$04BE	$01FD			CLRF	STACK_13
$04BF	$1C03			BTFSS	STATUS, C
$04C0	$2CC8			GOTO	DALIGN32OK
$04C1	$1003			BCF	STATUS, C
$04C2	$0CF2			RRF	STACK_2, F
$04C3	$0CF1			RRF	STACK_1, F
$04C4	$0CF0			RRF	STACK_0, F
$04C5	$0CF8			RRF	STACK_8, F
$04C6	$3001			MOVLW	0x01
$04C7	$00A0			MOVWF	__math_tempbD
$04C8	$	DALIGN32OK:
$04C8	$0877			MOVF	STACK_7, W
$04C9	$02F3			SUBWF	STACK_3, F
$04CA	$1C03			BTFSS	STATUS, C
$04CB	$2CD2			GOTO	ALTB32
$04CC	$	AGEB32:
$04CC	$307E			MOVLW	126
$04CD	$0720			ADDWF	__math_tempbD, W
$04CE	$07F3			ADDWF	STACK_3, F
$04CF	$1803			BTFSC	STATUS, C
$04D0	$2D36			GOTO	JPDSETFOV32
$04D1	$2CD7			GOTO	DARGOK32
$04D2	$	ALTB32:
$04D2	$307E			MOVLW	126
$04D3	$0720			ADDWF	__math_tempbD, W
$04D4	$07F3			ADDWF	STACK_3, F
$04D5	$1C03			BTFSS	STATUS, C
$04D6	$2D3B			GOTO	JPDSETFUN32
$04D7	$	DARGOK32:
$04D7	$3018			MOVLW	24
$04D8	$07FA			ADDWF	STACK_10, F
$04D9	$	DLOOP32:
$04D9	$0DFD			RLF	STACK_13, F
$04DA	$0DFC			RLF	STACK_12, F
$04DB	$0DF8			RLF	STACK_8, F
$04DC	$0DF0			RLF	STACK_0, F
$04DD	$0DF1			RLF	STACK_1, F
$04DE	$0DF2			RLF	STACK_2, F
$04DF	$0DA0			RLF	__math_tempbD, F
$04E0	$0874			MOVF	STACK_4, W
$04E1	$02F0			SUBWF	STACK_0, F
$04E2	$0875			MOVF	STACK_5, W
$04E3	$1C03			BTFSS	STATUS, C
$04E4	$0F75			INCFSZ	STACK_5, W
$04E5	$	DS132:
$04E5	$02F1			SUBWF	STACK_1, F
$04E6	$0876			MOVF	STACK_6, W
$04E7	$1C03			BTFSS	STATUS, C
$04E8	$0F76			INCFSZ	STACK_6, W
$04E9	$	DS232:
$04E9	$02F2			SUBWF	STACK_2, F
$04EA	$0D76			RLF	STACK_6, W
$04EB	$04A0			IORWF	__math_tempbD, F
$04EC	$1C20			BTFSS	__math_tempbD, 0
$04ED	$2CF0			GOTO	DREST32
$04EE	$147D			BSF	STACK_13, 0
$04EF	$2CFB			GOTO	DOK32
$04F0	$	DREST32:
$04F0	$0874			MOVF	STACK_4, W
$04F1	$07F0			ADDWF	STACK_0, F
$04F2	$0875			MOVF	STACK_5, W
$04F3	$1803			BTFSC	STATUS, C
$04F4	$0F75			INCFSZ	STACK_5, W
$04F5	$	DAREST32:
$04F5	$07F1			ADDWF	STACK_1, F
$04F6	$0876			MOVF	STACK_6, W
$04F7	$1803			BTFSC	STATUS, C
$04F8	$0A76			INCF	STACK_6, W
$04F9	$07F2			ADDWF	STACK_2, F
$04FA	$107D			BCF	STACK_13, 0
$04FB	$	DOK32:
$04FB	$03FA			DECF	STACK_10, F
$04FC	$301F			MOVLW	31
$04FD	$057A			ANDWF	STACK_10, W
$04FE	$1D03			BTFSS	STATUS, Z
$04FF	$2CD9			GOTO	DLOOP32
$0500	$	DROUND32:
$0500	$1B7B			BTFSC	STACK_11, 6
$0501	$1C7D			BTFSS	STACK_13, 0
$0502	$2D22			GOTO	DIV32OK
$0503	$1003			BCF	STATUS, C
$0504	$0DF0			RLF	STACK_0, F
$0505	$0DF1			RLF	STACK_1, F
$0506	$0DF2			RLF	STACK_2, F
$0507	$0DA0			RLF	__math_tempbD, F
$0508	$0874			MOVF	STACK_4, W
$0509	$02F0			SUBWF	STACK_0, F
$050A	$0875			MOVF	STACK_5, W
$050B	$1C03			BTFSS	STATUS, C
$050C	$0F75			INCFSZ	STACK_5, W
$050D	$02F1			SUBWF	STACK_1, F
$050E	$0876			MOVF	STACK_6, W
$050F	$1C03			BTFSS	STATUS, C
$0510	$0F76			INCFSZ	STACK_6, W
$0511	$02F2			SUBWF	STACK_2, F
$0512	$0D76			RLF	STACK_6, W
$0513	$0420			IORWF	__math_tempbD, W
$0514	$3901			ANDLW	0x01
$0515	$07FD			ADDWF	STACK_13, F
$0516	$1803			BTFSC	STATUS, C
$0517	$0AFC			INCF	STACK_12, F
$0518	$1903			BTFSC	STATUS, Z
$0519	$0AF8			INCF	STACK_8, F
$051A	$1D03			BTFSS	STATUS, Z
$051B	$2D22			GOTO	DIV32OK
$051C	$0CF8			RRF	STACK_8, F
$051D	$0CFC			RRF	STACK_12, F
$051E	$0CFD			RRF	STACK_13, F
$051F	$0AF3			INCF	STACK_3, F
$0520	$1903			BTFSC	STATUS, Z
$0521	$2D36			GOTO	JPDSETFOV32
$0522	$	DIV32OK:
$0522	$1FFA			BTFSS	STACK_10, 7
$0523	$13F8			BCF	STACK_8, 7
$0524	$0878			MOVF	STACK_8, W
$0525	$00F2			MOVWF	STACK_2
$0526	$087C			MOVF	STACK_12, W
$0527	$00F1			MOVWF	STACK_1
$0528	$087D			MOVF	STACK_13, W
$0529	$00F0			MOVWF	STACK_0
$052A	$3000			MOVLW	0x00
$052B	$2D3F			GOTO	DIV32EEE
$052C	$	JPDSETFDZ32:
$052C	$3001			MOVLW	0x01
$052D	$158A			BSF	PCLATH, 3
$052E	$21DF			CALL	_SETFDZ32
$052F	$118A			BCF	PCLATH, 3
$0530	$2D3F			GOTO	DIV32EEE
$0531	$	JPDRES032:
$0531	$3002			MOVLW	0x02
$0532	$158A			BSF	PCLATH, 3
$0533	$21A0			CALL	_RES032
$0534	$118A			BCF	PCLATH, 3
$0535	$2D3F			GOTO	DIV32EEE
$0536	$	JPDSETFOV32:
$0536	$3004			MOVLW	0x04
$0537	$158A			BSF	PCLATH, 3
$0538	$2184			CALL	_SETFOV32
$0539	$118A			BCF	PCLATH, 3
$053A	$2D3F			GOTO	DIV32EEE
$053B	$	JPDSETFUN32:
$053B	$3008			MOVLW	0x08
$053C	$158A			BSF	PCLATH, 3
$053D	$2192			CALL	_SETFUN32
$053E	$118A			BCF	PCLATH, 3
$053F	$	DIV32EEE:
$053F	$0000			NOP
$0540	$0008			RETURN
$0744	$	_Sub_32x32_FP:
$0744	$1303			BCF	STATUS, RP1
$0745	$1283			BCF	STATUS, RP0
$0746	$3080			MOVLW	0x80
$0747	$06F6			XORWF	STACK_6, F
$0748	$23F9			CALL	_Add_32x32_FP
$0749	$0008			RETURN
$06FA	$	_Mul_16x16_S:
$06FA	$1303			BCF	STATUS, RP1
$06FB	$1283			BCF	STATUS, RP0
$06FC	$01FB			CLRF	STACK_11
$06FD	$01FA			CLRF	STACK_10
$06FE	$01F9			CLRF	STACK_9
$06FF	$3080			MOVLW	128
$0700	$00F8			MOVWF	STACK_8
$0701	$01FD			CLRF	STACK_13
$0702	$1FF1			BTFSS	STACK_1, 7
$0703	$2F0A			GOTO	$+7
$0704	$09F1			COMF	STACK_1, F
$0705	$09F0			COMF	STACK_0, F
$0706	$0AF0			INCF	STACK_0, F
$0707	$1903			BTFSC	STATUS, Z
$0708	$0AF1			INCF	STACK_1, F
$0709	$0AFD			INCF	STACK_13, F
$070A	$1FF5			BTFSS	STACK_5, 7
$070B	$2F12			GOTO	$+7
$070C	$09F5			COMF	STACK_5, F
$070D	$09F4			COMF	STACK_4, F
$070E	$0AF4			INCF	STACK_4, F
$070F	$1903			BTFSC	STATUS, Z
$0710	$0AF5			INCF	STACK_5, F
$0711	$0AFD			INCF	STACK_13, F
$0712	$0CF1			RRF	STACK_1, F
$0713	$0CF0			RRF	STACK_0, F
$0714	$1C03			BTFSS	STATUS, C
$0715	$2F1F			GOTO	$+10
$0716	$0874			MOVF	STACK_4, W
$0717	$07F9			ADDWF	STACK_9, F
$0718	$0875			MOVF	STACK_5, W
$0719	$1803			BTFSC	STATUS, C
$071A	$0F75			INCFSZ	STACK_5, W
$071B	$07FA			ADDWF	STACK_10, F
$071C	$1803			BTFSC	STATUS, C
$071D	$0AFB			INCF	STACK_11, F
$071E	$1003			BCF	STATUS, C
$071F	$1FF0			BTFSS	STACK_0, 7
$0720	$2F27			GOTO	$+7
$0721	$0874			MOVF	STACK_4, W
$0722	$07FA			ADDWF	STACK_10, F
$0723	$1803			BTFSC	STATUS, C
$0724	$0AFB			INCF	STACK_11, F
$0725	$0875			MOVF	STACK_5, W
$0726	$07FB			ADDWF	STACK_11, F
$0727	$0CFB			RRF	STACK_11, F
$0728	$0CFA			RRF	STACK_10, F
$0729	$0CF9			RRF	STACK_9, F
$072A	$0CF8			RRF	STACK_8, F
$072B	$1C03			BTFSS	STATUS, C
$072C	$2F12			GOTO	$-26
$072D	$1C7D			BTFSS	STACK_13, 0
$072E	$2F3A			GOTO	$+12
$072F	$09FB			COMF	STACK_11, F
$0730	$09FA			COMF	STACK_10, F
$0731	$09F9			COMF	STACK_9, F
$0732	$09F8			COMF	STACK_8, F
$0733	$0AF8			INCF	STACK_8, F
$0734	$1903			BTFSC	STATUS, Z
$0735	$0AF9			INCF	STACK_9, F
$0736	$1903			BTFSC	STATUS, Z
$0737	$0AFA			INCF	STACK_10, F
$0738	$1903			BTFSC	STATUS, Z
$0739	$0AFB			INCF	STACK_11, F
$073A	$087B			MOVF	STACK_11, W
$073B	$00F3			MOVWF	STACK_3
$073C	$087A			MOVF	STACK_10, W
$073D	$00F2			MOVWF	STACK_2
$073E	$0879			MOVF	STACK_9, W
$073F	$00F1			MOVWF	STACK_1
$0740	$0878			MOVF	STACK_8, W
$0741	$00F0			MOVWF	STACK_0
$0742	$0000			NOP
$0743	$0008			RETURN
$0975	$	_SETIOV3224:
$0975	$1303			BCF	STATUS, RP1
$0976	$1283			BCF	STATUS, RP0
$0977	$147B			BSF	STACK_11, 0
$0978	$1FFB			BTFSS	STACK_11, 7
$0979	$2982			GOTO	SETIOV3224EEE
$097A	$01F2			CLRF	STACK_2
$097B	$1FFA			BTFSS	STACK_10, 7
$097C	$30FF			MOVLW	0xFF
$097D	$00F2			MOVWF	STACK_2
$097E	$00F1			MOVWF	STACK_1
$097F	$00F0			MOVWF	STACK_0
$0980	$0DFA			RLF	STACK_10, F
$0981	$0CF2			RRF	STACK_2, F
$0982	$	SETIOV3224EEE:
$0982	$30FF			MOVLW	0xFF
$0983	$0008			RETURN
$0966	$	_initport:
;lfr_pid_3.c,5 :: 		void initport()
;lfr_pid_3.c,7 :: 		ADCON1 =0x06;          //TURN OFF ADC AND CONFIGURE A AND E AS DIG I/O
$0966	$3006			MOVLW	6
$0967	$1303			BCF	STATUS, RP1
$0968	$1683			BSF	STATUS, RP0
$0969	$009F			MOVWF	ADCON1
;lfr_pid_3.c,8 :: 		PORTA = 0;             //CLEAR PORTA
$096A	$1283			BCF	STATUS, RP0
$096B	$0185			CLRF	PORTA, 1
;lfr_pid_3.c,9 :: 		PORTE = 0;             //CLEAR PORTE
$096C	$0189			CLRF	PORTE, 1
;lfr_pid_3.c,10 :: 		TRISA = 0x3F;          //INITIALIZE PORTA AS INPUT
$096D	$303F			MOVLW	63
$096E	$1683			BSF	STATUS, RP0
$096F	$0085			MOVWF	TRISA
;lfr_pid_3.c,11 :: 		TRISE = 0x03;          //INITIALIZE PORTE AS INPUT
$0970	$3003			MOVLW	3
$0971	$0089			MOVWF	TRISE
;lfr_pid_3.c,12 :: 		TRISD = 0x00;          //INITIALIZE PORTD AS OUTPUT
$0972	$0188			CLRF	TRISD, 1
;lfr_pid_3.c,13 :: 		TRISC = 0b00000000;    //INITIALIZE PORTC AS OUTPUT
$0973	$0187			CLRF	TRISC, 1
;lfr_pid_3.c,14 :: 		}
$0974	$0008			RETURN
$0915	$	_initpwm:
;lfr_pid_3.c,16 :: 		void initpwm()
;lfr_pid_3.c,18 :: 		PWM1_Init(5000);
$0915	$1303			BCF	STATUS, RP1
$0916	$1283			BCF	STATUS, RP0
$0917	$1012			BCF	T2CON, T2CKPS0
$0918	$1092			BCF	T2CON, T2CKPS1
$0919	$1412			BSF	T2CON, T2CKPS0
$091A	$3063			MOVLW	99
$091B	$1683			BSF	STATUS, RP0
$091C	$0092			MOVWF	PR2
$091D	$21C5			CALL	_PWM1_Init
;lfr_pid_3.c,19 :: 		PWM2_Init(5000);
$091E	$1012			BCF	T2CON, T2CKPS0
$091F	$1092			BCF	T2CON, T2CKPS1
$0920	$1412			BSF	T2CON, T2CKPS0
$0921	$3063			MOVLW	99
$0922	$1683			BSF	STATUS, RP0
$0923	$0092			MOVWF	PR2
$0924	$21BF			CALL	_PWM2_Init
;lfr_pid_3.c,20 :: 		Pwm1_Start();          //RIGHT MOTOR
$0925	$21A9			CALL	_PWM1_Start
;lfr_pid_3.c,21 :: 		Pwm2_Start();          //LEFT MOTOR
$0926	$21B1			CALL	_PWM2_Start
;lfr_pid_3.c,22 :: 		}
$0927	$0008			RETURN
$060C	$	_indicator:
;lfr_pid_3.c,47 :: 		void indicator()        //COPY THE SENSOR OUTPUT TO PORTD-INDICATOR
;lfr_pid_3.c,49 :: 		PORTD.F0 = PORTA.F0;
$060C	$3001			MOVLW	1
$060D	$1303			BCF	STATUS, RP1
$060E	$1283			BCF	STATUS, RP0
$060F	$0505			ANDWF	PORTA, 0
$0610	$00F0			MOVWF	STACK_0
$0611	$3000			MOVLW	0
$0612	$1870			BTFSC	STACK_0, 0
$0613	$3001			MOVLW	1
$0614	$0608			XORWF	PORTD, 0
$0615	$3901			ANDLW	1
$0616	$0688			XORWF	PORTD, 1
;lfr_pid_3.c,50 :: 		PORTD.F1 = PORTA.F1;
$0617	$3000			MOVLW	0
$0618	$1885			BTFSC	PORTA, 1
$0619	$3001			MOVLW	1
$061A	$00F1			MOVWF	STACK_1
$061B	$3000			MOVLW	0
$061C	$1871			BTFSC	STACK_1, 0
$061D	$3002			MOVLW	2
$061E	$0608			XORWF	PORTD, 0
$061F	$3902			ANDLW	2
$0620	$0688			XORWF	PORTD, 1
;lfr_pid_3.c,51 :: 		PORTD.F2 = PORTA.F2;
$0621	$3000			MOVLW	0
$0622	$1905			BTFSC	PORTA, 2
$0623	$3001			MOVLW	1
$0624	$00F1			MOVWF	STACK_1
$0625	$3000			MOVLW	0
$0626	$1871			BTFSC	STACK_1, 0
$0627	$3004			MOVLW	4
$0628	$0608			XORWF	PORTD, 0
$0629	$3904			ANDLW	4
$062A	$0688			XORWF	PORTD, 1
;lfr_pid_3.c,52 :: 		PORTD.F3 = PORTA.F3;
$062B	$3000			MOVLW	0
$062C	$1985			BTFSC	PORTA, 3
$062D	$3001			MOVLW	1
$062E	$00F1			MOVWF	STACK_1
$062F	$3000			MOVLW	0
$0630	$1871			BTFSC	STACK_1, 0
$0631	$3008			MOVLW	8
$0632	$0608			XORWF	PORTD, 0
$0633	$3908			ANDLW	8
$0634	$0688			XORWF	PORTD, 1
;lfr_pid_3.c,53 :: 		PORTD.F4 = PORTA.F4;
$0635	$3000			MOVLW	0
$0636	$1A05			BTFSC	PORTA, 4
$0637	$3001			MOVLW	1
$0638	$00F1			MOVWF	STACK_1
$0639	$3000			MOVLW	0
$063A	$1871			BTFSC	STACK_1, 0
$063B	$3010			MOVLW	16
$063C	$0608			XORWF	PORTD, 0
$063D	$3910			ANDLW	16
$063E	$0688			XORWF	PORTD, 1
;lfr_pid_3.c,54 :: 		PORTD.F5 = PORTA.F5;
$063F	$3000			MOVLW	0
$0640	$1A85			BTFSC	PORTA, 5
$0641	$3001			MOVLW	1
$0642	$00F1			MOVWF	STACK_1
$0643	$3000			MOVLW	0
$0644	$1871			BTFSC	STACK_1, 0
$0645	$3020			MOVLW	32
$0646	$0608			XORWF	PORTD, 0
$0647	$3920			ANDLW	32
$0648	$0688			XORWF	PORTD, 1
;lfr_pid_3.c,55 :: 		PORTD.F6 = PORTE.F0;
$0649	$3001			MOVLW	1
$064A	$0509			ANDWF	PORTE, 0
$064B	$00F0			MOVWF	STACK_0
$064C	$3000			MOVLW	0
$064D	$1870			BTFSC	STACK_0, 0
$064E	$3040			MOVLW	64
$064F	$0608			XORWF	PORTD, 0
$0650	$3940			ANDLW	64
$0651	$0688			XORWF	PORTD, 1
;lfr_pid_3.c,56 :: 		PORTD.F7 = PORTE.F1;
$0652	$3000			MOVLW	0
$0653	$1889			BTFSC	PORTE, 1
$0654	$3001			MOVLW	1
$0655	$00F1			MOVWF	STACK_1
$0656	$3000			MOVLW	0
$0657	$1871			BTFSC	STACK_1, 0
$0658	$3080			MOVLW	128
$0659	$0608			XORWF	PORTD, 0
$065A	$3980			ANDLW	128
$065B	$0688			XORWF	PORTD, 1
;lfr_pid_3.c,57 :: 		}
$065C	$0008			RETURN
$02BC	$	_CalcError:
;lfr_pid_3.c,58 :: 		void CalcError()								//calculates the current error
;lfr_pid_3.c,60 :: 		s1 = 0;
$02BC	$1303			BCF	STATUS, RP1
$02BD	$1283			BCF	STATUS, RP0
$02BE	$01A1			CLRF	_s1
$02BF	$01A2			CLRF	_s1+1
;lfr_pid_3.c,61 :: 		s2 = 0;
$02C0	$01A3			CLRF	_s2
$02C1	$01A4			CLRF	_s2+1
;lfr_pid_3.c,62 :: 		s3 = 0;
$02C2	$01A5			CLRF	_s3
$02C3	$01A6			CLRF	_s3+1
;lfr_pid_3.c,63 :: 		s4 = 0;
$02C4	$01A7			CLRF	_s4
$02C5	$01A8			CLRF	_s4+1
;lfr_pid_3.c,64 :: 		s5 = 0;
$02C6	$01A9			CLRF	_s5
$02C7	$01AA			CLRF	_s5+1
;lfr_pid_3.c,65 :: 		s6 = 0;
$02C8	$01AB			CLRF	_s6
$02C9	$01AC			CLRF	_s6+1
;lfr_pid_3.c,66 :: 		s7 = 0;
$02CA	$01AD			CLRF	_s7
$02CB	$01AE			CLRF	_s7+1
;lfr_pid_3.c,67 :: 		s8 = 0;
$02CC	$01AF			CLRF	_s8
$02CD	$01B0			CLRF	_s8+1
;lfr_pid_3.c,69 :: 		if(PORTA.F0)
$02CE	$1C05			BTFSS	PORTA, 0
$02CF	$2AD6			GOTO	L_CalcError_0
;lfr_pid_3.c,71 :: 		lastreading='r';
$02D0	$3072			MOVLW	114
$02D1	$00B1			MOVWF	_lastreading
;lfr_pid_3.c,72 :: 		s1 = 1;
$02D2	$3001			MOVLW	1
$02D3	$00A1			MOVWF	_s1
$02D4	$3000			MOVLW	0
$02D5	$00A2			MOVWF	_s1+1
;lfr_pid_3.c,73 :: 		}
$02D6	$	L_CalcError_0:
;lfr_pid_3.c,74 :: 		if(PORTA.F1)
$02D6	$1C85			BTFSS	PORTA, 1
$02D7	$2ADC			GOTO	L_CalcError_1
;lfr_pid_3.c,75 :: 		s2 = 1;
$02D8	$3001			MOVLW	1
$02D9	$00A3			MOVWF	_s2
$02DA	$3000			MOVLW	0
$02DB	$00A4			MOVWF	_s2+1
$02DC	$	L_CalcError_1:
;lfr_pid_3.c,76 :: 		if(!PORTA.F2)
$02DC	$1905			BTFSC	PORTA, 2
$02DD	$2AE2			GOTO	L_CalcError_2
;lfr_pid_3.c,77 :: 		s3 = 1;
$02DE	$3001			MOVLW	1
$02DF	$00A5			MOVWF	_s3
$02E0	$3000			MOVLW	0
$02E1	$00A6			MOVWF	_s3+1
$02E2	$	L_CalcError_2:
;lfr_pid_3.c,78 :: 		if(PORTA.F3)
$02E2	$1D85			BTFSS	PORTA, 3
$02E3	$2AE8			GOTO	L_CalcError_3
;lfr_pid_3.c,79 :: 		s4 = 1;
$02E4	$3001			MOVLW	1
$02E5	$00A7			MOVWF	_s4
$02E6	$3000			MOVLW	0
$02E7	$00A8			MOVWF	_s4+1
$02E8	$	L_CalcError_3:
;lfr_pid_3.c,80 :: 		if(PORTA.F4)
$02E8	$1E05			BTFSS	PORTA, 4
$02E9	$2AEE			GOTO	L_CalcError_4
;lfr_pid_3.c,81 :: 		s5 = 1;
$02EA	$3001			MOVLW	1
$02EB	$00A9			MOVWF	_s5
$02EC	$3000			MOVLW	0
$02ED	$00AA			MOVWF	_s5+1
$02EE	$	L_CalcError_4:
;lfr_pid_3.c,82 :: 		if(PORTA.F5)
$02EE	$1E85			BTFSS	PORTA, 5
$02EF	$2AF4			GOTO	L_CalcError_5
;lfr_pid_3.c,83 :: 		s6 = 1;
$02F0	$3001			MOVLW	1
$02F1	$00AB			MOVWF	_s6
$02F2	$3000			MOVLW	0
$02F3	$00AC			MOVWF	_s6+1
$02F4	$	L_CalcError_5:
;lfr_pid_3.c,84 :: 		if(PORTE.F0)
$02F4	$1C09			BTFSS	PORTE, 0
$02F5	$2AFA			GOTO	L_CalcError_6
;lfr_pid_3.c,85 :: 		s7 = 1;
$02F6	$3001			MOVLW	1
$02F7	$00AD			MOVWF	_s7
$02F8	$3000			MOVLW	0
$02F9	$00AE			MOVWF	_s7+1
$02FA	$	L_CalcError_6:
;lfr_pid_3.c,86 :: 		if(PORTE.F1)
$02FA	$1C89			BTFSS	PORTE, 1
$02FB	$2B02			GOTO	L_CalcError_7
;lfr_pid_3.c,88 :: 		lastreading='l';
$02FC	$306C			MOVLW	108
$02FD	$00B1			MOVWF	_lastreading
;lfr_pid_3.c,89 :: 		s8 = 1;
$02FE	$3001			MOVLW	1
$02FF	$00AF			MOVWF	_s8
$0300	$3000			MOVLW	0
$0301	$00B0			MOVWF	_s8+1
;lfr_pid_3.c,90 :: 		}
$0302	$	L_CalcError_7:
;lfr_pid_3.c,91 :: 		perror = error;
$0302	$0836			MOVF	_error, 0
$0303	$00B2			MOVWF	_perror
$0304	$0837			MOVF	_error+1, 0
$0305	$00B3			MOVWF	_perror+1
$0306	$0838			MOVF	_error+2, 0
$0307	$00B4			MOVWF	_perror+2
$0308	$0839			MOVF	_error+3, 0
$0309	$00B5			MOVWF	_perror+3
;lfr_pid_3.c,93 :: 		error = (s1 * 1) + (s2 * 2) + (s3 * 3) + (s4 * 4) + (s5 * 5) + (s6 * 6) +(s7 * 7) + (s8*8);
$030A	$3001			MOVLW	1
$030B	$00F4			MOVWF	STACK_4
$030C	$0823			MOVF	_s2, 0
$030D	$00F0			MOVWF	STACK_0
$030E	$0824			MOVF	_s2+1, 0
$030F	$00F1			MOVWF	STACK_0+1
$0310	$0874			MOVF	STACK_4, 0
$0311	$	L_CalcError_22:
$0311	$1903			BTFSC	STATUS, Z
$0312	$2B18			GOTO	L_CalcError_23
$0313	$0DF0			RLF	STACK_0, 1
$0314	$0DF1			RLF	STACK_0+1, 1
$0315	$1070			BCF	STACK_0, 0
$0316	$3FFF			ADDLW	255
$0317	$2B11			GOTO	L_CalcError_22
$0318	$	L_CalcError_23:
$0318	$0870			MOVF	STACK_0, 0
$0319	$0721			ADDWF	_s1, 0
$031A	$00E7			MOVWF	FLOC_CalcError+0
$031B	$0822			MOVF	_s1+1, 0
$031C	$1803			BTFSC	STATUS, C
$031D	$3F01			ADDLW	1
$031E	$0771			ADDWF	STACK_0+1, 0
$031F	$00E8			MOVWF	FLOC_CalcError+1
$0320	$0825			MOVF	_s3, 0
$0321	$00F0			MOVWF	STACK_0
$0322	$0826			MOVF	_s3+1, 0
$0323	$00F1			MOVWF	STACK_0+1
$0324	$3003			MOVLW	3
$0325	$00F4			MOVWF	STACK_4
$0326	$3000			MOVLW	0
$0327	$00F5			MOVWF	STACK_4+1
$0328	$158A			BSF	PCLATH, 3
$0329	$20EA			CALL	_mul_16x16_u
$032A	$118A			BCF	PCLATH, 3
$032B	$0870			MOVF	STACK_0, 0
$032C	$07E7			ADDWF	FLOC_CalcError+0, 1
$032D	$0871			MOVF	STACK_0+1, 0
$032E	$1803			BTFSC	STATUS, C
$032F	$3F01			ADDLW	1
$0330	$07E8			ADDWF	FLOC_CalcError+1, 1
$0331	$3002			MOVLW	2
$0332	$00F4			MOVWF	STACK_4
$0333	$0827			MOVF	_s4, 0
$0334	$00F0			MOVWF	STACK_0
$0335	$0828			MOVF	_s4+1, 0
$0336	$00F1			MOVWF	STACK_0+1
$0337	$0874			MOVF	STACK_4, 0
$0338	$	L_CalcError_24:
$0338	$1903			BTFSC	STATUS, Z
$0339	$2B3F			GOTO	L_CalcError_25
$033A	$0DF0			RLF	STACK_0, 1
$033B	$0DF1			RLF	STACK_0+1, 1
$033C	$1070			BCF	STACK_0, 0
$033D	$3FFF			ADDLW	255
$033E	$2B38			GOTO	L_CalcError_24
$033F	$	L_CalcError_25:
$033F	$0870			MOVF	STACK_0, 0
$0340	$07E7			ADDWF	FLOC_CalcError+0, 1
$0341	$0871			MOVF	STACK_0+1, 0
$0342	$1803			BTFSC	STATUS, C
$0343	$3F01			ADDLW	1
$0344	$07E8			ADDWF	FLOC_CalcError+1, 1
$0345	$0829			MOVF	_s5, 0
$0346	$00F0			MOVWF	STACK_0
$0347	$082A			MOVF	_s5+1, 0
$0348	$00F1			MOVWF	STACK_0+1
$0349	$3005			MOVLW	5
$034A	$00F4			MOVWF	STACK_4
$034B	$3000			MOVLW	0
$034C	$00F5			MOVWF	STACK_4+1
$034D	$158A			BSF	PCLATH, 3
$034E	$20EA			CALL	_mul_16x16_u
$034F	$118A			BCF	PCLATH, 3
$0350	$0870			MOVF	STACK_0, 0
$0351	$07E7			ADDWF	FLOC_CalcError+0, 1
$0352	$0871			MOVF	STACK_0+1, 0
$0353	$1803			BTFSC	STATUS, C
$0354	$3F01			ADDLW	1
$0355	$07E8			ADDWF	FLOC_CalcError+1, 1
$0356	$082B			MOVF	_s6, 0
$0357	$00F0			MOVWF	STACK_0
$0358	$082C			MOVF	_s6+1, 0
$0359	$00F1			MOVWF	STACK_0+1
$035A	$3006			MOVLW	6
$035B	$00F4			MOVWF	STACK_4
$035C	$3000			MOVLW	0
$035D	$00F5			MOVWF	STACK_4+1
$035E	$158A			BSF	PCLATH, 3
$035F	$20EA			CALL	_mul_16x16_u
$0360	$118A			BCF	PCLATH, 3
$0361	$0870			MOVF	STACK_0, 0
$0362	$07E7			ADDWF	FLOC_CalcError+0, 1
$0363	$0871			MOVF	STACK_0+1, 0
$0364	$1803			BTFSC	STATUS, C
$0365	$3F01			ADDLW	1
$0366	$07E8			ADDWF	FLOC_CalcError+1, 1
$0367	$082D			MOVF	_s7, 0
$0368	$00F0			MOVWF	STACK_0
$0369	$082E			MOVF	_s7+1, 0
$036A	$00F1			MOVWF	STACK_0+1
$036B	$3007			MOVLW	7
$036C	$00F4			MOVWF	STACK_4
$036D	$3000			MOVLW	0
$036E	$00F5			MOVWF	STACK_4+1
$036F	$158A			BSF	PCLATH, 3
$0370	$20EA			CALL	_mul_16x16_u
$0371	$118A			BCF	PCLATH, 3
$0372	$0870			MOVF	STACK_0, 0
$0373	$07E7			ADDWF	FLOC_CalcError+0, 1
$0374	$0871			MOVF	STACK_0+1, 0
$0375	$1803			BTFSC	STATUS, C
$0376	$3F01			ADDLW	1
$0377	$07E8			ADDWF	FLOC_CalcError+1, 1
$0378	$3003			MOVLW	3
$0379	$00F4			MOVWF	STACK_4
$037A	$082F			MOVF	_s8, 0
$037B	$00F0			MOVWF	STACK_0
$037C	$0830			MOVF	_s8+1, 0
$037D	$00F1			MOVWF	STACK_0+1
$037E	$0874			MOVF	STACK_4, 0
$037F	$	L_CalcError_26:
$037F	$1903			BTFSC	STATUS, Z
$0380	$2B86			GOTO	L_CalcError_27
$0381	$0DF0			RLF	STACK_0, 1
$0382	$0DF1			RLF	STACK_0+1, 1
$0383	$1070			BCF	STACK_0, 0
$0384	$3FFF			ADDLW	255
$0385	$2B7F			GOTO	L_CalcError_26
$0386	$	L_CalcError_27:
$0386	$0867			MOVF	FLOC_CalcError+0, 0
$0387	$07F0			ADDWF	STACK_0, 1
$0388	$0868			MOVF	FLOC_CalcError+1, 0
$0389	$1803			BTFSC	STATUS, C
$038A	$3F01			ADDLW	1
$038B	$07F1			ADDWF	STACK_0+1, 1
$038C	$158A			BSF	PCLATH, 3
$038D	$2128			CALL	_word2double
$038E	$118A			BCF	PCLATH, 3
$038F	$0870			MOVF	STACK_0, 0
$0390	$00E7			MOVWF	FLOC_CalcError+0
$0391	$0871			MOVF	STACK_0+1, 0
$0392	$00E8			MOVWF	FLOC_CalcError+1
$0393	$0872			MOVF	STACK_0+2, 0
$0394	$00E9			MOVWF	FLOC_CalcError+2
$0395	$0873			MOVF	STACK_0+3, 0
$0396	$00EA			MOVWF	FLOC_CalcError+3
$0397	$0867			MOVF	FLOC_CalcError+0, 0
$0398	$00B6			MOVWF	_error
$0399	$0868			MOVF	FLOC_CalcError+1, 0
$039A	$00B7			MOVWF	_error+1
$039B	$0869			MOVF	FLOC_CalcError+2, 0
$039C	$00B8			MOVWF	_error+2
$039D	$086A			MOVF	FLOC_CalcError+3, 0
$039E	$00B9			MOVWF	_error+3
;lfr_pid_3.c,94 :: 		error = (error)/(s1+s2+s3+s4+s5+s6+s7+s8);
$039F	$0823			MOVF	_s2, 0
$03A0	$0721			ADDWF	_s1, 0
$03A1	$00F0			MOVWF	STACK_0
$03A2	$0822			MOVF	_s1+1, 0
$03A3	$1803			BTFSC	STATUS, C
$03A4	$3F01			ADDLW	1
$03A5	$0724			ADDWF	_s2+1, 0
$03A6	$00F1			MOVWF	STACK_0+1
$03A7	$0825			MOVF	_s3, 0
$03A8	$07F0			ADDWF	STACK_0, 1
$03A9	$0826			MOVF	_s3+1, 0
$03AA	$1803			BTFSC	STATUS, C
$03AB	$3F01			ADDLW	1
$03AC	$07F1			ADDWF	STACK_0+1, 1
$03AD	$0827			MOVF	_s4, 0
$03AE	$07F0			ADDWF	STACK_0, 1
$03AF	$0828			MOVF	_s4+1, 0
$03B0	$1803			BTFSC	STATUS, C
$03B1	$3F01			ADDLW	1
$03B2	$07F1			ADDWF	STACK_0+1, 1
$03B3	$0829			MOVF	_s5, 0
$03B4	$07F0			ADDWF	STACK_0, 1
$03B5	$082A			MOVF	_s5+1, 0
$03B6	$1803			BTFSC	STATUS, C
$03B7	$3F01			ADDLW	1
$03B8	$07F1			ADDWF	STACK_0+1, 1
$03B9	$082B			MOVF	_s6, 0
$03BA	$07F0			ADDWF	STACK_0, 1
$03BB	$082C			MOVF	_s6+1, 0
$03BC	$1803			BTFSC	STATUS, C
$03BD	$3F01			ADDLW	1
$03BE	$07F1			ADDWF	STACK_0+1, 1
$03BF	$082D			MOVF	_s7, 0
$03C0	$07F0			ADDWF	STACK_0, 1
$03C1	$082E			MOVF	_s7+1, 0
$03C2	$1803			BTFSC	STATUS, C
$03C3	$3F01			ADDLW	1
$03C4	$07F1			ADDWF	STACK_0+1, 1
$03C5	$082F			MOVF	_s8, 0
$03C6	$07F0			ADDWF	STACK_0, 1
$03C7	$0830			MOVF	_s8+1, 0
$03C8	$1803			BTFSC	STATUS, C
$03C9	$3F01			ADDLW	1
$03CA	$07F1			ADDWF	STACK_0+1, 1
$03CB	$158A			BSF	PCLATH, 3
$03CC	$2128			CALL	_word2double
$03CD	$118A			BCF	PCLATH, 3
$03CE	$0870			MOVF	STACK_0, 0
$03CF	$00F4			MOVWF	STACK_4
$03D0	$0871			MOVF	STACK_0+1, 0
$03D1	$00F5			MOVWF	STACK_4+1
$03D2	$0872			MOVF	STACK_0+2, 0
$03D3	$00F6			MOVWF	STACK_4+2
$03D4	$0873			MOVF	STACK_0+3, 0
$03D5	$00F7			MOVWF	STACK_4+3
$03D6	$0867			MOVF	FLOC_CalcError+0, 0
$03D7	$00F0			MOVWF	STACK_0
$03D8	$0868			MOVF	FLOC_CalcError+1, 0
$03D9	$00F1			MOVWF	STACK_0+1
$03DA	$0869			MOVF	FLOC_CalcError+2, 0
$03DB	$00F2			MOVWF	STACK_0+2
$03DC	$086A			MOVF	FLOC_CalcError+3, 0
$03DD	$00F3			MOVWF	STACK_0+3
$03DE	$249D			CALL	_div_32x32_fp
$03DF	$0870			MOVF	STACK_0, 0
$03E0	$00B6			MOVWF	_error
$03E1	$0871			MOVF	STACK_0+1, 0
$03E2	$00B7			MOVWF	_error+1
$03E3	$0872			MOVF	STACK_0+2, 0
$03E4	$00B8			MOVWF	_error+2
$03E5	$0873			MOVF	STACK_0+3, 0
$03E6	$00B9			MOVWF	_error+3
;lfr_pid_3.c,95 :: 		error = error - 4.5;
$03E7	$3000			MOVLW	0
$03E8	$00F4			MOVWF	STACK_4
$03E9	$3000			MOVLW	0
$03EA	$00F5			MOVWF	STACK_4+1
$03EB	$3010			MOVLW	16
$03EC	$00F6			MOVWF	STACK_4+2
$03ED	$3081			MOVLW	129
$03EE	$00F7			MOVWF	STACK_4+3
$03EF	$2744			CALL	_sub_32x32_fp
$03F0	$0870			MOVF	STACK_0, 0
$03F1	$00B6			MOVWF	_error
$03F2	$0871			MOVF	STACK_0+1, 0
$03F3	$00B7			MOVWF	_error+1
$03F4	$0872			MOVF	STACK_0+2, 0
$03F5	$00B8			MOVWF	_error+2
$03F6	$0873			MOVF	STACK_0+3, 0
$03F7	$00B9			MOVWF	_error+3
;lfr_pid_3.c,96 :: 		}
$03F8	$0008			RETURN
$09D5	$	_motor_LF:
;lfr_pid_3.c,36 :: 		void motor_LF()         //LEFT MOTOR FWD DIR
;lfr_pid_3.c,38 :: 		PORTC.F5 = 1;
$09D5	$1303			BCF	STATUS, RP1
$09D6	$1283			BCF	STATUS, RP0
$09D7	$1687			BSF	PORTC, 5
;lfr_pid_3.c,39 :: 		PORTC.F4 = 0;
$09D8	$1207			BCF	PORTC, 4
;lfr_pid_3.c,40 :: 		}
$09D9	$0008			RETURN
$09D0	$	_motor_RF:
;lfr_pid_3.c,24 :: 		void motor_RF()         //RIGHT MOTOR FWD DIR
;lfr_pid_3.c,26 :: 		PORTC.F7 = 1;
$09D0	$1303			BCF	STATUS, RP1
$09D1	$1283			BCF	STATUS, RP0
$09D2	$1787			BSF	PORTC, 7
;lfr_pid_3.c,27 :: 		PORTC.F6 = 0;
$09D3	$1307			BCF	PORTC, 6
;lfr_pid_3.c,28 :: 		}
$09D4	$0008			RETURN
$08AF	$	_PWM1_Change_Duty:
$08AF	$1303			BCF	STATUS, RP1
$08B0	$1683			BSF	STATUS, RP0
$08B1	$0812			MOVF	PR2, 0
$08B2	$3F01			ADDLW	1
$08B3	$00F0			MOVWF	STACK_0
$08B4	$01F1			CLRF	STACK_0+1
$08B5	$1803			BTFSC	STATUS, C
$08B6	$0AF1			INCF	STACK_0+1, 1
$08B7	$1283			BCF	STATUS, RP0
$08B8	$0867			MOVF	FARG_PWM1_Change_Duty+0, 0
$08B9	$00F4			MOVWF	STACK_4
$08BA	$01F5			CLRF	STACK_4+1
$08BB	$118A			BCF	PCLATH, 3
$08BC	$26FA			CALL	_mul_16x16_s
$08BD	$158A			BSF	PCLATH, 3
$08BE	$3006			MOVLW	6
$08BF	$00F2			MOVWF	STACK_2
$08C0	$0870			MOVF	STACK_0, 0
$08C1	$00F4			MOVWF	STACK_4
$08C2	$0871			MOVF	STACK_0+1, 0
$08C3	$00F5			MOVWF	STACK_4+1
$08C4	$0872			MOVF	STACK_2, 0
$08C5	$	L_PWM1_Change_Duty_2:
$08C5	$1903			BTFSC	STATUS, Z
$08C6	$28CC			GOTO	L_PWM1_Change_Duty_3
$08C7	$0CF5			RRF	STACK_4+1, 1
$08C8	$0CF4			RRF	STACK_4, 1
$08C9	$13F5			BCF	STACK_4+1, 7
$08CA	$3FFF			ADDLW	255
$08CB	$28C5			GOTO	L_PWM1_Change_Duty_2
$08CC	$	L_PWM1_Change_Duty_3:
$08CC	$0874			MOVF	STACK_4, 0
$08CD	$00F0			MOVWF	STACK_0
$08CE	$0DF0			RLF	STACK_0, 1
$08CF	$1070			BCF	STACK_0, 0
$08D0	$0DF0			RLF	STACK_0, 1
$08D1	$1070			BCF	STACK_0, 0
$08D2	$0DF0			RLF	STACK_0, 1
$08D3	$1070			BCF	STACK_0, 0
$08D4	$0DF0			RLF	STACK_0, 1
$08D5	$1070			BCF	STACK_0, 0
$08D6	$3030			MOVLW	48
$08D7	$0570			ANDWF	STACK_0, 0
$08D8	$00F3			MOVWF	STACK_3
$08D9	$0874			MOVF	STACK_4, 0
$08DA	$00F0			MOVWF	STACK_0
$08DB	$0875			MOVF	STACK_4+1, 0
$08DC	$00F1			MOVWF	STACK_0+1
$08DD	$0CF1			RRF	STACK_0+1, 1
$08DE	$0CF0			RRF	STACK_0, 1
$08DF	$13F1			BCF	STACK_0+1, 7
$08E0	$0CF1			RRF	STACK_0+1, 1
$08E1	$0CF0			RRF	STACK_0, 1
$08E2	$13F1			BCF	STACK_0+1, 7
$08E3	$0870			MOVF	STACK_0, 0
$08E4	$0095			MOVWF	CCPR1L
$08E5	$300F			MOVLW	15
$08E6	$0597			ANDWF	CCP1CON, 1
$08E7	$0873			MOVF	STACK_3, 0
$08E8	$0497			IORWF	CCP1CON, 1
$08E9	$0008			RETURN
$0843	$	_PWM2_Change_Duty:
$0843	$1303			BCF	STATUS, RP1
$0844	$1683			BSF	STATUS, RP0
$0845	$0812			MOVF	PR2, 0
$0846	$3F01			ADDLW	1
$0847	$00F0			MOVWF	STACK_0
$0848	$01F1			CLRF	STACK_0+1
$0849	$1803			BTFSC	STATUS, C
$084A	$0AF1			INCF	STACK_0+1, 1
$084B	$1283			BCF	STATUS, RP0
$084C	$0867			MOVF	FARG_PWM2_Change_Duty+0, 0
$084D	$00F4			MOVWF	STACK_4
$084E	$01F5			CLRF	STACK_4+1
$084F	$118A			BCF	PCLATH, 3
$0850	$26FA			CALL	_mul_16x16_s
$0851	$158A			BSF	PCLATH, 3
$0852	$3006			MOVLW	6
$0853	$00F2			MOVWF	STACK_2
$0854	$0870			MOVF	STACK_0, 0
$0855	$00F4			MOVWF	STACK_4
$0856	$0871			MOVF	STACK_0+1, 0
$0857	$00F5			MOVWF	STACK_4+1
$0858	$0872			MOVF	STACK_2, 0
$0859	$	L_PWM2_Change_Duty_0:
$0859	$1903			BTFSC	STATUS, Z
$085A	$2860			GOTO	L_PWM2_Change_Duty_1
$085B	$0CF5			RRF	STACK_4+1, 1
$085C	$0CF4			RRF	STACK_4, 1
$085D	$13F5			BCF	STACK_4+1, 7
$085E	$3FFF			ADDLW	255
$085F	$2859			GOTO	L_PWM2_Change_Duty_0
$0860	$	L_PWM2_Change_Duty_1:
$0860	$0874			MOVF	STACK_4, 0
$0861	$00F0			MOVWF	STACK_0
$0862	$0DF0			RLF	STACK_0, 1
$0863	$1070			BCF	STACK_0, 0
$0864	$0DF0			RLF	STACK_0, 1
$0865	$1070			BCF	STACK_0, 0
$0866	$0DF0			RLF	STACK_0, 1
$0867	$1070			BCF	STACK_0, 0
$0868	$0DF0			RLF	STACK_0, 1
$0869	$1070			BCF	STACK_0, 0
$086A	$3030			MOVLW	48
$086B	$0570			ANDWF	STACK_0, 0
$086C	$00F3			MOVWF	STACK_3
$086D	$0874			MOVF	STACK_4, 0
$086E	$00F0			MOVWF	STACK_0
$086F	$0875			MOVF	STACK_4+1, 0
$0870	$00F1			MOVWF	STACK_0+1
$0871	$0CF1			RRF	STACK_0+1, 1
$0872	$0CF0			RRF	STACK_0, 1
$0873	$13F1			BCF	STACK_0+1, 7
$0874	$0CF1			RRF	STACK_0+1, 1
$0875	$0CF0			RRF	STACK_0, 1
$0876	$13F1			BCF	STACK_0+1, 7
$0877	$0870			MOVF	STACK_0, 0
$0878	$009B			MOVWF	CCPR2L
$0879	$300F			MOVLW	15
$087A	$059D			ANDWF	CCP2CON, 1
$087B	$0873			MOVF	STACK_3, 0
$087C	$049D			IORWF	CCP2CON, 1
$087D	$0008			RETURN
$09DA	$	_motor_RB:
;lfr_pid_3.c,30 :: 		void motor_RB()         //RIGHT MOTOR REV DIR
;lfr_pid_3.c,32 :: 		PORTC.F7 = 0;
$09DA	$1303			BCF	STATUS, RP1
$09DB	$1283			BCF	STATUS, RP0
$09DC	$1387			BCF	PORTC, 7
;lfr_pid_3.c,33 :: 		PORTC.F6 = 1;
$09DD	$1707			BSF	PORTC, 6
;lfr_pid_3.c,34 :: 		}
$09DE	$0008			RETURN
$09CB	$	_motor_LB:
;lfr_pid_3.c,42 :: 		void motor_LB()         //LEFT MOTOR REV DIR
;lfr_pid_3.c,44 :: 		PORTC.F5 = 0;
$09CB	$1303			BCF	STATUS, RP1
$09CC	$1283			BCF	STATUS, RP0
$09CD	$1287			BCF	PORTC, 5
;lfr_pid_3.c,45 :: 		PORTC.F4 = 1;
$09CE	$1607			BSF	PORTC, 4
;lfr_pid_3.c,46 :: 		}
$09CF	$0008			RETURN
$06AD	$	GlobalInilfr_pid_3:
$06AD	$303C			MOVLW	60
$06AE	$1303			BCF	STATUS, RP1
$06AF	$1283			BCF	STATUS, RP0
$06B0	$00BA			MOVWF	_basespeed+0
$06B1	$3050			MOVLW	80
$06B2	$00BB			MOVWF	_Kp+0
$06B3	$3032			MOVLW	50
$06B4	$00BC			MOVWF	_Ki+0
$06B5	$303C			MOVLW	60
$06B6	$00BD			MOVWF	_Kd+0
$06B7	$300A			MOVLW	10
$06B8	$00BE			MOVWF	_dt+0
$06B9	$3000			MOVLW	0
$06BA	$00BF			MOVWF	_rightpulse+0
$06BB	$3000			MOVLW	0
$06BC	$00C0			MOVWF	_rightpulse+1
$06BD	$3000			MOVLW	0
$06BE	$00C1			MOVWF	_rightpulse+2
$06BF	$3000			MOVLW	0
$06C0	$00C2			MOVWF	_rightpulse+3
$06C1	$3000			MOVLW	0
$06C2	$00C3			MOVWF	_leftpulse+0
$06C3	$3000			MOVLW	0
$06C4	$00C4			MOVWF	_leftpulse+1
$06C5	$3000			MOVLW	0
$06C6	$00C5			MOVWF	_leftpulse+2
$06C7	$3000			MOVLW	0
$06C8	$00C6			MOVWF	_leftpulse+3
$06C9	$3000			MOVLW	0
$06CA	$00B2			MOVWF	_perror+0
$06CB	$3000			MOVLW	0
$06CC	$00B3			MOVWF	_perror+1
$06CD	$3000			MOVLW	0
$06CE	$00B4			MOVWF	_perror+2
$06CF	$3000			MOVLW	0
$06D0	$00B5			MOVWF	_perror+3
$06D1	$3000			MOVLW	0
$06D2	$00B6			MOVWF	_error+0
$06D3	$3000			MOVLW	0
$06D4	$00B7			MOVWF	_error+1
$06D5	$3000			MOVLW	0
$06D6	$00B8			MOVWF	_error+2
$06D7	$3000			MOVLW	0
$06D8	$00B9			MOVWF	_error+3
$06D9	$3000			MOVLW	0
$06DA	$00C7			MOVWF	_PROPORTIONAL+0
$06DB	$3000			MOVLW	0
$06DC	$00C8			MOVWF	_PROPORTIONAL+1
$06DD	$3000			MOVLW	0
$06DE	$00C9			MOVWF	_PROPORTIONAL+2
$06DF	$3000			MOVLW	0
$06E0	$00CA			MOVWF	_PROPORTIONAL+3
$06E1	$3000			MOVLW	0
$06E2	$00CB			MOVWF	_INTEGRAL+0
$06E3	$3000			MOVLW	0
$06E4	$00CC			MOVWF	_INTEGRAL+1
$06E5	$3000			MOVLW	0
$06E6	$00CD			MOVWF	_INTEGRAL+2
$06E7	$3000			MOVLW	0
$06E8	$00CE			MOVWF	_INTEGRAL+3
$06E9	$3000			MOVLW	0
$06EA	$00CF			MOVWF	_DERIVATIVE+0
$06EB	$3000			MOVLW	0
$06EC	$00D0			MOVWF	_DERIVATIVE+1
$06ED	$3000			MOVLW	0
$06EE	$00D1			MOVWF	_DERIVATIVE+2
$06EF	$3000			MOVLW	0
$06F0	$00D2			MOVWF	_DERIVATIVE+3
$06F1	$3000			MOVLW	0
$06F2	$00D3			MOVWF	_correction+0
$06F3	$3000			MOVLW	0
$06F4	$00D4			MOVWF	_correction+1
$06F5	$3000			MOVLW	0
$06F6	$00D5			MOVWF	_correction+2
$06F7	$3000			MOVLW	0
$06F8	$00D6			MOVWF	_correction+3
$06F9	$0008			RETURN
$093E	$	_Equals_Double:
$093E	$1303			BCF	STATUS, RP1
$093F	$1283			BCF	STATUS, RP0
$0940	$0873			MOVF	STACK_3, W
$0941	$0677			XORWF	STACK_7, W
$0942	$1D03			BTFSS	STATUS, Z
$0943	$2951			GOTO	EQU_FALSE
$0944	$0872			MOVF	STACK_2, W
$0945	$0676			XORWF	STACK_6, W
$0946	$1D03			BTFSS	STATUS, Z
$0947	$2951			GOTO	EQU_FALSE
$0948	$0871			MOVF	STACK_1, W
$0949	$0675			XORWF	STACK_5, W
$094A	$1D03			BTFSS	STATUS, Z
$094B	$2951			GOTO	EQU_FALSE
$094C	$0870			MOVF	STACK_0, W
$094D	$0674			XORWF	STACK_4, W
$094E	$1903			BTFSC	STATUS, Z
$094F	$1503			BSF	STATUS, Z
$0950	$0008			RETURN
$0951	$	EQU_FALSE:
$0951	$1103			BCF	STATUS, Z
$0952	$0008			RETURN
$0953	$0008			RETURN
$0954	$	_Byte2Double:
$0954	$1303			BCF	STATUS, RP1
$0955	$1283			BCF	STATUS, RP0
$0956	$	FLO08U32:
$0956	$0870			MOVF	STACK_0, W
$0957	$00F8			MOVWF	STACK_8
$0958	$01FB			CLRF	STACK_11
$0959	$01FC			CLRF	STACK_12
$095A	$309E			MOVLW	0x9E
$095B	$00F3			MOVWF	STACK_3
$095C	$01FA			CLRF	STACK_10
$095D	$01F2			CLRF	STACK_2
$095E	$01F1			CLRF	STACK_1
$095F	$01F0			CLRF	STACK_0
$0960	$3002			MOVLW	0x02
$0961	$00FC			MOVWF	STACK_12
$0962	$118A			BCF	PCLATH, 3
$0963	$25A8			CALL	_NRM4032
$0964	$158A			BSF	PCLATH, 3
$0965	$0008			RETURN
$0541	$	_Mul_32x32_FP:
$0541	$1303			BCF	STATUS, RP1
$0542	$1283			BCF	STATUS, RP0
$0543	$	FPM32:
$0543	$01FB			CLRF	STACK_11
$0544	$0873			MOVF	STACK_3, W
$0545	$1D03			BTFSS	STATUS, Z
$0546	$0877			MOVF	STACK_7, W
$0547	$1903			BTFSC	STATUS, Z
$0548	$2D98			GOTO	JPMRES032
$0549	$	M32BNE0:
$0549	$0872			MOVF	STACK_2, W
$054A	$0676			XORWF	STACK_6, W
$054B	$00FA			MOVWF	STACK_10
$054C	$0877			MOVF	STACK_7, W
$054D	$07F3			ADDWF	STACK_3, F
$054E	$307E			MOVLW	126
$054F	$1C03			BTFSS	STATUS, C
$0550	$2D55			GOTO	MTUN32
$0551	$02F3			SUBWF	STACK_3, F
$0552	$1803			BTFSC	STATUS, C
$0553	$2D9D			GOTO	JPMSETFOV32
$0554	$2D58			GOTO	MOK32
$0555	$	MTUN32:
$0555	$02F3			SUBWF	STACK_3, F
$0556	$1C03			BTFSS	STATUS, C
$0557	$2DA2			GOTO	JPMSETFUN32
$0558	$	MOK32:
$0558	$0872			MOVF	STACK_2, W
$0559	$00F8			MOVWF	STACK_8
$055A	$0871			MOVF	STACK_1, W
$055B	$00FC			MOVWF	STACK_12
$055C	$0870			MOVF	STACK_0, W
$055D	$00FD			MOVWF	STACK_13
$055E	$17F8			BSF	STACK_8, 7
$055F	$17F6			BSF	STACK_6, 7
$0560	$1003			BCF	STATUS, C
$0561	$01F2			CLRF	STACK_2
$0562	$01F1			CLRF	STACK_1
$0563	$01F0			CLRF	STACK_0
$0564	$3018			MOVLW	24
$0565	$00A0			MOVWF	__math_tempbD
$0566	$	MLOOP32:
$0566	$1C7D			BTFSS	STACK_13, 0
$0567	$2D72			GOTO	MNOADD32
$0568	$	MADD32:
$0568	$0874			MOVF	STACK_4, W
$0569	$07F0			ADDWF	STACK_0, F
$056A	$0875			MOVF	STACK_5, W
$056B	$1803			BTFSC	STATUS, C
$056C	$0F75			INCFSZ	STACK_5, W
$056D	$07F1			ADDWF	STACK_1, F
$056E	$0876			MOVF	STACK_6, W
$056F	$1803			BTFSC	STATUS, C
$0570	$0F76			INCFSZ	STACK_6, W
$0571	$07F2			ADDWF	STACK_2, F
$0572	$	MNOADD32:
$0572	$0CF2			RRF	STACK_2, F
$0573	$0CF1			RRF	STACK_1, F
$0574	$0CF0			RRF	STACK_0, F
$0575	$0CF8			RRF	STACK_8, F
$0576	$0CFC			RRF	STACK_12, F
$0577	$0CFD			RRF	STACK_13, F
$0578	$1003			BCF	STATUS, C
$0579	$0BA0			DECFSZ	__math_tempbD, F
$057A	$2D66			GOTO	MLOOP32
$057B	$1BF2			BTFSC	STACK_2, 7
$057C	$2D82			GOTO	MROUND32
$057D	$0DF8			RLF	STACK_8, F
$057E	$0DF0			RLF	STACK_0, F
$057F	$0DF1			RLF	STACK_1, F
$0580	$0DF2			RLF	STACK_2, F
$0581	$03F3			DECF	STACK_3, F
$0582	$	MROUND32:
$0582	$1B7B			BTFSC	STACK_11, 6
$0583	$1C70			BTFSS	STACK_0, 0
$0584	$2D94			GOTO	MUL32OK
$0585	$1FF8			BTFSS	STACK_8, 7
$0586	$2D94			GOTO	MUL32OK
$0587	$0AF0			INCF	STACK_0, F
$0588	$1903			BTFSC	STATUS, Z
$0589	$0AF1			INCF	STACK_1, F
$058A	$1903			BTFSC	STATUS, Z
$058B	$0AF2			INCF	STACK_2, F
$058C	$1D03			BTFSS	STATUS, Z
$058D	$2D94			GOTO	MUL32OK
$058E	$0CF2			RRF	STACK_2, F
$058F	$0CF1			RRF	STACK_1, F
$0590	$0CF0			RRF	STACK_0, F
$0591	$0AF3			INCF	STACK_3, F
$0592	$1903			BTFSC	STATUS, Z
$0593	$2D9D			GOTO	JPMSETFOV32
$0594	$	MUL32OK:
$0594	$1FFA			BTFSS	STACK_10, 7
$0595	$13F2			BCF	STACK_2, 7
$0596	$3000			MOVLW	0x00
$0597	$2DA6			GOTO	MUL32EEE
$0598	$	JPMRES032:
$0598	$3001			MOVLW	0x01
$0599	$158A			BSF	PCLATH, 3
$059A	$21A0			CALL	_RES032
$059B	$118A			BCF	PCLATH, 3
$059C	$2DA6			GOTO	MUL32EEE
$059D	$	JPMSETFOV32:
$059D	$3002			MOVLW	0x02
$059E	$158A			BSF	PCLATH, 3
$059F	$2184			CALL	_SETFOV32
$05A0	$118A			BCF	PCLATH, 3
$05A1	$2DA6			GOTO	MUL32EEE
$05A2	$	JPMSETFUN32:
$05A2	$3004			MOVLW	0x04
$05A3	$158A			BSF	PCLATH, 3
$05A4	$2192			CALL	_SETFUN32
$05A5	$118A			BCF	PCLATH, 3
$05A6	$	MUL32EEE:
$05A6	$0000			NOP
$05A7	$0008			RETURN
$065D	$	_Compare_Double:
$065D	$1303			BCF	STATUS, RP1
$065E	$1283			BCF	STATUS, RP0
$065F	$01FA			CLRF	STACK_10
$0660	$0873			MOVF	STACK_3, W
$0661	$1D03			BTFSS	STATUS, Z
$0662	$147A			BSF	STACK_10, 0
$0663	$0877			MOVF	STACK_7, W
$0664	$1D03			BTFSS	STATUS, Z
$0665	$14FA			BSF	STACK_10, 1
$0666	$087A			MOVF	STACK_10, W
$0667	$1903			BTFSC	STATUS, Z
$0668	$2EA9			GOTO	COMPARE_EQU
$0669	$3A03			XORLW	0x03
$066A	$1903			BTFSC	STATUS, Z
$066B	$2E74			GOTO	COMPARE_NOTZERO
$066C	$187A			BTFSC	STACK_10, 0
$066D	$2E71			GOTO	COMPARE_XNOTZERO
$066E	$	COMPARE_YNOTZERO:
$066E	$1FF6			BTFSS	STACK_6, 7
$066F	$2EA7			GOTO	COMPARE_LT
$0670	$2EA5			GOTO	COMPARE_GT
$0671	$	COMPARE_XNOTZERO:
$0671	$1FF2			BTFSS	STACK_2, 7
$0672	$2EA5			GOTO	COMPARE_GT
$0673	$2EA7			GOTO	COMPARE_LT
$0674	$	COMPARE_NOTZERO:
$0674	$0872			MOVF	STACK_2, W
$0675	$3980			ANDLW	0x80
$0676	$00FA			MOVWF	STACK_10
$0677	$13F2			BCF	STACK_2, 7
$0678	$0876			MOVF	STACK_6, W
$0679	$3980			ANDLW	0x80
$067A	$13F6			BCF	STACK_6, 7
$067B	$067A			XORWF	STACK_10, W
$067C	$1903			BTFSC	STATUS, Z
$067D	$2E82			GOTO	COMPARE_TESTALL
$067E	$087A			MOVF	STACK_10, W
$067F	$1903			BTFSC	STATUS, Z
$0680	$2EA5			GOTO	COMPARE_GT
$0681	$2EA7			GOTO	COMPARE_LT
$0682	$	COMPARE_TESTALL:
$0682	$0877			MOVF	STACK_7, W
$0683	$0273			SUBWF	STACK_3, W
$0684	$1903			BTFSC	STATUS, Z
$0685	$2E89			GOTO	COMPARE_C1
$0686	$1C03			BTFSS	STATUS, C
$0687	$2E9D			GOTO	GT_FALSE
$0688	$2EA1			GOTO	GT_TRUE
$0689	$	COMPARE_C1:
$0689	$0876			MOVF	STACK_6, W
$068A	$0272			SUBWF	STACK_2, W
$068B	$1903			BTFSC	STATUS, Z
$068C	$2E90			GOTO	COMPARE_C2
$068D	$1C03			BTFSS	STATUS, C
$068E	$2E9D			GOTO	GT_FALSE
$068F	$2EA1			GOTO	GT_TRUE
$0690	$	COMPARE_C2:
$0690	$0875			MOVF	STACK_5, W
$0691	$0271			SUBWF	STACK_1, W
$0692	$1903			BTFSC	STATUS, Z
$0693	$2E97			GOTO	COMPARE_C3
$0694	$1C03			BTFSS	STATUS, C
$0695	$2E9D			GOTO	GT_FALSE
$0696	$2EA1			GOTO	GT_TRUE
$0697	$	COMPARE_C3:
$0697	$0874			MOVF	STACK_4, W
$0698	$0270			SUBWF	STACK_0, W
$0699	$1903			BTFSC	STATUS, Z
$069A	$2EA9			GOTO	COMPARE_EQU
$069B	$1803			BTFSC	STATUS, C
$069C	$2EA1			GOTO	GT_TRUE
$069D	$	GT_FALSE:
$069D	$08FA			MOVF	STACK_10, F
$069E	$1903			BTFSC	STATUS, Z
$069F	$2EA7			GOTO	COMPARE_LT
$06A0	$2EA5			GOTO	COMPARE_GT
$06A1	$	GT_TRUE:
$06A1	$08FA			MOVF	STACK_10, F
$06A2	$1903			BTFSC	STATUS, Z
$06A3	$2EA5			GOTO	COMPARE_GT
$06A4	$2EA7			GOTO	COMPARE_LT
$06A5	$	COMPARE_GT:
$06A5	$1403			BSF	STATUS, C
$06A6	$0008			RETURN
$06A7	$	COMPARE_LT:
$06A7	$1003			BCF	STATUS, C
$06A8	$0008			RETURN
$06A9	$	COMPARE_EQU:
$06A9	$1403			BSF	STATUS, C
$06AA	$1503			BSF	STATUS, Z
$06AB	$0008			RETURN
$06AC	$0008			RETURN
$0800	$	_Double2Byte:
$0800	$1303			BCF	STATUS, RP1
$0801	$1283			BCF	STATUS, RP0
$0802	$	INT32U08:
$0802	$01FB			CLRF	STACK_11
$0803	$01FC			CLRF	STACK_12
$0804	$01FA			CLRF	STACK_10
$0805	$0873			MOVF	STACK_3, W
$0806	$1903			BTFSC	STATUS, Z
$0807	$282D			GOTO	IRES008
$0808	$13FA			BCF	STACK_10, 7
$0809	$17F2			BSF	STACK_2, 7
$080A	$3086			MOVLW	134
$080B	$02F3			SUBWF	STACK_3, F
$080C	$1BF3			BTFSC	STACK_3, 7
$080D	$2811			GOTO	SETEXP08
$080E	$1903			BTFSC	STATUS, Z
$080F	$2811			GOTO	SETEXP08
$0810	$282F			GOTO	SETIOV08
$0811	$	SETEXP08:
$0811	$09F3			COMF	STACK_3, F
$0812	$0AF3			INCF	STACK_3, F
$0813	$3008			MOVLW	8
$0814	$0273			SUBWF	STACK_3, W
$0815	$1C03			BTFSS	STATUS, C
$0816	$281E			GOTO	TSHIFT3208
$0817	$00F3			MOVWF	STACK_3
$0818	$0DF2			RLF	STACK_2, F
$0819	$01F2			CLRF	STACK_2
$081A	$0873			MOVF	STACK_3, W
$081B	$1D03			BTFSS	STATUS, Z
$081C	$1003			BCF	STATUS, C
$081D	$2825			GOTO	SHIFT3208OK
$081E	$	TSHIFT3208:
$081E	$0873			MOVF	STACK_3, W
$081F	$1903			BTFSC	STATUS, Z
$0820	$2825			GOTO	SHIFT3208OK
$0821	$	SHIFT3208:
$0821	$1003			BCF	STATUS, C
$0822	$0CF2			RRF	STACK_2, F
$0823	$0BF3			DECFSZ	STACK_3, F
$0824	$2821			GOTO	SHIFT3208
$0825	$	SHIFT3208OK:
$0825	$1B7B			BTFSC	STACK_11, 6
$0826	$1C72			BTFSS	STACK_2, 0
$0827	$282D			GOTO	INT3208OK
$0828	$1C03			BTFSS	STATUS, C
$0829	$282D			GOTO	INT3208OK
$082A	$0AF2			INCF	STACK_2, F
$082B	$1903			BTFSC	STATUS, Z
$082C	$2834			GOTO	D2B_JPKSETIOV3224
$082D	$	INT3208OK:
$082D	$	IRES008:
$082D	$01F1			CLRF	STACK_1
$082E	$2837			GOTO	INT3208EOK
$082F	$	SETIOV08:
$082F	$147B			BSF	STACK_11, 0
$0830	$1FFB			BTFSS	STACK_11, 7
$0831	$283A			GOTO	INT3208EER
$0832	$01F1			CLRF	STACK_1
$0833	$283A			GOTO	INT3208EER
$0834	$	D2B_JPKSETIOV3224:
$0834	$3001			MOVLW	0x01
$0835	$00FC			MOVWF	STACK_12
$0836	$283C			GOTO	INT3208EEE
$0837	$	INT3208EOK:
$0837	$3000			MOVLW	0x00
$0838	$00FC			MOVWF	STACK_12
$0839	$283C			GOTO	INT3208EEE
$083A	$	INT3208EER:
$083A	$30FF			MOVLW	0xFF
$083B	$00FC			MOVWF	STACK_12
$083C	$	INT3208EEE:
$083C	$08FC			MOVF	STACK_12, F
$083D	$1903			BTFSC	STATUS, Z
$083E	$2840			GOTO	L_Double2Byte_0
$083F	$2175			CALL	_SETIOV3224
$0840	$	L_Double2Byte_0:
$0840	$0872			MOVF	STACK_2, W
$0841	$00F0			MOVWF	STACK_0
$0842	$0008			RETURN
$0004	$	_main:
;lfr_pid_3.c,97 :: 		void main()
;lfr_pid_3.c,100 :: 		initport();
$0004	$26AD			CALL	GlobalInilfr_pid_3
$0005	$158A			BSF	PCLATH, 3
$0006	$2166			CALL	_initport
$0007	$118A			BCF	PCLATH, 3
;lfr_pid_3.c,101 :: 		initpwm();
$0008	$158A			BSF	PCLATH, 3
$0009	$2115			CALL	_initpwm
$000A	$118A			BCF	PCLATH, 3
;lfr_pid_3.c,102 :: 		while(1)
$000B	$	L_main_8:
;lfr_pid_3.c,104 :: 		indicator();
$000B	$260C			CALL	_indicator
;lfr_pid_3.c,105 :: 		CalcError();
$000C	$22BC			CALL	_CalcError
;lfr_pid_3.c,106 :: 		if((error == 0) && (s4+s5==2) && ((s1+s2+s3+s6+s7+s8)==0))
$000D	$01F4			CLRF	STACK_4
$000E	$01F5			CLRF	STACK_4+1
$000F	$01F6			CLRF	STACK_4+2
$0010	$01F7			CLRF	STACK_4+3
$0011	$0836			MOVF	_error, 0
$0012	$00F0			MOVWF	STACK_0
$0013	$0837			MOVF	_error+1, 0
$0014	$00F1			MOVWF	STACK_0+1
$0015	$0838			MOVF	_error+2, 0
$0016	$00F2			MOVWF	STACK_0+2
$0017	$0839			MOVF	_error+3, 0
$0018	$00F3			MOVWF	STACK_0+3
$0019	$158A			BSF	PCLATH, 3
$001A	$213E			CALL	_equals_double
$001B	$118A			BCF	PCLATH, 3
$001C	$3001			MOVLW	1
$001D	$1D03			BTFSS	STATUS, Z
$001E	$3000			MOVLW	0
$001F	$00F0			MOVWF	STACK_0
$0020	$0870			MOVF	STACK_0, 0
$0021	$1903			BTFSC	STATUS, Z
$0022	$287C			GOTO	L_main_12
$0023	$0829			MOVF	_s5, 0
$0024	$0727			ADDWF	_s4, 0
$0025	$00F4			MOVWF	STACK_4
$0026	$0828			MOVF	_s4+1, 0
$0027	$1803			BTFSC	STATUS, C
$0028	$3F01			ADDLW	1
$0029	$072A			ADDWF	_s5+1, 0
$002A	$00F5			MOVWF	STACK_4+1
$002B	$3000			MOVLW	0
$002C	$0675			XORWF	STACK_4+1, 0
$002D	$1D03			BTFSS	STATUS, Z
$002E	$2831			GOTO	L_main_28
$002F	$3002			MOVLW	2
$0030	$0674			XORWF	STACK_4, 0
$0031	$	L_main_28:
$0031	$1D03			BTFSS	STATUS, Z
$0032	$287C			GOTO	L_main_12
$0033	$0823			MOVF	_s2, 0
$0034	$0721			ADDWF	_s1, 0
$0035	$00F0			MOVWF	STACK_0
$0036	$0822			MOVF	_s1+1, 0
$0037	$1803			BTFSC	STATUS, C
$0038	$3F01			ADDLW	1
$0039	$0724			ADDWF	_s2+1, 0
$003A	$00F1			MOVWF	STACK_0+1
$003B	$0825			MOVF	_s3, 0
$003C	$07F0			ADDWF	STACK_0, 1
$003D	$0826			MOVF	_s3+1, 0
$003E	$1803			BTFSC	STATUS, C
$003F	$3F01			ADDLW	1
$0040	$07F1			ADDWF	STACK_0+1, 1
$0041	$082B			MOVF	_s6, 0
$0042	$07F0			ADDWF	STACK_0, 1
$0043	$082C			MOVF	_s6+1, 0
$0044	$1803			BTFSC	STATUS, C
$0045	$3F01			ADDLW	1
$0046	$07F1			ADDWF	STACK_0+1, 1
$0047	$082D			MOVF	_s7, 0
$0048	$07F0			ADDWF	STACK_0, 1
$0049	$082E			MOVF	_s7+1, 0
$004A	$1803			BTFSC	STATUS, C
$004B	$3F01			ADDLW	1
$004C	$07F1			ADDWF	STACK_0+1, 1
$004D	$082F			MOVF	_s8, 0
$004E	$0770			ADDWF	STACK_0, 0
$004F	$00F4			MOVWF	STACK_4
$0050	$0871			MOVF	STACK_0+1, 0
$0051	$1803			BTFSC	STATUS, C
$0052	$3F01			ADDLW	1
$0053	$0730			ADDWF	_s8+1, 0
$0054	$00F5			MOVWF	STACK_4+1
$0055	$3000			MOVLW	0
$0056	$0675			XORWF	STACK_4+1, 0
$0057	$1D03			BTFSS	STATUS, Z
$0058	$285B			GOTO	L_main_29
$0059	$3000			MOVLW	0
$005A	$0674			XORWF	STACK_4, 0
$005B	$	L_main_29:
$005B	$1D03			BTFSS	STATUS, Z
$005C	$287C			GOTO	L_main_12
$005D	$	L161_ex_L_main_12:
;lfr_pid_3.c,108 :: 		motor_LF();					        	    //FWD AT FULL SPEED
$005D	$158A			BSF	PCLATH, 3
$005E	$21D5			CALL	_motor_LF
$005F	$118A			BCF	PCLATH, 3
;lfr_pid_3.c,109 :: 		motor_RF();
$0060	$158A			BSF	PCLATH, 3
$0061	$21D0			CALL	_motor_RF
$0062	$118A			BCF	PCLATH, 3
;lfr_pid_3.c,110 :: 		PWM1_CHANGE_DUTY(255);
$0063	$30FF			MOVLW	255
$0064	$00E7			MOVWF	FARG_PWM1_Change_Duty+0
$0065	$158A			BSF	PCLATH, 3
$0066	$20AF			CALL	_PWM1_Change_Duty
$0067	$118A			BCF	PCLATH, 3
;lfr_pid_3.c,111 :: 		PWM2_CHANGE_DUTY(255);
$0068	$30FF			MOVLW	255
$0069	$00E7			MOVWF	FARG_PWM2_Change_Duty+0
$006A	$158A			BSF	PCLATH, 3
$006B	$2043			CALL	_PWM2_Change_Duty
$006C	$118A			BCF	PCLATH, 3
;lfr_pid_3.c,112 :: 		delay_ms(5);
$006D	$300D			MOVLW	13
$006E	$00FB			MOVWF	STACK_11
$006F	$30FF			MOVLW	255
$0070	$00FA			MOVWF	STACK_10
$0071	$0BFB			DECFSZ	STACK_11, F
$0072	$2874			GOTO	$+2
$0073	$2877			GOTO	$+4
$0074	$0BFA			DECFSZ	STACK_10, F
$0075	$2874			GOTO	$-1
$0076	$2871			GOTO	$-5
$0077	$30F3			MOVLW	243
$0078	$00FA			MOVWF	STACK_10
$0079	$0BFA			DECFSZ	STACK_10, F
$007A	$2879			GOTO	$-1
$007B	$0000			NOP
;lfr_pid_3.c,113 :: 		}
$007C	$	L_main_12:
;lfr_pid_3.c,114 :: 		if((s1+s2+s3+s4+s5+s6+s7+s8) == 0)		//ROBOT HAS OVERSHOOT
$007C	$0823			MOVF	_s2, 0
$007D	$0721			ADDWF	_s1, 0
$007E	$00F0			MOVWF	STACK_0
$007F	$0822			MOVF	_s1+1, 0
$0080	$1803			BTFSC	STATUS, C
$0081	$3F01			ADDLW	1
$0082	$0724			ADDWF	_s2+1, 0
$0083	$00F1			MOVWF	STACK_0+1
$0084	$0825			MOVF	_s3, 0
$0085	$07F0			ADDWF	STACK_0, 1
$0086	$0826			MOVF	_s3+1, 0
$0087	$1803			BTFSC	STATUS, C
$0088	$3F01			ADDLW	1
$0089	$07F1			ADDWF	STACK_0+1, 1
$008A	$0827			MOVF	_s4, 0
$008B	$07F0			ADDWF	STACK_0, 1
$008C	$0828			MOVF	_s4+1, 0
$008D	$1803			BTFSC	STATUS, C
$008E	$3F01			ADDLW	1
$008F	$07F1			ADDWF	STACK_0+1, 1
$0090	$0829			MOVF	_s5, 0
$0091	$07F0			ADDWF	STACK_0, 1
$0092	$082A			MOVF	_s5+1, 0
$0093	$1803			BTFSC	STATUS, C
$0094	$3F01			ADDLW	1
$0095	$07F1			ADDWF	STACK_0+1, 1
$0096	$082B			MOVF	_s6, 0
$0097	$07F0			ADDWF	STACK_0, 1
$0098	$082C			MOVF	_s6+1, 0
$0099	$1803			BTFSC	STATUS, C
$009A	$3F01			ADDLW	1
$009B	$07F1			ADDWF	STACK_0+1, 1
$009C	$082D			MOVF	_s7, 0
$009D	$07F0			ADDWF	STACK_0, 1
$009E	$082E			MOVF	_s7+1, 0
$009F	$1803			BTFSC	STATUS, C
$00A0	$3F01			ADDLW	1
$00A1	$07F1			ADDWF	STACK_0+1, 1
$00A2	$082F			MOVF	_s8, 0
$00A3	$0770			ADDWF	STACK_0, 0
$00A4	$00F4			MOVWF	STACK_4
$00A5	$0871			MOVF	STACK_0+1, 0
$00A6	$1803			BTFSC	STATUS, C
$00A7	$3F01			ADDLW	1
$00A8	$0730			ADDWF	_s8+1, 0
$00A9	$00F5			MOVWF	STACK_4+1
$00AA	$3000			MOVLW	0
$00AB	$0675			XORWF	STACK_4+1, 0
$00AC	$1D03			BTFSS	STATUS, Z
$00AD	$28B0			GOTO	L_main_30
$00AE	$3000			MOVLW	0
$00AF	$0674			XORWF	STACK_4, 0
$00B0	$	L_main_30:
$00B0	$1D03			BTFSS	STATUS, Z
$00B1	$28FA			GOTO	L_main_13
;lfr_pid_3.c,116 :: 		if(lastreading == 'r')				  //CHECKS IF THE LAST SENSOR ACTIVATED WAS RIGHT
$00B2	$0831			MOVF	_lastreading, 0
$00B3	$3A72			XORLW	114
$00B4	$1D03			BTFSS	STATUS, Z
$00B5	$28D6			GOTO	L_main_14
;lfr_pid_3.c,118 :: 		motor_RB();						        //TURN RIGHT AT FULL SPEED
$00B6	$158A			BSF	PCLATH, 3
$00B7	$21DA			CALL	_motor_RB
$00B8	$118A			BCF	PCLATH, 3
;lfr_pid_3.c,119 :: 		motor_LF();
$00B9	$158A			BSF	PCLATH, 3
$00BA	$21D5			CALL	_motor_LF
$00BB	$118A			BCF	PCLATH, 3
;lfr_pid_3.c,120 :: 		PWM1_CHANGE_DUTY(255);
$00BC	$30FF			MOVLW	255
$00BD	$00E7			MOVWF	FARG_PWM1_Change_Duty+0
$00BE	$158A			BSF	PCLATH, 3
$00BF	$20AF			CALL	_PWM1_Change_Duty
$00C0	$118A			BCF	PCLATH, 3
;lfr_pid_3.c,121 :: 		PWM2_CHANGE_DUTY(255);
$00C1	$30FF			MOVLW	255
$00C2	$00E7			MOVWF	FARG_PWM2_Change_Duty+0
$00C3	$158A			BSF	PCLATH, 3
$00C4	$2043			CALL	_PWM2_Change_Duty
$00C5	$118A			BCF	PCLATH, 3
;lfr_pid_3.c,122 :: 		delay_ms(5);
$00C6	$300D			MOVLW	13
$00C7	$00FB			MOVWF	STACK_11
$00C8	$30FF			MOVLW	255
$00C9	$00FA			MOVWF	STACK_10
$00CA	$0BFB			DECFSZ	STACK_11, F
$00CB	$28CD			GOTO	$+2
$00CC	$28D0			GOTO	$+4
$00CD	$0BFA			DECFSZ	STACK_10, F
$00CE	$28CD			GOTO	$-1
$00CF	$28CA			GOTO	$-5
$00D0	$30F3			MOVLW	243
$00D1	$00FA			MOVWF	STACK_10
$00D2	$0BFA			DECFSZ	STACK_10, F
$00D3	$28D2			GOTO	$-1
$00D4	$0000			NOP
;lfr_pid_3.c,123 :: 		}
$00D5	$28F9			GOTO	L_main_15
$00D6	$	L_main_14:
;lfr_pid_3.c,124 :: 		else if(lastreading == 'l')			  //CHECKS IF THE LAST SENSOR ACTIVATED WAS LEFT
$00D6	$0831			MOVF	_lastreading, 0
$00D7	$3A6C			XORLW	108
$00D8	$1D03			BTFSS	STATUS, Z
$00D9	$28F9			GOTO	L_main_16
;lfr_pid_3.c,126 :: 		motor_LB();					        	//TURN LEFT AT FULL SPEED
$00DA	$158A			BSF	PCLATH, 3
$00DB	$21CB			CALL	_motor_LB
$00DC	$118A			BCF	PCLATH, 3
;lfr_pid_3.c,127 :: 		motor_RF();
$00DD	$158A			BSF	PCLATH, 3
$00DE	$21D0			CALL	_motor_RF
$00DF	$118A			BCF	PCLATH, 3
;lfr_pid_3.c,128 :: 		PWM1_CHANGE_DUTY(255);
$00E0	$30FF			MOVLW	255
$00E1	$00E7			MOVWF	FARG_PWM1_Change_Duty+0
$00E2	$158A			BSF	PCLATH, 3
$00E3	$20AF			CALL	_PWM1_Change_Duty
$00E4	$118A			BCF	PCLATH, 3
;lfr_pid_3.c,129 :: 		PWM2_CHANGE_DUTY(255);
$00E5	$30FF			MOVLW	255
$00E6	$00E7			MOVWF	FARG_PWM2_Change_Duty+0
$00E7	$158A			BSF	PCLATH, 3
$00E8	$2043			CALL	_PWM2_Change_Duty
$00E9	$118A			BCF	PCLATH, 3
;lfr_pid_3.c,130 :: 		delay_ms(5);
$00EA	$300D			MOVLW	13
$00EB	$00FB			MOVWF	STACK_11
$00EC	$30FF			MOVLW	255
$00ED	$00FA			MOVWF	STACK_10
$00EE	$0BFB			DECFSZ	STACK_11, F
$00EF	$28F1			GOTO	$+2
$00F0	$28F4			GOTO	$+4
$00F1	$0BFA			DECFSZ	STACK_10, F
$00F2	$28F1			GOTO	$-1
$00F3	$28EE			GOTO	$-5
$00F4	$30F3			MOVLW	243
$00F5	$00FA			MOVWF	STACK_10
$00F6	$0BFA			DECFSZ	STACK_10, F
$00F7	$28F6			GOTO	$-1
$00F8	$0000			NOP
;lfr_pid_3.c,131 :: 		}
$00F9	$	L_main_16:
$00F9	$	L_main_15:
;lfr_pid_3.c,132 :: 		}
$00F9	$2AAB			GOTO	L_main_17
$00FA	$	L_main_13:
;lfr_pid_3.c,135 :: 		PROPORTIONAL = error * kp;
$00FA	$083B			MOVF	_Kp, 0
$00FB	$00F0			MOVWF	STACK_0
$00FC	$158A			BSF	PCLATH, 3
$00FD	$2154			CALL	_byte2double
$00FE	$118A			BCF	PCLATH, 3
$00FF	$0836			MOVF	_error, 0
$0100	$00F4			MOVWF	STACK_4
$0101	$0837			MOVF	_error+1, 0
$0102	$00F5			MOVWF	STACK_4+1
$0103	$0838			MOVF	_error+2, 0
$0104	$00F6			MOVWF	STACK_4+2
$0105	$0839			MOVF	_error+3, 0
$0106	$00F7			MOVWF	STACK_4+3
$0107	$2541			CALL	_mul_32x32_fp
$0108	$0870			MOVF	STACK_0, 0
$0109	$00E3			MOVWF	FLOC_main+12
$010A	$0871			MOVF	STACK_0+1, 0
$010B	$00E4			MOVWF	FLOC_main+13
$010C	$0872			MOVF	STACK_0+2, 0
$010D	$00E5			MOVWF	FLOC_main+14
$010E	$0873			MOVF	STACK_0+3, 0
$010F	$00E6			MOVWF	FLOC_main+15
$0110	$0863			MOVF	FLOC_main+12, 0
$0111	$00C7			MOVWF	_PROPORTIONAL
$0112	$0864			MOVF	FLOC_main+13, 0
$0113	$00C8			MOVWF	_PROPORTIONAL+1
$0114	$0865			MOVF	FLOC_main+14, 0
$0115	$00C9			MOVWF	_PROPORTIONAL+2
$0116	$0866			MOVF	FLOC_main+15, 0
$0117	$00CA			MOVWF	_PROPORTIONAL+3
;lfr_pid_3.c,136 :: 		INTEGRAL += error ;
$0118	$084B			MOVF	_INTEGRAL, 0
$0119	$00F0			MOVWF	STACK_0
$011A	$084C			MOVF	_INTEGRAL+1, 0
$011B	$00F1			MOVWF	STACK_0+1
$011C	$084D			MOVF	_INTEGRAL+2, 0
$011D	$00F2			MOVWF	STACK_0+2
$011E	$084E			MOVF	_INTEGRAL+3, 0
$011F	$00F3			MOVWF	STACK_0+3
$0120	$0836			MOVF	_error, 0
$0121	$00F4			MOVWF	STACK_4
$0122	$0837			MOVF	_error+1, 0
$0123	$00F5			MOVWF	STACK_4+1
$0124	$0838			MOVF	_error+2, 0
$0125	$00F6			MOVWF	STACK_4+2
$0126	$0839			MOVF	_error+3, 0
$0127	$00F7			MOVWF	STACK_4+3
$0128	$23F9			CALL	_add_32x32_fp
$0129	$0870			MOVF	STACK_0, 0
$012A	$00D7			MOVWF	FLOC_main+0
$012B	$0871			MOVF	STACK_0+1, 0
$012C	$00D8			MOVWF	FLOC_main+1
$012D	$0872			MOVF	STACK_0+2, 0
$012E	$00D9			MOVWF	FLOC_main+2
$012F	$0873			MOVF	STACK_0+3, 0
$0130	$00DA			MOVWF	FLOC_main+3
$0131	$0857			MOVF	FLOC_main+0, 0
$0132	$00CB			MOVWF	_INTEGRAL
$0133	$0858			MOVF	FLOC_main+1, 0
$0134	$00CC			MOVWF	_INTEGRAL+1
$0135	$0859			MOVF	FLOC_main+2, 0
$0136	$00CD			MOVWF	_INTEGRAL+2
$0137	$085A			MOVF	FLOC_main+3, 0
$0138	$00CE			MOVWF	_INTEGRAL+3
;lfr_pid_3.c,137 :: 		INTEGRAL *= ki;
$0139	$083C			MOVF	_Ki, 0
$013A	$00F0			MOVWF	STACK_0
$013B	$158A			BSF	PCLATH, 3
$013C	$2154			CALL	_byte2double
$013D	$118A			BCF	PCLATH, 3
$013E	$0857			MOVF	FLOC_main+0, 0
$013F	$00F4			MOVWF	STACK_4
$0140	$0858			MOVF	FLOC_main+1, 0
$0141	$00F5			MOVWF	STACK_4+1
$0142	$0859			MOVF	FLOC_main+2, 0
$0143	$00F6			MOVWF	STACK_4+2
$0144	$085A			MOVF	FLOC_main+3, 0
$0145	$00F7			MOVWF	STACK_4+3
$0146	$2541			CALL	_mul_32x32_fp
$0147	$0870			MOVF	STACK_0, 0
$0148	$00DF			MOVWF	FLOC_main+8
$0149	$0871			MOVF	STACK_0+1, 0
$014A	$00E0			MOVWF	FLOC_main+9
$014B	$0872			MOVF	STACK_0+2, 0
$014C	$00E1			MOVWF	FLOC_main+10
$014D	$0873			MOVF	STACK_0+3, 0
$014E	$00E2			MOVWF	FLOC_main+11
$014F	$085F			MOVF	FLOC_main+8, 0
$0150	$00CB			MOVWF	_INTEGRAL
$0151	$0860			MOVF	FLOC_main+9, 0
$0152	$00CC			MOVWF	_INTEGRAL+1
$0153	$0861			MOVF	FLOC_main+10, 0
$0154	$00CD			MOVWF	_INTEGRAL+2
$0155	$0862			MOVF	FLOC_main+11, 0
$0156	$00CE			MOVWF	_INTEGRAL+3
;lfr_pid_3.c,138 :: 		DERIVATIVE = (error - perror)/dt;
$0157	$0832			MOVF	_perror, 0
$0158	$00F4			MOVWF	STACK_4
$0159	$0833			MOVF	_perror+1, 0
$015A	$00F5			MOVWF	STACK_4+1
$015B	$0834			MOVF	_perror+2, 0
$015C	$00F6			MOVWF	STACK_4+2
$015D	$0835			MOVF	_perror+3, 0
$015E	$00F7			MOVWF	STACK_4+3
$015F	$0836			MOVF	_error, 0
$0160	$00F0			MOVWF	STACK_0
$0161	$0837			MOVF	_error+1, 0
$0162	$00F1			MOVWF	STACK_0+1
$0163	$0838			MOVF	_error+2, 0
$0164	$00F2			MOVWF	STACK_0+2
$0165	$0839			MOVF	_error+3, 0
$0166	$00F3			MOVWF	STACK_0+3
$0167	$2744			CALL	_sub_32x32_fp
$0168	$0870			MOVF	STACK_0, 0
$0169	$00D7			MOVWF	FLOC_main+0
$016A	$0871			MOVF	STACK_0+1, 0
$016B	$00D8			MOVWF	FLOC_main+1
$016C	$0872			MOVF	STACK_0+2, 0
$016D	$00D9			MOVWF	FLOC_main+2
$016E	$0873			MOVF	STACK_0+3, 0
$016F	$00DA			MOVWF	FLOC_main+3
$0170	$083E			MOVF	_dt, 0
$0171	$00F0			MOVWF	STACK_0
$0172	$158A			BSF	PCLATH, 3
$0173	$2154			CALL	_byte2double
$0174	$118A			BCF	PCLATH, 3
$0175	$0870			MOVF	STACK_0, 0
$0176	$00F4			MOVWF	STACK_4
$0177	$0871			MOVF	STACK_0+1, 0
$0178	$00F5			MOVWF	STACK_4+1
$0179	$0872			MOVF	STACK_0+2, 0
$017A	$00F6			MOVWF	STACK_4+2
$017B	$0873			MOVF	STACK_0+3, 0
$017C	$00F7			MOVWF	STACK_4+3
$017D	$0857			MOVF	FLOC_main+0, 0
$017E	$00F0			MOVWF	STACK_0
$017F	$0858			MOVF	FLOC_main+1, 0
$0180	$00F1			MOVWF	STACK_0+1
$0181	$0859			MOVF	FLOC_main+2, 0
$0182	$00F2			MOVWF	STACK_0+2
$0183	$085A			MOVF	FLOC_main+3, 0
$0184	$00F3			MOVWF	STACK_0+3
$0185	$249D			CALL	_div_32x32_fp
$0186	$0870			MOVF	STACK_0, 0
$0187	$00DB			MOVWF	FLOC_main+4
$0188	$0871			MOVF	STACK_0+1, 0
$0189	$00DC			MOVWF	FLOC_main+5
$018A	$0872			MOVF	STACK_0+2, 0
$018B	$00DD			MOVWF	FLOC_main+6
$018C	$0873			MOVF	STACK_0+3, 0
$018D	$00DE			MOVWF	FLOC_main+7
$018E	$085B			MOVF	FLOC_main+4, 0
$018F	$00CF			MOVWF	_DERIVATIVE
$0190	$085C			MOVF	FLOC_main+5, 0
$0191	$00D0			MOVWF	_DERIVATIVE+1
$0192	$085D			MOVF	FLOC_main+6, 0
$0193	$00D1			MOVWF	_DERIVATIVE+2
$0194	$085E			MOVF	FLOC_main+7, 0
$0195	$00D2			MOVWF	_DERIVATIVE+3
;lfr_pid_3.c,139 :: 		correction = ( (PROPORTIONAL) + (INTEGRAL) + (DERIVATIVE*kd));
$0196	$0863			MOVF	FLOC_main+12, 0
$0197	$00F0			MOVWF	STACK_0
$0198	$0864			MOVF	FLOC_main+13, 0
$0199	$00F1			MOVWF	STACK_0+1
$019A	$0865			MOVF	FLOC_main+14, 0
$019B	$00F2			MOVWF	STACK_0+2
$019C	$0866			MOVF	FLOC_main+15, 0
$019D	$00F3			MOVWF	STACK_0+3
$019E	$085F			MOVF	FLOC_main+8, 0
$019F	$00F4			MOVWF	STACK_4
$01A0	$0860			MOVF	FLOC_main+9, 0
$01A1	$00F5			MOVWF	STACK_4+1
$01A2	$0861			MOVF	FLOC_main+10, 0
$01A3	$00F6			MOVWF	STACK_4+2
$01A4	$0862			MOVF	FLOC_main+11, 0
$01A5	$00F7			MOVWF	STACK_4+3
$01A6	$23F9			CALL	_add_32x32_fp
$01A7	$0870			MOVF	STACK_0, 0
$01A8	$00D7			MOVWF	FLOC_main+0
$01A9	$0871			MOVF	STACK_0+1, 0
$01AA	$00D8			MOVWF	FLOC_main+1
$01AB	$0872			MOVF	STACK_0+2, 0
$01AC	$00D9			MOVWF	FLOC_main+2
$01AD	$0873			MOVF	STACK_0+3, 0
$01AE	$00DA			MOVWF	FLOC_main+3
$01AF	$083D			MOVF	_Kd, 0
$01B0	$00F0			MOVWF	STACK_0
$01B1	$158A			BSF	PCLATH, 3
$01B2	$2154			CALL	_byte2double
$01B3	$118A			BCF	PCLATH, 3
$01B4	$085B			MOVF	FLOC_main+4, 0
$01B5	$00F4			MOVWF	STACK_4
$01B6	$085C			MOVF	FLOC_main+5, 0
$01B7	$00F5			MOVWF	STACK_4+1
$01B8	$085D			MOVF	FLOC_main+6, 0
$01B9	$00F6			MOVWF	STACK_4+2
$01BA	$085E			MOVF	FLOC_main+7, 0
$01BB	$00F7			MOVWF	STACK_4+3
$01BC	$2541			CALL	_mul_32x32_fp
$01BD	$0857			MOVF	FLOC_main+0, 0
$01BE	$00F4			MOVWF	STACK_4
$01BF	$0858			MOVF	FLOC_main+1, 0
$01C0	$00F5			MOVWF	STACK_4+1
$01C1	$0859			MOVF	FLOC_main+2, 0
$01C2	$00F6			MOVWF	STACK_4+2
$01C3	$085A			MOVF	FLOC_main+3, 0
$01C4	$00F7			MOVWF	STACK_4+3
$01C5	$23F9			CALL	_add_32x32_fp
$01C6	$0870			MOVF	STACK_0, 0
$01C7	$00DB			MOVWF	FLOC_main+4
$01C8	$0871			MOVF	STACK_0+1, 0
$01C9	$00DC			MOVWF	FLOC_main+5
$01CA	$0872			MOVF	STACK_0+2, 0
$01CB	$00DD			MOVWF	FLOC_main+6
$01CC	$0873			MOVF	STACK_0+3, 0
$01CD	$00DE			MOVWF	FLOC_main+7
$01CE	$085B			MOVF	FLOC_main+4, 0
$01CF	$00D3			MOVWF	_correction
$01D0	$085C			MOVF	FLOC_main+5, 0
$01D1	$00D4			MOVWF	_correction+1
$01D2	$085D			MOVF	FLOC_main+6, 0
$01D3	$00D5			MOVWF	_correction+2
$01D4	$085E			MOVF	FLOC_main+7, 0
$01D5	$00D6			MOVWF	_correction+3
;lfr_pid_3.c,140 :: 		rightpulse =  basespeed + correction;
$01D6	$083A			MOVF	_basespeed, 0
$01D7	$00F0			MOVWF	STACK_0
$01D8	$158A			BSF	PCLATH, 3
$01D9	$2154			CALL	_byte2double
$01DA	$118A			BCF	PCLATH, 3
$01DB	$0870			MOVF	STACK_0, 0
$01DC	$00D7			MOVWF	FLOC_main+0
$01DD	$0871			MOVF	STACK_0+1, 0
$01DE	$00D8			MOVWF	FLOC_main+1
$01DF	$0872			MOVF	STACK_0+2, 0
$01E0	$00D9			MOVWF	FLOC_main+2
$01E1	$0873			MOVF	STACK_0+3, 0
$01E2	$00DA			MOVWF	FLOC_main+3
$01E3	$0857			MOVF	FLOC_main+0, 0
$01E4	$00F0			MOVWF	STACK_0
$01E5	$0858			MOVF	FLOC_main+1, 0
$01E6	$00F1			MOVWF	STACK_0+1
$01E7	$0859			MOVF	FLOC_main+2, 0
$01E8	$00F2			MOVWF	STACK_0+2
$01E9	$085A			MOVF	FLOC_main+3, 0
$01EA	$00F3			MOVWF	STACK_0+3
$01EB	$085B			MOVF	FLOC_main+4, 0
$01EC	$00F4			MOVWF	STACK_4
$01ED	$085C			MOVF	FLOC_main+5, 0
$01EE	$00F5			MOVWF	STACK_4+1
$01EF	$085D			MOVF	FLOC_main+6, 0
$01F0	$00F6			MOVWF	STACK_4+2
$01F1	$085E			MOVF	FLOC_main+7, 0
$01F2	$00F7			MOVWF	STACK_4+3
$01F3	$23F9			CALL	_add_32x32_fp
$01F4	$0870			MOVF	STACK_0, 0
$01F5	$00BF			MOVWF	_rightpulse
$01F6	$0871			MOVF	STACK_0+1, 0
$01F7	$00C0			MOVWF	_rightpulse+1
$01F8	$0872			MOVF	STACK_0+2, 0
$01F9	$00C1			MOVWF	_rightpulse+2
$01FA	$0873			MOVF	STACK_0+3, 0
$01FB	$00C2			MOVWF	_rightpulse+3
;lfr_pid_3.c,141 :: 		leftpulse = basespeed - correction;
$01FC	$085B			MOVF	FLOC_main+4, 0
$01FD	$00F4			MOVWF	STACK_4
$01FE	$085C			MOVF	FLOC_main+5, 0
$01FF	$00F5			MOVWF	STACK_4+1
$0200	$085D			MOVF	FLOC_main+6, 0
$0201	$00F6			MOVWF	STACK_4+2
$0202	$085E			MOVF	FLOC_main+7, 0
$0203	$00F7			MOVWF	STACK_4+3
$0204	$0857			MOVF	FLOC_main+0, 0
$0205	$00F0			MOVWF	STACK_0
$0206	$0858			MOVF	FLOC_main+1, 0
$0207	$00F1			MOVWF	STACK_0+1
$0208	$0859			MOVF	FLOC_main+2, 0
$0209	$00F2			MOVWF	STACK_0+2
$020A	$085A			MOVF	FLOC_main+3, 0
$020B	$00F3			MOVWF	STACK_0+3
$020C	$2744			CALL	_sub_32x32_fp
$020D	$0870			MOVF	STACK_0, 0
$020E	$00C3			MOVWF	_leftpulse
$020F	$0871			MOVF	STACK_0+1, 0
$0210	$00C4			MOVWF	_leftpulse+1
$0211	$0872			MOVF	STACK_0+2, 0
$0212	$00C5			MOVWF	_leftpulse+2
$0213	$0873			MOVF	STACK_0+3, 0
$0214	$00C6			MOVWF	_leftpulse+3
;lfr_pid_3.c,142 :: 		motor_RF();
$0215	$158A			BSF	PCLATH, 3
$0216	$21D0			CALL	_motor_RF
$0217	$118A			BCF	PCLATH, 3
;lfr_pid_3.c,143 :: 		motor_LF();
$0218	$158A			BSF	PCLATH, 3
$0219	$21D5			CALL	_motor_LF
$021A	$118A			BCF	PCLATH, 3
;lfr_pid_3.c,145 :: 		if(leftpulse > 255)                  //LEFT CORRECTION EXCEED
$021B	$0843			MOVF	_leftpulse, 0
$021C	$00F4			MOVWF	STACK_4
$021D	$0844			MOVF	_leftpulse+1, 0
$021E	$00F5			MOVWF	STACK_4+1
$021F	$0845			MOVF	_leftpulse+2, 0
$0220	$00F6			MOVWF	STACK_4+2
$0221	$0846			MOVF	_leftpulse+3, 0
$0222	$00F7			MOVWF	STACK_4+3
$0223	$3000			MOVLW	0
$0224	$00F0			MOVWF	STACK_0
$0225	$3000			MOVLW	0
$0226	$00F1			MOVWF	STACK_0+1
$0227	$307F			MOVLW	127
$0228	$00F2			MOVWF	STACK_0+2
$0229	$3086			MOVLW	134
$022A	$00F3			MOVWF	STACK_0+3
$022B	$265D			CALL	_compare_double
$022C	$3001			MOVLW	1
$022D	$1803			BTFSC	STATUS, C
$022E	$3000			MOVLW	0
$022F	$00F0			MOVWF	STACK_0
$0230	$0870			MOVF	STACK_0, 0
$0231	$1903			BTFSC	STATUS, Z
$0232	$2A3B			GOTO	L_main_18
;lfr_pid_3.c,146 :: 		leftpulse = 255;
$0233	$3000			MOVLW	0
$0234	$00C3			MOVWF	_leftpulse
$0235	$3000			MOVLW	0
$0236	$00C4			MOVWF	_leftpulse+1
$0237	$307F			MOVLW	127
$0238	$00C5			MOVWF	_leftpulse+2
$0239	$3086			MOVLW	134
$023A	$00C6			MOVWF	_leftpulse+3
$023B	$	L_main_18:
;lfr_pid_3.c,148 :: 		if(rightpulse > 255)                 //RIGHT CORRECTION EXCEED
$023B	$083F			MOVF	_rightpulse, 0
$023C	$00F4			MOVWF	STACK_4
$023D	$0840			MOVF	_rightpulse+1, 0
$023E	$00F5			MOVWF	STACK_4+1
$023F	$0841			MOVF	_rightpulse+2, 0
$0240	$00F6			MOVWF	STACK_4+2
$0241	$0842			MOVF	_rightpulse+3, 0
$0242	$00F7			MOVWF	STACK_4+3
$0243	$3000			MOVLW	0
$0244	$00F0			MOVWF	STACK_0
$0245	$3000			MOVLW	0
$0246	$00F1			MOVWF	STACK_0+1
$0247	$307F			MOVLW	127
$0248	$00F2			MOVWF	STACK_0+2
$0249	$3086			MOVLW	134
$024A	$00F3			MOVWF	STACK_0+3
$024B	$265D			CALL	_compare_double
$024C	$3001			MOVLW	1
$024D	$1803			BTFSC	STATUS, C
$024E	$3000			MOVLW	0
$024F	$00F0			MOVWF	STACK_0
$0250	$0870			MOVF	STACK_0, 0
$0251	$1903			BTFSC	STATUS, Z
$0252	$2A5B			GOTO	L_main_19
;lfr_pid_3.c,149 :: 		rightpulse = 255;
$0253	$3000			MOVLW	0
$0254	$00BF			MOVWF	_rightpulse
$0255	$3000			MOVLW	0
$0256	$00C0			MOVWF	_rightpulse+1
$0257	$307F			MOVLW	127
$0258	$00C1			MOVWF	_rightpulse+2
$0259	$3086			MOVLW	134
$025A	$00C2			MOVWF	_rightpulse+3
$025B	$	L_main_19:
;lfr_pid_3.c,151 :: 		if(leftpulse < 0)                    //LEFT CORRECTION EXCEED
$025B	$01F4			CLRF	STACK_4
$025C	$01F5			CLRF	STACK_4+1
$025D	$01F6			CLRF	STACK_4+2
$025E	$01F7			CLRF	STACK_4+3
$025F	$0843			MOVF	_leftpulse, 0
$0260	$00F0			MOVWF	STACK_0
$0261	$0844			MOVF	_leftpulse+1, 0
$0262	$00F1			MOVWF	STACK_0+1
$0263	$0845			MOVF	_leftpulse+2, 0
$0264	$00F2			MOVWF	STACK_0+2
$0265	$0846			MOVF	_leftpulse+3, 0
$0266	$00F3			MOVWF	STACK_0+3
$0267	$265D			CALL	_compare_double
$0268	$3001			MOVLW	1
$0269	$1803			BTFSC	STATUS, C
$026A	$3000			MOVLW	0
$026B	$00F0			MOVWF	STACK_0
$026C	$0870			MOVF	STACK_0, 0
$026D	$1903			BTFSC	STATUS, Z
$026E	$2A73			GOTO	L_main_20
;lfr_pid_3.c,152 :: 		leftpulse = 0;
$026F	$01C3			CLRF	_leftpulse
$0270	$01C4			CLRF	_leftpulse+1
$0271	$01C5			CLRF	_leftpulse+2
$0272	$01C6			CLRF	_leftpulse+3
$0273	$	L_main_20:
;lfr_pid_3.c,154 :: 		if(rightpulse < 0)                   //RIGHT CORRECTION EXCEED
$0273	$01F4			CLRF	STACK_4
$0274	$01F5			CLRF	STACK_4+1
$0275	$01F6			CLRF	STACK_4+2
$0276	$01F7			CLRF	STACK_4+3
$0277	$083F			MOVF	_rightpulse, 0
$0278	$00F0			MOVWF	STACK_0
$0279	$0840			MOVF	_rightpulse+1, 0
$027A	$00F1			MOVWF	STACK_0+1
$027B	$0841			MOVF	_rightpulse+2, 0
$027C	$00F2			MOVWF	STACK_0+2
$027D	$0842			MOVF	_rightpulse+3, 0
$027E	$00F3			MOVWF	STACK_0+3
$027F	$265D			CALL	_compare_double
$0280	$3001			MOVLW	1
$0281	$1803			BTFSC	STATUS, C
$0282	$3000			MOVLW	0
$0283	$00F0			MOVWF	STACK_0
$0284	$0870			MOVF	STACK_0, 0
$0285	$1903			BTFSC	STATUS, Z
$0286	$2A8B			GOTO	L_main_21
;lfr_pid_3.c,155 :: 		rightpulse = 0;
$0287	$01BF			CLRF	_rightpulse
$0288	$01C0			CLRF	_rightpulse+1
$0289	$01C1			CLRF	_rightpulse+2
$028A	$01C2			CLRF	_rightpulse+3
$028B	$	L_main_21:
;lfr_pid_3.c,157 :: 		PWM1_CHANGE_DUTY(rightpulse);
$028B	$083F			MOVF	_rightpulse, 0
$028C	$00F0			MOVWF	STACK_0
$028D	$0840			MOVF	_rightpulse+1, 0
$028E	$00F1			MOVWF	STACK_0+1
$028F	$0841			MOVF	_rightpulse+2, 0
$0290	$00F2			MOVWF	STACK_0+2
$0291	$0842			MOVF	_rightpulse+3, 0
$0292	$00F3			MOVWF	STACK_0+3
$0293	$158A			BSF	PCLATH, 3
$0294	$2000			CALL	_double2byte
$0295	$118A			BCF	PCLATH, 3
$0296	$0870			MOVF	STACK_0, 0
$0297	$00E7			MOVWF	FARG_PWM1_Change_Duty+0
$0298	$158A			BSF	PCLATH, 3
$0299	$20AF			CALL	_PWM1_Change_Duty
$029A	$118A			BCF	PCLATH, 3
;lfr_pid_3.c,158 :: 		PWM2_CHANGE_DUTY(leftpulse);
$029B	$0843			MOVF	_leftpulse, 0
$029C	$00F0			MOVWF	STACK_0
$029D	$0844			MOVF	_leftpulse+1, 0
$029E	$00F1			MOVWF	STACK_0+1
$029F	$0845			MOVF	_leftpulse+2, 0
$02A0	$00F2			MOVWF	STACK_0+2
$02A1	$0846			MOVF	_leftpulse+3, 0
$02A2	$00F3			MOVWF	STACK_0+3
$02A3	$158A			BSF	PCLATH, 3
$02A4	$2000			CALL	_double2byte
$02A5	$118A			BCF	PCLATH, 3
$02A6	$0870			MOVF	STACK_0, 0
$02A7	$00E7			MOVWF	FARG_PWM2_Change_Duty+0
$02A8	$158A			BSF	PCLATH, 3
$02A9	$2043			CALL	_PWM2_Change_Duty
$02AA	$118A			BCF	PCLATH, 3
;lfr_pid_3.c,159 :: 		}
$02AB	$	L_main_17:
;lfr_pid_3.c,160 :: 		delay_ms(5);
$02AB	$300D			MOVLW	13
$02AC	$00FB			MOVWF	STACK_11
$02AD	$30FF			MOVLW	255
$02AE	$00FA			MOVWF	STACK_10
$02AF	$0BFB			DECFSZ	STACK_11, F
$02B0	$2AB2			GOTO	$+2
$02B1	$2AB5			GOTO	$+4
$02B2	$0BFA			DECFSZ	STACK_10, F
$02B3	$2AB2			GOTO	$-1
$02B4	$2AAF			GOTO	$-5
$02B5	$30F3			MOVLW	243
$02B6	$00FA			MOVWF	STACK_10
$02B7	$0BFA			DECFSZ	STACK_10, F
$02B8	$2AB7			GOTO	$-1
$02B9	$0000			NOP
;lfr_pid_3.c,161 :: 		}
$02BA	$280B			GOTO	L_main_8
;lfr_pid_3.c,162 :: 		}
$02BB	$2ABB			GOTO	$


//** Procedures locations **
//ADDRESS		PROCEDURE
//----------------------------------------------
$0004		main
$02BC		CalcError
$03F9		Add_32x32_FP
$049D		Div_32x32_FP
$0541		Mul_32x32_FP
$05A8		NRM4032
$060C		indicator
$065D		Compare_Double
$06AD		GlobalInilfr_pid_3
$06FA		Mul_16x16_S
$0744		Sub_32x32_FP
$0800		Double2Byte
$0843		PWM2_Change_Duty
$087E		NRM3232
$08AF		PWM1_Change_Duty
$08EA		Mul_16x16_U
$0915		initpwm
$0928		Word2Double
$093E		Equals_Double
$0954		Byte2Double
$0966		initport
$0975		SETIOV3224
$0984		SETFOV32
$0992		SETFUN32
$09A0		RES032
$09A9		PWM1_Start
$09B1		PWM2_Start
$09B9		FIXSIGN32
$09BF		PWM2_Init
$09C5		PWM1_Init
$09CB		motor_LB
$09D0		motor_RF
$09D5		motor_LF
$09DA		motor_RB
$09DF		SETFDZ32


//** Labels locations **
//ADDRESS		LABEL
//----------------------------------------------
$0004		_main:
$000B		L_main_8:
$0031		L_main_28:
$005B		L_main_29:
$005D		L161_ex_L_main_12:
$007C		L_main_12:
$00B0		L_main_30:
$00D6		L_main_14:
$00F9		L_main_15:
$00F9		L_main_16:
$00FA		L_main_13:
$023B		L_main_18:
$025B		L_main_19:
$0273		L_main_20:
$028B		L_main_21:
$02AB		L_main_17:
$02BC		_CalcError:
$02D6		L_CalcError_0:
$02DC		L_CalcError_1:
$02E2		L_CalcError_2:
$02E8		L_CalcError_3:
$02EE		L_CalcError_4:
$02F4		L_CalcError_5:
$02FA		L_CalcError_6:
$0302		L_CalcError_7:
$0311		L_CalcError_22:
$0318		L_CalcError_23:
$0338		L_CalcError_24:
$033F		L_CalcError_25:
$037F		L_CalcError_26:
$0386		L_CalcError_27:
$03F9		_Add_32x32_FP:
$041C		USEA32:
$0445		ALIGNB32:
$0448		ALOOPB32:
$044F		ALIGNED32:
$045C		AOK32:
$0475		ACOMP32:
$0485		JMPNRMRND4032:
$0489		JMPNRM4032:
$048D		JMPNRM32:
$0493		ADD_JMPSETFOV32:
$0499		JMPEEE:
$049B		ADD32EEE:
$049D		_Div_32x32_FP:
$049F		FPD32:
$04A5		D32BNE0:
$04AB		TALIGN32:
$04B7		TS1ALIGN32:
$04BB		TS2ALIGN32:
$04C8		DALIGN32OK:
$04CC		AGEB32:
$04D2		ALTB32:
$04D7		DARGOK32:
$04D9		DLOOP32:
$04E5		DS132:
$04E9		DS232:
$04F0		DREST32:
$04F5		DAREST32:
$04FB		DOK32:
$0500		DROUND32:
$0522		DIV32OK:
$052C		JPDSETFDZ32:
$0531		JPDRES032:
$0536		JPDSETFOV32:
$053B		JPDSETFUN32:
$053F		DIV32EEE:
$0541		_Mul_32x32_FP:
$0543		FPM32:
$0549		M32BNE0:
$0555		MTUN32:
$0558		MOK32:
$0566		MLOOP32:
$0568		MADD32:
$0572		MNOADD32:
$0582		MROUND32:
$0594		MUL32OK:
$0598		JPMRES032:
$059D		JPMSETFOV32:
$05A2		JPMSETFUN32:
$05A6		MUL32EEE:
$05A8		_NRM4032:
$05B1		NRM4032:
$05D1		NORM4032:
$05D7		NORM4032A:
$05E0		NRMRND4032:
$05F3		JMPRES032:
$05F9		JMPSETFUN32:
$05FF		JMPFIXSIGN32:
$0605		JMPSETFOV32:
$060A		NRM4032EEE:
$060C		_indicator:
$065D		_Compare_Double:
$066E		COMPARE_YNOTZERO:
$0671		COMPARE_XNOTZERO:
$0674		COMPARE_NOTZERO:
$0682		COMPARE_TESTALL:
$0689		COMPARE_C1:
$0690		COMPARE_C2:
$0697		COMPARE_C3:
$069D		GT_FALSE:
$06A1		GT_TRUE:
$06A5		COMPARE_GT:
$06A7		COMPARE_LT:
$06A9		COMPARE_EQU:
$06AD		GlobalInilfr_pid_3:
$06FA		_Mul_16x16_S:
$0744		_Sub_32x32_FP:
$0800		_Double2Byte:
$0802		INT32U08:
$0811		SETEXP08:
$081E		TSHIFT3208:
$0821		SHIFT3208:
$0825		SHIFT3208OK:
$082D		INT3208OK:
$082D		IRES008:
$082F		SETIOV08:
$0834		D2B_JPKSETIOV3224:
$0837		INT3208EOK:
$083A		INT3208EER:
$083C		INT3208EEE:
$0840		L_Double2Byte_0:
$0843		_PWM2_Change_Duty:
$0859		L_PWM2_Change_Duty_0:
$0860		L_PWM2_Change_Duty_1:
$087E		_NRM3232:
$0895		NORM3232:
$089B		NORM3232A:
$08A3		JPNRES032:
$08A7		JPNSETFUN32:
$08AB		JMPNFIXSIGN32:
$08AE		NORM32EEE:
$08AF		_PWM1_Change_Duty:
$08C5		L_PWM1_Change_Duty_2:
$08CC		L_PWM1_Change_Duty_3:
$08EA		_Mul_16x16_U:
$0915		_initpwm:
$0928		_Word2Double:
$0931		FLO16U32:
$093E		_Equals_Double:
$0951		EQU_FALSE:
$0954		_Byte2Double:
$0956		FLO08U32:
$0966		_initport:
$0975		_SETIOV3224:
$0982		SETIOV3224EEE:
$0984		_SETFOV32:
$0990		SETFOV32EEE:
$0992		_SETFUN32:
$099E		SETFUN32EEE:
$09A0		_RES032:
$09A9		_PWM1_Start:
$09B1		_PWM2_Start:
$09B9		_FIXSIGN32:
$09BF		_PWM2_Init:
$09C5		_PWM1_Init:
$09CB		_motor_LB:
$09D0		_motor_RF:
$09D5		_motor_LF:
$09DA		_motor_RB:
$09DF		_SETFDZ32:


//** Variables locations **
//ADDRESS		VARIABLE
//----------------------------------------------
$0000		INDF
$0002		PCL
$0003		STATUS
$0004		FSR
$0005		PORTA
$0007		PORTC
$0008		PORTD
$0009		PORTE
$000A		PCLATH
$0012		T2CON
$0015		CCPR1L
$0017		CCP1CON
$001B		CCPR2L
$001D		CCP2CON
$0020		___math_tempbD
$0021		_s1
$0023		_s2
$0025		_s3
$0027		_s4
$0029		_s5
$002B		_s6
$002D		_s7
$002F		_s8
$0031		_lastreading
$0032		_perror
$0036		_error
$003A		_basespeed
$003B		_Kp
$003C		_Ki
$003D		_Kd
$003E		_dt
$003F		_rightpulse
$0043		_leftpulse
$0047		_PROPORTIONAL
$004B		_INTEGRAL
$004F		_DERIVATIVE
$0053		_correction
$0057		
$0067		
$0067		FARG_PWM1_Change_Duty+0
$0067		FARG_PWM2_Change_Duty+0
$006B		FARG_PWM1_Init+0
$006B		FARG_PWM2_Init+0
$0070		STACK_0
$0071		STACK_1
$0072		STACK_2
$0073		STACK_3
$0074		STACK_4
$0075		STACK_5
$0076		STACK_6
$0077		STACK_7
$0078		STACK_8
$0079		STACK_9
$007A		STACK_10
$007B		STACK_11
$007C		STACK_12
$007D		STACK_13
$007E		STACK_14
$007F		STACK_15
$0085		TRISA
$0087		TRISC
$0088		TRISD
$0089		TRISE
$0092		PR2
$009F		ADCON1


