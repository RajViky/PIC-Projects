;  ASM code generated by mikroVirtualMachine for PIC - V. 8.2.0.0
;  Date/Time: 3/22/2011 9:30:04 PM
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$2804			GOTO	_main
$08F0	$	_RES032:
$08F0	$1303			BCF	STATUS, RP1
$08F1	$1283			BCF	STATUS, RP0
$08F2	$01F2			CLRF	STACK_2
$08F3	$01F1			CLRF	STACK_1
$08F4	$01F0			CLRF	STACK_0
$08F5	$01F8			CLRF	STACK_8
$08F6	$01F3			CLRF	STACK_3
$08F7	$3000			MOVLW	0
$08F8	$0008			RETURN
$08DA	$	_SETFUN32:
$08DA	$1303			BCF	STATUS, RP1
$08DB	$1283			BCF	STATUS, RP0
$08DC	$157B			BSF	STACK_11, 2
$08DD	$1FFB			BTFSS	STACK_11, 7
$08DE	$28E6			GOTO	SETFUN32EEE
$08DF	$3001			MOVLW	0x01
$08E0	$00F3			MOVWF	STACK_3
$08E1	$01F2			CLRF	STACK_2
$08E2	$01F1			CLRF	STACK_1
$08E3	$01F0			CLRF	STACK_0
$08E4	$0DFA			RLF	STACK_10, F
$08E5	$0CF2			RRF	STACK_2, F
$08E6	$	SETFUN32EEE:
$08E6	$30FF			MOVLW	0xFF
$08E7	$0008			RETURN
$090F	$	_FIXSIGN32:
$090F	$1303			BCF	STATUS, RP1
$0910	$1283			BCF	STATUS, RP0
$0911	$1FFA			BTFSS	STACK_10, 7
$0912	$13F2			BCF	STACK_2, 7
$0913	$3000			MOVLW	0
$0914	$0008			RETURN
$08CC	$	_SETFOV32:
$08CC	$1303			BCF	STATUS, RP1
$08CD	$1283			BCF	STATUS, RP0
$08CE	$14FB			BSF	STACK_11, 1
$08CF	$1FFB			BTFSS	STACK_11, 7
$08D0	$28D8			GOTO	SETFOV32EEE
$08D1	$30FF			MOVLW	0xFF
$08D2	$00F3			MOVWF	STACK_3
$08D3	$00F2			MOVWF	STACK_2
$08D4	$00F1			MOVWF	STACK_1
$08D5	$00F0			MOVWF	STACK_0
$08D6	$0DFA			RLF	STACK_10, F
$08D7	$0CF2			RRF	STACK_2, F
$08D8	$	SETFOV32EEE:
$08D8	$30FF			MOVLW	0xFF
$08D9	$0008			RETURN
$04F9	$	_NRM4032:
$04F9	$1303			BCF	STATUS, RP1
$04FA	$1283			BCF	STATUS, RP0
$04FB	$187C			BTFSC	STACK_12, 0
$04FC	$2D31			GOTO	NRMRND4032
$04FD	$18FC			BTFSC	STACK_12, 1
$04FE	$2D02			GOTO	NRM4032
$04FF	$197C			BTFSC	STACK_12, 2
$0500	$2D56			GOTO	JMPSETFOV32
$0501	$2CFB			GOTO	$-6
$0502	$	NRM4032:
$0502	$01A0			CLRF	__math_tempbD
$0503	$0872			MOVF	STACK_2, W
$0504	$1D03			BTFSS	STATUS, Z
$0505	$2D22			GOTO	NORM4032
$0506	$0871			MOVF	STACK_1, W
$0507	$00F2			MOVWF	STACK_2
$0508	$0870			MOVF	STACK_0, W
$0509	$00F1			MOVWF	STACK_1
$050A	$0878			MOVF	STACK_8, W
$050B	$00F0			MOVWF	STACK_0
$050C	$01F8			CLRF	STACK_8
$050D	$15A0			BSF	__math_tempbD, 3
$050E	$0872			MOVF	STACK_2, W
$050F	$1D03			BTFSS	STATUS, Z
$0510	$2D22			GOTO	NORM4032
$0511	$0871			MOVF	STACK_1, W
$0512	$00F2			MOVWF	STACK_2
$0513	$0870			MOVF	STACK_0, W
$0514	$00F1			MOVWF	STACK_1
$0515	$01F0			CLRF	STACK_0
$0516	$11A0			BCF	__math_tempbD, 3
$0517	$1620			BSF	__math_tempbD, 4
$0518	$0872			MOVF	STACK_2, W
$0519	$1D03			BTFSS	STATUS, Z
$051A	$2D22			GOTO	NORM4032
$051B	$0871			MOVF	STACK_1, W
$051C	$00F2			MOVWF	STACK_2
$051D	$01F1			CLRF	STACK_1
$051E	$15A0			BSF	__math_tempbD, 3
$051F	$0872			MOVF	STACK_2, W
$0520	$1903			BTFSC	STATUS, Z
$0521	$2D44			GOTO	JMPRES032
$0522	$	NORM4032:
$0522	$0820			MOVF	__math_tempbD, W
$0523	$02F3			SUBWF	STACK_3, F
$0524	$1D03			BTFSS	STATUS, Z
$0525	$1C03			BTFSS	STATUS, C
$0526	$2D4A			GOTO	JMPSETFUN32
$0527	$1003			BCF	STATUS, C
$0528	$	NORM4032A:
$0528	$1BF2			BTFSC	STACK_2, 7
$0529	$2D31			GOTO	NRMRND4032
$052A	$0DF8			RLF	STACK_8, F
$052B	$0DF0			RLF	STACK_0, F
$052C	$0DF1			RLF	STACK_1, F
$052D	$0DF2			RLF	STACK_2, F
$052E	$0BF3			DECFSZ	STACK_3, F
$052F	$2D28			GOTO	NORM4032A
$0530	$2D4A			GOTO	JMPSETFUN32
$0531	$	NRMRND4032:
$0531	$1B7B			BTFSC	STACK_11, 6
$0532	$1C70			BTFSS	STACK_0, 0
$0533	$2D50			GOTO	JMPFIXSIGN32
$0534	$1FF8			BTFSS	STACK_8, 7
$0535	$2D50			GOTO	JMPFIXSIGN32
$0536	$0AF0			INCF	STACK_0, F
$0537	$1903			BTFSC	STATUS, Z
$0538	$0AF1			INCF	STACK_1, F
$0539	$1903			BTFSC	STATUS, Z
$053A	$0AF2			INCF	STACK_2, F
$053B	$1D03			BTFSS	STATUS, Z
$053C	$2D50			GOTO	JMPFIXSIGN32
$053D	$0CF2			RRF	STACK_2, F
$053E	$0CF1			RRF	STACK_1, F
$053F	$0CF0			RRF	STACK_0, F
$0540	$0AF3			INCF	STACK_3, F
$0541	$1903			BTFSC	STATUS, Z
$0542	$2D56			GOTO	JMPSETFOV32
$0543	$2D50			GOTO	JMPFIXSIGN32
$0544	$	JMPRES032:
$0544	$3001			MOVLW	0x01
$0545	$00FC			MOVWF	STACK_12
$0546	$158A			BSF	PCLATH, 3
$0547	$20F0			CALL	_RES032
$0548	$118A			BCF	PCLATH, 3
$0549	$2D5B			GOTO	NRM4032EEE
$054A	$	JMPSETFUN32:
$054A	$3002			MOVLW	0x02
$054B	$00FC			MOVWF	STACK_12
$054C	$158A			BSF	PCLATH, 3
$054D	$20DA			CALL	_SETFUN32
$054E	$118A			BCF	PCLATH, 3
$054F	$2D5B			GOTO	NRM4032EEE
$0550	$	JMPFIXSIGN32:
$0550	$3004			MOVLW	0x04
$0551	$00FC			MOVWF	STACK_12
$0552	$158A			BSF	PCLATH, 3
$0553	$210F			CALL	_FIXSIGN32
$0554	$118A			BCF	PCLATH, 3
$0555	$2D5B			GOTO	NRM4032EEE
$0556	$	JMPSETFOV32:
$0556	$3008			MOVLW	0x08
$0557	$00FC			MOVWF	STACK_12
$0558	$158A			BSF	PCLATH, 3
$0559	$20CC			CALL	_SETFOV32
$055A	$118A			BCF	PCLATH, 3
$055B	$	NRM4032EEE:
$055B	$0000			NOP
$055C	$0008			RETURN
$0800	$	_NRM3232:
$0800	$1303			BCF	STATUS, RP1
$0801	$1283			BCF	STATUS, RP0
$0802	$01A0			CLRF	__math_tempbD
$0803	$0872			MOVF	STACK_2, W
$0804	$1D03			BTFSS	STATUS, Z
$0805	$2817			GOTO	NORM3232
$0806	$0871			MOVF	STACK_1, W
$0807	$00F2			MOVWF	STACK_2
$0808	$0870			MOVF	STACK_0, W
$0809	$00F1			MOVWF	STACK_1
$080A	$01F0			CLRF	STACK_0
$080B	$15A0			BSF	__math_tempbD, 3
$080C	$0872			MOVF	STACK_2, W
$080D	$1D03			BTFSS	STATUS, Z
$080E	$2817			GOTO	NORM3232
$080F	$0871			MOVF	STACK_1, W
$0810	$00F2			MOVWF	STACK_2
$0811	$01F1			CLRF	STACK_1
$0812	$11A0			BCF	__math_tempbD, 3
$0813	$1620			BSF	__math_tempbD, 4
$0814	$0872			MOVF	STACK_2, W
$0815	$1903			BTFSC	STATUS, Z
$0816	$2825			GOTO	JPNRES032
$0817	$	NORM3232:
$0817	$0820			MOVF	__math_tempbD, W
$0818	$02F3			SUBWF	STACK_3, F
$0819	$1D03			BTFSS	STATUS, Z
$081A	$1C03			BTFSS	STATUS, C
$081B	$2829			GOTO	JPNSETFUN32
$081C	$1003			BCF	STATUS, C
$081D	$	NORM3232A:
$081D	$1BF2			BTFSC	STACK_2, 7
$081E	$282D			GOTO	JMPNFIXSIGN32
$081F	$0DF0			RLF	STACK_0, F
$0820	$0DF1			RLF	STACK_1, F
$0821	$0DF2			RLF	STACK_2, F
$0822	$0BF3			DECFSZ	STACK_3, F
$0823	$281D			GOTO	NORM3232A
$0824	$2829			GOTO	JPNSETFUN32
$0825	$	JPNRES032:
$0825	$3001			MOVLW	0x01
$0826	$00FC			MOVWF	STACK_12
$0827	$20F0			CALL	_RES032
$0828	$2830			GOTO	NORM32EEE
$0829	$	JPNSETFUN32:
$0829	$3002			MOVLW	0x02
$082A	$00FC			MOVWF	STACK_12
$082B	$20DA			CALL	_SETFUN32
$082C	$2830			GOTO	NORM32EEE
$082D	$	JMPNFIXSIGN32:
$082D	$3004			MOVLW	0x04
$082E	$00FC			MOVWF	STACK_12
$082F	$210F			CALL	_FIXSIGN32
$0830	$	NORM32EEE:
$0830	$0008			RETURN
$092F	$	_SETFDZ32:
$092F	$1303			BCF	STATUS, RP1
$0930	$1283			BCF	STATUS, RP0
$0931	$15FB			BSF	STACK_11, 3
$0932	$30FF			MOVLW	0xFF
$0933	$0008			RETURN
$034A	$	_Add_32x32_FP:
$034A	$1303			BCF	STATUS, RP1
$034B	$1283			BCF	STATUS, RP0
$034C	$0872			MOVF	STACK_2, W
$034D	$0676			XORWF	STACK_6, W
$034E	$00A0			MOVWF	__math_tempbD
$034F	$01F8			CLRF	STACK_8
$0350	$01F9			CLRF	STACK_9
$0351	$0873			MOVF	STACK_3, W
$0352	$0277			SUBWF	STACK_7, W
$0353	$1C03			BTFSS	STATUS, C
$0354	$2B6D			GOTO	USEA32
$0355	$0877			MOVF	STACK_7, W
$0356	$00FD			MOVWF	STACK_13
$0357	$0873			MOVF	STACK_3, W
$0358	$00F7			MOVWF	STACK_7
$0359	$087D			MOVF	STACK_13, W
$035A	$00F3			MOVWF	STACK_3
$035B	$0876			MOVF	STACK_6, W
$035C	$00FD			MOVWF	STACK_13
$035D	$0872			MOVF	STACK_2, W
$035E	$00F6			MOVWF	STACK_6
$035F	$087D			MOVF	STACK_13, W
$0360	$00F2			MOVWF	STACK_2
$0361	$0875			MOVF	STACK_5, W
$0362	$00FD			MOVWF	STACK_13
$0363	$0871			MOVF	STACK_1, W
$0364	$00F5			MOVWF	STACK_5
$0365	$087D			MOVF	STACK_13, W
$0366	$00F1			MOVWF	STACK_1
$0367	$0874			MOVF	STACK_4, W
$0368	$00FD			MOVWF	STACK_13
$0369	$0870			MOVF	STACK_0, W
$036A	$00F4			MOVWF	STACK_4
$036B	$087D			MOVF	STACK_13, W
$036C	$00F0			MOVWF	STACK_0
$036D	$	USEA32:
$036D	$0877			MOVF	STACK_7, W
$036E	$1903			BTFSC	STATUS, Z
$036F	$2BEA			GOTO	JMPEEE
$0370	$0872			MOVF	STACK_2, W
$0371	$00FA			MOVWF	STACK_10
$0372	$17F2			BSF	STACK_2, 7
$0373	$17F6			BSF	STACK_6, 7
$0374	$0877			MOVF	STACK_7, W
$0375	$0273			SUBWF	STACK_3, W
$0376	$00F7			MOVWF	STACK_7
$0377	$1903			BTFSC	STATUS, Z
$0378	$2BA0			GOTO	ALIGNED32
$0379	$3008			MOVLW	8
$037A	$0277			SUBWF	STACK_7, W
$037B	$1C03			BTFSS	STATUS, C
$037C	$2B96			GOTO	ALIGNB32
$037D	$00F7			MOVWF	STACK_7
$037E	$0874			MOVF	STACK_4, W
$037F	$00F9			MOVWF	STACK_9
$0380	$0875			MOVF	STACK_5, W
$0381	$00F4			MOVWF	STACK_4
$0382	$0876			MOVF	STACK_6, W
$0383	$00F5			MOVWF	STACK_5
$0384	$01F6			CLRF	STACK_6
$0385	$3008			MOVLW	8
$0386	$0277			SUBWF	STACK_7, W
$0387	$1C03			BTFSS	STATUS, C
$0388	$2B96			GOTO	ALIGNB32
$0389	$00F7			MOVWF	STACK_7
$038A	$0874			MOVF	STACK_4, W
$038B	$00F9			MOVWF	STACK_9
$038C	$0875			MOVF	STACK_5, W
$038D	$00F4			MOVWF	STACK_4
$038E	$01F5			CLRF	STACK_5
$038F	$3008			MOVLW	8
$0390	$0277			SUBWF	STACK_7, W
$0391	$1C03			BTFSS	STATUS, C
$0392	$2B96			GOTO	ALIGNB32
$0393	$087A			MOVF	STACK_10, W
$0394	$00F2			MOVWF	STACK_2
$0395	$2BEA			GOTO	JMPEEE
$0396	$	ALIGNB32:
$0396	$0877			MOVF	STACK_7, W
$0397	$1903			BTFSC	STATUS, Z
$0398	$2BA0			GOTO	ALIGNED32
$0399	$	ALOOPB32:
$0399	$1003			BCF	STATUS, C
$039A	$0CF6			RRF	STACK_6, F
$039B	$0CF5			RRF	STACK_5, F
$039C	$0CF4			RRF	STACK_4, F
$039D	$0CF9			RRF	STACK_9, F
$039E	$0BF7			DECFSZ	STACK_7, F
$039F	$2B99			GOTO	ALOOPB32
$03A0	$	ALIGNED32:
$03A0	$1FA0			BTFSS	__math_tempbD, 7
$03A1	$2BAD			GOTO	AOK32
$03A2	$09F9			COMF	STACK_9, F
$03A3	$09F4			COMF	STACK_4, F
$03A4	$09F5			COMF	STACK_5, F
$03A5	$09F6			COMF	STACK_6, F
$03A6	$0AF9			INCF	STACK_9, F
$03A7	$1903			BTFSC	STATUS, Z
$03A8	$0AF4			INCF	STACK_4, F
$03A9	$1903			BTFSC	STATUS, Z
$03AA	$0AF5			INCF	STACK_5, F
$03AB	$1903			BTFSC	STATUS, Z
$03AC	$0AF6			INCF	STACK_6, F
$03AD	$	AOK32:
$03AD	$0879			MOVF	STACK_9, W
$03AE	$07F8			ADDWF	STACK_8, F
$03AF	$0874			MOVF	STACK_4, W
$03B0	$1803			BTFSC	STATUS, C
$03B1	$0F74			INCFSZ	STACK_4, W
$03B2	$07F0			ADDWF	STACK_0, F
$03B3	$0875			MOVF	STACK_5, W
$03B4	$1803			BTFSC	STATUS, C
$03B5	$0F75			INCFSZ	STACK_5, W
$03B6	$07F1			ADDWF	STACK_1, F
$03B7	$0876			MOVF	STACK_6, W
$03B8	$1803			BTFSC	STATUS, C
$03B9	$0F76			INCFSZ	STACK_6, W
$03BA	$07F2			ADDWF	STACK_2, F
$03BB	$1BA0			BTFSC	__math_tempbD, 7
$03BC	$2BC6			GOTO	ACOMP32
$03BD	$1C03			BTFSS	STATUS, C
$03BE	$2BD6			GOTO	JMPNRMRND4032
$03BF	$0CF2			RRF	STACK_2, F
$03C0	$0CF1			RRF	STACK_1, F
$03C1	$0CF0			RRF	STACK_0, F
$03C2	$0CF8			RRF	STACK_8, F
$03C3	$0FF3			INCFSZ	STACK_3, F
$03C4	$2BD6			GOTO	JMPNRMRND4032
$03C5	$2BE4			GOTO	ADD_JMPSETFOV32
$03C6	$	ACOMP32:
$03C6	$1803			BTFSC	STATUS, C
$03C7	$2BDA			GOTO	JMPNRM4032
$03C8	$09F8			COMF	STACK_8, F
$03C9	$09F0			COMF	STACK_0, F
$03CA	$09F1			COMF	STACK_1, F
$03CB	$09F2			COMF	STACK_2, F
$03CC	$0AF8			INCF	STACK_8, F
$03CD	$1903			BTFSC	STATUS, Z
$03CE	$0AF0			INCF	STACK_0, F
$03CF	$1903			BTFSC	STATUS, Z
$03D0	$0AF1			INCF	STACK_1, F
$03D1	$1903			BTFSC	STATUS, Z
$03D2	$0AF2			INCF	STACK_2, F
$03D3	$3080			MOVLW	0x80
$03D4	$06FA			XORWF	STACK_10, F
$03D5	$2BDE			GOTO	JMPNRM32
$03D6	$	JMPNRMRND4032:
$03D6	$3001			MOVLW	0x01
$03D7	$00FC			MOVWF	STACK_12
$03D8	$24F9			CALL	_NRM4032
$03D9	$2BEC			GOTO	ADD32EEE
$03DA	$	JMPNRM4032:
$03DA	$3002			MOVLW	0x02
$03DB	$00FC			MOVWF	STACK_12
$03DC	$24F9			CALL	_NRM4032
$03DD	$2BEC			GOTO	ADD32EEE
$03DE	$	JMPNRM32:
$03DE	$3004			MOVLW	0x04
$03DF	$00FC			MOVWF	STACK_12
$03E0	$158A			BSF	PCLATH, 3
$03E1	$2000			CALL	_NRM3232
$03E2	$118A			BCF	PCLATH, 3
$03E3	$2BEC			GOTO	ADD32EEE
$03E4	$	ADD_JMPSETFOV32:
$03E4	$3008			MOVLW	0x08
$03E5	$00FC			MOVWF	STACK_12
$03E6	$158A			BSF	PCLATH, 3
$03E7	$20CC			CALL	_SETFOV32
$03E8	$118A			BCF	PCLATH, 3
$03E9	$2BEC			GOTO	ADD32EEE
$03EA	$	JMPEEE:
$03EA	$3000			MOVLW	0x00
$03EB	$00FC			MOVWF	STACK_12
$03EC	$	ADD32EEE:
$03EC	$0000			NOP
$03ED	$0008			RETURN
$08F9	$	_PWM1_Start:
$08F9	$1303			BCF	STATUS, RP1
$08FA	$1683			BSF	STATUS, RP0
$08FB	$1107			BCF	TRISC, 2
$08FC	$1283			BCF	STATUS, RP0
$08FD	$1512			BSF	T2CON, 2
$08FE	$300C			MOVLW	12
$08FF	$0497			IORWF	CCP1CON, 1
$0900	$0008			RETURN
$0901	$	_PWM2_Start:
$0901	$1303			BCF	STATUS, RP1
$0902	$1683			BSF	STATUS, RP0
$0903	$1087			BCF	TRISC, 1
$0904	$1283			BCF	STATUS, RP0
$0905	$1512			BSF	T2CON, 2
$0906	$300C			MOVLW	12
$0907	$049D			IORWF	CCP2CON, 1
$0908	$0008			RETURN
$0915	$	_PWM1_Init:
$0915	$1303			BCF	STATUS, RP1
$0916	$1283			BCF	STATUS, RP0
$0917	$0195			CLRF	CCPR1L, 1
$0918	$1217			BCF	CCP1CON, 4
$0919	$1297			BCF	CCP1CON, 5
$091A	$0008			RETURN
$0909	$	_PWM2_Init:
$0909	$1303			BCF	STATUS, RP1
$090A	$1283			BCF	STATUS, RP0
$090B	$019B			CLRF	CCPR2L, 1
$090C	$121D			BCF	CCP2CON, 4
$090D	$129D			BCF	CCP2CON, 5
$090E	$0008			RETURN
$070F	$	_Mul_16x16_U:
$070F	$1303			BCF	STATUS, RP1
$0710	$1283			BCF	STATUS, RP0
$0711	$01FB			CLRF	STACK_11
$0712	$01FA			CLRF	STACK_10
$0713	$01F9			CLRF	STACK_9
$0714	$3080			MOVLW	128
$0715	$00F8			MOVWF	STACK_8
$0716	$0CF1			RRF	STACK_1, F
$0717	$0CF0			RRF	STACK_0, F
$0718	$1C03			BTFSS	STATUS, C
$0719	$2F23			GOTO	$+10
$071A	$0874			MOVF	STACK_4, W
$071B	$07F9			ADDWF	STACK_9, F
$071C	$0875			MOVF	STACK_5, W
$071D	$1803			BTFSC	STATUS, C
$071E	$0F75			INCFSZ	STACK_5, W
$071F	$07FA			ADDWF	STACK_10, F
$0720	$1803			BTFSC	STATUS, C
$0721	$0AFB			INCF	STACK_11, F
$0722	$1003			BCF	STATUS, C
$0723	$1FF0			BTFSS	STACK_0, 7
$0724	$2F2B			GOTO	$+7
$0725	$0874			MOVF	STACK_4, W
$0726	$07FA			ADDWF	STACK_10, F
$0727	$0875			MOVF	STACK_5, W
$0728	$1803			BTFSC	STATUS, C
$0729	$0F75			INCFSZ	STACK_5, W
$072A	$07FB			ADDWF	STACK_11, F
$072B	$0CFB			RRF	STACK_11, F
$072C	$0CFA			RRF	STACK_10, F
$072D	$0CF9			RRF	STACK_9, F
$072E	$0CF8			RRF	STACK_8, F
$072F	$1C03			BTFSS	STATUS, C
$0730	$2F16			GOTO	$-26
$0731	$087B			MOVF	STACK_11, W
$0732	$00F3			MOVWF	STACK_3
$0733	$087A			MOVF	STACK_10, W
$0734	$00F2			MOVWF	STACK_2
$0735	$0879			MOVF	STACK_9, W
$0736	$00F1			MOVWF	STACK_1
$0737	$0878			MOVF	STACK_8, W
$0738	$00F0			MOVWF	STACK_0
$0739	$0008			RETURN
$087D	$	_Word2Double:
$087D	$1303			BCF	STATUS, RP1
$087E	$1283			BCF	STATUS, RP0
$087F	$0870			MOVF	STACK_0, W
$0880	$00F8			MOVWF	STACK_8
$0881	$0871			MOVF	STACK_1, W
$0882	$00F0			MOVWF	STACK_0
$0883	$01F1			CLRF	STACK_1
$0884	$01F2			CLRF	STACK_2
$0885	$01F3			CLRF	STACK_3
$0886	$	FLO16U32:
$0886	$01FB			CLRF	STACK_11
$0887	$01FC			CLRF	STACK_12
$0888	$3096			MOVLW	150
$0889	$00F3			MOVWF	STACK_3
$088A	$01FA			CLRF	STACK_10
$088B	$0870			MOVF	STACK_0, W
$088C	$00F1			MOVWF	STACK_1
$088D	$0878			MOVF	STACK_8, W
$088E	$00F0			MOVWF	STACK_0
$088F	$01F8			CLRF	STACK_8
$0890	$01F2			CLRF	STACK_2
$0891	$2000			CALL	_NRM3232
$0892	$0008			RETURN
$03EE	$	_Div_32x32_FP:
$03EE	$1303			BCF	STATUS, RP1
$03EF	$1283			BCF	STATUS, RP0
$03F0	$	FPD32:
$03F0	$0877			MOVF	STACK_7, W
$03F1	$1903			BTFSC	STATUS, Z
$03F2	$2C7D			GOTO	JPDSETFDZ32
$03F3	$0873			MOVF	STACK_3, W
$03F4	$1903			BTFSC	STATUS, Z
$03F5	$2C82			GOTO	JPDRES032
$03F6	$	D32BNE0:
$03F6	$0872			MOVF	STACK_2, W
$03F7	$0676			XORWF	STACK_6, W
$03F8	$3980			ANDLW	128
$03F9	$00FA			MOVWF	STACK_10
$03FA	$17F2			BSF	STACK_2, 7
$03FB	$17F6			BSF	STACK_6, 7
$03FC	$	TALIGN32:
$03FC	$01A0			CLRF	__math_tempbD
$03FD	$0872			MOVF	STACK_2, W
$03FE	$00F8			MOVWF	STACK_8
$03FF	$0871			MOVF	STACK_1, W
$0400	$00FC			MOVWF	STACK_12
$0401	$0870			MOVF	STACK_0, W
$0402	$00FD			MOVWF	STACK_13
$0403	$0874			MOVF	STACK_4, W
$0404	$02FD			SUBWF	STACK_13, F
$0405	$0875			MOVF	STACK_5, W
$0406	$1C03			BTFSS	STATUS, C
$0407	$0F75			INCFSZ	STACK_5, W
$0408	$	TS1ALIGN32:
$0408	$02FC			SUBWF	STACK_12, F
$0409	$0876			MOVF	STACK_6, W
$040A	$1C03			BTFSS	STATUS, C
$040B	$0F76			INCFSZ	STACK_6, W
$040C	$	TS2ALIGN32:
$040C	$02F8			SUBWF	STACK_8, F
$040D	$01F8			CLRF	STACK_8
$040E	$01FC			CLRF	STACK_12
$040F	$01FD			CLRF	STACK_13
$0410	$1C03			BTFSS	STATUS, C
$0411	$2C19			GOTO	DALIGN32OK
$0412	$1003			BCF	STATUS, C
$0413	$0CF2			RRF	STACK_2, F
$0414	$0CF1			RRF	STACK_1, F
$0415	$0CF0			RRF	STACK_0, F
$0416	$0CF8			RRF	STACK_8, F
$0417	$3001			MOVLW	0x01
$0418	$00A0			MOVWF	__math_tempbD
$0419	$	DALIGN32OK:
$0419	$0877			MOVF	STACK_7, W
$041A	$02F3			SUBWF	STACK_3, F
$041B	$1C03			BTFSS	STATUS, C
$041C	$2C23			GOTO	ALTB32
$041D	$	AGEB32:
$041D	$307E			MOVLW	126
$041E	$0720			ADDWF	__math_tempbD, W
$041F	$07F3			ADDWF	STACK_3, F
$0420	$1803			BTFSC	STATUS, C
$0421	$2C87			GOTO	JPDSETFOV32
$0422	$2C28			GOTO	DARGOK32
$0423	$	ALTB32:
$0423	$307E			MOVLW	126
$0424	$0720			ADDWF	__math_tempbD, W
$0425	$07F3			ADDWF	STACK_3, F
$0426	$1C03			BTFSS	STATUS, C
$0427	$2C8C			GOTO	JPDSETFUN32
$0428	$	DARGOK32:
$0428	$3018			MOVLW	24
$0429	$07FA			ADDWF	STACK_10, F
$042A	$	DLOOP32:
$042A	$0DFD			RLF	STACK_13, F
$042B	$0DFC			RLF	STACK_12, F
$042C	$0DF8			RLF	STACK_8, F
$042D	$0DF0			RLF	STACK_0, F
$042E	$0DF1			RLF	STACK_1, F
$042F	$0DF2			RLF	STACK_2, F
$0430	$0DA0			RLF	__math_tempbD, F
$0431	$0874			MOVF	STACK_4, W
$0432	$02F0			SUBWF	STACK_0, F
$0433	$0875			MOVF	STACK_5, W
$0434	$1C03			BTFSS	STATUS, C
$0435	$0F75			INCFSZ	STACK_5, W
$0436	$	DS132:
$0436	$02F1			SUBWF	STACK_1, F
$0437	$0876			MOVF	STACK_6, W
$0438	$1C03			BTFSS	STATUS, C
$0439	$0F76			INCFSZ	STACK_6, W
$043A	$	DS232:
$043A	$02F2			SUBWF	STACK_2, F
$043B	$0D76			RLF	STACK_6, W
$043C	$04A0			IORWF	__math_tempbD, F
$043D	$1C20			BTFSS	__math_tempbD, 0
$043E	$2C41			GOTO	DREST32
$043F	$147D			BSF	STACK_13, 0
$0440	$2C4C			GOTO	DOK32
$0441	$	DREST32:
$0441	$0874			MOVF	STACK_4, W
$0442	$07F0			ADDWF	STACK_0, F
$0443	$0875			MOVF	STACK_5, W
$0444	$1803			BTFSC	STATUS, C
$0445	$0F75			INCFSZ	STACK_5, W
$0446	$	DAREST32:
$0446	$07F1			ADDWF	STACK_1, F
$0447	$0876			MOVF	STACK_6, W
$0448	$1803			BTFSC	STATUS, C
$0449	$0A76			INCF	STACK_6, W
$044A	$07F2			ADDWF	STACK_2, F
$044B	$107D			BCF	STACK_13, 0
$044C	$	DOK32:
$044C	$03FA			DECF	STACK_10, F
$044D	$301F			MOVLW	31
$044E	$057A			ANDWF	STACK_10, W
$044F	$1D03			BTFSS	STATUS, Z
$0450	$2C2A			GOTO	DLOOP32
$0451	$	DROUND32:
$0451	$1B7B			BTFSC	STACK_11, 6
$0452	$1C7D			BTFSS	STACK_13, 0
$0453	$2C73			GOTO	DIV32OK
$0454	$1003			BCF	STATUS, C
$0455	$0DF0			RLF	STACK_0, F
$0456	$0DF1			RLF	STACK_1, F
$0457	$0DF2			RLF	STACK_2, F
$0458	$0DA0			RLF	__math_tempbD, F
$0459	$0874			MOVF	STACK_4, W
$045A	$02F0			SUBWF	STACK_0, F
$045B	$0875			MOVF	STACK_5, W
$045C	$1C03			BTFSS	STATUS, C
$045D	$0F75			INCFSZ	STACK_5, W
$045E	$02F1			SUBWF	STACK_1, F
$045F	$0876			MOVF	STACK_6, W
$0460	$1C03			BTFSS	STATUS, C
$0461	$0F76			INCFSZ	STACK_6, W
$0462	$02F2			SUBWF	STACK_2, F
$0463	$0D76			RLF	STACK_6, W
$0464	$0420			IORWF	__math_tempbD, W
$0465	$3901			ANDLW	0x01
$0466	$07FD			ADDWF	STACK_13, F
$0467	$1803			BTFSC	STATUS, C
$0468	$0AFC			INCF	STACK_12, F
$0469	$1903			BTFSC	STATUS, Z
$046A	$0AF8			INCF	STACK_8, F
$046B	$1D03			BTFSS	STATUS, Z
$046C	$2C73			GOTO	DIV32OK
$046D	$0CF8			RRF	STACK_8, F
$046E	$0CFC			RRF	STACK_12, F
$046F	$0CFD			RRF	STACK_13, F
$0470	$0AF3			INCF	STACK_3, F
$0471	$1903			BTFSC	STATUS, Z
$0472	$2C87			GOTO	JPDSETFOV32
$0473	$	DIV32OK:
$0473	$1FFA			BTFSS	STACK_10, 7
$0474	$13F8			BCF	STACK_8, 7
$0475	$0878			MOVF	STACK_8, W
$0476	$00F2			MOVWF	STACK_2
$0477	$087C			MOVF	STACK_12, W
$0478	$00F1			MOVWF	STACK_1
$0479	$087D			MOVF	STACK_13, W
$047A	$00F0			MOVWF	STACK_0
$047B	$3000			MOVLW	0x00
$047C	$2C90			GOTO	DIV32EEE
$047D	$	JPDSETFDZ32:
$047D	$3001			MOVLW	0x01
$047E	$158A			BSF	PCLATH, 3
$047F	$212F			CALL	_SETFDZ32
$0480	$118A			BCF	PCLATH, 3
$0481	$2C90			GOTO	DIV32EEE
$0482	$	JPDRES032:
$0482	$3002			MOVLW	0x02
$0483	$158A			BSF	PCLATH, 3
$0484	$20F0			CALL	_RES032
$0485	$118A			BCF	PCLATH, 3
$0486	$2C90			GOTO	DIV32EEE
$0487	$	JPDSETFOV32:
$0487	$3004			MOVLW	0x04
$0488	$158A			BSF	PCLATH, 3
$0489	$20CC			CALL	_SETFOV32
$048A	$118A			BCF	PCLATH, 3
$048B	$2C90			GOTO	DIV32EEE
$048C	$	JPDSETFUN32:
$048C	$3008			MOVLW	0x08
$048D	$158A			BSF	PCLATH, 3
$048E	$20DA			CALL	_SETFUN32
$048F	$118A			BCF	PCLATH, 3
$0490	$	DIV32EEE:
$0490	$0000			NOP
$0491	$0008			RETURN
$08E8	$	_Sub_32x32_FP:
$08E8	$1303			BCF	STATUS, RP1
$08E9	$1283			BCF	STATUS, RP0
$08EA	$3080			MOVLW	0x80
$08EB	$06F6			XORWF	STACK_6, F
$08EC	$118A			BCF	PCLATH, 3
$08ED	$234A			CALL	_Add_32x32_FP
$08EE	$158A			BSF	PCLATH, 3
$08EF	$0008			RETURN
$0649	$	_Mul_16x16_S:
$0649	$1303			BCF	STATUS, RP1
$064A	$1283			BCF	STATUS, RP0
$064B	$01FB			CLRF	STACK_11
$064C	$01FA			CLRF	STACK_10
$064D	$01F9			CLRF	STACK_9
$064E	$3080			MOVLW	128
$064F	$00F8			MOVWF	STACK_8
$0650	$01FD			CLRF	STACK_13
$0651	$1FF1			BTFSS	STACK_1, 7
$0652	$2E59			GOTO	$+7
$0653	$09F1			COMF	STACK_1, F
$0654	$09F0			COMF	STACK_0, F
$0655	$0AF0			INCF	STACK_0, F
$0656	$1903			BTFSC	STATUS, Z
$0657	$0AF1			INCF	STACK_1, F
$0658	$0AFD			INCF	STACK_13, F
$0659	$1FF5			BTFSS	STACK_5, 7
$065A	$2E61			GOTO	$+7
$065B	$09F5			COMF	STACK_5, F
$065C	$09F4			COMF	STACK_4, F
$065D	$0AF4			INCF	STACK_4, F
$065E	$1903			BTFSC	STATUS, Z
$065F	$0AF5			INCF	STACK_5, F
$0660	$0AFD			INCF	STACK_13, F
$0661	$0CF1			RRF	STACK_1, F
$0662	$0CF0			RRF	STACK_0, F
$0663	$1C03			BTFSS	STATUS, C
$0664	$2E6E			GOTO	$+10
$0665	$0874			MOVF	STACK_4, W
$0666	$07F9			ADDWF	STACK_9, F
$0667	$0875			MOVF	STACK_5, W
$0668	$1803			BTFSC	STATUS, C
$0669	$0F75			INCFSZ	STACK_5, W
$066A	$07FA			ADDWF	STACK_10, F
$066B	$1803			BTFSC	STATUS, C
$066C	$0AFB			INCF	STACK_11, F
$066D	$1003			BCF	STATUS, C
$066E	$1FF0			BTFSS	STACK_0, 7
$066F	$2E76			GOTO	$+7
$0670	$0874			MOVF	STACK_4, W
$0671	$07FA			ADDWF	STACK_10, F
$0672	$1803			BTFSC	STATUS, C
$0673	$0AFB			INCF	STACK_11, F
$0674	$0875			MOVF	STACK_5, W
$0675	$07FB			ADDWF	STACK_11, F
$0676	$0CFB			RRF	STACK_11, F
$0677	$0CFA			RRF	STACK_10, F
$0678	$0CF9			RRF	STACK_9, F
$0679	$0CF8			RRF	STACK_8, F
$067A	$1C03			BTFSS	STATUS, C
$067B	$2E61			GOTO	$-26
$067C	$1C7D			BTFSS	STACK_13, 0
$067D	$2E89			GOTO	$+12
$067E	$09FB			COMF	STACK_11, F
$067F	$09FA			COMF	STACK_10, F
$0680	$09F9			COMF	STACK_9, F
$0681	$09F8			COMF	STACK_8, F
$0682	$0AF8			INCF	STACK_8, F
$0683	$1903			BTFSC	STATUS, Z
$0684	$0AF9			INCF	STACK_9, F
$0685	$1903			BTFSC	STATUS, Z
$0686	$0AFA			INCF	STACK_10, F
$0687	$1903			BTFSC	STATUS, Z
$0688	$0AFB			INCF	STACK_11, F
$0689	$087B			MOVF	STACK_11, W
$068A	$00F3			MOVWF	STACK_3
$068B	$087A			MOVF	STACK_10, W
$068C	$00F2			MOVWF	STACK_2
$068D	$0879			MOVF	STACK_9, W
$068E	$00F1			MOVWF	STACK_1
$068F	$0878			MOVF	STACK_8, W
$0690	$00F0			MOVWF	STACK_0
$0691	$0000			NOP
$0692	$0008			RETURN
$073A	$	_SETIOV3224:
$073A	$1303			BCF	STATUS, RP1
$073B	$1283			BCF	STATUS, RP0
$073C	$147B			BSF	STACK_11, 0
$073D	$1FFB			BTFSS	STACK_11, 7
$073E	$2F47			GOTO	SETIOV3224EEE
$073F	$01F2			CLRF	STACK_2
$0740	$1FFA			BTFSS	STACK_10, 7
$0741	$30FF			MOVLW	0xFF
$0742	$00F2			MOVWF	STACK_2
$0743	$00F1			MOVWF	STACK_1
$0744	$00F0			MOVWF	STACK_0
$0745	$0DFA			RLF	STACK_10, F
$0746	$0CF2			RRF	STACK_2, F
$0747	$	SETIOV3224EEE:
$0747	$30FF			MOVLW	0xFF
$0748	$0008			RETURN
$08BB	$	_initport:
;lfr_catcher_5sen_tsop.c,15 :: 		void initport()
;lfr_catcher_5sen_tsop.c,17 :: 		ADCON1 =0x06;          //TURN OFF ADC AND CONFIGURE A AND E AS DIG I/O
$08BB	$3006			MOVLW	6
$08BC	$1303			BCF	STATUS, RP1
$08BD	$1683			BSF	STATUS, RP0
$08BE	$009F			MOVWF	ADCON1
;lfr_catcher_5sen_tsop.c,18 :: 		PORTA = 0;             //CLEAR PORTA
$08BF	$1283			BCF	STATUS, RP0
$08C0	$0185			CLRF	PORTA, 1
;lfr_catcher_5sen_tsop.c,19 :: 		PORTE = 0;             //CLEAR PORTE
$08C1	$0189			CLRF	PORTE, 1
;lfr_catcher_5sen_tsop.c,20 :: 		TRISA = 0x3F;          //INITIALIZE PORTA AS INPUT
$08C2	$303F			MOVLW	63
$08C3	$1683			BSF	STATUS, RP0
$08C4	$0085			MOVWF	TRISA
;lfr_catcher_5sen_tsop.c,21 :: 		TRISE = 0x03;          //INITIALIZE PORTE AS INPUT
$08C5	$3003			MOVLW	3
$08C6	$0089			MOVWF	TRISE
;lfr_catcher_5sen_tsop.c,22 :: 		TRISD = 0x00;          //INITIALIZE PORTD AS OUTPUT
$08C7	$0188			CLRF	TRISD, 1
;lfr_catcher_5sen_tsop.c,23 :: 		TRISC = 0b00000000;    //INITIALIZE PORTC AS OUTPUT
$08C8	$0187			CLRF	TRISC, 1
;lfr_catcher_5sen_tsop.c,24 :: 		TRISB = 0b11000000;    //INITIALIZE PORTB AS INPUT  FOR TSOP
$08C9	$30C0			MOVLW	192
$08CA	$0086			MOVWF	TRISB
;lfr_catcher_5sen_tsop.c,25 :: 		}
$08CB	$0008			RETURN
$086C	$	_initpwm:
;lfr_catcher_5sen_tsop.c,27 :: 		void initpwm()
;lfr_catcher_5sen_tsop.c,29 :: 		PWM1_Init(5000);
$086C	$1303			BCF	STATUS, RP1
$086D	$1283			BCF	STATUS, RP0
$086E	$1012			BCF	T2CON, T2CKPS0
$086F	$1092			BCF	T2CON, T2CKPS1
$0870	$30C7			MOVLW	199
$0871	$1683			BSF	STATUS, RP0
$0872	$0092			MOVWF	PR2
$0873	$2115			CALL	_PWM1_Init
;lfr_catcher_5sen_tsop.c,30 :: 		PWM2_Init(5000);
$0874	$1012			BCF	T2CON, T2CKPS0
$0875	$1092			BCF	T2CON, T2CKPS1
$0876	$30C7			MOVLW	199
$0877	$1683			BSF	STATUS, RP0
$0878	$0092			MOVWF	PR2
$0879	$2109			CALL	_PWM2_Init
;lfr_catcher_5sen_tsop.c,31 :: 		Pwm1_Start();          //RIGHT MOTOR
$087A	$20F9			CALL	_PWM1_Start
;lfr_catcher_5sen_tsop.c,32 :: 		Pwm2_Start();          //LEFT MOTOR
$087B	$2101			CALL	_PWM2_Start
;lfr_catcher_5sen_tsop.c,33 :: 		}
$087C	$0008			RETURN
$055D	$	_indicator:
;lfr_catcher_5sen_tsop.c,59 :: 		void indicator()         //COPY THE SENSOR OUTPUT TO PORTD-INDICATOR
;lfr_catcher_5sen_tsop.c,61 :: 		PORTD.F7 = PORTA.F0;
$055D	$3001			MOVLW	1
$055E	$1303			BCF	STATUS, RP1
$055F	$1283			BCF	STATUS, RP0
$0560	$0505			ANDWF	PORTA, 0
$0561	$00F0			MOVWF	STACK_0
$0562	$3000			MOVLW	0
$0563	$1870			BTFSC	STACK_0, 0
$0564	$3080			MOVLW	128
$0565	$0608			XORWF	PORTD, 0
$0566	$3980			ANDLW	128
$0567	$0688			XORWF	PORTD, 1
;lfr_catcher_5sen_tsop.c,62 :: 		PORTD.F6 = PORTA.F1;
$0568	$3000			MOVLW	0
$0569	$1885			BTFSC	PORTA, 1
$056A	$3001			MOVLW	1
$056B	$00F1			MOVWF	STACK_1
$056C	$3000			MOVLW	0
$056D	$1871			BTFSC	STACK_1, 0
$056E	$3040			MOVLW	64
$056F	$0608			XORWF	PORTD, 0
$0570	$3940			ANDLW	64
$0571	$0688			XORWF	PORTD, 1
;lfr_catcher_5sen_tsop.c,63 :: 		PORTD.F5 = PORTA.F2;
$0572	$3000			MOVLW	0
$0573	$1905			BTFSC	PORTA, 2
$0574	$3001			MOVLW	1
$0575	$00F1			MOVWF	STACK_1
$0576	$3000			MOVLW	0
$0577	$1871			BTFSC	STACK_1, 0
$0578	$3020			MOVLW	32
$0579	$0608			XORWF	PORTD, 0
$057A	$3920			ANDLW	32
$057B	$0688			XORWF	PORTD, 1
;lfr_catcher_5sen_tsop.c,64 :: 		PORTD.F4 = PORTA.F3;
$057C	$3000			MOVLW	0
$057D	$1985			BTFSC	PORTA, 3
$057E	$3001			MOVLW	1
$057F	$00F1			MOVWF	STACK_1
$0580	$3000			MOVLW	0
$0581	$1871			BTFSC	STACK_1, 0
$0582	$3010			MOVLW	16
$0583	$0608			XORWF	PORTD, 0
$0584	$3910			ANDLW	16
$0585	$0688			XORWF	PORTD, 1
;lfr_catcher_5sen_tsop.c,65 :: 		PORTD.F3 = PORTA.F4;
$0586	$3000			MOVLW	0
$0587	$1A05			BTFSC	PORTA, 4
$0588	$3001			MOVLW	1
$0589	$00F1			MOVWF	STACK_1
$058A	$3000			MOVLW	0
$058B	$1871			BTFSC	STACK_1, 0
$058C	$3008			MOVLW	8
$058D	$0608			XORWF	PORTD, 0
$058E	$3908			ANDLW	8
$058F	$0688			XORWF	PORTD, 1
;lfr_catcher_5sen_tsop.c,66 :: 		PORTD.F2 = PORTA.F5;
$0590	$3000			MOVLW	0
$0591	$1A85			BTFSC	PORTA, 5
$0592	$3001			MOVLW	1
$0593	$00F1			MOVWF	STACK_1
$0594	$3000			MOVLW	0
$0595	$1871			BTFSC	STACK_1, 0
$0596	$3004			MOVLW	4
$0597	$0608			XORWF	PORTD, 0
$0598	$3904			ANDLW	4
$0599	$0688			XORWF	PORTD, 1
;lfr_catcher_5sen_tsop.c,67 :: 		PORTD.F1 = PORTE.F0;
$059A	$3001			MOVLW	1
$059B	$0509			ANDWF	PORTE, 0
$059C	$00F0			MOVWF	STACK_0
$059D	$3000			MOVLW	0
$059E	$1870			BTFSC	STACK_0, 0
$059F	$3002			MOVLW	2
$05A0	$0608			XORWF	PORTD, 0
$05A1	$3902			ANDLW	2
$05A2	$0688			XORWF	PORTD, 1
;lfr_catcher_5sen_tsop.c,68 :: 		PORTD.F0 = PORTE.F1;
$05A3	$3000			MOVLW	0
$05A4	$1889			BTFSC	PORTE, 1
$05A5	$3001			MOVLW	1
$05A6	$00F1			MOVWF	STACK_1
$05A7	$3000			MOVLW	0
$05A8	$1871			BTFSC	STACK_1, 0
$05A9	$3001			MOVLW	1
$05AA	$0608			XORWF	PORTD, 0
$05AB	$3901			ANDLW	1
$05AC	$0688			XORWF	PORTD, 1
;lfr_catcher_5sen_tsop.c,69 :: 		}
$05AD	$0008			RETURN
$026F	$	_CalcError:
;lfr_catcher_5sen_tsop.c,70 :: 		void CalcError()				 //calculates the current error
;lfr_catcher_5sen_tsop.c,72 :: 		s1 = 0;
$026F	$1303			BCF	STATUS, RP1
$0270	$1283			BCF	STATUS, RP0
$0271	$01A1			CLRF	_s1
$0272	$01A2			CLRF	_s1+1
;lfr_catcher_5sen_tsop.c,73 :: 		s2 = 0;
$0273	$01A3			CLRF	_s2
$0274	$01A4			CLRF	_s2+1
;lfr_catcher_5sen_tsop.c,74 :: 		s3 = 0;
$0275	$01A5			CLRF	_s3
$0276	$01A6			CLRF	_s3+1
;lfr_catcher_5sen_tsop.c,75 :: 		s4 = 0;
$0277	$01A7			CLRF	_s4
$0278	$01A8			CLRF	_s4+1
;lfr_catcher_5sen_tsop.c,76 :: 		s5 = 0;
$0279	$01A9			CLRF	_s5
$027A	$01AA			CLRF	_s5+1
;lfr_catcher_5sen_tsop.c,78 :: 		if(PORTA.F2)
$027B	$1D05			BTFSS	PORTA, 2
$027C	$2A83			GOTO	L_CalcError_0
;lfr_catcher_5sen_tsop.c,80 :: 		lastreading='r';
$027D	$3072			MOVLW	114
$027E	$00AB			MOVWF	_lastreading
;lfr_catcher_5sen_tsop.c,81 :: 		s1 = 1;
$027F	$3001			MOVLW	1
$0280	$00A1			MOVWF	_s1
$0281	$3000			MOVLW	0
$0282	$00A2			MOVWF	_s1+1
;lfr_catcher_5sen_tsop.c,82 :: 		}
$0283	$	L_CalcError_0:
;lfr_catcher_5sen_tsop.c,84 :: 		if(PORTA.F3)
$0283	$1D85			BTFSS	PORTA, 3
$0284	$2A89			GOTO	L_CalcError_1
;lfr_catcher_5sen_tsop.c,85 :: 		s2 = 1;
$0285	$3001			MOVLW	1
$0286	$00A3			MOVWF	_s2
$0287	$3000			MOVLW	0
$0288	$00A4			MOVWF	_s2+1
$0289	$	L_CalcError_1:
;lfr_catcher_5sen_tsop.c,87 :: 		if(PORTA.F4)
$0289	$1E05			BTFSS	PORTA, 4
$028A	$2A8F			GOTO	L_CalcError_2
;lfr_catcher_5sen_tsop.c,88 :: 		s3 = 1;
$028B	$3001			MOVLW	1
$028C	$00A5			MOVWF	_s3
$028D	$3000			MOVLW	0
$028E	$00A6			MOVWF	_s3+1
$028F	$	L_CalcError_2:
;lfr_catcher_5sen_tsop.c,90 :: 		if(PORTA.F5)
$028F	$1E85			BTFSS	PORTA, 5
$0290	$2A95			GOTO	L_CalcError_3
;lfr_catcher_5sen_tsop.c,91 :: 		s4 = 1;
$0291	$3001			MOVLW	1
$0292	$00A7			MOVWF	_s4
$0293	$3000			MOVLW	0
$0294	$00A8			MOVWF	_s4+1
$0295	$	L_CalcError_3:
;lfr_catcher_5sen_tsop.c,93 :: 		if(PORTE.F0)
$0295	$1C09			BTFSS	PORTE, 0
$0296	$2A9D			GOTO	L_CalcError_4
;lfr_catcher_5sen_tsop.c,95 :: 		lastreading='l';
$0297	$306C			MOVLW	108
$0298	$00AB			MOVWF	_lastreading
;lfr_catcher_5sen_tsop.c,96 :: 		s5 = 1;
$0299	$3001			MOVLW	1
$029A	$00A9			MOVWF	_s5
$029B	$3000			MOVLW	0
$029C	$00AA			MOVWF	_s5+1
;lfr_catcher_5sen_tsop.c,97 :: 		}
$029D	$	L_CalcError_4:
;lfr_catcher_5sen_tsop.c,99 :: 		perror = error;
$029D	$0830			MOVF	_error, 0
$029E	$00AC			MOVWF	_perror
$029F	$0831			MOVF	_error+1, 0
$02A0	$00AD			MOVWF	_perror+1
$02A1	$0832			MOVF	_error+2, 0
$02A2	$00AE			MOVWF	_perror+2
$02A3	$0833			MOVF	_error+3, 0
$02A4	$00AF			MOVWF	_perror+3
;lfr_catcher_5sen_tsop.c,103 :: 		error = (s1 * 1) + (s2 * 2) + (s3 * 3) + (s4 * 4) + (s5 * 5) ;
$02A5	$3001			MOVLW	1
$02A6	$00F4			MOVWF	STACK_4
$02A7	$0823			MOVF	_s2, 0
$02A8	$00F0			MOVWF	STACK_0
$02A9	$0824			MOVF	_s2+1, 0
$02AA	$00F1			MOVWF	STACK_0+1
$02AB	$0874			MOVF	STACK_4, 0
$02AC	$	L_CalcError_18:
$02AC	$1903			BTFSC	STATUS, Z
$02AD	$2AB3			GOTO	L_CalcError_19
$02AE	$0DF0			RLF	STACK_0, 1
$02AF	$0DF1			RLF	STACK_0+1, 1
$02B0	$1070			BCF	STACK_0, 0
$02B1	$3FFF			ADDLW	255
$02B2	$2AAC			GOTO	L_CalcError_18
$02B3	$	L_CalcError_19:
$02B3	$0870			MOVF	STACK_0, 0
$02B4	$0721			ADDWF	_s1, 0
$02B5	$00DC			MOVWF	FLOC_CalcError+0
$02B6	$0822			MOVF	_s1+1, 0
$02B7	$1803			BTFSC	STATUS, C
$02B8	$3F01			ADDLW	1
$02B9	$0771			ADDWF	STACK_0+1, 0
$02BA	$00DD			MOVWF	FLOC_CalcError+1
$02BB	$0825			MOVF	_s3, 0
$02BC	$00F0			MOVWF	STACK_0
$02BD	$0826			MOVF	_s3+1, 0
$02BE	$00F1			MOVWF	STACK_0+1
$02BF	$3003			MOVLW	3
$02C0	$00F4			MOVWF	STACK_4
$02C1	$3000			MOVLW	0
$02C2	$00F5			MOVWF	STACK_4+1
$02C3	$270F			CALL	_mul_16x16_u
$02C4	$0870			MOVF	STACK_0, 0
$02C5	$07DC			ADDWF	FLOC_CalcError+0, 1
$02C6	$0871			MOVF	STACK_0+1, 0
$02C7	$1803			BTFSC	STATUS, C
$02C8	$3F01			ADDLW	1
$02C9	$07DD			ADDWF	FLOC_CalcError+1, 1
$02CA	$3002			MOVLW	2
$02CB	$00F4			MOVWF	STACK_4
$02CC	$0827			MOVF	_s4, 0
$02CD	$00F0			MOVWF	STACK_0
$02CE	$0828			MOVF	_s4+1, 0
$02CF	$00F1			MOVWF	STACK_0+1
$02D0	$0874			MOVF	STACK_4, 0
$02D1	$	L_CalcError_20:
$02D1	$1903			BTFSC	STATUS, Z
$02D2	$2AD8			GOTO	L_CalcError_21
$02D3	$0DF0			RLF	STACK_0, 1
$02D4	$0DF1			RLF	STACK_0+1, 1
$02D5	$1070			BCF	STACK_0, 0
$02D6	$3FFF			ADDLW	255
$02D7	$2AD1			GOTO	L_CalcError_20
$02D8	$	L_CalcError_21:
$02D8	$0870			MOVF	STACK_0, 0
$02D9	$07DC			ADDWF	FLOC_CalcError+0, 1
$02DA	$0871			MOVF	STACK_0+1, 0
$02DB	$1803			BTFSC	STATUS, C
$02DC	$3F01			ADDLW	1
$02DD	$07DD			ADDWF	FLOC_CalcError+1, 1
$02DE	$0829			MOVF	_s5, 0
$02DF	$00F0			MOVWF	STACK_0
$02E0	$082A			MOVF	_s5+1, 0
$02E1	$00F1			MOVWF	STACK_0+1
$02E2	$3005			MOVLW	5
$02E3	$00F4			MOVWF	STACK_4
$02E4	$3000			MOVLW	0
$02E5	$00F5			MOVWF	STACK_4+1
$02E6	$270F			CALL	_mul_16x16_u
$02E7	$085C			MOVF	FLOC_CalcError+0, 0
$02E8	$07F0			ADDWF	STACK_0, 1
$02E9	$085D			MOVF	FLOC_CalcError+1, 0
$02EA	$1803			BTFSC	STATUS, C
$02EB	$3F01			ADDLW	1
$02EC	$07F1			ADDWF	STACK_0+1, 1
$02ED	$158A			BSF	PCLATH, 3
$02EE	$207D			CALL	_word2double
$02EF	$118A			BCF	PCLATH, 3
$02F0	$0870			MOVF	STACK_0, 0
$02F1	$00DC			MOVWF	FLOC_CalcError+0
$02F2	$0871			MOVF	STACK_0+1, 0
$02F3	$00DD			MOVWF	FLOC_CalcError+1
$02F4	$0872			MOVF	STACK_0+2, 0
$02F5	$00DE			MOVWF	FLOC_CalcError+2
$02F6	$0873			MOVF	STACK_0+3, 0
$02F7	$00DF			MOVWF	FLOC_CalcError+3
$02F8	$085C			MOVF	FLOC_CalcError+0, 0
$02F9	$00B0			MOVWF	_error
$02FA	$085D			MOVF	FLOC_CalcError+1, 0
$02FB	$00B1			MOVWF	_error+1
$02FC	$085E			MOVF	FLOC_CalcError+2, 0
$02FD	$00B2			MOVWF	_error+2
$02FE	$085F			MOVF	FLOC_CalcError+3, 0
$02FF	$00B3			MOVWF	_error+3
;lfr_catcher_5sen_tsop.c,104 :: 		error = (error)/(s1+s2+s3+s4+s5);
$0300	$0823			MOVF	_s2, 0
$0301	$0721			ADDWF	_s1, 0
$0302	$00F0			MOVWF	STACK_0
$0303	$0822			MOVF	_s1+1, 0
$0304	$1803			BTFSC	STATUS, C
$0305	$3F01			ADDLW	1
$0306	$0724			ADDWF	_s2+1, 0
$0307	$00F1			MOVWF	STACK_0+1
$0308	$0825			MOVF	_s3, 0
$0309	$07F0			ADDWF	STACK_0, 1
$030A	$0826			MOVF	_s3+1, 0
$030B	$1803			BTFSC	STATUS, C
$030C	$3F01			ADDLW	1
$030D	$07F1			ADDWF	STACK_0+1, 1
$030E	$0827			MOVF	_s4, 0
$030F	$07F0			ADDWF	STACK_0, 1
$0310	$0828			MOVF	_s4+1, 0
$0311	$1803			BTFSC	STATUS, C
$0312	$3F01			ADDLW	1
$0313	$07F1			ADDWF	STACK_0+1, 1
$0314	$0829			MOVF	_s5, 0
$0315	$07F0			ADDWF	STACK_0, 1
$0316	$082A			MOVF	_s5+1, 0
$0317	$1803			BTFSC	STATUS, C
$0318	$3F01			ADDLW	1
$0319	$07F1			ADDWF	STACK_0+1, 1
$031A	$158A			BSF	PCLATH, 3
$031B	$207D			CALL	_word2double
$031C	$118A			BCF	PCLATH, 3
$031D	$0870			MOVF	STACK_0, 0
$031E	$00F4			MOVWF	STACK_4
$031F	$0871			MOVF	STACK_0+1, 0
$0320	$00F5			MOVWF	STACK_4+1
$0321	$0872			MOVF	STACK_0+2, 0
$0322	$00F6			MOVWF	STACK_4+2
$0323	$0873			MOVF	STACK_0+3, 0
$0324	$00F7			MOVWF	STACK_4+3
$0325	$085C			MOVF	FLOC_CalcError+0, 0
$0326	$00F0			MOVWF	STACK_0
$0327	$085D			MOVF	FLOC_CalcError+1, 0
$0328	$00F1			MOVWF	STACK_0+1
$0329	$085E			MOVF	FLOC_CalcError+2, 0
$032A	$00F2			MOVWF	STACK_0+2
$032B	$085F			MOVF	FLOC_CalcError+3, 0
$032C	$00F3			MOVWF	STACK_0+3
$032D	$23EE			CALL	_div_32x32_fp
$032E	$0870			MOVF	STACK_0, 0
$032F	$00B0			MOVWF	_error
$0330	$0871			MOVF	STACK_0+1, 0
$0331	$00B1			MOVWF	_error+1
$0332	$0872			MOVF	STACK_0+2, 0
$0333	$00B2			MOVWF	_error+2
$0334	$0873			MOVF	STACK_0+3, 0
$0335	$00B3			MOVWF	_error+3
;lfr_catcher_5sen_tsop.c,105 :: 		error = error - 3;
$0336	$3000			MOVLW	0
$0337	$00F4			MOVWF	STACK_4
$0338	$3000			MOVLW	0
$0339	$00F5			MOVWF	STACK_4+1
$033A	$3040			MOVLW	64
$033B	$00F6			MOVWF	STACK_4+2
$033C	$3080			MOVLW	128
$033D	$00F7			MOVWF	STACK_4+3
$033E	$158A			BSF	PCLATH, 3
$033F	$20E8			CALL	_sub_32x32_fp
$0340	$118A			BCF	PCLATH, 3
$0341	$0870			MOVF	STACK_0, 0
$0342	$00B0			MOVWF	_error
$0343	$0871			MOVF	STACK_0+1, 0
$0344	$00B1			MOVWF	_error+1
$0345	$0872			MOVF	STACK_0+2, 0
$0346	$00B2			MOVWF	_error+2
$0347	$0873			MOVF	STACK_0+3, 0
$0348	$00B3			MOVWF	_error+3
;lfr_catcher_5sen_tsop.c,106 :: 		}
$0349	$0008			RETURN
$0925	$	_motor_LF:
;lfr_catcher_5sen_tsop.c,47 :: 		void motor_LF()          //LEFT MOTOR FWD DIR
;lfr_catcher_5sen_tsop.c,49 :: 		PORTC.F5 = 1;
$0925	$1303			BCF	STATUS, RP1
$0926	$1283			BCF	STATUS, RP0
$0927	$1687			BSF	PORTC, 5
;lfr_catcher_5sen_tsop.c,50 :: 		PORTC.F4 = 0;
$0928	$1207			BCF	PORTC, 4
;lfr_catcher_5sen_tsop.c,51 :: 		}
$0929	$0008			RETURN
$0920	$	_motor_RF:
;lfr_catcher_5sen_tsop.c,35 :: 		void motor_RF()          //RIGHT MOTOR FWD DIR
;lfr_catcher_5sen_tsop.c,37 :: 		PORTC.F7 = 1;
$0920	$1303			BCF	STATUS, RP1
$0921	$1283			BCF	STATUS, RP0
$0922	$1787			BSF	PORTC, 7
;lfr_catcher_5sen_tsop.c,38 :: 		PORTC.F6 = 0;
$0923	$1307			BCF	PORTC, 6
;lfr_catcher_5sen_tsop.c,39 :: 		}
$0924	$0008			RETURN
$0831	$	_PWM1_Change_Duty:
$0831	$1303			BCF	STATUS, RP1
$0832	$1683			BSF	STATUS, RP0
$0833	$0812			MOVF	PR2, 0
$0834	$3F01			ADDLW	1
$0835	$00F0			MOVWF	STACK_0
$0836	$01F1			CLRF	STACK_0+1
$0837	$1803			BTFSC	STATUS, C
$0838	$0AF1			INCF	STACK_0+1, 1
$0839	$1283			BCF	STATUS, RP0
$083A	$085C			MOVF	FARG_PWM1_Change_Duty+0, 0
$083B	$00F4			MOVWF	STACK_4
$083C	$01F5			CLRF	STACK_4+1
$083D	$118A			BCF	PCLATH, 3
$083E	$2649			CALL	_mul_16x16_s
$083F	$158A			BSF	PCLATH, 3
$0840	$3006			MOVLW	6
$0841	$00F2			MOVWF	STACK_2
$0842	$0870			MOVF	STACK_0, 0
$0843	$00F4			MOVWF	STACK_4
$0844	$0871			MOVF	STACK_0+1, 0
$0845	$00F5			MOVWF	STACK_4+1
$0846	$0872			MOVF	STACK_2, 0
$0847	$	L_PWM1_Change_Duty_2:
$0847	$1903			BTFSC	STATUS, Z
$0848	$284E			GOTO	L_PWM1_Change_Duty_3
$0849	$0CF5			RRF	STACK_4+1, 1
$084A	$0CF4			RRF	STACK_4, 1
$084B	$13F5			BCF	STACK_4+1, 7
$084C	$3FFF			ADDLW	255
$084D	$2847			GOTO	L_PWM1_Change_Duty_2
$084E	$	L_PWM1_Change_Duty_3:
$084E	$0874			MOVF	STACK_4, 0
$084F	$00F0			MOVWF	STACK_0
$0850	$0DF0			RLF	STACK_0, 1
$0851	$1070			BCF	STACK_0, 0
$0852	$0DF0			RLF	STACK_0, 1
$0853	$1070			BCF	STACK_0, 0
$0854	$0DF0			RLF	STACK_0, 1
$0855	$1070			BCF	STACK_0, 0
$0856	$0DF0			RLF	STACK_0, 1
$0857	$1070			BCF	STACK_0, 0
$0858	$3030			MOVLW	48
$0859	$0570			ANDWF	STACK_0, 0
$085A	$00F3			MOVWF	STACK_3
$085B	$0874			MOVF	STACK_4, 0
$085C	$00F0			MOVWF	STACK_0
$085D	$0875			MOVF	STACK_4+1, 0
$085E	$00F1			MOVWF	STACK_0+1
$085F	$0CF1			RRF	STACK_0+1, 1
$0860	$0CF0			RRF	STACK_0, 1
$0861	$13F1			BCF	STACK_0+1, 7
$0862	$0CF1			RRF	STACK_0+1, 1
$0863	$0CF0			RRF	STACK_0, 1
$0864	$13F1			BCF	STACK_0+1, 7
$0865	$0870			MOVF	STACK_0, 0
$0866	$0095			MOVWF	CCPR1L
$0867	$300F			MOVLW	15
$0868	$0597			ANDWF	CCP1CON, 1
$0869	$0873			MOVF	STACK_3, 0
$086A	$0497			IORWF	CCP1CON, 1
$086B	$0008			RETURN
$06D6	$	_PWM2_Change_Duty:
$06D6	$1303			BCF	STATUS, RP1
$06D7	$1683			BSF	STATUS, RP0
$06D8	$0812			MOVF	PR2, 0
$06D9	$3F01			ADDLW	1
$06DA	$00F0			MOVWF	STACK_0
$06DB	$01F1			CLRF	STACK_0+1
$06DC	$1803			BTFSC	STATUS, C
$06DD	$0AF1			INCF	STACK_0+1, 1
$06DE	$1283			BCF	STATUS, RP0
$06DF	$085C			MOVF	FARG_PWM2_Change_Duty+0, 0
$06E0	$00F4			MOVWF	STACK_4
$06E1	$01F5			CLRF	STACK_4+1
$06E2	$2649			CALL	_mul_16x16_s
$06E3	$3006			MOVLW	6
$06E4	$00F2			MOVWF	STACK_2
$06E5	$0870			MOVF	STACK_0, 0
$06E6	$00F4			MOVWF	STACK_4
$06E7	$0871			MOVF	STACK_0+1, 0
$06E8	$00F5			MOVWF	STACK_4+1
$06E9	$0872			MOVF	STACK_2, 0
$06EA	$	L_PWM2_Change_Duty_0:
$06EA	$1903			BTFSC	STATUS, Z
$06EB	$2EF1			GOTO	L_PWM2_Change_Duty_1
$06EC	$0CF5			RRF	STACK_4+1, 1
$06ED	$0CF4			RRF	STACK_4, 1
$06EE	$13F5			BCF	STACK_4+1, 7
$06EF	$3FFF			ADDLW	255
$06F0	$2EEA			GOTO	L_PWM2_Change_Duty_0
$06F1	$	L_PWM2_Change_Duty_1:
$06F1	$0874			MOVF	STACK_4, 0
$06F2	$00F0			MOVWF	STACK_0
$06F3	$0DF0			RLF	STACK_0, 1
$06F4	$1070			BCF	STACK_0, 0
$06F5	$0DF0			RLF	STACK_0, 1
$06F6	$1070			BCF	STACK_0, 0
$06F7	$0DF0			RLF	STACK_0, 1
$06F8	$1070			BCF	STACK_0, 0
$06F9	$0DF0			RLF	STACK_0, 1
$06FA	$1070			BCF	STACK_0, 0
$06FB	$3030			MOVLW	48
$06FC	$0570			ANDWF	STACK_0, 0
$06FD	$00F3			MOVWF	STACK_3
$06FE	$0874			MOVF	STACK_4, 0
$06FF	$00F0			MOVWF	STACK_0
$0700	$0875			MOVF	STACK_4+1, 0
$0701	$00F1			MOVWF	STACK_0+1
$0702	$0CF1			RRF	STACK_0+1, 1
$0703	$0CF0			RRF	STACK_0, 1
$0704	$13F1			BCF	STACK_0+1, 7
$0705	$0CF1			RRF	STACK_0+1, 1
$0706	$0CF0			RRF	STACK_0, 1
$0707	$13F1			BCF	STACK_0+1, 7
$0708	$0870			MOVF	STACK_0, 0
$0709	$009B			MOVWF	CCPR2L
$070A	$300F			MOVLW	15
$070B	$059D			ANDWF	CCP2CON, 1
$070C	$0873			MOVF	STACK_3, 0
$070D	$049D			IORWF	CCP2CON, 1
$070E	$0008			RETURN
$092A	$	_motor_RB:
;lfr_catcher_5sen_tsop.c,41 :: 		void motor_RB()          //RIGHT MOTOR REV DIR
;lfr_catcher_5sen_tsop.c,43 :: 		PORTC.F7 = 0;
$092A	$1303			BCF	STATUS, RP1
$092B	$1283			BCF	STATUS, RP0
$092C	$1387			BCF	PORTC, 7
;lfr_catcher_5sen_tsop.c,44 :: 		PORTC.F6 = 1;
$092D	$1707			BSF	PORTC, 6
;lfr_catcher_5sen_tsop.c,45 :: 		}
$092E	$0008			RETURN
$091B	$	_motor_LB:
;lfr_catcher_5sen_tsop.c,53 :: 		void motor_LB()          //LEFT MOTOR REV DIR
;lfr_catcher_5sen_tsop.c,55 :: 		PORTC.F5 = 0;
$091B	$1303			BCF	STATUS, RP1
$091C	$1283			BCF	STATUS, RP0
$091D	$1287			BCF	PORTC, 5
;lfr_catcher_5sen_tsop.c,56 :: 		PORTC.F4 = 1;
$091E	$1607			BSF	PORTC, 4
;lfr_catcher_5sen_tsop.c,57 :: 		}
$091F	$0008			RETURN
$05FE	$	GlobalInilfr_catcher_5sen_tsop:
$05FE	$30B4			MOVLW	180
$05FF	$1303			BCF	STATUS, RP1
$0600	$1283			BCF	STATUS, RP0
$0601	$00B4			MOVWF	_basespeed+0
$0602	$3014			MOVLW	20
$0603	$00B5			MOVWF	_Kp+0
$0604	$3005			MOVLW	5
$0605	$00B6			MOVWF	_Ki+0
$0606	$3008			MOVLW	8
$0607	$00B7			MOVWF	_Kd+0
$0608	$3000			MOVLW	0
$0609	$00B8			MOVWF	_rightpulse+0
$060A	$3000			MOVLW	0
$060B	$00B9			MOVWF	_rightpulse+1
$060C	$3000			MOVLW	0
$060D	$00BA			MOVWF	_rightpulse+2
$060E	$3000			MOVLW	0
$060F	$00BB			MOVWF	_rightpulse+3
$0610	$3000			MOVLW	0
$0611	$00BC			MOVWF	_leftpulse+0
$0612	$3000			MOVLW	0
$0613	$00BD			MOVWF	_leftpulse+1
$0614	$3000			MOVLW	0
$0615	$00BE			MOVWF	_leftpulse+2
$0616	$3000			MOVLW	0
$0617	$00BF			MOVWF	_leftpulse+3
$0618	$3000			MOVLW	0
$0619	$00AC			MOVWF	_perror+0
$061A	$3000			MOVLW	0
$061B	$00AD			MOVWF	_perror+1
$061C	$3000			MOVLW	0
$061D	$00AE			MOVWF	_perror+2
$061E	$3000			MOVLW	0
$061F	$00AF			MOVWF	_perror+3
$0620	$3000			MOVLW	0
$0621	$00B0			MOVWF	_error+0
$0622	$3000			MOVLW	0
$0623	$00B1			MOVWF	_error+1
$0624	$3000			MOVLW	0
$0625	$00B2			MOVWF	_error+2
$0626	$3000			MOVLW	0
$0627	$00B3			MOVWF	_error+3
$0628	$3000			MOVLW	0
$0629	$00C0			MOVWF	_PROPORTIONAL+0
$062A	$3000			MOVLW	0
$062B	$00C1			MOVWF	_PROPORTIONAL+1
$062C	$3000			MOVLW	0
$062D	$00C2			MOVWF	_PROPORTIONAL+2
$062E	$3000			MOVLW	0
$062F	$00C3			MOVWF	_PROPORTIONAL+3
$0630	$3000			MOVLW	0
$0631	$00C4			MOVWF	_INTEGRAL+0
$0632	$3000			MOVLW	0
$0633	$00C5			MOVWF	_INTEGRAL+1
$0634	$3000			MOVLW	0
$0635	$00C6			MOVWF	_INTEGRAL+2
$0636	$3000			MOVLW	0
$0637	$00C7			MOVWF	_INTEGRAL+3
$0638	$3000			MOVLW	0
$0639	$00C8			MOVWF	_DERIVATIVE+0
$063A	$3000			MOVLW	0
$063B	$00C9			MOVWF	_DERIVATIVE+1
$063C	$3000			MOVLW	0
$063D	$00CA			MOVWF	_DERIVATIVE+2
$063E	$3000			MOVLW	0
$063F	$00CB			MOVWF	_DERIVATIVE+3
$0640	$3000			MOVLW	0
$0641	$00CC			MOVWF	_correction+0
$0642	$3000			MOVLW	0
$0643	$00CD			MOVWF	_correction+1
$0644	$3000			MOVLW	0
$0645	$00CE			MOVWF	_correction+2
$0646	$3000			MOVLW	0
$0647	$00CF			MOVWF	_correction+3
$0648	$0008			RETURN
$0893	$	_Equals_Double:
$0893	$1303			BCF	STATUS, RP1
$0894	$1283			BCF	STATUS, RP0
$0895	$0873			MOVF	STACK_3, W
$0896	$0677			XORWF	STACK_7, W
$0897	$1D03			BTFSS	STATUS, Z
$0898	$28A6			GOTO	EQU_FALSE
$0899	$0872			MOVF	STACK_2, W
$089A	$0676			XORWF	STACK_6, W
$089B	$1D03			BTFSS	STATUS, Z
$089C	$28A6			GOTO	EQU_FALSE
$089D	$0871			MOVF	STACK_1, W
$089E	$0675			XORWF	STACK_5, W
$089F	$1D03			BTFSS	STATUS, Z
$08A0	$28A6			GOTO	EQU_FALSE
$08A1	$0870			MOVF	STACK_0, W
$08A2	$0674			XORWF	STACK_4, W
$08A3	$1903			BTFSC	STATUS, Z
$08A4	$1503			BSF	STATUS, Z
$08A5	$0008			RETURN
$08A6	$	EQU_FALSE:
$08A6	$1103			BCF	STATUS, Z
$08A7	$0008			RETURN
$08A8	$0008			RETURN
$08A9	$	_Byte2Double:
$08A9	$1303			BCF	STATUS, RP1
$08AA	$1283			BCF	STATUS, RP0
$08AB	$	FLO08U32:
$08AB	$0870			MOVF	STACK_0, W
$08AC	$00F8			MOVWF	STACK_8
$08AD	$01FB			CLRF	STACK_11
$08AE	$01FC			CLRF	STACK_12
$08AF	$309E			MOVLW	0x9E
$08B0	$00F3			MOVWF	STACK_3
$08B1	$01FA			CLRF	STACK_10
$08B2	$01F2			CLRF	STACK_2
$08B3	$01F1			CLRF	STACK_1
$08B4	$01F0			CLRF	STACK_0
$08B5	$3002			MOVLW	0x02
$08B6	$00FC			MOVWF	STACK_12
$08B7	$118A			BCF	PCLATH, 3
$08B8	$24F9			CALL	_NRM4032
$08B9	$158A			BSF	PCLATH, 3
$08BA	$0008			RETURN
$0492	$	_Mul_32x32_FP:
$0492	$1303			BCF	STATUS, RP1
$0493	$1283			BCF	STATUS, RP0
$0494	$	FPM32:
$0494	$01FB			CLRF	STACK_11
$0495	$0873			MOVF	STACK_3, W
$0496	$1D03			BTFSS	STATUS, Z
$0497	$0877			MOVF	STACK_7, W
$0498	$1903			BTFSC	STATUS, Z
$0499	$2CE9			GOTO	JPMRES032
$049A	$	M32BNE0:
$049A	$0872			MOVF	STACK_2, W
$049B	$0676			XORWF	STACK_6, W
$049C	$00FA			MOVWF	STACK_10
$049D	$0877			MOVF	STACK_7, W
$049E	$07F3			ADDWF	STACK_3, F
$049F	$307E			MOVLW	126
$04A0	$1C03			BTFSS	STATUS, C
$04A1	$2CA6			GOTO	MTUN32
$04A2	$02F3			SUBWF	STACK_3, F
$04A3	$1803			BTFSC	STATUS, C
$04A4	$2CEE			GOTO	JPMSETFOV32
$04A5	$2CA9			GOTO	MOK32
$04A6	$	MTUN32:
$04A6	$02F3			SUBWF	STACK_3, F
$04A7	$1C03			BTFSS	STATUS, C
$04A8	$2CF3			GOTO	JPMSETFUN32
$04A9	$	MOK32:
$04A9	$0872			MOVF	STACK_2, W
$04AA	$00F8			MOVWF	STACK_8
$04AB	$0871			MOVF	STACK_1, W
$04AC	$00FC			MOVWF	STACK_12
$04AD	$0870			MOVF	STACK_0, W
$04AE	$00FD			MOVWF	STACK_13
$04AF	$17F8			BSF	STACK_8, 7
$04B0	$17F6			BSF	STACK_6, 7
$04B1	$1003			BCF	STATUS, C
$04B2	$01F2			CLRF	STACK_2
$04B3	$01F1			CLRF	STACK_1
$04B4	$01F0			CLRF	STACK_0
$04B5	$3018			MOVLW	24
$04B6	$00A0			MOVWF	__math_tempbD
$04B7	$	MLOOP32:
$04B7	$1C7D			BTFSS	STACK_13, 0
$04B8	$2CC3			GOTO	MNOADD32
$04B9	$	MADD32:
$04B9	$0874			MOVF	STACK_4, W
$04BA	$07F0			ADDWF	STACK_0, F
$04BB	$0875			MOVF	STACK_5, W
$04BC	$1803			BTFSC	STATUS, C
$04BD	$0F75			INCFSZ	STACK_5, W
$04BE	$07F1			ADDWF	STACK_1, F
$04BF	$0876			MOVF	STACK_6, W
$04C0	$1803			BTFSC	STATUS, C
$04C1	$0F76			INCFSZ	STACK_6, W
$04C2	$07F2			ADDWF	STACK_2, F
$04C3	$	MNOADD32:
$04C3	$0CF2			RRF	STACK_2, F
$04C4	$0CF1			RRF	STACK_1, F
$04C5	$0CF0			RRF	STACK_0, F
$04C6	$0CF8			RRF	STACK_8, F
$04C7	$0CFC			RRF	STACK_12, F
$04C8	$0CFD			RRF	STACK_13, F
$04C9	$1003			BCF	STATUS, C
$04CA	$0BA0			DECFSZ	__math_tempbD, F
$04CB	$2CB7			GOTO	MLOOP32
$04CC	$1BF2			BTFSC	STACK_2, 7
$04CD	$2CD3			GOTO	MROUND32
$04CE	$0DF8			RLF	STACK_8, F
$04CF	$0DF0			RLF	STACK_0, F
$04D0	$0DF1			RLF	STACK_1, F
$04D1	$0DF2			RLF	STACK_2, F
$04D2	$03F3			DECF	STACK_3, F
$04D3	$	MROUND32:
$04D3	$1B7B			BTFSC	STACK_11, 6
$04D4	$1C70			BTFSS	STACK_0, 0
$04D5	$2CE5			GOTO	MUL32OK
$04D6	$1FF8			BTFSS	STACK_8, 7
$04D7	$2CE5			GOTO	MUL32OK
$04D8	$0AF0			INCF	STACK_0, F
$04D9	$1903			BTFSC	STATUS, Z
$04DA	$0AF1			INCF	STACK_1, F
$04DB	$1903			BTFSC	STATUS, Z
$04DC	$0AF2			INCF	STACK_2, F
$04DD	$1D03			BTFSS	STATUS, Z
$04DE	$2CE5			GOTO	MUL32OK
$04DF	$0CF2			RRF	STACK_2, F
$04E0	$0CF1			RRF	STACK_1, F
$04E1	$0CF0			RRF	STACK_0, F
$04E2	$0AF3			INCF	STACK_3, F
$04E3	$1903			BTFSC	STATUS, Z
$04E4	$2CEE			GOTO	JPMSETFOV32
$04E5	$	MUL32OK:
$04E5	$1FFA			BTFSS	STACK_10, 7
$04E6	$13F2			BCF	STACK_2, 7
$04E7	$3000			MOVLW	0x00
$04E8	$2CF7			GOTO	MUL32EEE
$04E9	$	JPMRES032:
$04E9	$3001			MOVLW	0x01
$04EA	$158A			BSF	PCLATH, 3
$04EB	$20F0			CALL	_RES032
$04EC	$118A			BCF	PCLATH, 3
$04ED	$2CF7			GOTO	MUL32EEE
$04EE	$	JPMSETFOV32:
$04EE	$3002			MOVLW	0x02
$04EF	$158A			BSF	PCLATH, 3
$04F0	$20CC			CALL	_SETFOV32
$04F1	$118A			BCF	PCLATH, 3
$04F2	$2CF7			GOTO	MUL32EEE
$04F3	$	JPMSETFUN32:
$04F3	$3004			MOVLW	0x04
$04F4	$158A			BSF	PCLATH, 3
$04F5	$20DA			CALL	_SETFUN32
$04F6	$118A			BCF	PCLATH, 3
$04F7	$	MUL32EEE:
$04F7	$0000			NOP
$04F8	$0008			RETURN
$05AE	$	_Compare_Double:
$05AE	$1303			BCF	STATUS, RP1
$05AF	$1283			BCF	STATUS, RP0
$05B0	$01FA			CLRF	STACK_10
$05B1	$0873			MOVF	STACK_3, W
$05B2	$1D03			BTFSS	STATUS, Z
$05B3	$147A			BSF	STACK_10, 0
$05B4	$0877			MOVF	STACK_7, W
$05B5	$1D03			BTFSS	STATUS, Z
$05B6	$14FA			BSF	STACK_10, 1
$05B7	$087A			MOVF	STACK_10, W
$05B8	$1903			BTFSC	STATUS, Z
$05B9	$2DFA			GOTO	COMPARE_EQU
$05BA	$3A03			XORLW	0x03
$05BB	$1903			BTFSC	STATUS, Z
$05BC	$2DC5			GOTO	COMPARE_NOTZERO
$05BD	$187A			BTFSC	STACK_10, 0
$05BE	$2DC2			GOTO	COMPARE_XNOTZERO
$05BF	$	COMPARE_YNOTZERO:
$05BF	$1FF6			BTFSS	STACK_6, 7
$05C0	$2DF8			GOTO	COMPARE_LT
$05C1	$2DF6			GOTO	COMPARE_GT
$05C2	$	COMPARE_XNOTZERO:
$05C2	$1FF2			BTFSS	STACK_2, 7
$05C3	$2DF6			GOTO	COMPARE_GT
$05C4	$2DF8			GOTO	COMPARE_LT
$05C5	$	COMPARE_NOTZERO:
$05C5	$0872			MOVF	STACK_2, W
$05C6	$3980			ANDLW	0x80
$05C7	$00FA			MOVWF	STACK_10
$05C8	$13F2			BCF	STACK_2, 7
$05C9	$0876			MOVF	STACK_6, W
$05CA	$3980			ANDLW	0x80
$05CB	$13F6			BCF	STACK_6, 7
$05CC	$067A			XORWF	STACK_10, W
$05CD	$1903			BTFSC	STATUS, Z
$05CE	$2DD3			GOTO	COMPARE_TESTALL
$05CF	$087A			MOVF	STACK_10, W
$05D0	$1903			BTFSC	STATUS, Z
$05D1	$2DF6			GOTO	COMPARE_GT
$05D2	$2DF8			GOTO	COMPARE_LT
$05D3	$	COMPARE_TESTALL:
$05D3	$0877			MOVF	STACK_7, W
$05D4	$0273			SUBWF	STACK_3, W
$05D5	$1903			BTFSC	STATUS, Z
$05D6	$2DDA			GOTO	COMPARE_C1
$05D7	$1C03			BTFSS	STATUS, C
$05D8	$2DEE			GOTO	GT_FALSE
$05D9	$2DF2			GOTO	GT_TRUE
$05DA	$	COMPARE_C1:
$05DA	$0876			MOVF	STACK_6, W
$05DB	$0272			SUBWF	STACK_2, W
$05DC	$1903			BTFSC	STATUS, Z
$05DD	$2DE1			GOTO	COMPARE_C2
$05DE	$1C03			BTFSS	STATUS, C
$05DF	$2DEE			GOTO	GT_FALSE
$05E0	$2DF2			GOTO	GT_TRUE
$05E1	$	COMPARE_C2:
$05E1	$0875			MOVF	STACK_5, W
$05E2	$0271			SUBWF	STACK_1, W
$05E3	$1903			BTFSC	STATUS, Z
$05E4	$2DE8			GOTO	COMPARE_C3
$05E5	$1C03			BTFSS	STATUS, C
$05E6	$2DEE			GOTO	GT_FALSE
$05E7	$2DF2			GOTO	GT_TRUE
$05E8	$	COMPARE_C3:
$05E8	$0874			MOVF	STACK_4, W
$05E9	$0270			SUBWF	STACK_0, W
$05EA	$1903			BTFSC	STATUS, Z
$05EB	$2DFA			GOTO	COMPARE_EQU
$05EC	$1803			BTFSC	STATUS, C
$05ED	$2DF2			GOTO	GT_TRUE
$05EE	$	GT_FALSE:
$05EE	$08FA			MOVF	STACK_10, F
$05EF	$1903			BTFSC	STATUS, Z
$05F0	$2DF8			GOTO	COMPARE_LT
$05F1	$2DF6			GOTO	COMPARE_GT
$05F2	$	GT_TRUE:
$05F2	$08FA			MOVF	STACK_10, F
$05F3	$1903			BTFSC	STATUS, Z
$05F4	$2DF6			GOTO	COMPARE_GT
$05F5	$2DF8			GOTO	COMPARE_LT
$05F6	$	COMPARE_GT:
$05F6	$1403			BSF	STATUS, C
$05F7	$0008			RETURN
$05F8	$	COMPARE_LT:
$05F8	$1003			BCF	STATUS, C
$05F9	$0008			RETURN
$05FA	$	COMPARE_EQU:
$05FA	$1403			BSF	STATUS, C
$05FB	$1503			BSF	STATUS, Z
$05FC	$0008			RETURN
$05FD	$0008			RETURN
$0693	$	_Double2Byte:
$0693	$1303			BCF	STATUS, RP1
$0694	$1283			BCF	STATUS, RP0
$0695	$	INT32U08:
$0695	$01FB			CLRF	STACK_11
$0696	$01FC			CLRF	STACK_12
$0697	$01FA			CLRF	STACK_10
$0698	$0873			MOVF	STACK_3, W
$0699	$1903			BTFSC	STATUS, Z
$069A	$2EC0			GOTO	IRES008
$069B	$13FA			BCF	STACK_10, 7
$069C	$17F2			BSF	STACK_2, 7
$069D	$3086			MOVLW	134
$069E	$02F3			SUBWF	STACK_3, F
$069F	$1BF3			BTFSC	STACK_3, 7
$06A0	$2EA4			GOTO	SETEXP08
$06A1	$1903			BTFSC	STATUS, Z
$06A2	$2EA4			GOTO	SETEXP08
$06A3	$2EC2			GOTO	SETIOV08
$06A4	$	SETEXP08:
$06A4	$09F3			COMF	STACK_3, F
$06A5	$0AF3			INCF	STACK_3, F
$06A6	$3008			MOVLW	8
$06A7	$0273			SUBWF	STACK_3, W
$06A8	$1C03			BTFSS	STATUS, C
$06A9	$2EB1			GOTO	TSHIFT3208
$06AA	$00F3			MOVWF	STACK_3
$06AB	$0DF2			RLF	STACK_2, F
$06AC	$01F2			CLRF	STACK_2
$06AD	$0873			MOVF	STACK_3, W
$06AE	$1D03			BTFSS	STATUS, Z
$06AF	$1003			BCF	STATUS, C
$06B0	$2EB8			GOTO	SHIFT3208OK
$06B1	$	TSHIFT3208:
$06B1	$0873			MOVF	STACK_3, W
$06B2	$1903			BTFSC	STATUS, Z
$06B3	$2EB8			GOTO	SHIFT3208OK
$06B4	$	SHIFT3208:
$06B4	$1003			BCF	STATUS, C
$06B5	$0CF2			RRF	STACK_2, F
$06B6	$0BF3			DECFSZ	STACK_3, F
$06B7	$2EB4			GOTO	SHIFT3208
$06B8	$	SHIFT3208OK:
$06B8	$1B7B			BTFSC	STACK_11, 6
$06B9	$1C72			BTFSS	STACK_2, 0
$06BA	$2EC0			GOTO	INT3208OK
$06BB	$1C03			BTFSS	STATUS, C
$06BC	$2EC0			GOTO	INT3208OK
$06BD	$0AF2			INCF	STACK_2, F
$06BE	$1903			BTFSC	STATUS, Z
$06BF	$2EC7			GOTO	D2B_JPKSETIOV3224
$06C0	$	INT3208OK:
$06C0	$	IRES008:
$06C0	$01F1			CLRF	STACK_1
$06C1	$2ECA			GOTO	INT3208EOK
$06C2	$	SETIOV08:
$06C2	$147B			BSF	STACK_11, 0
$06C3	$1FFB			BTFSS	STACK_11, 7
$06C4	$2ECD			GOTO	INT3208EER
$06C5	$01F1			CLRF	STACK_1
$06C6	$2ECD			GOTO	INT3208EER
$06C7	$	D2B_JPKSETIOV3224:
$06C7	$3001			MOVLW	0x01
$06C8	$00FC			MOVWF	STACK_12
$06C9	$2ECF			GOTO	INT3208EEE
$06CA	$	INT3208EOK:
$06CA	$3000			MOVLW	0x00
$06CB	$00FC			MOVWF	STACK_12
$06CC	$2ECF			GOTO	INT3208EEE
$06CD	$	INT3208EER:
$06CD	$30FF			MOVLW	0xFF
$06CE	$00FC			MOVWF	STACK_12
$06CF	$	INT3208EEE:
$06CF	$08FC			MOVF	STACK_12, F
$06D0	$1903			BTFSC	STATUS, Z
$06D1	$2ED3			GOTO	L_Double2Byte_0
$06D2	$273A			CALL	_SETIOV3224
$06D3	$	L_Double2Byte_0:
$06D3	$0872			MOVF	STACK_2, W
$06D4	$00F0			MOVWF	STACK_0
$06D5	$0008			RETURN
$0004	$	_main:
;lfr_catcher_5sen_tsop.c,107 :: 		void main()
;lfr_catcher_5sen_tsop.c,110 :: 		initport();
$0004	$25FE			CALL	GlobalInilfr_catcher_5sen_tsop
$0005	$158A			BSF	PCLATH, 3
$0006	$20BB			CALL	_initport
$0007	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop.c,111 :: 		initpwm();
$0008	$158A			BSF	PCLATH, 3
$0009	$206C			CALL	_initpwm
$000A	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop.c,112 :: 		while(1)
$000B	$	L_main_5:
;lfr_catcher_5sen_tsop.c,114 :: 		indicator();
$000B	$255D			CALL	_indicator
;lfr_catcher_5sen_tsop.c,115 :: 		CalcError();
$000C	$226F			CALL	_CalcError
;lfr_catcher_5sen_tsop.c,117 :: 		if((error == 0) && (s3==1) && ((s1+s2+s4+s5)==0))
$000D	$01F4			CLRF	STACK_4
$000E	$01F5			CLRF	STACK_4+1
$000F	$01F6			CLRF	STACK_4+2
$0010	$01F7			CLRF	STACK_4+3
$0011	$0830			MOVF	_error, 0
$0012	$00F0			MOVWF	STACK_0
$0013	$0831			MOVF	_error+1, 0
$0014	$00F1			MOVWF	STACK_0+1
$0015	$0832			MOVF	_error+2, 0
$0016	$00F2			MOVWF	STACK_0+2
$0017	$0833			MOVF	_error+3, 0
$0018	$00F3			MOVWF	STACK_0+3
$0019	$158A			BSF	PCLATH, 3
$001A	$2093			CALL	_equals_double
$001B	$118A			BCF	PCLATH, 3
$001C	$3001			MOVLW	1
$001D	$1D03			BTFSS	STATUS, Z
$001E	$3000			MOVLW	0
$001F	$00F0			MOVWF	STACK_0
$0020	$0870			MOVF	STACK_0, 0
$0021	$1903			BTFSC	STATUS, Z
$0022	$2866			GOTO	L_main_9
$0023	$3000			MOVLW	0
$0024	$0626			XORWF	_s3+1, 0
$0025	$1D03			BTFSS	STATUS, Z
$0026	$2829			GOTO	L_main_22
$0027	$3001			MOVLW	1
$0028	$0625			XORWF	_s3, 0
$0029	$	L_main_22:
$0029	$1D03			BTFSS	STATUS, Z
$002A	$2866			GOTO	L_main_9
$002B	$0823			MOVF	_s2, 0
$002C	$0721			ADDWF	_s1, 0
$002D	$00F0			MOVWF	STACK_0
$002E	$0822			MOVF	_s1+1, 0
$002F	$1803			BTFSC	STATUS, C
$0030	$3F01			ADDLW	1
$0031	$0724			ADDWF	_s2+1, 0
$0032	$00F1			MOVWF	STACK_0+1
$0033	$0827			MOVF	_s4, 0
$0034	$07F0			ADDWF	STACK_0, 1
$0035	$0828			MOVF	_s4+1, 0
$0036	$1803			BTFSC	STATUS, C
$0037	$3F01			ADDLW	1
$0038	$07F1			ADDWF	STACK_0+1, 1
$0039	$0829			MOVF	_s5, 0
$003A	$0770			ADDWF	STACK_0, 0
$003B	$00F4			MOVWF	STACK_4
$003C	$0871			MOVF	STACK_0+1, 0
$003D	$1803			BTFSC	STATUS, C
$003E	$3F01			ADDLW	1
$003F	$072A			ADDWF	_s5+1, 0
$0040	$00F5			MOVWF	STACK_4+1
$0041	$3000			MOVLW	0
$0042	$0675			XORWF	STACK_4+1, 0
$0043	$1D03			BTFSS	STATUS, Z
$0044	$2847			GOTO	L_main_23
$0045	$3000			MOVLW	0
$0046	$0674			XORWF	STACK_4, 0
$0047	$	L_main_23:
$0047	$1D03			BTFSS	STATUS, Z
$0048	$2866			GOTO	L_main_9
$0049	$	L136_ex_L_main_9:
;lfr_catcher_5sen_tsop.c,119 :: 		motor_LF();					        	      //FWD AT FULL SPEED
$0049	$158A			BSF	PCLATH, 3
$004A	$2125			CALL	_motor_LF
$004B	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop.c,120 :: 		motor_RF();
$004C	$158A			BSF	PCLATH, 3
$004D	$2120			CALL	_motor_RF
$004E	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop.c,121 :: 		PWM1_CHANGE_DUTY(255);
$004F	$30FF			MOVLW	255
$0050	$00DC			MOVWF	FARG_PWM1_Change_Duty+0
$0051	$158A			BSF	PCLATH, 3
$0052	$2031			CALL	_PWM1_Change_Duty
$0053	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop.c,122 :: 		PWM2_CHANGE_DUTY(255);
$0054	$30FF			MOVLW	255
$0055	$00DC			MOVWF	FARG_PWM2_Change_Duty+0
$0056	$26D6			CALL	_PWM2_Change_Duty
;lfr_catcher_5sen_tsop.c,123 :: 		delay_ms(10);
$0057	$300D			MOVLW	13
$0058	$00FB			MOVWF	STACK_11
$0059	$30FF			MOVLW	255
$005A	$00FA			MOVWF	STACK_10
$005B	$0BFB			DECFSZ	STACK_11, F
$005C	$285E			GOTO	$+2
$005D	$2861			GOTO	$+4
$005E	$0BFA			DECFSZ	STACK_10, F
$005F	$285E			GOTO	$-1
$0060	$285B			GOTO	$-5
$0061	$30F3			MOVLW	243
$0062	$00FA			MOVWF	STACK_10
$0063	$0BFA			DECFSZ	STACK_10, F
$0064	$2863			GOTO	$-1
$0065	$0000			NOP
;lfr_catcher_5sen_tsop.c,124 :: 		}
$0066	$	L_main_9:
;lfr_catcher_5sen_tsop.c,126 :: 		if((s1+s2+s3+s4+s5) == 0)		          //ROBOT HAS OVERSHOOT
$0066	$0823			MOVF	_s2, 0
$0067	$0721			ADDWF	_s1, 0
$0068	$00F0			MOVWF	STACK_0
$0069	$0822			MOVF	_s1+1, 0
$006A	$1803			BTFSC	STATUS, C
$006B	$3F01			ADDLW	1
$006C	$0724			ADDWF	_s2+1, 0
$006D	$00F1			MOVWF	STACK_0+1
$006E	$0825			MOVF	_s3, 0
$006F	$07F0			ADDWF	STACK_0, 1
$0070	$0826			MOVF	_s3+1, 0
$0071	$1803			BTFSC	STATUS, C
$0072	$3F01			ADDLW	1
$0073	$07F1			ADDWF	STACK_0+1, 1
$0074	$0827			MOVF	_s4, 0
$0075	$07F0			ADDWF	STACK_0, 1
$0076	$0828			MOVF	_s4+1, 0
$0077	$1803			BTFSC	STATUS, C
$0078	$3F01			ADDLW	1
$0079	$07F1			ADDWF	STACK_0+1, 1
$007A	$0829			MOVF	_s5, 0
$007B	$0770			ADDWF	STACK_0, 0
$007C	$00F4			MOVWF	STACK_4
$007D	$0871			MOVF	STACK_0+1, 0
$007E	$1803			BTFSC	STATUS, C
$007F	$3F01			ADDLW	1
$0080	$072A			ADDWF	_s5+1, 0
$0081	$00F5			MOVWF	STACK_4+1
$0082	$3000			MOVLW	0
$0083	$0675			XORWF	STACK_4+1, 0
$0084	$1D03			BTFSS	STATUS, Z
$0085	$2888			GOTO	L_main_24
$0086	$3000			MOVLW	0
$0087	$0674			XORWF	STACK_4, 0
$0088	$	L_main_24:
$0088	$1D03			BTFSS	STATUS, Z
$0089	$28CD			GOTO	L_main_10
;lfr_catcher_5sen_tsop.c,128 :: 		if(lastreading == 'r')				      //CHECKS IF THE LAST SENSOR ACTIVATED WAS RIGHT
$008A	$082B			MOVF	_lastreading, 0
$008B	$3A72			XORLW	114
$008C	$1D03			BTFSS	STATUS, Z
$008D	$28AB			GOTO	L_main_11
;lfr_catcher_5sen_tsop.c,130 :: 		motor_RB();						          //TURN RIGHT AT FULL SPEED
$008E	$158A			BSF	PCLATH, 3
$008F	$212A			CALL	_motor_RB
$0090	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop.c,131 :: 		motor_LF();
$0091	$158A			BSF	PCLATH, 3
$0092	$2125			CALL	_motor_LF
$0093	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop.c,132 :: 		PWM1_CHANGE_DUTY(200);
$0094	$30C8			MOVLW	200
$0095	$00DC			MOVWF	FARG_PWM1_Change_Duty+0
$0096	$158A			BSF	PCLATH, 3
$0097	$2031			CALL	_PWM1_Change_Duty
$0098	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop.c,133 :: 		PWM2_CHANGE_DUTY(200);
$0099	$30C8			MOVLW	200
$009A	$00DC			MOVWF	FARG_PWM2_Change_Duty+0
$009B	$26D6			CALL	_PWM2_Change_Duty
;lfr_catcher_5sen_tsop.c,134 :: 		delay_ms(10);
$009C	$300D			MOVLW	13
$009D	$00FB			MOVWF	STACK_11
$009E	$30FF			MOVLW	255
$009F	$00FA			MOVWF	STACK_10
$00A0	$0BFB			DECFSZ	STACK_11, F
$00A1	$28A3			GOTO	$+2
$00A2	$28A6			GOTO	$+4
$00A3	$0BFA			DECFSZ	STACK_10, F
$00A4	$28A3			GOTO	$-1
$00A5	$28A0			GOTO	$-5
$00A6	$30F3			MOVLW	243
$00A7	$00FA			MOVWF	STACK_10
$00A8	$0BFA			DECFSZ	STACK_10, F
$00A9	$28A8			GOTO	$-1
$00AA	$0000			NOP
;lfr_catcher_5sen_tsop.c,135 :: 		}
$00AB	$	L_main_11:
;lfr_catcher_5sen_tsop.c,136 :: 		if(lastreading == 'l')			        //CHECKS IF THE LAST SENSOR ACTIVATED WAS LEFT
$00AB	$082B			MOVF	_lastreading, 0
$00AC	$3A6C			XORLW	108
$00AD	$1D03			BTFSS	STATUS, Z
$00AE	$28CC			GOTO	L_main_12
;lfr_catcher_5sen_tsop.c,138 :: 		motor_LB();					        	  //TURN LEFT AT FULL SPEED
$00AF	$158A			BSF	PCLATH, 3
$00B0	$211B			CALL	_motor_LB
$00B1	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop.c,139 :: 		motor_RF();
$00B2	$158A			BSF	PCLATH, 3
$00B3	$2120			CALL	_motor_RF
$00B4	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop.c,140 :: 		PWM1_CHANGE_DUTY(200);
$00B5	$30C8			MOVLW	200
$00B6	$00DC			MOVWF	FARG_PWM1_Change_Duty+0
$00B7	$158A			BSF	PCLATH, 3
$00B8	$2031			CALL	_PWM1_Change_Duty
$00B9	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop.c,141 :: 		PWM2_CHANGE_DUTY(200);
$00BA	$30C8			MOVLW	200
$00BB	$00DC			MOVWF	FARG_PWM2_Change_Duty+0
$00BC	$26D6			CALL	_PWM2_Change_Duty
;lfr_catcher_5sen_tsop.c,142 :: 		delay_ms(10);
$00BD	$300D			MOVLW	13
$00BE	$00FB			MOVWF	STACK_11
$00BF	$30FF			MOVLW	255
$00C0	$00FA			MOVWF	STACK_10
$00C1	$0BFB			DECFSZ	STACK_11, F
$00C2	$28C4			GOTO	$+2
$00C3	$28C7			GOTO	$+4
$00C4	$0BFA			DECFSZ	STACK_10, F
$00C5	$28C4			GOTO	$-1
$00C6	$28C1			GOTO	$-5
$00C7	$30F3			MOVLW	243
$00C8	$00FA			MOVWF	STACK_10
$00C9	$0BFA			DECFSZ	STACK_10, F
$00CA	$28C9			GOTO	$-1
$00CB	$0000			NOP
;lfr_catcher_5sen_tsop.c,143 :: 		}
$00CC	$	L_main_12:
;lfr_catcher_5sen_tsop.c,144 :: 		}
$00CC	$2A5E			GOTO	L_main_13
$00CD	$	L_main_10:
;lfr_catcher_5sen_tsop.c,147 :: 		PROPORTIONAL = error * kp;
$00CD	$0835			MOVF	_Kp, 0
$00CE	$00F0			MOVWF	STACK_0
$00CF	$158A			BSF	PCLATH, 3
$00D0	$20A9			CALL	_byte2double
$00D1	$118A			BCF	PCLATH, 3
$00D2	$0830			MOVF	_error, 0
$00D3	$00F4			MOVWF	STACK_4
$00D4	$0831			MOVF	_error+1, 0
$00D5	$00F5			MOVWF	STACK_4+1
$00D6	$0832			MOVF	_error+2, 0
$00D7	$00F6			MOVWF	STACK_4+2
$00D8	$0833			MOVF	_error+3, 0
$00D9	$00F7			MOVWF	STACK_4+3
$00DA	$2492			CALL	_mul_32x32_fp
$00DB	$0870			MOVF	STACK_0, 0
$00DC	$00D8			MOVWF	FLOC_main+8
$00DD	$0871			MOVF	STACK_0+1, 0
$00DE	$00D9			MOVWF	FLOC_main+9
$00DF	$0872			MOVF	STACK_0+2, 0
$00E0	$00DA			MOVWF	FLOC_main+10
$00E1	$0873			MOVF	STACK_0+3, 0
$00E2	$00DB			MOVWF	FLOC_main+11
$00E3	$0858			MOVF	FLOC_main+8, 0
$00E4	$00C0			MOVWF	_PROPORTIONAL
$00E5	$0859			MOVF	FLOC_main+9, 0
$00E6	$00C1			MOVWF	_PROPORTIONAL+1
$00E7	$085A			MOVF	FLOC_main+10, 0
$00E8	$00C2			MOVWF	_PROPORTIONAL+2
$00E9	$085B			MOVF	FLOC_main+11, 0
$00EA	$00C3			MOVWF	_PROPORTIONAL+3
;lfr_catcher_5sen_tsop.c,148 :: 		INTEGRAL += error ;
$00EB	$0844			MOVF	_INTEGRAL, 0
$00EC	$00F0			MOVWF	STACK_0
$00ED	$0845			MOVF	_INTEGRAL+1, 0
$00EE	$00F1			MOVWF	STACK_0+1
$00EF	$0846			MOVF	_INTEGRAL+2, 0
$00F0	$00F2			MOVWF	STACK_0+2
$00F1	$0847			MOVF	_INTEGRAL+3, 0
$00F2	$00F3			MOVWF	STACK_0+3
$00F3	$0830			MOVF	_error, 0
$00F4	$00F4			MOVWF	STACK_4
$00F5	$0831			MOVF	_error+1, 0
$00F6	$00F5			MOVWF	STACK_4+1
$00F7	$0832			MOVF	_error+2, 0
$00F8	$00F6			MOVWF	STACK_4+2
$00F9	$0833			MOVF	_error+3, 0
$00FA	$00F7			MOVWF	STACK_4+3
$00FB	$234A			CALL	_add_32x32_fp
$00FC	$0870			MOVF	STACK_0, 0
$00FD	$00D0			MOVWF	FLOC_main+0
$00FE	$0871			MOVF	STACK_0+1, 0
$00FF	$00D1			MOVWF	FLOC_main+1
$0100	$0872			MOVF	STACK_0+2, 0
$0101	$00D2			MOVWF	FLOC_main+2
$0102	$0873			MOVF	STACK_0+3, 0
$0103	$00D3			MOVWF	FLOC_main+3
$0104	$0850			MOVF	FLOC_main+0, 0
$0105	$00C4			MOVWF	_INTEGRAL
$0106	$0851			MOVF	FLOC_main+1, 0
$0107	$00C5			MOVWF	_INTEGRAL+1
$0108	$0852			MOVF	FLOC_main+2, 0
$0109	$00C6			MOVWF	_INTEGRAL+2
$010A	$0853			MOVF	FLOC_main+3, 0
$010B	$00C7			MOVWF	_INTEGRAL+3
;lfr_catcher_5sen_tsop.c,149 :: 		INTEGRAL *= ki;
$010C	$0836			MOVF	_Ki, 0
$010D	$00F0			MOVWF	STACK_0
$010E	$158A			BSF	PCLATH, 3
$010F	$20A9			CALL	_byte2double
$0110	$118A			BCF	PCLATH, 3
$0111	$0850			MOVF	FLOC_main+0, 0
$0112	$00F4			MOVWF	STACK_4
$0113	$0851			MOVF	FLOC_main+1, 0
$0114	$00F5			MOVWF	STACK_4+1
$0115	$0852			MOVF	FLOC_main+2, 0
$0116	$00F6			MOVWF	STACK_4+2
$0117	$0853			MOVF	FLOC_main+3, 0
$0118	$00F7			MOVWF	STACK_4+3
$0119	$2492			CALL	_mul_32x32_fp
$011A	$0870			MOVF	STACK_0, 0
$011B	$00D0			MOVWF	FLOC_main+0
$011C	$0871			MOVF	STACK_0+1, 0
$011D	$00D1			MOVWF	FLOC_main+1
$011E	$0872			MOVF	STACK_0+2, 0
$011F	$00D2			MOVWF	FLOC_main+2
$0120	$0873			MOVF	STACK_0+3, 0
$0121	$00D3			MOVWF	FLOC_main+3
$0122	$0850			MOVF	FLOC_main+0, 0
$0123	$00C4			MOVWF	_INTEGRAL
$0124	$0851			MOVF	FLOC_main+1, 0
$0125	$00C5			MOVWF	_INTEGRAL+1
$0126	$0852			MOVF	FLOC_main+2, 0
$0127	$00C6			MOVWF	_INTEGRAL+2
$0128	$0853			MOVF	FLOC_main+3, 0
$0129	$00C7			MOVWF	_INTEGRAL+3
;lfr_catcher_5sen_tsop.c,150 :: 		DERIVATIVE = (error - perror);
$012A	$082C			MOVF	_perror, 0
$012B	$00F4			MOVWF	STACK_4
$012C	$082D			MOVF	_perror+1, 0
$012D	$00F5			MOVWF	STACK_4+1
$012E	$082E			MOVF	_perror+2, 0
$012F	$00F6			MOVWF	STACK_4+2
$0130	$082F			MOVF	_perror+3, 0
$0131	$00F7			MOVWF	STACK_4+3
$0132	$0830			MOVF	_error, 0
$0133	$00F0			MOVWF	STACK_0
$0134	$0831			MOVF	_error+1, 0
$0135	$00F1			MOVWF	STACK_0+1
$0136	$0832			MOVF	_error+2, 0
$0137	$00F2			MOVWF	STACK_0+2
$0138	$0833			MOVF	_error+3, 0
$0139	$00F3			MOVWF	STACK_0+3
$013A	$158A			BSF	PCLATH, 3
$013B	$20E8			CALL	_sub_32x32_fp
$013C	$118A			BCF	PCLATH, 3
$013D	$0870			MOVF	STACK_0, 0
$013E	$00D4			MOVWF	FLOC_main+4
$013F	$0871			MOVF	STACK_0+1, 0
$0140	$00D5			MOVWF	FLOC_main+5
$0141	$0872			MOVF	STACK_0+2, 0
$0142	$00D6			MOVWF	FLOC_main+6
$0143	$0873			MOVF	STACK_0+3, 0
$0144	$00D7			MOVWF	FLOC_main+7
$0145	$0854			MOVF	FLOC_main+4, 0
$0146	$00C8			MOVWF	_DERIVATIVE
$0147	$0855			MOVF	FLOC_main+5, 0
$0148	$00C9			MOVWF	_DERIVATIVE+1
$0149	$0856			MOVF	FLOC_main+6, 0
$014A	$00CA			MOVWF	_DERIVATIVE+2
$014B	$0857			MOVF	FLOC_main+7, 0
$014C	$00CB			MOVWF	_DERIVATIVE+3
;lfr_catcher_5sen_tsop.c,151 :: 		correction = ( (PROPORTIONAL) + (INTEGRAL) + (DERIVATIVE*kd));
$014D	$0858			MOVF	FLOC_main+8, 0
$014E	$00F0			MOVWF	STACK_0
$014F	$0859			MOVF	FLOC_main+9, 0
$0150	$00F1			MOVWF	STACK_0+1
$0151	$085A			MOVF	FLOC_main+10, 0
$0152	$00F2			MOVWF	STACK_0+2
$0153	$085B			MOVF	FLOC_main+11, 0
$0154	$00F3			MOVWF	STACK_0+3
$0155	$0850			MOVF	FLOC_main+0, 0
$0156	$00F4			MOVWF	STACK_4
$0157	$0851			MOVF	FLOC_main+1, 0
$0158	$00F5			MOVWF	STACK_4+1
$0159	$0852			MOVF	FLOC_main+2, 0
$015A	$00F6			MOVWF	STACK_4+2
$015B	$0853			MOVF	FLOC_main+3, 0
$015C	$00F7			MOVWF	STACK_4+3
$015D	$234A			CALL	_add_32x32_fp
$015E	$0870			MOVF	STACK_0, 0
$015F	$00D0			MOVWF	FLOC_main+0
$0160	$0871			MOVF	STACK_0+1, 0
$0161	$00D1			MOVWF	FLOC_main+1
$0162	$0872			MOVF	STACK_0+2, 0
$0163	$00D2			MOVWF	FLOC_main+2
$0164	$0873			MOVF	STACK_0+3, 0
$0165	$00D3			MOVWF	FLOC_main+3
$0166	$0837			MOVF	_Kd, 0
$0167	$00F0			MOVWF	STACK_0
$0168	$158A			BSF	PCLATH, 3
$0169	$20A9			CALL	_byte2double
$016A	$118A			BCF	PCLATH, 3
$016B	$0854			MOVF	FLOC_main+4, 0
$016C	$00F4			MOVWF	STACK_4
$016D	$0855			MOVF	FLOC_main+5, 0
$016E	$00F5			MOVWF	STACK_4+1
$016F	$0856			MOVF	FLOC_main+6, 0
$0170	$00F6			MOVWF	STACK_4+2
$0171	$0857			MOVF	FLOC_main+7, 0
$0172	$00F7			MOVWF	STACK_4+3
$0173	$2492			CALL	_mul_32x32_fp
$0174	$0850			MOVF	FLOC_main+0, 0
$0175	$00F4			MOVWF	STACK_4
$0176	$0851			MOVF	FLOC_main+1, 0
$0177	$00F5			MOVWF	STACK_4+1
$0178	$0852			MOVF	FLOC_main+2, 0
$0179	$00F6			MOVWF	STACK_4+2
$017A	$0853			MOVF	FLOC_main+3, 0
$017B	$00F7			MOVWF	STACK_4+3
$017C	$234A			CALL	_add_32x32_fp
$017D	$0870			MOVF	STACK_0, 0
$017E	$00D4			MOVWF	FLOC_main+4
$017F	$0871			MOVF	STACK_0+1, 0
$0180	$00D5			MOVWF	FLOC_main+5
$0181	$0872			MOVF	STACK_0+2, 0
$0182	$00D6			MOVWF	FLOC_main+6
$0183	$0873			MOVF	STACK_0+3, 0
$0184	$00D7			MOVWF	FLOC_main+7
$0185	$0854			MOVF	FLOC_main+4, 0
$0186	$00CC			MOVWF	_correction
$0187	$0855			MOVF	FLOC_main+5, 0
$0188	$00CD			MOVWF	_correction+1
$0189	$0856			MOVF	FLOC_main+6, 0
$018A	$00CE			MOVWF	_correction+2
$018B	$0857			MOVF	FLOC_main+7, 0
$018C	$00CF			MOVWF	_correction+3
;lfr_catcher_5sen_tsop.c,152 :: 		rightpulse =  basespeed + correction;
$018D	$0834			MOVF	_basespeed, 0
$018E	$00F0			MOVWF	STACK_0
$018F	$158A			BSF	PCLATH, 3
$0190	$20A9			CALL	_byte2double
$0191	$118A			BCF	PCLATH, 3
$0192	$0870			MOVF	STACK_0, 0
$0193	$00D0			MOVWF	FLOC_main+0
$0194	$0871			MOVF	STACK_0+1, 0
$0195	$00D1			MOVWF	FLOC_main+1
$0196	$0872			MOVF	STACK_0+2, 0
$0197	$00D2			MOVWF	FLOC_main+2
$0198	$0873			MOVF	STACK_0+3, 0
$0199	$00D3			MOVWF	FLOC_main+3
$019A	$0850			MOVF	FLOC_main+0, 0
$019B	$00F0			MOVWF	STACK_0
$019C	$0851			MOVF	FLOC_main+1, 0
$019D	$00F1			MOVWF	STACK_0+1
$019E	$0852			MOVF	FLOC_main+2, 0
$019F	$00F2			MOVWF	STACK_0+2
$01A0	$0853			MOVF	FLOC_main+3, 0
$01A1	$00F3			MOVWF	STACK_0+3
$01A2	$0854			MOVF	FLOC_main+4, 0
$01A3	$00F4			MOVWF	STACK_4
$01A4	$0855			MOVF	FLOC_main+5, 0
$01A5	$00F5			MOVWF	STACK_4+1
$01A6	$0856			MOVF	FLOC_main+6, 0
$01A7	$00F6			MOVWF	STACK_4+2
$01A8	$0857			MOVF	FLOC_main+7, 0
$01A9	$00F7			MOVWF	STACK_4+3
$01AA	$234A			CALL	_add_32x32_fp
$01AB	$0870			MOVF	STACK_0, 0
$01AC	$00B8			MOVWF	_rightpulse
$01AD	$0871			MOVF	STACK_0+1, 0
$01AE	$00B9			MOVWF	_rightpulse+1
$01AF	$0872			MOVF	STACK_0+2, 0
$01B0	$00BA			MOVWF	_rightpulse+2
$01B1	$0873			MOVF	STACK_0+3, 0
$01B2	$00BB			MOVWF	_rightpulse+3
;lfr_catcher_5sen_tsop.c,153 :: 		leftpulse = basespeed - correction;
$01B3	$0854			MOVF	FLOC_main+4, 0
$01B4	$00F4			MOVWF	STACK_4
$01B5	$0855			MOVF	FLOC_main+5, 0
$01B6	$00F5			MOVWF	STACK_4+1
$01B7	$0856			MOVF	FLOC_main+6, 0
$01B8	$00F6			MOVWF	STACK_4+2
$01B9	$0857			MOVF	FLOC_main+7, 0
$01BA	$00F7			MOVWF	STACK_4+3
$01BB	$0850			MOVF	FLOC_main+0, 0
$01BC	$00F0			MOVWF	STACK_0
$01BD	$0851			MOVF	FLOC_main+1, 0
$01BE	$00F1			MOVWF	STACK_0+1
$01BF	$0852			MOVF	FLOC_main+2, 0
$01C0	$00F2			MOVWF	STACK_0+2
$01C1	$0853			MOVF	FLOC_main+3, 0
$01C2	$00F3			MOVWF	STACK_0+3
$01C3	$158A			BSF	PCLATH, 3
$01C4	$20E8			CALL	_sub_32x32_fp
$01C5	$118A			BCF	PCLATH, 3
$01C6	$0870			MOVF	STACK_0, 0
$01C7	$00BC			MOVWF	_leftpulse
$01C8	$0871			MOVF	STACK_0+1, 0
$01C9	$00BD			MOVWF	_leftpulse+1
$01CA	$0872			MOVF	STACK_0+2, 0
$01CB	$00BE			MOVWF	_leftpulse+2
$01CC	$0873			MOVF	STACK_0+3, 0
$01CD	$00BF			MOVWF	_leftpulse+3
;lfr_catcher_5sen_tsop.c,154 :: 		motor_RF();
$01CE	$158A			BSF	PCLATH, 3
$01CF	$2120			CALL	_motor_RF
$01D0	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop.c,155 :: 		motor_LF();
$01D1	$158A			BSF	PCLATH, 3
$01D2	$2125			CALL	_motor_LF
$01D3	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop.c,157 :: 		if(leftpulse > 255)                 //LEFT CORRECTION EXCEED
$01D4	$083C			MOVF	_leftpulse, 0
$01D5	$00F4			MOVWF	STACK_4
$01D6	$083D			MOVF	_leftpulse+1, 0
$01D7	$00F5			MOVWF	STACK_4+1
$01D8	$083E			MOVF	_leftpulse+2, 0
$01D9	$00F6			MOVWF	STACK_4+2
$01DA	$083F			MOVF	_leftpulse+3, 0
$01DB	$00F7			MOVWF	STACK_4+3
$01DC	$3000			MOVLW	0
$01DD	$00F0			MOVWF	STACK_0
$01DE	$3000			MOVLW	0
$01DF	$00F1			MOVWF	STACK_0+1
$01E0	$307F			MOVLW	127
$01E1	$00F2			MOVWF	STACK_0+2
$01E2	$3086			MOVLW	134
$01E3	$00F3			MOVWF	STACK_0+3
$01E4	$25AE			CALL	_compare_double
$01E5	$3001			MOVLW	1
$01E6	$1803			BTFSC	STATUS, C
$01E7	$3000			MOVLW	0
$01E8	$00F0			MOVWF	STACK_0
$01E9	$0870			MOVF	STACK_0, 0
$01EA	$1903			BTFSC	STATUS, Z
$01EB	$29F4			GOTO	L_main_14
;lfr_catcher_5sen_tsop.c,158 :: 		leftpulse = 255;
$01EC	$3000			MOVLW	0
$01ED	$00BC			MOVWF	_leftpulse
$01EE	$3000			MOVLW	0
$01EF	$00BD			MOVWF	_leftpulse+1
$01F0	$307F			MOVLW	127
$01F1	$00BE			MOVWF	_leftpulse+2
$01F2	$3086			MOVLW	134
$01F3	$00BF			MOVWF	_leftpulse+3
$01F4	$	L_main_14:
;lfr_catcher_5sen_tsop.c,160 :: 		if(rightpulse > 255)                //RIGHT CORRECTION EXCEED
$01F4	$0838			MOVF	_rightpulse, 0
$01F5	$00F4			MOVWF	STACK_4
$01F6	$0839			MOVF	_rightpulse+1, 0
$01F7	$00F5			MOVWF	STACK_4+1
$01F8	$083A			MOVF	_rightpulse+2, 0
$01F9	$00F6			MOVWF	STACK_4+2
$01FA	$083B			MOVF	_rightpulse+3, 0
$01FB	$00F7			MOVWF	STACK_4+3
$01FC	$3000			MOVLW	0
$01FD	$00F0			MOVWF	STACK_0
$01FE	$3000			MOVLW	0
$01FF	$00F1			MOVWF	STACK_0+1
$0200	$307F			MOVLW	127
$0201	$00F2			MOVWF	STACK_0+2
$0202	$3086			MOVLW	134
$0203	$00F3			MOVWF	STACK_0+3
$0204	$25AE			CALL	_compare_double
$0205	$3001			MOVLW	1
$0206	$1803			BTFSC	STATUS, C
$0207	$3000			MOVLW	0
$0208	$00F0			MOVWF	STACK_0
$0209	$0870			MOVF	STACK_0, 0
$020A	$1903			BTFSC	STATUS, Z
$020B	$2A14			GOTO	L_main_15
;lfr_catcher_5sen_tsop.c,161 :: 		rightpulse = 255;
$020C	$3000			MOVLW	0
$020D	$00B8			MOVWF	_rightpulse
$020E	$3000			MOVLW	0
$020F	$00B9			MOVWF	_rightpulse+1
$0210	$307F			MOVLW	127
$0211	$00BA			MOVWF	_rightpulse+2
$0212	$3086			MOVLW	134
$0213	$00BB			MOVWF	_rightpulse+3
$0214	$	L_main_15:
;lfr_catcher_5sen_tsop.c,163 :: 		if(leftpulse < 0)                   //LEFT CORRECTION EXCEED
$0214	$01F4			CLRF	STACK_4
$0215	$01F5			CLRF	STACK_4+1
$0216	$01F6			CLRF	STACK_4+2
$0217	$01F7			CLRF	STACK_4+3
$0218	$083C			MOVF	_leftpulse, 0
$0219	$00F0			MOVWF	STACK_0
$021A	$083D			MOVF	_leftpulse+1, 0
$021B	$00F1			MOVWF	STACK_0+1
$021C	$083E			MOVF	_leftpulse+2, 0
$021D	$00F2			MOVWF	STACK_0+2
$021E	$083F			MOVF	_leftpulse+3, 0
$021F	$00F3			MOVWF	STACK_0+3
$0220	$25AE			CALL	_compare_double
$0221	$3001			MOVLW	1
$0222	$1803			BTFSC	STATUS, C
$0223	$3000			MOVLW	0
$0224	$00F0			MOVWF	STACK_0
$0225	$0870			MOVF	STACK_0, 0
$0226	$1903			BTFSC	STATUS, Z
$0227	$2A2C			GOTO	L_main_16
;lfr_catcher_5sen_tsop.c,164 :: 		leftpulse = 0;
$0228	$01BC			CLRF	_leftpulse
$0229	$01BD			CLRF	_leftpulse+1
$022A	$01BE			CLRF	_leftpulse+2
$022B	$01BF			CLRF	_leftpulse+3
$022C	$	L_main_16:
;lfr_catcher_5sen_tsop.c,166 :: 		if(rightpulse < 0)                  //RIGHT CORRECTION EXCEED
$022C	$01F4			CLRF	STACK_4
$022D	$01F5			CLRF	STACK_4+1
$022E	$01F6			CLRF	STACK_4+2
$022F	$01F7			CLRF	STACK_4+3
$0230	$0838			MOVF	_rightpulse, 0
$0231	$00F0			MOVWF	STACK_0
$0232	$0839			MOVF	_rightpulse+1, 0
$0233	$00F1			MOVWF	STACK_0+1
$0234	$083A			MOVF	_rightpulse+2, 0
$0235	$00F2			MOVWF	STACK_0+2
$0236	$083B			MOVF	_rightpulse+3, 0
$0237	$00F3			MOVWF	STACK_0+3
$0238	$25AE			CALL	_compare_double
$0239	$3001			MOVLW	1
$023A	$1803			BTFSC	STATUS, C
$023B	$3000			MOVLW	0
$023C	$00F0			MOVWF	STACK_0
$023D	$0870			MOVF	STACK_0, 0
$023E	$1903			BTFSC	STATUS, Z
$023F	$2A44			GOTO	L_main_17
;lfr_catcher_5sen_tsop.c,167 :: 		rightpulse = 0;
$0240	$01B8			CLRF	_rightpulse
$0241	$01B9			CLRF	_rightpulse+1
$0242	$01BA			CLRF	_rightpulse+2
$0243	$01BB			CLRF	_rightpulse+3
$0244	$	L_main_17:
;lfr_catcher_5sen_tsop.c,169 :: 		PWM1_CHANGE_DUTY(rightpulse);
$0244	$0838			MOVF	_rightpulse, 0
$0245	$00F0			MOVWF	STACK_0
$0246	$0839			MOVF	_rightpulse+1, 0
$0247	$00F1			MOVWF	STACK_0+1
$0248	$083A			MOVF	_rightpulse+2, 0
$0249	$00F2			MOVWF	STACK_0+2
$024A	$083B			MOVF	_rightpulse+3, 0
$024B	$00F3			MOVWF	STACK_0+3
$024C	$2693			CALL	_double2byte
$024D	$0870			MOVF	STACK_0, 0
$024E	$00DC			MOVWF	FARG_PWM1_Change_Duty+0
$024F	$158A			BSF	PCLATH, 3
$0250	$2031			CALL	_PWM1_Change_Duty
$0251	$118A			BCF	PCLATH, 3
;lfr_catcher_5sen_tsop.c,170 :: 		PWM2_CHANGE_DUTY(leftpulse);
$0252	$083C			MOVF	_leftpulse, 0
$0253	$00F0			MOVWF	STACK_0
$0254	$083D			MOVF	_leftpulse+1, 0
$0255	$00F1			MOVWF	STACK_0+1
$0256	$083E			MOVF	_leftpulse+2, 0
$0257	$00F2			MOVWF	STACK_0+2
$0258	$083F			MOVF	_leftpulse+3, 0
$0259	$00F3			MOVWF	STACK_0+3
$025A	$2693			CALL	_double2byte
$025B	$0870			MOVF	STACK_0, 0
$025C	$00DC			MOVWF	FARG_PWM2_Change_Duty+0
$025D	$26D6			CALL	_PWM2_Change_Duty
;lfr_catcher_5sen_tsop.c,171 :: 		}
$025E	$	L_main_13:
;lfr_catcher_5sen_tsop.c,172 :: 		delay_ms(10);
$025E	$300D			MOVLW	13
$025F	$00FB			MOVWF	STACK_11
$0260	$30FF			MOVLW	255
$0261	$00FA			MOVWF	STACK_10
$0262	$0BFB			DECFSZ	STACK_11, F
$0263	$2A65			GOTO	$+2
$0264	$2A68			GOTO	$+4
$0265	$0BFA			DECFSZ	STACK_10, F
$0266	$2A65			GOTO	$-1
$0267	$2A62			GOTO	$-5
$0268	$30F3			MOVLW	243
$0269	$00FA			MOVWF	STACK_10
$026A	$0BFA			DECFSZ	STACK_10, F
$026B	$2A6A			GOTO	$-1
$026C	$0000			NOP
;lfr_catcher_5sen_tsop.c,173 :: 		}
$026D	$280B			GOTO	L_main_5
;lfr_catcher_5sen_tsop.c,174 :: 		}
$026E	$2A6E			GOTO	$
