;  ASM code generated by mikroVirtualMachine for PIC - V. 8.2.0.0
;  Date/Time: 2/22/2011 10:44:27 PM
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$2804			GOTO	_main
$0740	$	_RES032:
$0740	$1303			BCF	STATUS, RP1
$0741	$1283			BCF	STATUS, RP0
$0742	$01F2			CLRF	STACK_2
$0743	$01F1			CLRF	STACK_1
$0744	$01F0			CLRF	STACK_0
$0745	$01F8			CLRF	STACK_8
$0746	$01F3			CLRF	STACK_3
$0747	$3000			MOVLW	0
$0748	$0008			RETURN
$0B89	$	_SETFUN32:
$0B89	$1303			BCF	STATUS, RP1
$0B8A	$1283			BCF	STATUS, RP0
$0B8B	$157B			BSF	STACK_11, 2
$0B8C	$1FFB			BTFSS	STACK_11, 7
$0B8D	$2B95			GOTO	SETFUN32EEE
$0B8E	$3001			MOVLW	0x01
$0B8F	$00F3			MOVWF	STACK_3
$0B90	$01F2			CLRF	STACK_2
$0B91	$01F1			CLRF	STACK_1
$0B92	$01F0			CLRF	STACK_0
$0B93	$0DFA			RLF	STACK_10, F
$0B94	$0CF2			RRF	STACK_2, F
$0B95	$	SETFUN32EEE:
$0B95	$30FF			MOVLW	0xFF
$0B96	$0008			RETURN
$0BC3	$	_FIXSIGN32:
$0BC3	$1303			BCF	STATUS, RP1
$0BC4	$1283			BCF	STATUS, RP0
$0BC5	$1FFA			BTFSS	STACK_10, 7
$0BC6	$13F2			BCF	STACK_2, 7
$0BC7	$3000			MOVLW	0
$0BC8	$0008			RETURN
$0B7B	$	_SETFOV32:
$0B7B	$1303			BCF	STATUS, RP1
$0B7C	$1283			BCF	STATUS, RP0
$0B7D	$14FB			BSF	STACK_11, 1
$0B7E	$1FFB			BTFSS	STACK_11, 7
$0B7F	$2B87			GOTO	SETFOV32EEE
$0B80	$30FF			MOVLW	0xFF
$0B81	$00F3			MOVWF	STACK_3
$0B82	$00F2			MOVWF	STACK_2
$0B83	$00F1			MOVWF	STACK_1
$0B84	$00F0			MOVWF	STACK_0
$0B85	$0DFA			RLF	STACK_10, F
$0B86	$0CF2			RRF	STACK_2, F
$0B87	$	SETFOV32EEE:
$0B87	$30FF			MOVLW	0xFF
$0B88	$0008			RETURN
$0863	$	_NRM4032:
$0863	$1303			BCF	STATUS, RP1
$0864	$1283			BCF	STATUS, RP0
$0865	$187C			BTFSC	STACK_12, 0
$0866	$289B			GOTO	NRMRND4032
$0867	$18FC			BTFSC	STACK_12, 1
$0868	$286C			GOTO	NRM4032
$0869	$197C			BTFSC	STACK_12, 2
$086A	$28BC			GOTO	JMPSETFOV32
$086B	$2865			GOTO	$-6
$086C	$	NRM4032:
$086C	$01A0			CLRF	__math_tempbD
$086D	$0872			MOVF	STACK_2, W
$086E	$1D03			BTFSS	STATUS, Z
$086F	$288C			GOTO	NORM4032
$0870	$0871			MOVF	STACK_1, W
$0871	$00F2			MOVWF	STACK_2
$0872	$0870			MOVF	STACK_0, W
$0873	$00F1			MOVWF	STACK_1
$0874	$0878			MOVF	STACK_8, W
$0875	$00F0			MOVWF	STACK_0
$0876	$01F8			CLRF	STACK_8
$0877	$15A0			BSF	__math_tempbD, 3
$0878	$0872			MOVF	STACK_2, W
$0879	$1D03			BTFSS	STATUS, Z
$087A	$288C			GOTO	NORM4032
$087B	$0871			MOVF	STACK_1, W
$087C	$00F2			MOVWF	STACK_2
$087D	$0870			MOVF	STACK_0, W
$087E	$00F1			MOVWF	STACK_1
$087F	$01F0			CLRF	STACK_0
$0880	$11A0			BCF	__math_tempbD, 3
$0881	$1620			BSF	__math_tempbD, 4
$0882	$0872			MOVF	STACK_2, W
$0883	$1D03			BTFSS	STATUS, Z
$0884	$288C			GOTO	NORM4032
$0885	$0871			MOVF	STACK_1, W
$0886	$00F2			MOVWF	STACK_2
$0887	$01F1			CLRF	STACK_1
$0888	$15A0			BSF	__math_tempbD, 3
$0889	$0872			MOVF	STACK_2, W
$088A	$1903			BTFSC	STATUS, Z
$088B	$28AE			GOTO	JMPRES032
$088C	$	NORM4032:
$088C	$0820			MOVF	__math_tempbD, W
$088D	$02F3			SUBWF	STACK_3, F
$088E	$1D03			BTFSS	STATUS, Z
$088F	$1C03			BTFSS	STATUS, C
$0890	$28B4			GOTO	JMPSETFUN32
$0891	$1003			BCF	STATUS, C
$0892	$	NORM4032A:
$0892	$1BF2			BTFSC	STACK_2, 7
$0893	$289B			GOTO	NRMRND4032
$0894	$0DF8			RLF	STACK_8, F
$0895	$0DF0			RLF	STACK_0, F
$0896	$0DF1			RLF	STACK_1, F
$0897	$0DF2			RLF	STACK_2, F
$0898	$0BF3			DECFSZ	STACK_3, F
$0899	$2892			GOTO	NORM4032A
$089A	$28B4			GOTO	JMPSETFUN32
$089B	$	NRMRND4032:
$089B	$1B7B			BTFSC	STACK_11, 6
$089C	$1C70			BTFSS	STACK_0, 0
$089D	$28B8			GOTO	JMPFIXSIGN32
$089E	$1FF8			BTFSS	STACK_8, 7
$089F	$28B8			GOTO	JMPFIXSIGN32
$08A0	$0AF0			INCF	STACK_0, F
$08A1	$1903			BTFSC	STATUS, Z
$08A2	$0AF1			INCF	STACK_1, F
$08A3	$1903			BTFSC	STATUS, Z
$08A4	$0AF2			INCF	STACK_2, F
$08A5	$1D03			BTFSS	STATUS, Z
$08A6	$28B8			GOTO	JMPFIXSIGN32
$08A7	$0CF2			RRF	STACK_2, F
$08A8	$0CF1			RRF	STACK_1, F
$08A9	$0CF0			RRF	STACK_0, F
$08AA	$0AF3			INCF	STACK_3, F
$08AB	$1903			BTFSC	STATUS, Z
$08AC	$28BC			GOTO	JMPSETFOV32
$08AD	$28B8			GOTO	JMPFIXSIGN32
$08AE	$	JMPRES032:
$08AE	$3001			MOVLW	0x01
$08AF	$00FC			MOVWF	STACK_12
$08B0	$118A			BCF	PCLATH, 3
$08B1	$2740			CALL	_RES032
$08B2	$158A			BSF	PCLATH, 3
$08B3	$28BF			GOTO	NRM4032EEE
$08B4	$	JMPSETFUN32:
$08B4	$3002			MOVLW	0x02
$08B5	$00FC			MOVWF	STACK_12
$08B6	$2389			CALL	_SETFUN32
$08B7	$28BF			GOTO	NRM4032EEE
$08B8	$	JMPFIXSIGN32:
$08B8	$3004			MOVLW	0x04
$08B9	$00FC			MOVWF	STACK_12
$08BA	$23C3			CALL	_FIXSIGN32
$08BB	$28BF			GOTO	NRM4032EEE
$08BC	$	JMPSETFOV32:
$08BC	$3008			MOVLW	0x08
$08BD	$00FC			MOVWF	STACK_12
$08BE	$237B			CALL	_SETFOV32
$08BF	$	NRM4032EEE:
$08BF	$0000			NOP
$08C0	$0008			RETURN
$0AB2	$	_NRM3232:
$0AB2	$1303			BCF	STATUS, RP1
$0AB3	$1283			BCF	STATUS, RP0
$0AB4	$01A0			CLRF	__math_tempbD
$0AB5	$0872			MOVF	STACK_2, W
$0AB6	$1D03			BTFSS	STATUS, Z
$0AB7	$2AC9			GOTO	NORM3232
$0AB8	$0871			MOVF	STACK_1, W
$0AB9	$00F2			MOVWF	STACK_2
$0ABA	$0870			MOVF	STACK_0, W
$0ABB	$00F1			MOVWF	STACK_1
$0ABC	$01F0			CLRF	STACK_0
$0ABD	$15A0			BSF	__math_tempbD, 3
$0ABE	$0872			MOVF	STACK_2, W
$0ABF	$1D03			BTFSS	STATUS, Z
$0AC0	$2AC9			GOTO	NORM3232
$0AC1	$0871			MOVF	STACK_1, W
$0AC2	$00F2			MOVWF	STACK_2
$0AC3	$01F1			CLRF	STACK_1
$0AC4	$11A0			BCF	__math_tempbD, 3
$0AC5	$1620			BSF	__math_tempbD, 4
$0AC6	$0872			MOVF	STACK_2, W
$0AC7	$1903			BTFSC	STATUS, Z
$0AC8	$2AD7			GOTO	JPNRES032
$0AC9	$	NORM3232:
$0AC9	$0820			MOVF	__math_tempbD, W
$0ACA	$02F3			SUBWF	STACK_3, F
$0ACB	$1D03			BTFSS	STATUS, Z
$0ACC	$1C03			BTFSS	STATUS, C
$0ACD	$2ADD			GOTO	JPNSETFUN32
$0ACE	$1003			BCF	STATUS, C
$0ACF	$	NORM3232A:
$0ACF	$1BF2			BTFSC	STACK_2, 7
$0AD0	$2AE1			GOTO	JMPNFIXSIGN32
$0AD1	$0DF0			RLF	STACK_0, F
$0AD2	$0DF1			RLF	STACK_1, F
$0AD3	$0DF2			RLF	STACK_2, F
$0AD4	$0BF3			DECFSZ	STACK_3, F
$0AD5	$2ACF			GOTO	NORM3232A
$0AD6	$2ADD			GOTO	JPNSETFUN32
$0AD7	$	JPNRES032:
$0AD7	$3001			MOVLW	0x01
$0AD8	$00FC			MOVWF	STACK_12
$0AD9	$118A			BCF	PCLATH, 3
$0ADA	$2740			CALL	_RES032
$0ADB	$158A			BSF	PCLATH, 3
$0ADC	$2AE4			GOTO	NORM32EEE
$0ADD	$	JPNSETFUN32:
$0ADD	$3002			MOVLW	0x02
$0ADE	$00FC			MOVWF	STACK_12
$0ADF	$2389			CALL	_SETFUN32
$0AE0	$2AE4			GOTO	NORM32EEE
$0AE1	$	JMPNFIXSIGN32:
$0AE1	$3004			MOVLW	0x04
$0AE2	$00FC			MOVWF	STACK_12
$0AE3	$23C3			CALL	_FIXSIGN32
$0AE4	$	NORM32EEE:
$0AE4	$0008			RETURN
$0BD4	$	_SETFDZ32:
$0BD4	$1303			BCF	STATUS, RP1
$0BD5	$1283			BCF	STATUS, RP0
$0BD6	$15FB			BSF	STACK_11, 3
$0BD7	$30FF			MOVLW	0xFF
$0BD8	$0008			RETURN
$05F6	$	_Add_32x32_FP:
$05F6	$1303			BCF	STATUS, RP1
$05F7	$1283			BCF	STATUS, RP0
$05F8	$0872			MOVF	STACK_2, W
$05F9	$0676			XORWF	STACK_6, W
$05FA	$00A0			MOVWF	__math_tempbD
$05FB	$01F8			CLRF	STACK_8
$05FC	$01F9			CLRF	STACK_9
$05FD	$0873			MOVF	STACK_3, W
$05FE	$0277			SUBWF	STACK_7, W
$05FF	$1C03			BTFSS	STATUS, C
$0600	$2E19			GOTO	USEA32
$0601	$0877			MOVF	STACK_7, W
$0602	$00FD			MOVWF	STACK_13
$0603	$0873			MOVF	STACK_3, W
$0604	$00F7			MOVWF	STACK_7
$0605	$087D			MOVF	STACK_13, W
$0606	$00F3			MOVWF	STACK_3
$0607	$0876			MOVF	STACK_6, W
$0608	$00FD			MOVWF	STACK_13
$0609	$0872			MOVF	STACK_2, W
$060A	$00F6			MOVWF	STACK_6
$060B	$087D			MOVF	STACK_13, W
$060C	$00F2			MOVWF	STACK_2
$060D	$0875			MOVF	STACK_5, W
$060E	$00FD			MOVWF	STACK_13
$060F	$0871			MOVF	STACK_1, W
$0610	$00F5			MOVWF	STACK_5
$0611	$087D			MOVF	STACK_13, W
$0612	$00F1			MOVWF	STACK_1
$0613	$0874			MOVF	STACK_4, W
$0614	$00FD			MOVWF	STACK_13
$0615	$0870			MOVF	STACK_0, W
$0616	$00F4			MOVWF	STACK_4
$0617	$087D			MOVF	STACK_13, W
$0618	$00F0			MOVWF	STACK_0
$0619	$	USEA32:
$0619	$0877			MOVF	STACK_7, W
$061A	$1903			BTFSC	STATUS, Z
$061B	$2E9A			GOTO	JMPEEE
$061C	$0872			MOVF	STACK_2, W
$061D	$00FA			MOVWF	STACK_10
$061E	$17F2			BSF	STACK_2, 7
$061F	$17F6			BSF	STACK_6, 7
$0620	$0877			MOVF	STACK_7, W
$0621	$0273			SUBWF	STACK_3, W
$0622	$00F7			MOVWF	STACK_7
$0623	$1903			BTFSC	STATUS, Z
$0624	$2E4C			GOTO	ALIGNED32
$0625	$3008			MOVLW	8
$0626	$0277			SUBWF	STACK_7, W
$0627	$1C03			BTFSS	STATUS, C
$0628	$2E42			GOTO	ALIGNB32
$0629	$00F7			MOVWF	STACK_7
$062A	$0874			MOVF	STACK_4, W
$062B	$00F9			MOVWF	STACK_9
$062C	$0875			MOVF	STACK_5, W
$062D	$00F4			MOVWF	STACK_4
$062E	$0876			MOVF	STACK_6, W
$062F	$00F5			MOVWF	STACK_5
$0630	$01F6			CLRF	STACK_6
$0631	$3008			MOVLW	8
$0632	$0277			SUBWF	STACK_7, W
$0633	$1C03			BTFSS	STATUS, C
$0634	$2E42			GOTO	ALIGNB32
$0635	$00F7			MOVWF	STACK_7
$0636	$0874			MOVF	STACK_4, W
$0637	$00F9			MOVWF	STACK_9
$0638	$0875			MOVF	STACK_5, W
$0639	$00F4			MOVWF	STACK_4
$063A	$01F5			CLRF	STACK_5
$063B	$3008			MOVLW	8
$063C	$0277			SUBWF	STACK_7, W
$063D	$1C03			BTFSS	STATUS, C
$063E	$2E42			GOTO	ALIGNB32
$063F	$087A			MOVF	STACK_10, W
$0640	$00F2			MOVWF	STACK_2
$0641	$2E9A			GOTO	JMPEEE
$0642	$	ALIGNB32:
$0642	$0877			MOVF	STACK_7, W
$0643	$1903			BTFSC	STATUS, Z
$0644	$2E4C			GOTO	ALIGNED32
$0645	$	ALOOPB32:
$0645	$1003			BCF	STATUS, C
$0646	$0CF6			RRF	STACK_6, F
$0647	$0CF5			RRF	STACK_5, F
$0648	$0CF4			RRF	STACK_4, F
$0649	$0CF9			RRF	STACK_9, F
$064A	$0BF7			DECFSZ	STACK_7, F
$064B	$2E45			GOTO	ALOOPB32
$064C	$	ALIGNED32:
$064C	$1FA0			BTFSS	__math_tempbD, 7
$064D	$2E59			GOTO	AOK32
$064E	$09F9			COMF	STACK_9, F
$064F	$09F4			COMF	STACK_4, F
$0650	$09F5			COMF	STACK_5, F
$0651	$09F6			COMF	STACK_6, F
$0652	$0AF9			INCF	STACK_9, F
$0653	$1903			BTFSC	STATUS, Z
$0654	$0AF4			INCF	STACK_4, F
$0655	$1903			BTFSC	STATUS, Z
$0656	$0AF5			INCF	STACK_5, F
$0657	$1903			BTFSC	STATUS, Z
$0658	$0AF6			INCF	STACK_6, F
$0659	$	AOK32:
$0659	$0879			MOVF	STACK_9, W
$065A	$07F8			ADDWF	STACK_8, F
$065B	$0874			MOVF	STACK_4, W
$065C	$1803			BTFSC	STATUS, C
$065D	$0F74			INCFSZ	STACK_4, W
$065E	$07F0			ADDWF	STACK_0, F
$065F	$0875			MOVF	STACK_5, W
$0660	$1803			BTFSC	STATUS, C
$0661	$0F75			INCFSZ	STACK_5, W
$0662	$07F1			ADDWF	STACK_1, F
$0663	$0876			MOVF	STACK_6, W
$0664	$1803			BTFSC	STATUS, C
$0665	$0F76			INCFSZ	STACK_6, W
$0666	$07F2			ADDWF	STACK_2, F
$0667	$1BA0			BTFSC	__math_tempbD, 7
$0668	$2E72			GOTO	ACOMP32
$0669	$1C03			BTFSS	STATUS, C
$066A	$2E82			GOTO	JMPNRMRND4032
$066B	$0CF2			RRF	STACK_2, F
$066C	$0CF1			RRF	STACK_1, F
$066D	$0CF0			RRF	STACK_0, F
$066E	$0CF8			RRF	STACK_8, F
$066F	$0FF3			INCFSZ	STACK_3, F
$0670	$2E82			GOTO	JMPNRMRND4032
$0671	$2E94			GOTO	ADD_JMPSETFOV32
$0672	$	ACOMP32:
$0672	$1803			BTFSC	STATUS, C
$0673	$2E88			GOTO	JMPNRM4032
$0674	$09F8			COMF	STACK_8, F
$0675	$09F0			COMF	STACK_0, F
$0676	$09F1			COMF	STACK_1, F
$0677	$09F2			COMF	STACK_2, F
$0678	$0AF8			INCF	STACK_8, F
$0679	$1903			BTFSC	STATUS, Z
$067A	$0AF0			INCF	STACK_0, F
$067B	$1903			BTFSC	STATUS, Z
$067C	$0AF1			INCF	STACK_1, F
$067D	$1903			BTFSC	STATUS, Z
$067E	$0AF2			INCF	STACK_2, F
$067F	$3080			MOVLW	0x80
$0680	$06FA			XORWF	STACK_10, F
$0681	$2E8E			GOTO	JMPNRM32
$0682	$	JMPNRMRND4032:
$0682	$3001			MOVLW	0x01
$0683	$00FC			MOVWF	STACK_12
$0684	$158A			BSF	PCLATH, 3
$0685	$2063			CALL	_NRM4032
$0686	$118A			BCF	PCLATH, 3
$0687	$2E9C			GOTO	ADD32EEE
$0688	$	JMPNRM4032:
$0688	$3002			MOVLW	0x02
$0689	$00FC			MOVWF	STACK_12
$068A	$158A			BSF	PCLATH, 3
$068B	$2063			CALL	_NRM4032
$068C	$118A			BCF	PCLATH, 3
$068D	$2E9C			GOTO	ADD32EEE
$068E	$	JMPNRM32:
$068E	$3004			MOVLW	0x04
$068F	$00FC			MOVWF	STACK_12
$0690	$158A			BSF	PCLATH, 3
$0691	$22B2			CALL	_NRM3232
$0692	$118A			BCF	PCLATH, 3
$0693	$2E9C			GOTO	ADD32EEE
$0694	$	ADD_JMPSETFOV32:
$0694	$3008			MOVLW	0x08
$0695	$00FC			MOVWF	STACK_12
$0696	$158A			BSF	PCLATH, 3
$0697	$237B			CALL	_SETFOV32
$0698	$118A			BCF	PCLATH, 3
$0699	$2E9C			GOTO	ADD32EEE
$069A	$	JMPEEE:
$069A	$3000			MOVLW	0x00
$069B	$00FC			MOVWF	STACK_12
$069C	$	ADD32EEE:
$069C	$0000			NOP
$069D	$0008			RETURN
$0B9F	$	_PWM1_Start:
$0B9F	$1303			BCF	STATUS, RP1
$0BA0	$1683			BSF	STATUS, RP0
$0BA1	$1107			BCF	TRISC, 2
$0BA2	$1283			BCF	STATUS, RP0
$0BA3	$1512			BSF	T2CON, 2
$0BA4	$300C			MOVLW	12
$0BA5	$0497			IORWF	CCP1CON, 1
$0BA6	$0008			RETURN
$0BA7	$	_PWM2_Start:
$0BA7	$1303			BCF	STATUS, RP1
$0BA8	$1683			BSF	STATUS, RP0
$0BA9	$1087			BCF	TRISC, 1
$0BAA	$1283			BCF	STATUS, RP0
$0BAB	$1512			BSF	T2CON, 2
$0BAC	$300C			MOVLW	12
$0BAD	$049D			IORWF	CCP2CON, 1
$0BAE	$0008			RETURN
$0BC9	$	_PWM1_Init:
$0BC9	$1303			BCF	STATUS, RP1
$0BCA	$1283			BCF	STATUS, RP0
$0BCB	$0195			CLRF	CCPR1L, 1
$0BCC	$1217			BCF	CCP1CON, 4
$0BCD	$1297			BCF	CCP1CON, 5
$0BCE	$0008			RETURN
$0BBD	$	_PWM2_Init:
$0BBD	$1303			BCF	STATUS, RP1
$0BBE	$1283			BCF	STATUS, RP0
$0BBF	$019B			CLRF	CCPR2L, 1
$0BC0	$121D			BCF	CCP2CON, 4
$0BC1	$129D			BCF	CCP2CON, 5
$0BC2	$0008			RETURN
$0963	$	_Compare_Double:
$0963	$1303			BCF	STATUS, RP1
$0964	$1283			BCF	STATUS, RP0
$0965	$01FA			CLRF	STACK_10
$0966	$0873			MOVF	STACK_3, W
$0967	$1D03			BTFSS	STATUS, Z
$0968	$147A			BSF	STACK_10, 0
$0969	$0877			MOVF	STACK_7, W
$096A	$1D03			BTFSS	STATUS, Z
$096B	$14FA			BSF	STACK_10, 1
$096C	$087A			MOVF	STACK_10, W
$096D	$1903			BTFSC	STATUS, Z
$096E	$29AF			GOTO	COMPARE_EQU
$096F	$3A03			XORLW	0x03
$0970	$1903			BTFSC	STATUS, Z
$0971	$297A			GOTO	COMPARE_NOTZERO
$0972	$187A			BTFSC	STACK_10, 0
$0973	$2977			GOTO	COMPARE_XNOTZERO
$0974	$	COMPARE_YNOTZERO:
$0974	$1FF6			BTFSS	STACK_6, 7
$0975	$29AD			GOTO	COMPARE_LT
$0976	$29AB			GOTO	COMPARE_GT
$0977	$	COMPARE_XNOTZERO:
$0977	$1FF2			BTFSS	STACK_2, 7
$0978	$29AB			GOTO	COMPARE_GT
$0979	$29AD			GOTO	COMPARE_LT
$097A	$	COMPARE_NOTZERO:
$097A	$0872			MOVF	STACK_2, W
$097B	$3980			ANDLW	0x80
$097C	$00FA			MOVWF	STACK_10
$097D	$13F2			BCF	STACK_2, 7
$097E	$0876			MOVF	STACK_6, W
$097F	$3980			ANDLW	0x80
$0980	$13F6			BCF	STACK_6, 7
$0981	$067A			XORWF	STACK_10, W
$0982	$1903			BTFSC	STATUS, Z
$0983	$2988			GOTO	COMPARE_TESTALL
$0984	$087A			MOVF	STACK_10, W
$0985	$1903			BTFSC	STATUS, Z
$0986	$29AB			GOTO	COMPARE_GT
$0987	$29AD			GOTO	COMPARE_LT
$0988	$	COMPARE_TESTALL:
$0988	$0877			MOVF	STACK_7, W
$0989	$0273			SUBWF	STACK_3, W
$098A	$1903			BTFSC	STATUS, Z
$098B	$298F			GOTO	COMPARE_C1
$098C	$1C03			BTFSS	STATUS, C
$098D	$29A3			GOTO	GT_FALSE
$098E	$29A7			GOTO	GT_TRUE
$098F	$	COMPARE_C1:
$098F	$0876			MOVF	STACK_6, W
$0990	$0272			SUBWF	STACK_2, W
$0991	$1903			BTFSC	STATUS, Z
$0992	$2996			GOTO	COMPARE_C2
$0993	$1C03			BTFSS	STATUS, C
$0994	$29A3			GOTO	GT_FALSE
$0995	$29A7			GOTO	GT_TRUE
$0996	$	COMPARE_C2:
$0996	$0875			MOVF	STACK_5, W
$0997	$0271			SUBWF	STACK_1, W
$0998	$1903			BTFSC	STATUS, Z
$0999	$299D			GOTO	COMPARE_C3
$099A	$1C03			BTFSS	STATUS, C
$099B	$29A3			GOTO	GT_FALSE
$099C	$29A7			GOTO	GT_TRUE
$099D	$	COMPARE_C3:
$099D	$0874			MOVF	STACK_4, W
$099E	$0270			SUBWF	STACK_0, W
$099F	$1903			BTFSC	STATUS, Z
$09A0	$29AF			GOTO	COMPARE_EQU
$09A1	$1803			BTFSC	STATUS, C
$09A2	$29A7			GOTO	GT_TRUE
$09A3	$	GT_FALSE:
$09A3	$08FA			MOVF	STACK_10, F
$09A4	$1903			BTFSC	STATUS, Z
$09A5	$29AD			GOTO	COMPARE_LT
$09A6	$29AB			GOTO	COMPARE_GT
$09A7	$	GT_TRUE:
$09A7	$08FA			MOVF	STACK_10, F
$09A8	$1903			BTFSC	STATUS, Z
$09A9	$29AB			GOTO	COMPARE_GT
$09AA	$29AD			GOTO	COMPARE_LT
$09AB	$	COMPARE_GT:
$09AB	$1403			BSF	STATUS, C
$09AC	$0008			RETURN
$09AD	$	COMPARE_LT:
$09AD	$1003			BCF	STATUS, C
$09AE	$0008			RETURN
$09AF	$	COMPARE_EQU:
$09AF	$1403			BSF	STATUS, C
$09B0	$1503			BSF	STATUS, Z
$09B1	$0008			RETURN
$09B2	$0008			RETURN
$0AE5	$	_Mul_16x16_U:
$0AE5	$1303			BCF	STATUS, RP1
$0AE6	$1283			BCF	STATUS, RP0
$0AE7	$01FB			CLRF	STACK_11
$0AE8	$01FA			CLRF	STACK_10
$0AE9	$01F9			CLRF	STACK_9
$0AEA	$3080			MOVLW	128
$0AEB	$00F8			MOVWF	STACK_8
$0AEC	$0CF1			RRF	STACK_1, F
$0AED	$0CF0			RRF	STACK_0, F
$0AEE	$1C03			BTFSS	STATUS, C
$0AEF	$2AF9			GOTO	$+10
$0AF0	$0874			MOVF	STACK_4, W
$0AF1	$07F9			ADDWF	STACK_9, F
$0AF2	$0875			MOVF	STACK_5, W
$0AF3	$1803			BTFSC	STATUS, C
$0AF4	$0F75			INCFSZ	STACK_5, W
$0AF5	$07FA			ADDWF	STACK_10, F
$0AF6	$1803			BTFSC	STATUS, C
$0AF7	$0AFB			INCF	STACK_11, F
$0AF8	$1003			BCF	STATUS, C
$0AF9	$1FF0			BTFSS	STACK_0, 7
$0AFA	$2B01			GOTO	$+7
$0AFB	$0874			MOVF	STACK_4, W
$0AFC	$07FA			ADDWF	STACK_10, F
$0AFD	$0875			MOVF	STACK_5, W
$0AFE	$1803			BTFSC	STATUS, C
$0AFF	$0F75			INCFSZ	STACK_5, W
$0B00	$07FB			ADDWF	STACK_11, F
$0B01	$0CFB			RRF	STACK_11, F
$0B02	$0CFA			RRF	STACK_10, F
$0B03	$0CF9			RRF	STACK_9, F
$0B04	$0CF8			RRF	STACK_8, F
$0B05	$1C03			BTFSS	STATUS, C
$0B06	$2AEC			GOTO	$-26
$0B07	$087B			MOVF	STACK_11, W
$0B08	$00F3			MOVWF	STACK_3
$0B09	$087A			MOVF	STACK_10, W
$0B0A	$00F2			MOVWF	STACK_2
$0B0B	$0879			MOVF	STACK_9, W
$0B0C	$00F1			MOVWF	STACK_1
$0B0D	$0878			MOVF	STACK_8, W
$0B0E	$00F0			MOVWF	STACK_0
$0B0F	$0008			RETURN
$0B21	$	_Word2Double:
$0B21	$1303			BCF	STATUS, RP1
$0B22	$1283			BCF	STATUS, RP0
$0B23	$0870			MOVF	STACK_0, W
$0B24	$00F8			MOVWF	STACK_8
$0B25	$0871			MOVF	STACK_1, W
$0B26	$00F0			MOVWF	STACK_0
$0B27	$01F1			CLRF	STACK_1
$0B28	$01F2			CLRF	STACK_2
$0B29	$01F3			CLRF	STACK_3
$0B2A	$	FLO16U32:
$0B2A	$01FB			CLRF	STACK_11
$0B2B	$01FC			CLRF	STACK_12
$0B2C	$3096			MOVLW	150
$0B2D	$00F3			MOVWF	STACK_3
$0B2E	$01FA			CLRF	STACK_10
$0B2F	$0870			MOVF	STACK_0, W
$0B30	$00F1			MOVWF	STACK_1
$0B31	$0878			MOVF	STACK_8, W
$0B32	$00F0			MOVWF	STACK_0
$0B33	$01F8			CLRF	STACK_8
$0B34	$01F2			CLRF	STACK_2
$0B35	$22B2			CALL	_NRM3232
$0B36	$0008			RETURN
$069E	$	_Div_32x32_FP:
$069E	$1303			BCF	STATUS, RP1
$069F	$1283			BCF	STATUS, RP0
$06A0	$	FPD32:
$06A0	$0877			MOVF	STACK_7, W
$06A1	$1903			BTFSC	STATUS, Z
$06A2	$2F2D			GOTO	JPDSETFDZ32
$06A3	$0873			MOVF	STACK_3, W
$06A4	$1903			BTFSC	STATUS, Z
$06A5	$2F32			GOTO	JPDRES032
$06A6	$	D32BNE0:
$06A6	$0872			MOVF	STACK_2, W
$06A7	$0676			XORWF	STACK_6, W
$06A8	$3980			ANDLW	128
$06A9	$00FA			MOVWF	STACK_10
$06AA	$17F2			BSF	STACK_2, 7
$06AB	$17F6			BSF	STACK_6, 7
$06AC	$	TALIGN32:
$06AC	$01A0			CLRF	__math_tempbD
$06AD	$0872			MOVF	STACK_2, W
$06AE	$00F8			MOVWF	STACK_8
$06AF	$0871			MOVF	STACK_1, W
$06B0	$00FC			MOVWF	STACK_12
$06B1	$0870			MOVF	STACK_0, W
$06B2	$00FD			MOVWF	STACK_13
$06B3	$0874			MOVF	STACK_4, W
$06B4	$02FD			SUBWF	STACK_13, F
$06B5	$0875			MOVF	STACK_5, W
$06B6	$1C03			BTFSS	STATUS, C
$06B7	$0F75			INCFSZ	STACK_5, W
$06B8	$	TS1ALIGN32:
$06B8	$02FC			SUBWF	STACK_12, F
$06B9	$0876			MOVF	STACK_6, W
$06BA	$1C03			BTFSS	STATUS, C
$06BB	$0F76			INCFSZ	STACK_6, W
$06BC	$	TS2ALIGN32:
$06BC	$02F8			SUBWF	STACK_8, F
$06BD	$01F8			CLRF	STACK_8
$06BE	$01FC			CLRF	STACK_12
$06BF	$01FD			CLRF	STACK_13
$06C0	$1C03			BTFSS	STATUS, C
$06C1	$2EC9			GOTO	DALIGN32OK
$06C2	$1003			BCF	STATUS, C
$06C3	$0CF2			RRF	STACK_2, F
$06C4	$0CF1			RRF	STACK_1, F
$06C5	$0CF0			RRF	STACK_0, F
$06C6	$0CF8			RRF	STACK_8, F
$06C7	$3001			MOVLW	0x01
$06C8	$00A0			MOVWF	__math_tempbD
$06C9	$	DALIGN32OK:
$06C9	$0877			MOVF	STACK_7, W
$06CA	$02F3			SUBWF	STACK_3, F
$06CB	$1C03			BTFSS	STATUS, C
$06CC	$2ED3			GOTO	ALTB32
$06CD	$	AGEB32:
$06CD	$307E			MOVLW	126
$06CE	$0720			ADDWF	__math_tempbD, W
$06CF	$07F3			ADDWF	STACK_3, F
$06D0	$1803			BTFSC	STATUS, C
$06D1	$2F35			GOTO	JPDSETFOV32
$06D2	$2ED8			GOTO	DARGOK32
$06D3	$	ALTB32:
$06D3	$307E			MOVLW	126
$06D4	$0720			ADDWF	__math_tempbD, W
$06D5	$07F3			ADDWF	STACK_3, F
$06D6	$1C03			BTFSS	STATUS, C
$06D7	$2F3A			GOTO	JPDSETFUN32
$06D8	$	DARGOK32:
$06D8	$3018			MOVLW	24
$06D9	$07FA			ADDWF	STACK_10, F
$06DA	$	DLOOP32:
$06DA	$0DFD			RLF	STACK_13, F
$06DB	$0DFC			RLF	STACK_12, F
$06DC	$0DF8			RLF	STACK_8, F
$06DD	$0DF0			RLF	STACK_0, F
$06DE	$0DF1			RLF	STACK_1, F
$06DF	$0DF2			RLF	STACK_2, F
$06E0	$0DA0			RLF	__math_tempbD, F
$06E1	$0874			MOVF	STACK_4, W
$06E2	$02F0			SUBWF	STACK_0, F
$06E3	$0875			MOVF	STACK_5, W
$06E4	$1C03			BTFSS	STATUS, C
$06E5	$0F75			INCFSZ	STACK_5, W
$06E6	$	DS132:
$06E6	$02F1			SUBWF	STACK_1, F
$06E7	$0876			MOVF	STACK_6, W
$06E8	$1C03			BTFSS	STATUS, C
$06E9	$0F76			INCFSZ	STACK_6, W
$06EA	$	DS232:
$06EA	$02F2			SUBWF	STACK_2, F
$06EB	$0D76			RLF	STACK_6, W
$06EC	$04A0			IORWF	__math_tempbD, F
$06ED	$1C20			BTFSS	__math_tempbD, 0
$06EE	$2EF1			GOTO	DREST32
$06EF	$147D			BSF	STACK_13, 0
$06F0	$2EFC			GOTO	DOK32
$06F1	$	DREST32:
$06F1	$0874			MOVF	STACK_4, W
$06F2	$07F0			ADDWF	STACK_0, F
$06F3	$0875			MOVF	STACK_5, W
$06F4	$1803			BTFSC	STATUS, C
$06F5	$0F75			INCFSZ	STACK_5, W
$06F6	$	DAREST32:
$06F6	$07F1			ADDWF	STACK_1, F
$06F7	$0876			MOVF	STACK_6, W
$06F8	$1803			BTFSC	STATUS, C
$06F9	$0A76			INCF	STACK_6, W
$06FA	$07F2			ADDWF	STACK_2, F
$06FB	$107D			BCF	STACK_13, 0
$06FC	$	DOK32:
$06FC	$03FA			DECF	STACK_10, F
$06FD	$301F			MOVLW	31
$06FE	$057A			ANDWF	STACK_10, W
$06FF	$1D03			BTFSS	STATUS, Z
$0700	$2EDA			GOTO	DLOOP32
$0701	$	DROUND32:
$0701	$1B7B			BTFSC	STACK_11, 6
$0702	$1C7D			BTFSS	STACK_13, 0
$0703	$2F23			GOTO	DIV32OK
$0704	$1003			BCF	STATUS, C
$0705	$0DF0			RLF	STACK_0, F
$0706	$0DF1			RLF	STACK_1, F
$0707	$0DF2			RLF	STACK_2, F
$0708	$0DA0			RLF	__math_tempbD, F
$0709	$0874			MOVF	STACK_4, W
$070A	$02F0			SUBWF	STACK_0, F
$070B	$0875			MOVF	STACK_5, W
$070C	$1C03			BTFSS	STATUS, C
$070D	$0F75			INCFSZ	STACK_5, W
$070E	$02F1			SUBWF	STACK_1, F
$070F	$0876			MOVF	STACK_6, W
$0710	$1C03			BTFSS	STATUS, C
$0711	$0F76			INCFSZ	STACK_6, W
$0712	$02F2			SUBWF	STACK_2, F
$0713	$0D76			RLF	STACK_6, W
$0714	$0420			IORWF	__math_tempbD, W
$0715	$3901			ANDLW	0x01
$0716	$07FD			ADDWF	STACK_13, F
$0717	$1803			BTFSC	STATUS, C
$0718	$0AFC			INCF	STACK_12, F
$0719	$1903			BTFSC	STATUS, Z
$071A	$0AF8			INCF	STACK_8, F
$071B	$1D03			BTFSS	STATUS, Z
$071C	$2F23			GOTO	DIV32OK
$071D	$0CF8			RRF	STACK_8, F
$071E	$0CFC			RRF	STACK_12, F
$071F	$0CFD			RRF	STACK_13, F
$0720	$0AF3			INCF	STACK_3, F
$0721	$1903			BTFSC	STATUS, Z
$0722	$2F35			GOTO	JPDSETFOV32
$0723	$	DIV32OK:
$0723	$1FFA			BTFSS	STACK_10, 7
$0724	$13F8			BCF	STACK_8, 7
$0725	$0878			MOVF	STACK_8, W
$0726	$00F2			MOVWF	STACK_2
$0727	$087C			MOVF	STACK_12, W
$0728	$00F1			MOVWF	STACK_1
$0729	$087D			MOVF	STACK_13, W
$072A	$00F0			MOVWF	STACK_0
$072B	$3000			MOVLW	0x00
$072C	$2F3E			GOTO	DIV32EEE
$072D	$	JPDSETFDZ32:
$072D	$3001			MOVLW	0x01
$072E	$158A			BSF	PCLATH, 3
$072F	$23D4			CALL	_SETFDZ32
$0730	$118A			BCF	PCLATH, 3
$0731	$2F3E			GOTO	DIV32EEE
$0732	$	JPDRES032:
$0732	$3002			MOVLW	0x02
$0733	$2740			CALL	_RES032
$0734	$2F3E			GOTO	DIV32EEE
$0735	$	JPDSETFOV32:
$0735	$3004			MOVLW	0x04
$0736	$158A			BSF	PCLATH, 3
$0737	$237B			CALL	_SETFOV32
$0738	$118A			BCF	PCLATH, 3
$0739	$2F3E			GOTO	DIV32EEE
$073A	$	JPDSETFUN32:
$073A	$3008			MOVLW	0x08
$073B	$158A			BSF	PCLATH, 3
$073C	$2389			CALL	_SETFUN32
$073D	$118A			BCF	PCLATH, 3
$073E	$	DIV32EEE:
$073E	$0000			NOP
$073F	$0008			RETURN
$0B97	$	_Sub_32x32_FP:
$0B97	$1303			BCF	STATUS, RP1
$0B98	$1283			BCF	STATUS, RP0
$0B99	$3080			MOVLW	0x80
$0B9A	$06F6			XORWF	STACK_6, F
$0B9B	$118A			BCF	PCLATH, 3
$0B9C	$25F6			CALL	_Add_32x32_FP
$0B9D	$158A			BSF	PCLATH, 3
$0B9E	$0008			RETURN
$09B3	$	_Mul_16x16_S:
$09B3	$1303			BCF	STATUS, RP1
$09B4	$1283			BCF	STATUS, RP0
$09B5	$01FB			CLRF	STACK_11
$09B6	$01FA			CLRF	STACK_10
$09B7	$01F9			CLRF	STACK_9
$09B8	$3080			MOVLW	128
$09B9	$00F8			MOVWF	STACK_8
$09BA	$01FD			CLRF	STACK_13
$09BB	$1FF1			BTFSS	STACK_1, 7
$09BC	$29C3			GOTO	$+7
$09BD	$09F1			COMF	STACK_1, F
$09BE	$09F0			COMF	STACK_0, F
$09BF	$0AF0			INCF	STACK_0, F
$09C0	$1903			BTFSC	STATUS, Z
$09C1	$0AF1			INCF	STACK_1, F
$09C2	$0AFD			INCF	STACK_13, F
$09C3	$1FF5			BTFSS	STACK_5, 7
$09C4	$29CB			GOTO	$+7
$09C5	$09F5			COMF	STACK_5, F
$09C6	$09F4			COMF	STACK_4, F
$09C7	$0AF4			INCF	STACK_4, F
$09C8	$1903			BTFSC	STATUS, Z
$09C9	$0AF5			INCF	STACK_5, F
$09CA	$0AFD			INCF	STACK_13, F
$09CB	$0CF1			RRF	STACK_1, F
$09CC	$0CF0			RRF	STACK_0, F
$09CD	$1C03			BTFSS	STATUS, C
$09CE	$29D8			GOTO	$+10
$09CF	$0874			MOVF	STACK_4, W
$09D0	$07F9			ADDWF	STACK_9, F
$09D1	$0875			MOVF	STACK_5, W
$09D2	$1803			BTFSC	STATUS, C
$09D3	$0F75			INCFSZ	STACK_5, W
$09D4	$07FA			ADDWF	STACK_10, F
$09D5	$1803			BTFSC	STATUS, C
$09D6	$0AFB			INCF	STACK_11, F
$09D7	$1003			BCF	STATUS, C
$09D8	$1FF0			BTFSS	STACK_0, 7
$09D9	$29E0			GOTO	$+7
$09DA	$0874			MOVF	STACK_4, W
$09DB	$07FA			ADDWF	STACK_10, F
$09DC	$1803			BTFSC	STATUS, C
$09DD	$0AFB			INCF	STACK_11, F
$09DE	$0875			MOVF	STACK_5, W
$09DF	$07FB			ADDWF	STACK_11, F
$09E0	$0CFB			RRF	STACK_11, F
$09E1	$0CFA			RRF	STACK_10, F
$09E2	$0CF9			RRF	STACK_9, F
$09E3	$0CF8			RRF	STACK_8, F
$09E4	$1C03			BTFSS	STATUS, C
$09E5	$29CB			GOTO	$-26
$09E6	$1C7D			BTFSS	STACK_13, 0
$09E7	$29F3			GOTO	$+12
$09E8	$09FB			COMF	STACK_11, F
$09E9	$09FA			COMF	STACK_10, F
$09EA	$09F9			COMF	STACK_9, F
$09EB	$09F8			COMF	STACK_8, F
$09EC	$0AF8			INCF	STACK_8, F
$09ED	$1903			BTFSC	STATUS, Z
$09EE	$0AF9			INCF	STACK_9, F
$09EF	$1903			BTFSC	STATUS, Z
$09F0	$0AFA			INCF	STACK_10, F
$09F1	$1903			BTFSC	STATUS, Z
$09F2	$0AFB			INCF	STACK_11, F
$09F3	$087B			MOVF	STACK_11, W
$09F4	$00F3			MOVWF	STACK_3
$09F5	$087A			MOVF	STACK_10, W
$09F6	$00F2			MOVWF	STACK_2
$09F7	$0879			MOVF	STACK_9, W
$09F8	$00F1			MOVWF	STACK_1
$09F9	$0878			MOVF	STACK_8, W
$09FA	$00F0			MOVWF	STACK_0
$09FB	$0000			NOP
$09FC	$0008			RETURN
$0B5D	$	_SETIOV3224:
$0B5D	$1303			BCF	STATUS, RP1
$0B5E	$1283			BCF	STATUS, RP0
$0B5F	$147B			BSF	STACK_11, 0
$0B60	$1FFB			BTFSS	STACK_11, 7
$0B61	$2B6A			GOTO	SETIOV3224EEE
$0B62	$01F2			CLRF	STACK_2
$0B63	$1FFA			BTFSS	STACK_10, 7
$0B64	$30FF			MOVLW	0xFF
$0B65	$00F2			MOVWF	STACK_2
$0B66	$00F1			MOVWF	STACK_1
$0B67	$00F0			MOVWF	STACK_0
$0B68	$0DFA			RLF	STACK_10, F
$0B69	$0CF2			RRF	STACK_2, F
$0B6A	$	SETIOV3224EEE:
$0B6A	$30FF			MOVLW	0xFF
$0B6B	$0008			RETURN
$0B6C	$	_initport:
;lfr_pid_2.c,5 :: 		void initport()
;lfr_pid_2.c,7 :: 		ADCON1 =0x06;          //TURN OFF ADC AND CONFIGURE A AND E AS DIG I/O
$0B6C	$3006			MOVLW	6
$0B6D	$1303			BCF	STATUS, RP1
$0B6E	$1683			BSF	STATUS, RP0
$0B6F	$009F			MOVWF	ADCON1
;lfr_pid_2.c,8 :: 		PORTA = 0;             //CLEAR PORTA
$0B70	$1283			BCF	STATUS, RP0
$0B71	$0185			CLRF	PORTA, 1
;lfr_pid_2.c,9 :: 		PORTE = 0;             //CLEAR PORTE
$0B72	$0189			CLRF	PORTE, 1
;lfr_pid_2.c,10 :: 		TRISA = 0x3F;          //INITIALIZE PORTA AS INPUT
$0B73	$303F			MOVLW	63
$0B74	$1683			BSF	STATUS, RP0
$0B75	$0085			MOVWF	TRISA
;lfr_pid_2.c,11 :: 		TRISE = 0x03;          //INITIALIZE PORTE AS INPUT
$0B76	$3003			MOVLW	3
$0B77	$0089			MOVWF	TRISE
;lfr_pid_2.c,12 :: 		TRISD = 0x00;          //INITIALIZE PORTD AS OUTPUT
$0B78	$0188			CLRF	TRISD, 1
;lfr_pid_2.c,13 :: 		TRISC = 0b00000000;    //INITIALIZE PORTC AS OUTPUT
$0B79	$0187			CLRF	TRISC, 1
;lfr_pid_2.c,14 :: 		}
$0B7A	$0008			RETURN
$0B10	$	_initpwm:
;lfr_pid_2.c,16 :: 		void initpwm()
;lfr_pid_2.c,18 :: 		PWM1_Init(5000);
$0B10	$1303			BCF	STATUS, RP1
$0B11	$1283			BCF	STATUS, RP0
$0B12	$1012			BCF	T2CON, T2CKPS0
$0B13	$1092			BCF	T2CON, T2CKPS1
$0B14	$30C7			MOVLW	199
$0B15	$1683			BSF	STATUS, RP0
$0B16	$0092			MOVWF	PR2
$0B17	$23C9			CALL	_PWM1_Init
;lfr_pid_2.c,19 :: 		PWM2_Init(5000);
$0B18	$1012			BCF	T2CON, T2CKPS0
$0B19	$1092			BCF	T2CON, T2CKPS1
$0B1A	$30C7			MOVLW	199
$0B1B	$1683			BSF	STATUS, RP0
$0B1C	$0092			MOVWF	PR2
$0B1D	$23BD			CALL	_PWM2_Init
;lfr_pid_2.c,20 :: 		Pwm1_Start();          //RIGHT MOTOR
$0B1E	$239F			CALL	_PWM1_Start
;lfr_pid_2.c,21 :: 		Pwm2_Start();          //LEFT MOTOR
$0B1F	$23A7			CALL	_PWM2_Start
;lfr_pid_2.c,22 :: 		}
$0B20	$0008			RETURN
$08C1	$	_indicator:
;lfr_pid_2.c,50 :: 		void indicator()        //COPY THE SENSOR OUTPUT TO PORTD-INDICATOR
;lfr_pid_2.c,52 :: 		PORTD.F0 = PORTA.F0;
$08C1	$3001			MOVLW	1
$08C2	$1303			BCF	STATUS, RP1
$08C3	$1283			BCF	STATUS, RP0
$08C4	$0505			ANDWF	PORTA, 0
$08C5	$00F0			MOVWF	STACK_0
$08C6	$3000			MOVLW	0
$08C7	$1870			BTFSC	STACK_0, 0
$08C8	$3001			MOVLW	1
$08C9	$0608			XORWF	PORTD, 0
$08CA	$3901			ANDLW	1
$08CB	$0688			XORWF	PORTD, 1
;lfr_pid_2.c,53 :: 		PORTD.F1 = PORTA.F1;
$08CC	$3000			MOVLW	0
$08CD	$1885			BTFSC	PORTA, 1
$08CE	$3001			MOVLW	1
$08CF	$00F1			MOVWF	STACK_1
$08D0	$3000			MOVLW	0
$08D1	$1871			BTFSC	STACK_1, 0
$08D2	$3002			MOVLW	2
$08D3	$0608			XORWF	PORTD, 0
$08D4	$3902			ANDLW	2
$08D5	$0688			XORWF	PORTD, 1
;lfr_pid_2.c,54 :: 		PORTD.F2 = PORTA.F2;
$08D6	$3000			MOVLW	0
$08D7	$1905			BTFSC	PORTA, 2
$08D8	$3001			MOVLW	1
$08D9	$00F1			MOVWF	STACK_1
$08DA	$3000			MOVLW	0
$08DB	$1871			BTFSC	STACK_1, 0
$08DC	$3004			MOVLW	4
$08DD	$0608			XORWF	PORTD, 0
$08DE	$3904			ANDLW	4
$08DF	$0688			XORWF	PORTD, 1
;lfr_pid_2.c,55 :: 		PORTD.F3 = PORTA.F3;
$08E0	$3000			MOVLW	0
$08E1	$1985			BTFSC	PORTA, 3
$08E2	$3001			MOVLW	1
$08E3	$00F1			MOVWF	STACK_1
$08E4	$3000			MOVLW	0
$08E5	$1871			BTFSC	STACK_1, 0
$08E6	$3008			MOVLW	8
$08E7	$0608			XORWF	PORTD, 0
$08E8	$3908			ANDLW	8
$08E9	$0688			XORWF	PORTD, 1
;lfr_pid_2.c,56 :: 		PORTD.F4 = PORTA.F4;
$08EA	$3000			MOVLW	0
$08EB	$1A05			BTFSC	PORTA, 4
$08EC	$3001			MOVLW	1
$08ED	$00F1			MOVWF	STACK_1
$08EE	$3000			MOVLW	0
$08EF	$1871			BTFSC	STACK_1, 0
$08F0	$3010			MOVLW	16
$08F1	$0608			XORWF	PORTD, 0
$08F2	$3910			ANDLW	16
$08F3	$0688			XORWF	PORTD, 1
;lfr_pid_2.c,57 :: 		PORTD.F5 = PORTA.F5;
$08F4	$3000			MOVLW	0
$08F5	$1A85			BTFSC	PORTA, 5
$08F6	$3001			MOVLW	1
$08F7	$00F1			MOVWF	STACK_1
$08F8	$3000			MOVLW	0
$08F9	$1871			BTFSC	STACK_1, 0
$08FA	$3020			MOVLW	32
$08FB	$0608			XORWF	PORTD, 0
$08FC	$3920			ANDLW	32
$08FD	$0688			XORWF	PORTD, 1
;lfr_pid_2.c,58 :: 		PORTD.F6 = PORTE.F0;
$08FE	$3001			MOVLW	1
$08FF	$0509			ANDWF	PORTE, 0
$0900	$00F0			MOVWF	STACK_0
$0901	$3000			MOVLW	0
$0902	$1870			BTFSC	STACK_0, 0
$0903	$3040			MOVLW	64
$0904	$0608			XORWF	PORTD, 0
$0905	$3940			ANDLW	64
$0906	$0688			XORWF	PORTD, 1
;lfr_pid_2.c,59 :: 		PORTD.F7 = PORTE.F1;
$0907	$3000			MOVLW	0
$0908	$1889			BTFSC	PORTE, 1
$0909	$3001			MOVLW	1
$090A	$00F1			MOVWF	STACK_1
$090B	$3000			MOVLW	0
$090C	$1871			BTFSC	STACK_1, 0
$090D	$3080			MOVLW	128
$090E	$0608			XORWF	PORTD, 0
$090F	$3980			ANDLW	128
$0910	$0688			XORWF	PORTD, 1
;lfr_pid_2.c,60 :: 		}
$0911	$0008			RETURN
$0442	$	_CalcError:
;lfr_pid_2.c,61 :: 		void CalcError()								//calculates the current error
;lfr_pid_2.c,63 :: 		s1 = 0;
$0442	$1303			BCF	STATUS, RP1
$0443	$1283			BCF	STATUS, RP0
$0444	$01A1			CLRF	_s1
$0445	$01A2			CLRF	_s1+1
;lfr_pid_2.c,64 :: 		s2 = 0;
$0446	$01A3			CLRF	_s2
$0447	$01A4			CLRF	_s2+1
;lfr_pid_2.c,65 :: 		s3 = 0;
$0448	$01A5			CLRF	_s3
$0449	$01A6			CLRF	_s3+1
;lfr_pid_2.c,66 :: 		s4 = 0;
$044A	$01A7			CLRF	_s4
$044B	$01A8			CLRF	_s4+1
;lfr_pid_2.c,67 :: 		s5 = 0;
$044C	$01A9			CLRF	_s5
$044D	$01AA			CLRF	_s5+1
;lfr_pid_2.c,68 :: 		s6 = 0;
$044E	$01AB			CLRF	_s6
$044F	$01AC			CLRF	_s6+1
;lfr_pid_2.c,69 :: 		s7 = 0;
$0450	$01AD			CLRF	_s7
$0451	$01AE			CLRF	_s7+1
;lfr_pid_2.c,70 :: 		s8 = 0;
$0452	$01AF			CLRF	_s8
$0453	$01B0			CLRF	_s8+1
;lfr_pid_2.c,72 :: 		if( (error>=1)|| (error<=4) || (error >=-1) || (error<=-4))
$0454	$3000			MOVLW	0
$0455	$00F4			MOVWF	STACK_4
$0456	$3000			MOVLW	0
$0457	$00F5			MOVWF	STACK_4+1
$0458	$3000			MOVLW	0
$0459	$00F6			MOVWF	STACK_4+2
$045A	$307F			MOVLW	127
$045B	$00F7			MOVWF	STACK_4+3
$045C	$0831			MOVF	_error, 0
$045D	$00F0			MOVWF	STACK_0
$045E	$0832			MOVF	_error+1, 0
$045F	$00F1			MOVWF	STACK_0+1
$0460	$0833			MOVF	_error+2, 0
$0461	$00F2			MOVWF	STACK_0+2
$0462	$0834			MOVF	_error+3, 0
$0463	$00F3			MOVWF	STACK_0+3
$0464	$158A			BSF	PCLATH, 3
$0465	$2163			CALL	_compare_double
$0466	$118A			BCF	PCLATH, 3
$0467	$3001			MOVLW	1
$0468	$1C03			BTFSS	STATUS, C
$0469	$3000			MOVLW	0
$046A	$00F0			MOVWF	STACK_0
$046B	$0870			MOVF	STACK_0, 0
$046C	$1D03			BTFSS	STATUS, Z
$046D	$2CBC			GOTO	L93_ex_L_CalcError_2
$046E	$0831			MOVF	_error, 0
$046F	$00F4			MOVWF	STACK_4
$0470	$0832			MOVF	_error+1, 0
$0471	$00F5			MOVWF	STACK_4+1
$0472	$0833			MOVF	_error+2, 0
$0473	$00F6			MOVWF	STACK_4+2
$0474	$0834			MOVF	_error+3, 0
$0475	$00F7			MOVWF	STACK_4+3
$0476	$3000			MOVLW	0
$0477	$00F0			MOVWF	STACK_0
$0478	$3000			MOVLW	0
$0479	$00F1			MOVWF	STACK_0+1
$047A	$3000			MOVLW	0
$047B	$00F2			MOVWF	STACK_0+2
$047C	$3081			MOVLW	129
$047D	$00F3			MOVWF	STACK_0+3
$047E	$158A			BSF	PCLATH, 3
$047F	$2163			CALL	_compare_double
$0480	$118A			BCF	PCLATH, 3
$0481	$3001			MOVLW	1
$0482	$1C03			BTFSS	STATUS, C
$0483	$3000			MOVLW	0
$0484	$00F0			MOVWF	STACK_0
$0485	$0870			MOVF	STACK_0, 0
$0486	$1D03			BTFSS	STATUS, Z
$0487	$2CBC			GOTO	L93_ex_L_CalcError_2
$0488	$3000			MOVLW	0
$0489	$00F4			MOVWF	STACK_4
$048A	$3000			MOVLW	0
$048B	$00F5			MOVWF	STACK_4+1
$048C	$3080			MOVLW	128
$048D	$00F6			MOVWF	STACK_4+2
$048E	$307F			MOVLW	127
$048F	$00F7			MOVWF	STACK_4+3
$0490	$0831			MOVF	_error, 0
$0491	$00F0			MOVWF	STACK_0
$0492	$0832			MOVF	_error+1, 0
$0493	$00F1			MOVWF	STACK_0+1
$0494	$0833			MOVF	_error+2, 0
$0495	$00F2			MOVWF	STACK_0+2
$0496	$0834			MOVF	_error+3, 0
$0497	$00F3			MOVWF	STACK_0+3
$0498	$158A			BSF	PCLATH, 3
$0499	$2163			CALL	_compare_double
$049A	$118A			BCF	PCLATH, 3
$049B	$3001			MOVLW	1
$049C	$1C03			BTFSS	STATUS, C
$049D	$3000			MOVLW	0
$049E	$00F0			MOVWF	STACK_0
$049F	$0870			MOVF	STACK_0, 0
$04A0	$1D03			BTFSS	STATUS, Z
$04A1	$2CBC			GOTO	L93_ex_L_CalcError_2
$04A2	$0831			MOVF	_error, 0
$04A3	$00F4			MOVWF	STACK_4
$04A4	$0832			MOVF	_error+1, 0
$04A5	$00F5			MOVWF	STACK_4+1
$04A6	$0833			MOVF	_error+2, 0
$04A7	$00F6			MOVWF	STACK_4+2
$04A8	$0834			MOVF	_error+3, 0
$04A9	$00F7			MOVWF	STACK_4+3
$04AA	$3000			MOVLW	0
$04AB	$00F0			MOVWF	STACK_0
$04AC	$3000			MOVLW	0
$04AD	$00F1			MOVWF	STACK_0+1
$04AE	$3080			MOVLW	128
$04AF	$00F2			MOVWF	STACK_0+2
$04B0	$3081			MOVLW	129
$04B1	$00F3			MOVWF	STACK_0+3
$04B2	$158A			BSF	PCLATH, 3
$04B3	$2163			CALL	_compare_double
$04B4	$118A			BCF	PCLATH, 3
$04B5	$3001			MOVLW	1
$04B6	$1C03			BTFSS	STATUS, C
$04B7	$3000			MOVLW	0
$04B8	$00F0			MOVWF	STACK_0
$04B9	$0870			MOVF	STACK_0, 0
$04BA	$1903			BTFSC	STATUS, Z
$04BB	$2CF1			GOTO	L_CalcError_2
$04BC	$	L93_ex_L_CalcError_2:
;lfr_pid_2.c,74 :: 		if(PORTA.F0)
$04BC	$1C05			BTFSS	PORTA, 0
$04BD	$2CC4			GOTO	L_CalcError_3
;lfr_pid_2.c,76 :: 		lastreading='r';
$04BE	$3072			MOVLW	114
$04BF	$00B5			MOVWF	_lastreading
;lfr_pid_2.c,77 :: 		s1 = 1;
$04C0	$3001			MOVLW	1
$04C1	$00A1			MOVWF	_s1
$04C2	$3000			MOVLW	0
$04C3	$00A2			MOVWF	_s1+1
;lfr_pid_2.c,78 :: 		}
$04C4	$	L_CalcError_3:
;lfr_pid_2.c,79 :: 		if(PORTA.F1)
$04C4	$1C85			BTFSS	PORTA, 1
$04C5	$2CCA			GOTO	L_CalcError_4
;lfr_pid_2.c,80 :: 		s2 = 1;
$04C6	$3001			MOVLW	1
$04C7	$00A3			MOVWF	_s2
$04C8	$3000			MOVLW	0
$04C9	$00A4			MOVWF	_s2+1
$04CA	$	L_CalcError_4:
;lfr_pid_2.c,81 :: 		if(PORTA.F2)
$04CA	$1D05			BTFSS	PORTA, 2
$04CB	$2CD0			GOTO	L_CalcError_5
;lfr_pid_2.c,82 :: 		s3 = 1;
$04CC	$3001			MOVLW	1
$04CD	$00A5			MOVWF	_s3
$04CE	$3000			MOVLW	0
$04CF	$00A6			MOVWF	_s3+1
$04D0	$	L_CalcError_5:
;lfr_pid_2.c,83 :: 		if(PORTA.F3)
$04D0	$1D85			BTFSS	PORTA, 3
$04D1	$2CD6			GOTO	L_CalcError_6
;lfr_pid_2.c,84 :: 		s4 = 1;
$04D2	$3001			MOVLW	1
$04D3	$00A7			MOVWF	_s4
$04D4	$3000			MOVLW	0
$04D5	$00A8			MOVWF	_s4+1
$04D6	$	L_CalcError_6:
;lfr_pid_2.c,85 :: 		if(PORTA.F4)
$04D6	$1E05			BTFSS	PORTA, 4
$04D7	$2CDC			GOTO	L_CalcError_7
;lfr_pid_2.c,86 :: 		s5 = 1;
$04D8	$3001			MOVLW	1
$04D9	$00A9			MOVWF	_s5
$04DA	$3000			MOVLW	0
$04DB	$00AA			MOVWF	_s5+1
$04DC	$	L_CalcError_7:
;lfr_pid_2.c,87 :: 		if(PORTA.F5)
$04DC	$1E85			BTFSS	PORTA, 5
$04DD	$2CE2			GOTO	L_CalcError_8
;lfr_pid_2.c,88 :: 		s6 = 1;
$04DE	$3001			MOVLW	1
$04DF	$00AB			MOVWF	_s6
$04E0	$3000			MOVLW	0
$04E1	$00AC			MOVWF	_s6+1
$04E2	$	L_CalcError_8:
;lfr_pid_2.c,89 :: 		if(PORTE.F0)
$04E2	$1C09			BTFSS	PORTE, 0
$04E3	$2CE8			GOTO	L_CalcError_9
;lfr_pid_2.c,90 :: 		s7 = 1;
$04E4	$3001			MOVLW	1
$04E5	$00AD			MOVWF	_s7
$04E6	$3000			MOVLW	0
$04E7	$00AE			MOVWF	_s7+1
$04E8	$	L_CalcError_9:
;lfr_pid_2.c,91 :: 		if(PORTE.F1)
$04E8	$1C89			BTFSS	PORTE, 1
$04E9	$2CF0			GOTO	L_CalcError_10
;lfr_pid_2.c,93 :: 		lastreading='l';
$04EA	$306C			MOVLW	108
$04EB	$00B5			MOVWF	_lastreading
;lfr_pid_2.c,94 :: 		s8 = 1;
$04EC	$3001			MOVLW	1
$04ED	$00AF			MOVWF	_s8
$04EE	$3000			MOVLW	0
$04EF	$00B0			MOVWF	_s8+1
;lfr_pid_2.c,95 :: 		}
$04F0	$	L_CalcError_10:
;lfr_pid_2.c,96 :: 		}
$04F0	$2CFD			GOTO	L_CalcError_11
$04F1	$	L_CalcError_2:
;lfr_pid_2.c,99 :: 		if(PORTA.F0)
$04F1	$1C05			BTFSS	PORTA, 0
$04F2	$2CF7			GOTO	L_CalcError_12
;lfr_pid_2.c,101 :: 		lastreading='r';
$04F3	$3072			MOVLW	114
$04F4	$00B5			MOVWF	_lastreading
;lfr_pid_2.c,102 :: 		s1 = 0;
$04F5	$01A1			CLRF	_s1
$04F6	$01A2			CLRF	_s1+1
;lfr_pid_2.c,103 :: 		}
$04F7	$	L_CalcError_12:
;lfr_pid_2.c,104 :: 		if(PORTE.F1)
$04F7	$1C89			BTFSS	PORTE, 1
$04F8	$2CFD			GOTO	L_CalcError_13
;lfr_pid_2.c,106 :: 		lastreading='l';
$04F9	$306C			MOVLW	108
$04FA	$00B5			MOVWF	_lastreading
;lfr_pid_2.c,107 :: 		s8 = 0;
$04FB	$01AF			CLRF	_s8
$04FC	$01B0			CLRF	_s8+1
;lfr_pid_2.c,108 :: 		}
$04FD	$	L_CalcError_13:
;lfr_pid_2.c,109 :: 		}
$04FD	$	L_CalcError_11:
;lfr_pid_2.c,110 :: 		perror = error;
$04FD	$0831			MOVF	_error, 0
$04FE	$00B6			MOVWF	_perror
$04FF	$0832			MOVF	_error+1, 0
$0500	$00B7			MOVWF	_perror+1
$0501	$0833			MOVF	_error+2, 0
$0502	$00B8			MOVWF	_perror+2
$0503	$0834			MOVF	_error+3, 0
$0504	$00B9			MOVWF	_perror+3
;lfr_pid_2.c,112 :: 		error = (s1 * 1) + (s2 * 2) + (s3 * 3) + (s4 * 4) + (s5 * 5) + (s6 * 6) +(s7 * 7) + (s8*8);
$0505	$3001			MOVLW	1
$0506	$00F4			MOVWF	STACK_4
$0507	$0823			MOVF	_s2, 0
$0508	$00F0			MOVWF	STACK_0
$0509	$0824			MOVF	_s2+1, 0
$050A	$00F1			MOVWF	STACK_0+1
$050B	$0874			MOVF	STACK_4, 0
$050C	$	L_CalcError_32:
$050C	$1903			BTFSC	STATUS, Z
$050D	$2D13			GOTO	L_CalcError_33
$050E	$0DF0			RLF	STACK_0, 1
$050F	$0DF1			RLF	STACK_0+1, 1
$0510	$1070			BCF	STACK_0, 0
$0511	$3FFF			ADDLW	255
$0512	$2D0C			GOTO	L_CalcError_32
$0513	$	L_CalcError_33:
$0513	$0870			MOVF	STACK_0, 0
$0514	$0721			ADDWF	_s1, 0
$0515	$00E5			MOVWF	FLOC_CalcError+0
$0516	$0822			MOVF	_s1+1, 0
$0517	$1803			BTFSC	STATUS, C
$0518	$3F01			ADDLW	1
$0519	$0771			ADDWF	STACK_0+1, 0
$051A	$00E6			MOVWF	FLOC_CalcError+1
$051B	$0825			MOVF	_s3, 0
$051C	$00F0			MOVWF	STACK_0
$051D	$0826			MOVF	_s3+1, 0
$051E	$00F1			MOVWF	STACK_0+1
$051F	$3003			MOVLW	3
$0520	$00F4			MOVWF	STACK_4
$0521	$3000			MOVLW	0
$0522	$00F5			MOVWF	STACK_4+1
$0523	$158A			BSF	PCLATH, 3
$0524	$22E5			CALL	_mul_16x16_u
$0525	$118A			BCF	PCLATH, 3
$0526	$0870			MOVF	STACK_0, 0
$0527	$07E5			ADDWF	FLOC_CalcError+0, 1
$0528	$0871			MOVF	STACK_0+1, 0
$0529	$1803			BTFSC	STATUS, C
$052A	$3F01			ADDLW	1
$052B	$07E6			ADDWF	FLOC_CalcError+1, 1
$052C	$3002			MOVLW	2
$052D	$00F4			MOVWF	STACK_4
$052E	$0827			MOVF	_s4, 0
$052F	$00F0			MOVWF	STACK_0
$0530	$0828			MOVF	_s4+1, 0
$0531	$00F1			MOVWF	STACK_0+1
$0532	$0874			MOVF	STACK_4, 0
$0533	$	L_CalcError_34:
$0533	$1903			BTFSC	STATUS, Z
$0534	$2D3A			GOTO	L_CalcError_35
$0535	$0DF0			RLF	STACK_0, 1
$0536	$0DF1			RLF	STACK_0+1, 1
$0537	$1070			BCF	STACK_0, 0
$0538	$3FFF			ADDLW	255
$0539	$2D33			GOTO	L_CalcError_34
$053A	$	L_CalcError_35:
$053A	$0870			MOVF	STACK_0, 0
$053B	$07E5			ADDWF	FLOC_CalcError+0, 1
$053C	$0871			MOVF	STACK_0+1, 0
$053D	$1803			BTFSC	STATUS, C
$053E	$3F01			ADDLW	1
$053F	$07E6			ADDWF	FLOC_CalcError+1, 1
$0540	$0829			MOVF	_s5, 0
$0541	$00F0			MOVWF	STACK_0
$0542	$082A			MOVF	_s5+1, 0
$0543	$00F1			MOVWF	STACK_0+1
$0544	$3005			MOVLW	5
$0545	$00F4			MOVWF	STACK_4
$0546	$3000			MOVLW	0
$0547	$00F5			MOVWF	STACK_4+1
$0548	$158A			BSF	PCLATH, 3
$0549	$22E5			CALL	_mul_16x16_u
$054A	$118A			BCF	PCLATH, 3
$054B	$0870			MOVF	STACK_0, 0
$054C	$07E5			ADDWF	FLOC_CalcError+0, 1
$054D	$0871			MOVF	STACK_0+1, 0
$054E	$1803			BTFSC	STATUS, C
$054F	$3F01			ADDLW	1
$0550	$07E6			ADDWF	FLOC_CalcError+1, 1
$0551	$082B			MOVF	_s6, 0
$0552	$00F0			MOVWF	STACK_0
$0553	$082C			MOVF	_s6+1, 0
$0554	$00F1			MOVWF	STACK_0+1
$0555	$3006			MOVLW	6
$0556	$00F4			MOVWF	STACK_4
$0557	$3000			MOVLW	0
$0558	$00F5			MOVWF	STACK_4+1
$0559	$158A			BSF	PCLATH, 3
$055A	$22E5			CALL	_mul_16x16_u
$055B	$118A			BCF	PCLATH, 3
$055C	$0870			MOVF	STACK_0, 0
$055D	$07E5			ADDWF	FLOC_CalcError+0, 1
$055E	$0871			MOVF	STACK_0+1, 0
$055F	$1803			BTFSC	STATUS, C
$0560	$3F01			ADDLW	1
$0561	$07E6			ADDWF	FLOC_CalcError+1, 1
$0562	$082D			MOVF	_s7, 0
$0563	$00F0			MOVWF	STACK_0
$0564	$082E			MOVF	_s7+1, 0
$0565	$00F1			MOVWF	STACK_0+1
$0566	$3007			MOVLW	7
$0567	$00F4			MOVWF	STACK_4
$0568	$3000			MOVLW	0
$0569	$00F5			MOVWF	STACK_4+1
$056A	$158A			BSF	PCLATH, 3
$056B	$22E5			CALL	_mul_16x16_u
$056C	$118A			BCF	PCLATH, 3
$056D	$0870			MOVF	STACK_0, 0
$056E	$07E5			ADDWF	FLOC_CalcError+0, 1
$056F	$0871			MOVF	STACK_0+1, 0
$0570	$1803			BTFSC	STATUS, C
$0571	$3F01			ADDLW	1
$0572	$07E6			ADDWF	FLOC_CalcError+1, 1
$0573	$3003			MOVLW	3
$0574	$00F4			MOVWF	STACK_4
$0575	$082F			MOVF	_s8, 0
$0576	$00F0			MOVWF	STACK_0
$0577	$0830			MOVF	_s8+1, 0
$0578	$00F1			MOVWF	STACK_0+1
$0579	$0874			MOVF	STACK_4, 0
$057A	$	L_CalcError_36:
$057A	$1903			BTFSC	STATUS, Z
$057B	$2D81			GOTO	L_CalcError_37
$057C	$0DF0			RLF	STACK_0, 1
$057D	$0DF1			RLF	STACK_0+1, 1
$057E	$1070			BCF	STACK_0, 0
$057F	$3FFF			ADDLW	255
$0580	$2D7A			GOTO	L_CalcError_36
$0581	$	L_CalcError_37:
$0581	$0865			MOVF	FLOC_CalcError+0, 0
$0582	$07F0			ADDWF	STACK_0, 1
$0583	$0866			MOVF	FLOC_CalcError+1, 0
$0584	$1803			BTFSC	STATUS, C
$0585	$3F01			ADDLW	1
$0586	$07F1			ADDWF	STACK_0+1, 1
$0587	$158A			BSF	PCLATH, 3
$0588	$2321			CALL	_word2double
$0589	$118A			BCF	PCLATH, 3
$058A	$0870			MOVF	STACK_0, 0
$058B	$00E5			MOVWF	FLOC_CalcError+0
$058C	$0871			MOVF	STACK_0+1, 0
$058D	$00E6			MOVWF	FLOC_CalcError+1
$058E	$0872			MOVF	STACK_0+2, 0
$058F	$00E7			MOVWF	FLOC_CalcError+2
$0590	$0873			MOVF	STACK_0+3, 0
$0591	$00E8			MOVWF	FLOC_CalcError+3
$0592	$0865			MOVF	FLOC_CalcError+0, 0
$0593	$00B1			MOVWF	_error
$0594	$0866			MOVF	FLOC_CalcError+1, 0
$0595	$00B2			MOVWF	_error+1
$0596	$0867			MOVF	FLOC_CalcError+2, 0
$0597	$00B3			MOVWF	_error+2
$0598	$0868			MOVF	FLOC_CalcError+3, 0
$0599	$00B4			MOVWF	_error+3
;lfr_pid_2.c,113 :: 		error = (error)/(s1+s2+s3+s4+s5+s6+s7+s8);
$059A	$0823			MOVF	_s2, 0
$059B	$0721			ADDWF	_s1, 0
$059C	$00F0			MOVWF	STACK_0
$059D	$0822			MOVF	_s1+1, 0
$059E	$1803			BTFSC	STATUS, C
$059F	$3F01			ADDLW	1
$05A0	$0724			ADDWF	_s2+1, 0
$05A1	$00F1			MOVWF	STACK_0+1
$05A2	$0825			MOVF	_s3, 0
$05A3	$07F0			ADDWF	STACK_0, 1
$05A4	$0826			MOVF	_s3+1, 0
$05A5	$1803			BTFSC	STATUS, C
$05A6	$3F01			ADDLW	1
$05A7	$07F1			ADDWF	STACK_0+1, 1
$05A8	$0827			MOVF	_s4, 0
$05A9	$07F0			ADDWF	STACK_0, 1
$05AA	$0828			MOVF	_s4+1, 0
$05AB	$1803			BTFSC	STATUS, C
$05AC	$3F01			ADDLW	1
$05AD	$07F1			ADDWF	STACK_0+1, 1
$05AE	$0829			MOVF	_s5, 0
$05AF	$07F0			ADDWF	STACK_0, 1
$05B0	$082A			MOVF	_s5+1, 0
$05B1	$1803			BTFSC	STATUS, C
$05B2	$3F01			ADDLW	1
$05B3	$07F1			ADDWF	STACK_0+1, 1
$05B4	$082B			MOVF	_s6, 0
$05B5	$07F0			ADDWF	STACK_0, 1
$05B6	$082C			MOVF	_s6+1, 0
$05B7	$1803			BTFSC	STATUS, C
$05B8	$3F01			ADDLW	1
$05B9	$07F1			ADDWF	STACK_0+1, 1
$05BA	$082D			MOVF	_s7, 0
$05BB	$07F0			ADDWF	STACK_0, 1
$05BC	$082E			MOVF	_s7+1, 0
$05BD	$1803			BTFSC	STATUS, C
$05BE	$3F01			ADDLW	1
$05BF	$07F1			ADDWF	STACK_0+1, 1
$05C0	$082F			MOVF	_s8, 0
$05C1	$07F0			ADDWF	STACK_0, 1
$05C2	$0830			MOVF	_s8+1, 0
$05C3	$1803			BTFSC	STATUS, C
$05C4	$3F01			ADDLW	1
$05C5	$07F1			ADDWF	STACK_0+1, 1
$05C6	$158A			BSF	PCLATH, 3
$05C7	$2321			CALL	_word2double
$05C8	$118A			BCF	PCLATH, 3
$05C9	$0870			MOVF	STACK_0, 0
$05CA	$00F4			MOVWF	STACK_4
$05CB	$0871			MOVF	STACK_0+1, 0
$05CC	$00F5			MOVWF	STACK_4+1
$05CD	$0872			MOVF	STACK_0+2, 0
$05CE	$00F6			MOVWF	STACK_4+2
$05CF	$0873			MOVF	STACK_0+3, 0
$05D0	$00F7			MOVWF	STACK_4+3
$05D1	$0865			MOVF	FLOC_CalcError+0, 0
$05D2	$00F0			MOVWF	STACK_0
$05D3	$0866			MOVF	FLOC_CalcError+1, 0
$05D4	$00F1			MOVWF	STACK_0+1
$05D5	$0867			MOVF	FLOC_CalcError+2, 0
$05D6	$00F2			MOVWF	STACK_0+2
$05D7	$0868			MOVF	FLOC_CalcError+3, 0
$05D8	$00F3			MOVWF	STACK_0+3
$05D9	$269E			CALL	_div_32x32_fp
$05DA	$0870			MOVF	STACK_0, 0
$05DB	$00B1			MOVWF	_error
$05DC	$0871			MOVF	STACK_0+1, 0
$05DD	$00B2			MOVWF	_error+1
$05DE	$0872			MOVF	STACK_0+2, 0
$05DF	$00B3			MOVWF	_error+2
$05E0	$0873			MOVF	STACK_0+3, 0
$05E1	$00B4			MOVWF	_error+3
;lfr_pid_2.c,114 :: 		error = error - 4.5;
$05E2	$3000			MOVLW	0
$05E3	$00F4			MOVWF	STACK_4
$05E4	$3000			MOVLW	0
$05E5	$00F5			MOVWF	STACK_4+1
$05E6	$3010			MOVLW	16
$05E7	$00F6			MOVWF	STACK_4+2
$05E8	$3081			MOVLW	129
$05E9	$00F7			MOVWF	STACK_4+3
$05EA	$158A			BSF	PCLATH, 3
$05EB	$2397			CALL	_sub_32x32_fp
$05EC	$118A			BCF	PCLATH, 3
$05ED	$0870			MOVF	STACK_0, 0
$05EE	$00B1			MOVWF	_error
$05EF	$0871			MOVF	STACK_0+1, 0
$05F0	$00B2			MOVWF	_error+1
$05F1	$0872			MOVF	STACK_0+2, 0
$05F2	$00B3			MOVWF	_error+2
$05F3	$0873			MOVF	STACK_0+3, 0
$05F4	$00B4			MOVWF	_error+3
;lfr_pid_2.c,117 :: 		}
$05F5	$0008			RETURN
$0BAF	$	_motor_LF:
;lfr_pid_2.c,38 :: 		void motor_LF()         //LEFT MOTOR FWD DIR
;lfr_pid_2.c,40 :: 		PORTC.F5 = 1;
$0BAF	$1303			BCF	STATUS, RP1
$0BB0	$1283			BCF	STATUS, RP0
$0BB1	$1687			BSF	PORTC, 5
;lfr_pid_2.c,41 :: 		PORTC.F4 = 0;
$0BB2	$1207			BCF	PORTC, 4
;lfr_pid_2.c,42 :: 		lastreading = 'n';
$0BB3	$306E			MOVLW	110
$0BB4	$00B5			MOVWF	_lastreading
;lfr_pid_2.c,43 :: 		}
$0BB5	$0008			RETURN
$0BD9	$	_motor_RF:
;lfr_pid_2.c,24 :: 		void motor_RF()         //RIGHT MOTOR FWD DIR
;lfr_pid_2.c,26 :: 		PORTC.F7 = 1;
$0BD9	$1303			BCF	STATUS, RP1
$0BDA	$1283			BCF	STATUS, RP0
$0BDB	$1787			BSF	PORTC, 7
;lfr_pid_2.c,27 :: 		PORTC.F6 = 0;
$0BDC	$1307			BCF	PORTC, 6
;lfr_pid_2.c,29 :: 		}
$0BDD	$0008			RETURN
$0A79	$	_PWM1_Change_Duty:
$0A79	$1303			BCF	STATUS, RP1
$0A7A	$1683			BSF	STATUS, RP0
$0A7B	$0812			MOVF	PR2, 0
$0A7C	$3F01			ADDLW	1
$0A7D	$00F0			MOVWF	STACK_0
$0A7E	$01F1			CLRF	STACK_0+1
$0A7F	$1803			BTFSC	STATUS, C
$0A80	$0AF1			INCF	STACK_0+1, 1
$0A81	$1283			BCF	STATUS, RP0
$0A82	$0865			MOVF	FARG_PWM1_Change_Duty+0, 0
$0A83	$00F4			MOVWF	STACK_4
$0A84	$01F5			CLRF	STACK_4+1
$0A85	$21B3			CALL	_mul_16x16_s
$0A86	$3006			MOVLW	6
$0A87	$00F2			MOVWF	STACK_2
$0A88	$0870			MOVF	STACK_0, 0
$0A89	$00F4			MOVWF	STACK_4
$0A8A	$0871			MOVF	STACK_0+1, 0
$0A8B	$00F5			MOVWF	STACK_4+1
$0A8C	$0872			MOVF	STACK_2, 0
$0A8D	$	L_PWM1_Change_Duty_2:
$0A8D	$1903			BTFSC	STATUS, Z
$0A8E	$2A94			GOTO	L_PWM1_Change_Duty_3
$0A8F	$0CF5			RRF	STACK_4+1, 1
$0A90	$0CF4			RRF	STACK_4, 1
$0A91	$13F5			BCF	STACK_4+1, 7
$0A92	$3FFF			ADDLW	255
$0A93	$2A8D			GOTO	L_PWM1_Change_Duty_2
$0A94	$	L_PWM1_Change_Duty_3:
$0A94	$0874			MOVF	STACK_4, 0
$0A95	$00F0			MOVWF	STACK_0
$0A96	$0DF0			RLF	STACK_0, 1
$0A97	$1070			BCF	STACK_0, 0
$0A98	$0DF0			RLF	STACK_0, 1
$0A99	$1070			BCF	STACK_0, 0
$0A9A	$0DF0			RLF	STACK_0, 1
$0A9B	$1070			BCF	STACK_0, 0
$0A9C	$0DF0			RLF	STACK_0, 1
$0A9D	$1070			BCF	STACK_0, 0
$0A9E	$3030			MOVLW	48
$0A9F	$0570			ANDWF	STACK_0, 0
$0AA0	$00F3			MOVWF	STACK_3
$0AA1	$0874			MOVF	STACK_4, 0
$0AA2	$00F0			MOVWF	STACK_0
$0AA3	$0875			MOVF	STACK_4+1, 0
$0AA4	$00F1			MOVWF	STACK_0+1
$0AA5	$0CF1			RRF	STACK_0+1, 1
$0AA6	$0CF0			RRF	STACK_0, 1
$0AA7	$13F1			BCF	STACK_0+1, 7
$0AA8	$0CF1			RRF	STACK_0+1, 1
$0AA9	$0CF0			RRF	STACK_0, 1
$0AAA	$13F1			BCF	STACK_0+1, 7
$0AAB	$0870			MOVF	STACK_0, 0
$0AAC	$0095			MOVWF	CCPR1L
$0AAD	$300F			MOVLW	15
$0AAE	$0597			ANDWF	CCP1CON, 1
$0AAF	$0873			MOVF	STACK_3, 0
$0AB0	$0497			IORWF	CCP1CON, 1
$0AB1	$0008			RETURN
$0A40	$	_PWM2_Change_Duty:
$0A40	$1303			BCF	STATUS, RP1
$0A41	$1683			BSF	STATUS, RP0
$0A42	$0812			MOVF	PR2, 0
$0A43	$3F01			ADDLW	1
$0A44	$00F0			MOVWF	STACK_0
$0A45	$01F1			CLRF	STACK_0+1
$0A46	$1803			BTFSC	STATUS, C
$0A47	$0AF1			INCF	STACK_0+1, 1
$0A48	$1283			BCF	STATUS, RP0
$0A49	$0865			MOVF	FARG_PWM2_Change_Duty+0, 0
$0A4A	$00F4			MOVWF	STACK_4
$0A4B	$01F5			CLRF	STACK_4+1
$0A4C	$21B3			CALL	_mul_16x16_s
$0A4D	$3006			MOVLW	6
$0A4E	$00F2			MOVWF	STACK_2
$0A4F	$0870			MOVF	STACK_0, 0
$0A50	$00F4			MOVWF	STACK_4
$0A51	$0871			MOVF	STACK_0+1, 0
$0A52	$00F5			MOVWF	STACK_4+1
$0A53	$0872			MOVF	STACK_2, 0
$0A54	$	L_PWM2_Change_Duty_0:
$0A54	$1903			BTFSC	STATUS, Z
$0A55	$2A5B			GOTO	L_PWM2_Change_Duty_1
$0A56	$0CF5			RRF	STACK_4+1, 1
$0A57	$0CF4			RRF	STACK_4, 1
$0A58	$13F5			BCF	STACK_4+1, 7
$0A59	$3FFF			ADDLW	255
$0A5A	$2A54			GOTO	L_PWM2_Change_Duty_0
$0A5B	$	L_PWM2_Change_Duty_1:
$0A5B	$0874			MOVF	STACK_4, 0
$0A5C	$00F0			MOVWF	STACK_0
$0A5D	$0DF0			RLF	STACK_0, 1
$0A5E	$1070			BCF	STACK_0, 0
$0A5F	$0DF0			RLF	STACK_0, 1
$0A60	$1070			BCF	STACK_0, 0
$0A61	$0DF0			RLF	STACK_0, 1
$0A62	$1070			BCF	STACK_0, 0
$0A63	$0DF0			RLF	STACK_0, 1
$0A64	$1070			BCF	STACK_0, 0
$0A65	$3030			MOVLW	48
$0A66	$0570			ANDWF	STACK_0, 0
$0A67	$00F3			MOVWF	STACK_3
$0A68	$0874			MOVF	STACK_4, 0
$0A69	$00F0			MOVWF	STACK_0
$0A6A	$0875			MOVF	STACK_4+1, 0
$0A6B	$00F1			MOVWF	STACK_0+1
$0A6C	$0CF1			RRF	STACK_0+1, 1
$0A6D	$0CF0			RRF	STACK_0, 1
$0A6E	$13F1			BCF	STACK_0+1, 7
$0A6F	$0CF1			RRF	STACK_0+1, 1
$0A70	$0CF0			RRF	STACK_0, 1
$0A71	$13F1			BCF	STACK_0+1, 7
$0A72	$0870			MOVF	STACK_0, 0
$0A73	$009B			MOVWF	CCPR2L
$0A74	$300F			MOVLW	15
$0A75	$059D			ANDWF	CCP2CON, 1
$0A76	$0873			MOVF	STACK_3, 0
$0A77	$049D			IORWF	CCP2CON, 1
$0A78	$0008			RETURN
$0BB6	$	_motor_RB:
;lfr_pid_2.c,31 :: 		void motor_RB()         //RIGHT MOTOR REV DIR
;lfr_pid_2.c,33 :: 		PORTC.F7 = 0;
$0BB6	$1303			BCF	STATUS, RP1
$0BB7	$1283			BCF	STATUS, RP0
$0BB8	$1387			BCF	PORTC, 7
;lfr_pid_2.c,34 :: 		PORTC.F6 = 1;
$0BB9	$1707			BSF	PORTC, 6
;lfr_pid_2.c,35 :: 		lastreading = 'n';
$0BBA	$306E			MOVLW	110
$0BBB	$00B5			MOVWF	_lastreading
;lfr_pid_2.c,36 :: 		}
$0BBC	$0008			RETURN
$0BCF	$	_motor_LB:
;lfr_pid_2.c,45 :: 		void motor_LB()         //LEFT MOTOR REV DIR
;lfr_pid_2.c,47 :: 		PORTC.F5 = 0;
$0BCF	$1303			BCF	STATUS, RP1
$0BD0	$1283			BCF	STATUS, RP0
$0BD1	$1287			BCF	PORTC, 5
;lfr_pid_2.c,48 :: 		PORTC.F4 = 1;
$0BD2	$1607			BSF	PORTC, 4
;lfr_pid_2.c,49 :: 		}
$0BD3	$0008			RETURN
$0912	$	GlobalInilfr_pid_2:
$0912	$303C			MOVLW	60
$0913	$1303			BCF	STATUS, RP1
$0914	$1283			BCF	STATUS, RP0
$0915	$00BA			MOVWF	_basespeed+0
$0916	$3050			MOVLW	80
$0917	$00BB			MOVWF	_Kp1+0
$0918	$3032			MOVLW	50
$0919	$00BC			MOVWF	_Ki1+0
$091A	$3006			MOVLW	6
$091B	$00BD			MOVWF	_Kd1+0
$091C	$3004			MOVLW	4
$091D	$00BE			MOVWF	_Kp2+0
$091E	$30B4			MOVLW	180
$091F	$00BF			MOVWF	_Ki2+0
$0920	$3014			MOVLW	20
$0921	$00C0			MOVWF	_Kd2+0
$0922	$3000			MOVLW	0
$0923	$00C1			MOVWF	_rightpulse+0
$0924	$3000			MOVLW	0
$0925	$00C2			MOVWF	_rightpulse+1
$0926	$3000			MOVLW	0
$0927	$00C3			MOVWF	_rightpulse+2
$0928	$3000			MOVLW	0
$0929	$00C4			MOVWF	_rightpulse+3
$092A	$3000			MOVLW	0
$092B	$00C5			MOVWF	_leftpulse+0
$092C	$3000			MOVLW	0
$092D	$00C6			MOVWF	_leftpulse+1
$092E	$3000			MOVLW	0
$092F	$00C7			MOVWF	_leftpulse+2
$0930	$3000			MOVLW	0
$0931	$00C8			MOVWF	_leftpulse+3
$0932	$3000			MOVLW	0
$0933	$00B6			MOVWF	_perror+0
$0934	$3000			MOVLW	0
$0935	$00B7			MOVWF	_perror+1
$0936	$3000			MOVLW	0
$0937	$00B8			MOVWF	_perror+2
$0938	$3000			MOVLW	0
$0939	$00B9			MOVWF	_perror+3
$093A	$3000			MOVLW	0
$093B	$00B1			MOVWF	_error+0
$093C	$3000			MOVLW	0
$093D	$00B2			MOVWF	_error+1
$093E	$3000			MOVLW	0
$093F	$00B3			MOVWF	_error+2
$0940	$3000			MOVLW	0
$0941	$00B4			MOVWF	_error+3
$0942	$3000			MOVLW	0
$0943	$00C9			MOVWF	_PROPORTIONAL+0
$0944	$3000			MOVLW	0
$0945	$00CA			MOVWF	_PROPORTIONAL+1
$0946	$3000			MOVLW	0
$0947	$00CB			MOVWF	_PROPORTIONAL+2
$0948	$3000			MOVLW	0
$0949	$00CC			MOVWF	_PROPORTIONAL+3
$094A	$3000			MOVLW	0
$094B	$00CD			MOVWF	_INTEGRAL+0
$094C	$3000			MOVLW	0
$094D	$00CE			MOVWF	_INTEGRAL+1
$094E	$3000			MOVLW	0
$094F	$00CF			MOVWF	_INTEGRAL+2
$0950	$3000			MOVLW	0
$0951	$00D0			MOVWF	_INTEGRAL+3
$0952	$3000			MOVLW	0
$0953	$00D1			MOVWF	_DERIVATIVE+0
$0954	$3000			MOVLW	0
$0955	$00D2			MOVWF	_DERIVATIVE+1
$0956	$3000			MOVLW	0
$0957	$00D3			MOVWF	_DERIVATIVE+2
$0958	$3000			MOVLW	0
$0959	$00D4			MOVWF	_DERIVATIVE+3
$095A	$3000			MOVLW	0
$095B	$00D5			MOVWF	_correction+0
$095C	$3000			MOVLW	0
$095D	$00D6			MOVWF	_correction+1
$095E	$3000			MOVLW	0
$095F	$00D7			MOVWF	_correction+2
$0960	$3000			MOVLW	0
$0961	$00D8			MOVWF	_correction+3
$0962	$0008			RETURN
$0B37	$	_Equals_Double:
$0B37	$1303			BCF	STATUS, RP1
$0B38	$1283			BCF	STATUS, RP0
$0B39	$0873			MOVF	STACK_3, W
$0B3A	$0677			XORWF	STACK_7, W
$0B3B	$1D03			BTFSS	STATUS, Z
$0B3C	$2B4A			GOTO	EQU_FALSE
$0B3D	$0872			MOVF	STACK_2, W
$0B3E	$0676			XORWF	STACK_6, W
$0B3F	$1D03			BTFSS	STATUS, Z
$0B40	$2B4A			GOTO	EQU_FALSE
$0B41	$0871			MOVF	STACK_1, W
$0B42	$0675			XORWF	STACK_5, W
$0B43	$1D03			BTFSS	STATUS, Z
$0B44	$2B4A			GOTO	EQU_FALSE
$0B45	$0870			MOVF	STACK_0, W
$0B46	$0674			XORWF	STACK_4, W
$0B47	$1903			BTFSC	STATUS, Z
$0B48	$1503			BSF	STATUS, Z
$0B49	$0008			RETURN
$0B4A	$	EQU_FALSE:
$0B4A	$1103			BCF	STATUS, Z
$0B4B	$0008			RETURN
$0B4C	$0008			RETURN
$0B4D	$	_Byte2Double:
$0B4D	$1303			BCF	STATUS, RP1
$0B4E	$1283			BCF	STATUS, RP0
$0B4F	$	FLO08U32:
$0B4F	$0870			MOVF	STACK_0, W
$0B50	$00F8			MOVWF	STACK_8
$0B51	$01FB			CLRF	STACK_11
$0B52	$01FC			CLRF	STACK_12
$0B53	$309E			MOVLW	0x9E
$0B54	$00F3			MOVWF	STACK_3
$0B55	$01FA			CLRF	STACK_10
$0B56	$01F2			CLRF	STACK_2
$0B57	$01F1			CLRF	STACK_1
$0B58	$01F0			CLRF	STACK_0
$0B59	$3002			MOVLW	0x02
$0B5A	$00FC			MOVWF	STACK_12
$0B5B	$2063			CALL	_NRM4032
$0B5C	$0008			RETURN
$0800	$	_Mul_32x32_FP:
$0800	$1303			BCF	STATUS, RP1
$0801	$1283			BCF	STATUS, RP0
$0802	$	FPM32:
$0802	$01FB			CLRF	STACK_11
$0803	$0873			MOVF	STACK_3, W
$0804	$1D03			BTFSS	STATUS, Z
$0805	$0877			MOVF	STACK_7, W
$0806	$1903			BTFSC	STATUS, Z
$0807	$2857			GOTO	JPMRES032
$0808	$	M32BNE0:
$0808	$0872			MOVF	STACK_2, W
$0809	$0676			XORWF	STACK_6, W
$080A	$00FA			MOVWF	STACK_10
$080B	$0877			MOVF	STACK_7, W
$080C	$07F3			ADDWF	STACK_3, F
$080D	$307E			MOVLW	126
$080E	$1C03			BTFSS	STATUS, C
$080F	$2814			GOTO	MTUN32
$0810	$02F3			SUBWF	STACK_3, F
$0811	$1803			BTFSC	STATUS, C
$0812	$285C			GOTO	JPMSETFOV32
$0813	$2817			GOTO	MOK32
$0814	$	MTUN32:
$0814	$02F3			SUBWF	STACK_3, F
$0815	$1C03			BTFSS	STATUS, C
$0816	$285F			GOTO	JPMSETFUN32
$0817	$	MOK32:
$0817	$0872			MOVF	STACK_2, W
$0818	$00F8			MOVWF	STACK_8
$0819	$0871			MOVF	STACK_1, W
$081A	$00FC			MOVWF	STACK_12
$081B	$0870			MOVF	STACK_0, W
$081C	$00FD			MOVWF	STACK_13
$081D	$17F8			BSF	STACK_8, 7
$081E	$17F6			BSF	STACK_6, 7
$081F	$1003			BCF	STATUS, C
$0820	$01F2			CLRF	STACK_2
$0821	$01F1			CLRF	STACK_1
$0822	$01F0			CLRF	STACK_0
$0823	$3018			MOVLW	24
$0824	$00A0			MOVWF	__math_tempbD
$0825	$	MLOOP32:
$0825	$1C7D			BTFSS	STACK_13, 0
$0826	$2831			GOTO	MNOADD32
$0827	$	MADD32:
$0827	$0874			MOVF	STACK_4, W
$0828	$07F0			ADDWF	STACK_0, F
$0829	$0875			MOVF	STACK_5, W
$082A	$1803			BTFSC	STATUS, C
$082B	$0F75			INCFSZ	STACK_5, W
$082C	$07F1			ADDWF	STACK_1, F
$082D	$0876			MOVF	STACK_6, W
$082E	$1803			BTFSC	STATUS, C
$082F	$0F76			INCFSZ	STACK_6, W
$0830	$07F2			ADDWF	STACK_2, F
$0831	$	MNOADD32:
$0831	$0CF2			RRF	STACK_2, F
$0832	$0CF1			RRF	STACK_1, F
$0833	$0CF0			RRF	STACK_0, F
$0834	$0CF8			RRF	STACK_8, F
$0835	$0CFC			RRF	STACK_12, F
$0836	$0CFD			RRF	STACK_13, F
$0837	$1003			BCF	STATUS, C
$0838	$0BA0			DECFSZ	__math_tempbD, F
$0839	$2825			GOTO	MLOOP32
$083A	$1BF2			BTFSC	STACK_2, 7
$083B	$2841			GOTO	MROUND32
$083C	$0DF8			RLF	STACK_8, F
$083D	$0DF0			RLF	STACK_0, F
$083E	$0DF1			RLF	STACK_1, F
$083F	$0DF2			RLF	STACK_2, F
$0840	$03F3			DECF	STACK_3, F
$0841	$	MROUND32:
$0841	$1B7B			BTFSC	STACK_11, 6
$0842	$1C70			BTFSS	STACK_0, 0
$0843	$2853			GOTO	MUL32OK
$0844	$1FF8			BTFSS	STACK_8, 7
$0845	$2853			GOTO	MUL32OK
$0846	$0AF0			INCF	STACK_0, F
$0847	$1903			BTFSC	STATUS, Z
$0848	$0AF1			INCF	STACK_1, F
$0849	$1903			BTFSC	STATUS, Z
$084A	$0AF2			INCF	STACK_2, F
$084B	$1D03			BTFSS	STATUS, Z
$084C	$2853			GOTO	MUL32OK
$084D	$0CF2			RRF	STACK_2, F
$084E	$0CF1			RRF	STACK_1, F
$084F	$0CF0			RRF	STACK_0, F
$0850	$0AF3			INCF	STACK_3, F
$0851	$1903			BTFSC	STATUS, Z
$0852	$285C			GOTO	JPMSETFOV32
$0853	$	MUL32OK:
$0853	$1FFA			BTFSS	STACK_10, 7
$0854	$13F2			BCF	STACK_2, 7
$0855	$3000			MOVLW	0x00
$0856	$2861			GOTO	MUL32EEE
$0857	$	JPMRES032:
$0857	$3001			MOVLW	0x01
$0858	$118A			BCF	PCLATH, 3
$0859	$2740			CALL	_RES032
$085A	$158A			BSF	PCLATH, 3
$085B	$2861			GOTO	MUL32EEE
$085C	$	JPMSETFOV32:
$085C	$3002			MOVLW	0x02
$085D	$237B			CALL	_SETFOV32
$085E	$2861			GOTO	MUL32EEE
$085F	$	JPMSETFUN32:
$085F	$3004			MOVLW	0x04
$0860	$2389			CALL	_SETFUN32
$0861	$	MUL32EEE:
$0861	$0000			NOP
$0862	$0008			RETURN
$09FD	$	_Double2Byte:
$09FD	$1303			BCF	STATUS, RP1
$09FE	$1283			BCF	STATUS, RP0
$09FF	$	INT32U08:
$09FF	$01FB			CLRF	STACK_11
$0A00	$01FC			CLRF	STACK_12
$0A01	$01FA			CLRF	STACK_10
$0A02	$0873			MOVF	STACK_3, W
$0A03	$1903			BTFSC	STATUS, Z
$0A04	$2A2A			GOTO	IRES008
$0A05	$13FA			BCF	STACK_10, 7
$0A06	$17F2			BSF	STACK_2, 7
$0A07	$3086			MOVLW	134
$0A08	$02F3			SUBWF	STACK_3, F
$0A09	$1BF3			BTFSC	STACK_3, 7
$0A0A	$2A0E			GOTO	SETEXP08
$0A0B	$1903			BTFSC	STATUS, Z
$0A0C	$2A0E			GOTO	SETEXP08
$0A0D	$2A2C			GOTO	SETIOV08
$0A0E	$	SETEXP08:
$0A0E	$09F3			COMF	STACK_3, F
$0A0F	$0AF3			INCF	STACK_3, F
$0A10	$3008			MOVLW	8
$0A11	$0273			SUBWF	STACK_3, W
$0A12	$1C03			BTFSS	STATUS, C
$0A13	$2A1B			GOTO	TSHIFT3208
$0A14	$00F3			MOVWF	STACK_3
$0A15	$0DF2			RLF	STACK_2, F
$0A16	$01F2			CLRF	STACK_2
$0A17	$0873			MOVF	STACK_3, W
$0A18	$1D03			BTFSS	STATUS, Z
$0A19	$1003			BCF	STATUS, C
$0A1A	$2A22			GOTO	SHIFT3208OK
$0A1B	$	TSHIFT3208:
$0A1B	$0873			MOVF	STACK_3, W
$0A1C	$1903			BTFSC	STATUS, Z
$0A1D	$2A22			GOTO	SHIFT3208OK
$0A1E	$	SHIFT3208:
$0A1E	$1003			BCF	STATUS, C
$0A1F	$0CF2			RRF	STACK_2, F
$0A20	$0BF3			DECFSZ	STACK_3, F
$0A21	$2A1E			GOTO	SHIFT3208
$0A22	$	SHIFT3208OK:
$0A22	$1B7B			BTFSC	STACK_11, 6
$0A23	$1C72			BTFSS	STACK_2, 0
$0A24	$2A2A			GOTO	INT3208OK
$0A25	$1C03			BTFSS	STATUS, C
$0A26	$2A2A			GOTO	INT3208OK
$0A27	$0AF2			INCF	STACK_2, F
$0A28	$1903			BTFSC	STATUS, Z
$0A29	$2A31			GOTO	D2B_JPKSETIOV3224
$0A2A	$	INT3208OK:
$0A2A	$	IRES008:
$0A2A	$01F1			CLRF	STACK_1
$0A2B	$2A34			GOTO	INT3208EOK
$0A2C	$	SETIOV08:
$0A2C	$147B			BSF	STACK_11, 0
$0A2D	$1FFB			BTFSS	STACK_11, 7
$0A2E	$2A37			GOTO	INT3208EER
$0A2F	$01F1			CLRF	STACK_1
$0A30	$2A37			GOTO	INT3208EER
$0A31	$	D2B_JPKSETIOV3224:
$0A31	$3001			MOVLW	0x01
$0A32	$00FC			MOVWF	STACK_12
$0A33	$2A39			GOTO	INT3208EEE
$0A34	$	INT3208EOK:
$0A34	$3000			MOVLW	0x00
$0A35	$00FC			MOVWF	STACK_12
$0A36	$2A39			GOTO	INT3208EEE
$0A37	$	INT3208EER:
$0A37	$30FF			MOVLW	0xFF
$0A38	$00FC			MOVWF	STACK_12
$0A39	$	INT3208EEE:
$0A39	$08FC			MOVF	STACK_12, F
$0A3A	$1903			BTFSC	STATUS, Z
$0A3B	$2A3D			GOTO	L_Double2Byte_0
$0A3C	$235D			CALL	_SETIOV3224
$0A3D	$	L_Double2Byte_0:
$0A3D	$0872			MOVF	STACK_2, W
$0A3E	$00F0			MOVWF	STACK_0
$0A3F	$0008			RETURN
$0004	$	_main:
;lfr_pid_2.c,118 :: 		void main()
;lfr_pid_2.c,121 :: 		initport();
$0004	$158A			BSF	PCLATH, 3
$0005	$2112			CALL	GlobalInilfr_pid_2
$0006	$118A			BCF	PCLATH, 3
$0007	$158A			BSF	PCLATH, 3
$0008	$236C			CALL	_initport
$0009	$118A			BCF	PCLATH, 3
;lfr_pid_2.c,122 :: 		initpwm();
$000A	$158A			BSF	PCLATH, 3
$000B	$2310			CALL	_initpwm
$000C	$118A			BCF	PCLATH, 3
;lfr_pid_2.c,123 :: 		while(1)
$000D	$	L_main_14:
;lfr_pid_2.c,125 :: 		indicator();
$000D	$158A			BSF	PCLATH, 3
$000E	$20C1			CALL	_indicator
$000F	$118A			BCF	PCLATH, 3
;lfr_pid_2.c,126 :: 		CalcError();
$0010	$2442			CALL	_CalcError
;lfr_pid_2.c,127 :: 		if((error == 0) && (s4+s5==2) && ((s1+s2+s3+s6+s7+s8)==0))
$0011	$01F4			CLRF	STACK_4
$0012	$01F5			CLRF	STACK_4+1
$0013	$01F6			CLRF	STACK_4+2
$0014	$01F7			CLRF	STACK_4+3
$0015	$0831			MOVF	_error, 0
$0016	$00F0			MOVWF	STACK_0
$0017	$0832			MOVF	_error+1, 0
$0018	$00F1			MOVWF	STACK_0+1
$0019	$0833			MOVF	_error+2, 0
$001A	$00F2			MOVWF	STACK_0+2
$001B	$0834			MOVF	_error+3, 0
$001C	$00F3			MOVWF	STACK_0+3
$001D	$158A			BSF	PCLATH, 3
$001E	$2337			CALL	_equals_double
$001F	$118A			BCF	PCLATH, 3
$0020	$3001			MOVLW	1
$0021	$1D03			BTFSS	STATUS, Z
$0022	$3000			MOVLW	0
$0023	$00F0			MOVWF	STACK_0
$0024	$0870			MOVF	STACK_0, 0
$0025	$1903			BTFSC	STATUS, Z
$0026	$2881			GOTO	L_main_18
$0027	$0829			MOVF	_s5, 0
$0028	$0727			ADDWF	_s4, 0
$0029	$00F4			MOVWF	STACK_4
$002A	$0828			MOVF	_s4+1, 0
$002B	$1803			BTFSC	STATUS, C
$002C	$3F01			ADDLW	1
$002D	$072A			ADDWF	_s5+1, 0
$002E	$00F5			MOVWF	STACK_4+1
$002F	$3000			MOVLW	0
$0030	$0675			XORWF	STACK_4+1, 0
$0031	$1D03			BTFSS	STATUS, Z
$0032	$2835			GOTO	L_main_38
$0033	$3002			MOVLW	2
$0034	$0674			XORWF	STACK_4, 0
$0035	$	L_main_38:
$0035	$1D03			BTFSS	STATUS, Z
$0036	$2881			GOTO	L_main_18
$0037	$0823			MOVF	_s2, 0
$0038	$0721			ADDWF	_s1, 0
$0039	$00F0			MOVWF	STACK_0
$003A	$0822			MOVF	_s1+1, 0
$003B	$1803			BTFSC	STATUS, C
$003C	$3F01			ADDLW	1
$003D	$0724			ADDWF	_s2+1, 0
$003E	$00F1			MOVWF	STACK_0+1
$003F	$0825			MOVF	_s3, 0
$0040	$07F0			ADDWF	STACK_0, 1
$0041	$0826			MOVF	_s3+1, 0
$0042	$1803			BTFSC	STATUS, C
$0043	$3F01			ADDLW	1
$0044	$07F1			ADDWF	STACK_0+1, 1
$0045	$082B			MOVF	_s6, 0
$0046	$07F0			ADDWF	STACK_0, 1
$0047	$082C			MOVF	_s6+1, 0
$0048	$1803			BTFSC	STATUS, C
$0049	$3F01			ADDLW	1
$004A	$07F1			ADDWF	STACK_0+1, 1
$004B	$082D			MOVF	_s7, 0
$004C	$07F0			ADDWF	STACK_0, 1
$004D	$082E			MOVF	_s7+1, 0
$004E	$1803			BTFSC	STATUS, C
$004F	$3F01			ADDLW	1
$0050	$07F1			ADDWF	STACK_0+1, 1
$0051	$082F			MOVF	_s8, 0
$0052	$0770			ADDWF	STACK_0, 0
$0053	$00F4			MOVWF	STACK_4
$0054	$0871			MOVF	STACK_0+1, 0
$0055	$1803			BTFSC	STATUS, C
$0056	$3F01			ADDLW	1
$0057	$0730			ADDWF	_s8+1, 0
$0058	$00F5			MOVWF	STACK_4+1
$0059	$3000			MOVLW	0
$005A	$0675			XORWF	STACK_4+1, 0
$005B	$1D03			BTFSS	STATUS, Z
$005C	$285F			GOTO	L_main_39
$005D	$3000			MOVLW	0
$005E	$0674			XORWF	STACK_4, 0
$005F	$	L_main_39:
$005F	$1D03			BTFSS	STATUS, Z
$0060	$2881			GOTO	L_main_18
$0061	$	L181_ex_L_main_18:
;lfr_pid_2.c,129 :: 		motor_LF();					        	    //FWD AT FULL SPEED
$0061	$158A			BSF	PCLATH, 3
$0062	$23AF			CALL	_motor_LF
$0063	$118A			BCF	PCLATH, 3
;lfr_pid_2.c,130 :: 		motor_RF();
$0064	$158A			BSF	PCLATH, 3
$0065	$23D9			CALL	_motor_RF
$0066	$118A			BCF	PCLATH, 3
;lfr_pid_2.c,131 :: 		PWM1_CHANGE_DUTY(255);
$0067	$30FF			MOVLW	255
$0068	$00E5			MOVWF	FARG_PWM1_Change_Duty+0
$0069	$158A			BSF	PCLATH, 3
$006A	$2279			CALL	_PWM1_Change_Duty
$006B	$118A			BCF	PCLATH, 3
;lfr_pid_2.c,132 :: 		PWM2_CHANGE_DUTY(255);
$006C	$30FF			MOVLW	255
$006D	$00E5			MOVWF	FARG_PWM2_Change_Duty+0
$006E	$158A			BSF	PCLATH, 3
$006F	$2240			CALL	_PWM2_Change_Duty
$0070	$118A			BCF	PCLATH, 3
;lfr_pid_2.c,133 :: 		delay_ms(5);
$0071	$3007			MOVLW	7
$0072	$00FB			MOVWF	STACK_11
$0073	$30FF			MOVLW	255
$0074	$00FA			MOVWF	STACK_10
$0075	$0BFB			DECFSZ	STACK_11, F
$0076	$2878			GOTO	$+2
$0077	$287B			GOTO	$+4
$0078	$0BFA			DECFSZ	STACK_10, F
$0079	$2878			GOTO	$-1
$007A	$2875			GOTO	$-5
$007B	$3078			MOVLW	120
$007C	$00FA			MOVWF	STACK_10
$007D	$0BFA			DECFSZ	STACK_10, F
$007E	$287D			GOTO	$-1
$007F	$0000			NOP
$0080	$0000			NOP
;lfr_pid_2.c,134 :: 		}
$0081	$	L_main_18:
;lfr_pid_2.c,135 :: 		if((s1+s2+s3+s4+s5+s6+s7+s8) == 0)		//ROBOT HAS OVERSHOOT
$0081	$0823			MOVF	_s2, 0
$0082	$0721			ADDWF	_s1, 0
$0083	$00F0			MOVWF	STACK_0
$0084	$0822			MOVF	_s1+1, 0
$0085	$1803			BTFSC	STATUS, C
$0086	$3F01			ADDLW	1
$0087	$0724			ADDWF	_s2+1, 0
$0088	$00F1			MOVWF	STACK_0+1
$0089	$0825			MOVF	_s3, 0
$008A	$07F0			ADDWF	STACK_0, 1
$008B	$0826			MOVF	_s3+1, 0
$008C	$1803			BTFSC	STATUS, C
$008D	$3F01			ADDLW	1
$008E	$07F1			ADDWF	STACK_0+1, 1
$008F	$0827			MOVF	_s4, 0
$0090	$07F0			ADDWF	STACK_0, 1
$0091	$0828			MOVF	_s4+1, 0
$0092	$1803			BTFSC	STATUS, C
$0093	$3F01			ADDLW	1
$0094	$07F1			ADDWF	STACK_0+1, 1
$0095	$0829			MOVF	_s5, 0
$0096	$07F0			ADDWF	STACK_0, 1
$0097	$082A			MOVF	_s5+1, 0
$0098	$1803			BTFSC	STATUS, C
$0099	$3F01			ADDLW	1
$009A	$07F1			ADDWF	STACK_0+1, 1
$009B	$082B			MOVF	_s6, 0
$009C	$07F0			ADDWF	STACK_0, 1
$009D	$082C			MOVF	_s6+1, 0
$009E	$1803			BTFSC	STATUS, C
$009F	$3F01			ADDLW	1
$00A0	$07F1			ADDWF	STACK_0+1, 1
$00A1	$082D			MOVF	_s7, 0
$00A2	$07F0			ADDWF	STACK_0, 1
$00A3	$082E			MOVF	_s7+1, 0
$00A4	$1803			BTFSC	STATUS, C
$00A5	$3F01			ADDLW	1
$00A6	$07F1			ADDWF	STACK_0+1, 1
$00A7	$082F			MOVF	_s8, 0
$00A8	$0770			ADDWF	STACK_0, 0
$00A9	$00F4			MOVWF	STACK_4
$00AA	$0871			MOVF	STACK_0+1, 0
$00AB	$1803			BTFSC	STATUS, C
$00AC	$3F01			ADDLW	1
$00AD	$0730			ADDWF	_s8+1, 0
$00AE	$00F5			MOVWF	STACK_4+1
$00AF	$3000			MOVLW	0
$00B0	$0675			XORWF	STACK_4+1, 0
$00B1	$1D03			BTFSS	STATUS, Z
$00B2	$28B5			GOTO	L_main_40
$00B3	$3000			MOVLW	0
$00B4	$0674			XORWF	STACK_4, 0
$00B5	$	L_main_40:
$00B5	$1D03			BTFSS	STATUS, Z
$00B6	$2901			GOTO	L_main_19
;lfr_pid_2.c,137 :: 		if(lastreading == 'r')				  //CHECKS IF THE LAST SENSOR ACTIVATED WAS RIGHT
$00B7	$0835			MOVF	_lastreading, 0
$00B8	$3A72			XORLW	114
$00B9	$1D03			BTFSS	STATUS, Z
$00BA	$28DC			GOTO	L_main_20
;lfr_pid_2.c,139 :: 		motor_RB();						        //TURN RIGHT AT FULL SPEED
$00BB	$158A			BSF	PCLATH, 3
$00BC	$23B6			CALL	_motor_RB
$00BD	$118A			BCF	PCLATH, 3
;lfr_pid_2.c,140 :: 		motor_LF();
$00BE	$158A			BSF	PCLATH, 3
$00BF	$23AF			CALL	_motor_LF
$00C0	$118A			BCF	PCLATH, 3
;lfr_pid_2.c,141 :: 		PWM1_CHANGE_DUTY(255);
$00C1	$30FF			MOVLW	255
$00C2	$00E5			MOVWF	FARG_PWM1_Change_Duty+0
$00C3	$158A			BSF	PCLATH, 3
$00C4	$2279			CALL	_PWM1_Change_Duty
$00C5	$118A			BCF	PCLATH, 3
;lfr_pid_2.c,142 :: 		PWM2_CHANGE_DUTY(255);
$00C6	$30FF			MOVLW	255
$00C7	$00E5			MOVWF	FARG_PWM2_Change_Duty+0
$00C8	$158A			BSF	PCLATH, 3
$00C9	$2240			CALL	_PWM2_Change_Duty
$00CA	$118A			BCF	PCLATH, 3
;lfr_pid_2.c,143 :: 		delay_ms(5);
$00CB	$3007			MOVLW	7
$00CC	$00FB			MOVWF	STACK_11
$00CD	$30FF			MOVLW	255
$00CE	$00FA			MOVWF	STACK_10
$00CF	$0BFB			DECFSZ	STACK_11, F
$00D0	$28D2			GOTO	$+2
$00D1	$28D5			GOTO	$+4
$00D2	$0BFA			DECFSZ	STACK_10, F
$00D3	$28D2			GOTO	$-1
$00D4	$28CF			GOTO	$-5
$00D5	$3078			MOVLW	120
$00D6	$00FA			MOVWF	STACK_10
$00D7	$0BFA			DECFSZ	STACK_10, F
$00D8	$28D7			GOTO	$-1
$00D9	$0000			NOP
$00DA	$0000			NOP
;lfr_pid_2.c,144 :: 		}
$00DB	$2900			GOTO	L_main_21
$00DC	$	L_main_20:
;lfr_pid_2.c,145 :: 		else if(lastreading == 'l')			  //CHECKS IF THE LAST SENSOR ACTIVATED WAS LEFT
$00DC	$0835			MOVF	_lastreading, 0
$00DD	$3A6C			XORLW	108
$00DE	$1D03			BTFSS	STATUS, Z
$00DF	$2900			GOTO	L_main_22
;lfr_pid_2.c,147 :: 		motor_LB();					        	//TURN LEFT AT FULL SPEED
$00E0	$158A			BSF	PCLATH, 3
$00E1	$23CF			CALL	_motor_LB
$00E2	$118A			BCF	PCLATH, 3
;lfr_pid_2.c,148 :: 		motor_RF();
$00E3	$158A			BSF	PCLATH, 3
$00E4	$23D9			CALL	_motor_RF
$00E5	$118A			BCF	PCLATH, 3
;lfr_pid_2.c,149 :: 		PWM1_CHANGE_DUTY(255);
$00E6	$30FF			MOVLW	255
$00E7	$00E5			MOVWF	FARG_PWM1_Change_Duty+0
$00E8	$158A			BSF	PCLATH, 3
$00E9	$2279			CALL	_PWM1_Change_Duty
$00EA	$118A			BCF	PCLATH, 3
;lfr_pid_2.c,150 :: 		PWM2_CHANGE_DUTY(255);
$00EB	$30FF			MOVLW	255
$00EC	$00E5			MOVWF	FARG_PWM2_Change_Duty+0
$00ED	$158A			BSF	PCLATH, 3
$00EE	$2240			CALL	_PWM2_Change_Duty
$00EF	$118A			BCF	PCLATH, 3
;lfr_pid_2.c,151 :: 		delay_ms(5);
$00F0	$3007			MOVLW	7
$00F1	$00FB			MOVWF	STACK_11
$00F2	$30FF			MOVLW	255
$00F3	$00FA			MOVWF	STACK_10
$00F4	$0BFB			DECFSZ	STACK_11, F
$00F5	$28F7			GOTO	$+2
$00F6	$28FA			GOTO	$+4
$00F7	$0BFA			DECFSZ	STACK_10, F
$00F8	$28F7			GOTO	$-1
$00F9	$28F4			GOTO	$-5
$00FA	$3078			MOVLW	120
$00FB	$00FA			MOVWF	STACK_10
$00FC	$0BFA			DECFSZ	STACK_10, F
$00FD	$28FC			GOTO	$-1
$00FE	$0000			NOP
$00FF	$0000			NOP
;lfr_pid_2.c,152 :: 		}
$0100	$	L_main_22:
$0100	$	L_main_21:
;lfr_pid_2.c,153 :: 		}
$0100	$2C30			GOTO	L_main_23
$0101	$	L_main_19:
;lfr_pid_2.c,156 :: 		if( (error>=1)|| (error<=4) || (error >=-1) || (error<=-4))
$0101	$3000			MOVLW	0
$0102	$00F4			MOVWF	STACK_4
$0103	$3000			MOVLW	0
$0104	$00F5			MOVWF	STACK_4+1
$0105	$3000			MOVLW	0
$0106	$00F6			MOVWF	STACK_4+2
$0107	$307F			MOVLW	127
$0108	$00F7			MOVWF	STACK_4+3
$0109	$0831			MOVF	_error, 0
$010A	$00F0			MOVWF	STACK_0
$010B	$0832			MOVF	_error+1, 0
$010C	$00F1			MOVWF	STACK_0+1
$010D	$0833			MOVF	_error+2, 0
$010E	$00F2			MOVWF	STACK_0+2
$010F	$0834			MOVF	_error+3, 0
$0110	$00F3			MOVWF	STACK_0+3
$0111	$158A			BSF	PCLATH, 3
$0112	$2163			CALL	_compare_double
$0113	$118A			BCF	PCLATH, 3
$0114	$3001			MOVLW	1
$0115	$1C03			BTFSS	STATUS, C
$0116	$3000			MOVLW	0
$0117	$00F0			MOVWF	STACK_0
$0118	$0870			MOVF	STACK_0, 0
$0119	$1D03			BTFSS	STATUS, Z
$011A	$2969			GOTO	L282_ex_L_main_26
$011B	$0831			MOVF	_error, 0
$011C	$00F4			MOVWF	STACK_4
$011D	$0832			MOVF	_error+1, 0
$011E	$00F5			MOVWF	STACK_4+1
$011F	$0833			MOVF	_error+2, 0
$0120	$00F6			MOVWF	STACK_4+2
$0121	$0834			MOVF	_error+3, 0
$0122	$00F7			MOVWF	STACK_4+3
$0123	$3000			MOVLW	0
$0124	$00F0			MOVWF	STACK_0
$0125	$3000			MOVLW	0
$0126	$00F1			MOVWF	STACK_0+1
$0127	$3000			MOVLW	0
$0128	$00F2			MOVWF	STACK_0+2
$0129	$3081			MOVLW	129
$012A	$00F3			MOVWF	STACK_0+3
$012B	$158A			BSF	PCLATH, 3
$012C	$2163			CALL	_compare_double
$012D	$118A			BCF	PCLATH, 3
$012E	$3001			MOVLW	1
$012F	$1C03			BTFSS	STATUS, C
$0130	$3000			MOVLW	0
$0131	$00F0			MOVWF	STACK_0
$0132	$0870			MOVF	STACK_0, 0
$0133	$1D03			BTFSS	STATUS, Z
$0134	$2969			GOTO	L282_ex_L_main_26
$0135	$3000			MOVLW	0
$0136	$00F4			MOVWF	STACK_4
$0137	$3000			MOVLW	0
$0138	$00F5			MOVWF	STACK_4+1
$0139	$3080			MOVLW	128
$013A	$00F6			MOVWF	STACK_4+2
$013B	$307F			MOVLW	127
$013C	$00F7			MOVWF	STACK_4+3
$013D	$0831			MOVF	_error, 0
$013E	$00F0			MOVWF	STACK_0
$013F	$0832			MOVF	_error+1, 0
$0140	$00F1			MOVWF	STACK_0+1
$0141	$0833			MOVF	_error+2, 0
$0142	$00F2			MOVWF	STACK_0+2
$0143	$0834			MOVF	_error+3, 0
$0144	$00F3			MOVWF	STACK_0+3
$0145	$158A			BSF	PCLATH, 3
$0146	$2163			CALL	_compare_double
$0147	$118A			BCF	PCLATH, 3
$0148	$3001			MOVLW	1
$0149	$1C03			BTFSS	STATUS, C
$014A	$3000			MOVLW	0
$014B	$00F0			MOVWF	STACK_0
$014C	$0870			MOVF	STACK_0, 0
$014D	$1D03			BTFSS	STATUS, Z
$014E	$2969			GOTO	L282_ex_L_main_26
$014F	$0831			MOVF	_error, 0
$0150	$00F4			MOVWF	STACK_4
$0151	$0832			MOVF	_error+1, 0
$0152	$00F5			MOVWF	STACK_4+1
$0153	$0833			MOVF	_error+2, 0
$0154	$00F6			MOVWF	STACK_4+2
$0155	$0834			MOVF	_error+3, 0
$0156	$00F7			MOVWF	STACK_4+3
$0157	$3000			MOVLW	0
$0158	$00F0			MOVWF	STACK_0
$0159	$3000			MOVLW	0
$015A	$00F1			MOVWF	STACK_0+1
$015B	$3080			MOVLW	128
$015C	$00F2			MOVWF	STACK_0+2
$015D	$3081			MOVLW	129
$015E	$00F3			MOVWF	STACK_0+3
$015F	$158A			BSF	PCLATH, 3
$0160	$2163			CALL	_compare_double
$0161	$118A			BCF	PCLATH, 3
$0162	$3001			MOVLW	1
$0163	$1C03			BTFSS	STATUS, C
$0164	$3000			MOVLW	0
$0165	$00F0			MOVWF	STACK_0
$0166	$0870			MOVF	STACK_0, 0
$0167	$1903			BTFSC	STATUS, Z
$0168	$2A77			GOTO	L_main_26
$0169	$	L282_ex_L_main_26:
;lfr_pid_2.c,158 :: 		PROPORTIONAL = error * kp1;
$0169	$083B			MOVF	_Kp1, 0
$016A	$00F0			MOVWF	STACK_0
$016B	$158A			BSF	PCLATH, 3
$016C	$234D			CALL	_byte2double
$016D	$118A			BCF	PCLATH, 3
$016E	$0831			MOVF	_error, 0
$016F	$00F4			MOVWF	STACK_4
$0170	$0832			MOVF	_error+1, 0
$0171	$00F5			MOVWF	STACK_4+1
$0172	$0833			MOVF	_error+2, 0
$0173	$00F6			MOVWF	STACK_4+2
$0174	$0834			MOVF	_error+3, 0
$0175	$00F7			MOVWF	STACK_4+3
$0176	$158A			BSF	PCLATH, 3
$0177	$2000			CALL	_mul_32x32_fp
$0178	$118A			BCF	PCLATH, 3
$0179	$0870			MOVF	STACK_0, 0
$017A	$00E1			MOVWF	FLOC_main+8
$017B	$0871			MOVF	STACK_0+1, 0
$017C	$00E2			MOVWF	FLOC_main+9
$017D	$0872			MOVF	STACK_0+2, 0
$017E	$00E3			MOVWF	FLOC_main+10
$017F	$0873			MOVF	STACK_0+3, 0
$0180	$00E4			MOVWF	FLOC_main+11
$0181	$0861			MOVF	FLOC_main+8, 0
$0182	$00C9			MOVWF	_PROPORTIONAL
$0183	$0862			MOVF	FLOC_main+9, 0
$0184	$00CA			MOVWF	_PROPORTIONAL+1
$0185	$0863			MOVF	FLOC_main+10, 0
$0186	$00CB			MOVWF	_PROPORTIONAL+2
$0187	$0864			MOVF	FLOC_main+11, 0
$0188	$00CC			MOVWF	_PROPORTIONAL+3
;lfr_pid_2.c,159 :: 		INTEGRAL += error ;
$0189	$084D			MOVF	_INTEGRAL, 0
$018A	$00F0			MOVWF	STACK_0
$018B	$084E			MOVF	_INTEGRAL+1, 0
$018C	$00F1			MOVWF	STACK_0+1
$018D	$084F			MOVF	_INTEGRAL+2, 0
$018E	$00F2			MOVWF	STACK_0+2
$018F	$0850			MOVF	_INTEGRAL+3, 0
$0190	$00F3			MOVWF	STACK_0+3
$0191	$0831			MOVF	_error, 0
$0192	$00F4			MOVWF	STACK_4
$0193	$0832			MOVF	_error+1, 0
$0194	$00F5			MOVWF	STACK_4+1
$0195	$0833			MOVF	_error+2, 0
$0196	$00F6			MOVWF	STACK_4+2
$0197	$0834			MOVF	_error+3, 0
$0198	$00F7			MOVWF	STACK_4+3
$0199	$25F6			CALL	_add_32x32_fp
$019A	$0870			MOVF	STACK_0, 0
$019B	$00D9			MOVWF	FLOC_main+0
$019C	$0871			MOVF	STACK_0+1, 0
$019D	$00DA			MOVWF	FLOC_main+1
$019E	$0872			MOVF	STACK_0+2, 0
$019F	$00DB			MOVWF	FLOC_main+2
$01A0	$0873			MOVF	STACK_0+3, 0
$01A1	$00DC			MOVWF	FLOC_main+3
$01A2	$0859			MOVF	FLOC_main+0, 0
$01A3	$00CD			MOVWF	_INTEGRAL
$01A4	$085A			MOVF	FLOC_main+1, 0
$01A5	$00CE			MOVWF	_INTEGRAL+1
$01A6	$085B			MOVF	FLOC_main+2, 0
$01A7	$00CF			MOVWF	_INTEGRAL+2
$01A8	$085C			MOVF	FLOC_main+3, 0
$01A9	$00D0			MOVWF	_INTEGRAL+3
;lfr_pid_2.c,160 :: 		INTEGRAL *= ki1;
$01AA	$083C			MOVF	_Ki1, 0
$01AB	$00F0			MOVWF	STACK_0
$01AC	$158A			BSF	PCLATH, 3
$01AD	$234D			CALL	_byte2double
$01AE	$118A			BCF	PCLATH, 3
$01AF	$0859			MOVF	FLOC_main+0, 0
$01B0	$00F4			MOVWF	STACK_4
$01B1	$085A			MOVF	FLOC_main+1, 0
$01B2	$00F5			MOVWF	STACK_4+1
$01B3	$085B			MOVF	FLOC_main+2, 0
$01B4	$00F6			MOVWF	STACK_4+2
$01B5	$085C			MOVF	FLOC_main+3, 0
$01B6	$00F7			MOVWF	STACK_4+3
$01B7	$158A			BSF	PCLATH, 3
$01B8	$2000			CALL	_mul_32x32_fp
$01B9	$118A			BCF	PCLATH, 3
$01BA	$0870			MOVF	STACK_0, 0
$01BB	$00D9			MOVWF	FLOC_main+0
$01BC	$0871			MOVF	STACK_0+1, 0
$01BD	$00DA			MOVWF	FLOC_main+1
$01BE	$0872			MOVF	STACK_0+2, 0
$01BF	$00DB			MOVWF	FLOC_main+2
$01C0	$0873			MOVF	STACK_0+3, 0
$01C1	$00DC			MOVWF	FLOC_main+3
$01C2	$0859			MOVF	FLOC_main+0, 0
$01C3	$00CD			MOVWF	_INTEGRAL
$01C4	$085A			MOVF	FLOC_main+1, 0
$01C5	$00CE			MOVWF	_INTEGRAL+1
$01C6	$085B			MOVF	FLOC_main+2, 0
$01C7	$00CF			MOVWF	_INTEGRAL+2
$01C8	$085C			MOVF	FLOC_main+3, 0
$01C9	$00D0			MOVWF	_INTEGRAL+3
;lfr_pid_2.c,161 :: 		DERIVATIVE = (error - perror);
$01CA	$0836			MOVF	_perror, 0
$01CB	$00F4			MOVWF	STACK_4
$01CC	$0837			MOVF	_perror+1, 0
$01CD	$00F5			MOVWF	STACK_4+1
$01CE	$0838			MOVF	_perror+2, 0
$01CF	$00F6			MOVWF	STACK_4+2
$01D0	$0839			MOVF	_perror+3, 0
$01D1	$00F7			MOVWF	STACK_4+3
$01D2	$0831			MOVF	_error, 0
$01D3	$00F0			MOVWF	STACK_0
$01D4	$0832			MOVF	_error+1, 0
$01D5	$00F1			MOVWF	STACK_0+1
$01D6	$0833			MOVF	_error+2, 0
$01D7	$00F2			MOVWF	STACK_0+2
$01D8	$0834			MOVF	_error+3, 0
$01D9	$00F3			MOVWF	STACK_0+3
$01DA	$158A			BSF	PCLATH, 3
$01DB	$2397			CALL	_sub_32x32_fp
$01DC	$118A			BCF	PCLATH, 3
$01DD	$0870			MOVF	STACK_0, 0
$01DE	$00DD			MOVWF	FLOC_main+4
$01DF	$0871			MOVF	STACK_0+1, 0
$01E0	$00DE			MOVWF	FLOC_main+5
$01E1	$0872			MOVF	STACK_0+2, 0
$01E2	$00DF			MOVWF	FLOC_main+6
$01E3	$0873			MOVF	STACK_0+3, 0
$01E4	$00E0			MOVWF	FLOC_main+7
$01E5	$085D			MOVF	FLOC_main+4, 0
$01E6	$00D1			MOVWF	_DERIVATIVE
$01E7	$085E			MOVF	FLOC_main+5, 0
$01E8	$00D2			MOVWF	_DERIVATIVE+1
$01E9	$085F			MOVF	FLOC_main+6, 0
$01EA	$00D3			MOVWF	_DERIVATIVE+2
$01EB	$0860			MOVF	FLOC_main+7, 0
$01EC	$00D4			MOVWF	_DERIVATIVE+3
;lfr_pid_2.c,162 :: 		correction = ( (PROPORTIONAL) + (INTEGRAL) + (DERIVATIVE*kd1));
$01ED	$0861			MOVF	FLOC_main+8, 0
$01EE	$00F0			MOVWF	STACK_0
$01EF	$0862			MOVF	FLOC_main+9, 0
$01F0	$00F1			MOVWF	STACK_0+1
$01F1	$0863			MOVF	FLOC_main+10, 0
$01F2	$00F2			MOVWF	STACK_0+2
$01F3	$0864			MOVF	FLOC_main+11, 0
$01F4	$00F3			MOVWF	STACK_0+3
$01F5	$0859			MOVF	FLOC_main+0, 0
$01F6	$00F4			MOVWF	STACK_4
$01F7	$085A			MOVF	FLOC_main+1, 0
$01F8	$00F5			MOVWF	STACK_4+1
$01F9	$085B			MOVF	FLOC_main+2, 0
$01FA	$00F6			MOVWF	STACK_4+2
$01FB	$085C			MOVF	FLOC_main+3, 0
$01FC	$00F7			MOVWF	STACK_4+3
$01FD	$25F6			CALL	_add_32x32_fp
$01FE	$0870			MOVF	STACK_0, 0
$01FF	$00D9			MOVWF	FLOC_main+0
$0200	$0871			MOVF	STACK_0+1, 0
$0201	$00DA			MOVWF	FLOC_main+1
$0202	$0872			MOVF	STACK_0+2, 0
$0203	$00DB			MOVWF	FLOC_main+2
$0204	$0873			MOVF	STACK_0+3, 0
$0205	$00DC			MOVWF	FLOC_main+3
$0206	$083D			MOVF	_Kd1, 0
$0207	$00F0			MOVWF	STACK_0
$0208	$158A			BSF	PCLATH, 3
$0209	$234D			CALL	_byte2double
$020A	$118A			BCF	PCLATH, 3
$020B	$085D			MOVF	FLOC_main+4, 0
$020C	$00F4			MOVWF	STACK_4
$020D	$085E			MOVF	FLOC_main+5, 0
$020E	$00F5			MOVWF	STACK_4+1
$020F	$085F			MOVF	FLOC_main+6, 0
$0210	$00F6			MOVWF	STACK_4+2
$0211	$0860			MOVF	FLOC_main+7, 0
$0212	$00F7			MOVWF	STACK_4+3
$0213	$158A			BSF	PCLATH, 3
$0214	$2000			CALL	_mul_32x32_fp
$0215	$118A			BCF	PCLATH, 3
$0216	$0859			MOVF	FLOC_main+0, 0
$0217	$00F4			MOVWF	STACK_4
$0218	$085A			MOVF	FLOC_main+1, 0
$0219	$00F5			MOVWF	STACK_4+1
$021A	$085B			MOVF	FLOC_main+2, 0
$021B	$00F6			MOVWF	STACK_4+2
$021C	$085C			MOVF	FLOC_main+3, 0
$021D	$00F7			MOVWF	STACK_4+3
$021E	$25F6			CALL	_add_32x32_fp
$021F	$0870			MOVF	STACK_0, 0
$0220	$00DD			MOVWF	FLOC_main+4
$0221	$0871			MOVF	STACK_0+1, 0
$0222	$00DE			MOVWF	FLOC_main+5
$0223	$0872			MOVF	STACK_0+2, 0
$0224	$00DF			MOVWF	FLOC_main+6
$0225	$0873			MOVF	STACK_0+3, 0
$0226	$00E0			MOVWF	FLOC_main+7
$0227	$085D			MOVF	FLOC_main+4, 0
$0228	$00D5			MOVWF	_correction
$0229	$085E			MOVF	FLOC_main+5, 0
$022A	$00D6			MOVWF	_correction+1
$022B	$085F			MOVF	FLOC_main+6, 0
$022C	$00D7			MOVWF	_correction+2
$022D	$0860			MOVF	FLOC_main+7, 0
$022E	$00D8			MOVWF	_correction+3
;lfr_pid_2.c,163 :: 		rightpulse =  basespeed - correction;
$022F	$083A			MOVF	_basespeed, 0
$0230	$00F0			MOVWF	STACK_0
$0231	$158A			BSF	PCLATH, 3
$0232	$234D			CALL	_byte2double
$0233	$118A			BCF	PCLATH, 3
$0234	$0870			MOVF	STACK_0, 0
$0235	$00D9			MOVWF	FLOC_main+0
$0236	$0871			MOVF	STACK_0+1, 0
$0237	$00DA			MOVWF	FLOC_main+1
$0238	$0872			MOVF	STACK_0+2, 0
$0239	$00DB			MOVWF	FLOC_main+2
$023A	$0873			MOVF	STACK_0+3, 0
$023B	$00DC			MOVWF	FLOC_main+3
$023C	$085D			MOVF	FLOC_main+4, 0
$023D	$00F4			MOVWF	STACK_4
$023E	$085E			MOVF	FLOC_main+5, 0
$023F	$00F5			MOVWF	STACK_4+1
$0240	$085F			MOVF	FLOC_main+6, 0
$0241	$00F6			MOVWF	STACK_4+2
$0242	$0860			MOVF	FLOC_main+7, 0
$0243	$00F7			MOVWF	STACK_4+3
$0244	$0859			MOVF	FLOC_main+0, 0
$0245	$00F0			MOVWF	STACK_0
$0246	$085A			MOVF	FLOC_main+1, 0
$0247	$00F1			MOVWF	STACK_0+1
$0248	$085B			MOVF	FLOC_main+2, 0
$0249	$00F2			MOVWF	STACK_0+2
$024A	$085C			MOVF	FLOC_main+3, 0
$024B	$00F3			MOVWF	STACK_0+3
$024C	$158A			BSF	PCLATH, 3
$024D	$2397			CALL	_sub_32x32_fp
$024E	$118A			BCF	PCLATH, 3
$024F	$0870			MOVF	STACK_0, 0
$0250	$00C1			MOVWF	_rightpulse
$0251	$0871			MOVF	STACK_0+1, 0
$0252	$00C2			MOVWF	_rightpulse+1
$0253	$0872			MOVF	STACK_0+2, 0
$0254	$00C3			MOVWF	_rightpulse+2
$0255	$0873			MOVF	STACK_0+3, 0
$0256	$00C4			MOVWF	_rightpulse+3
;lfr_pid_2.c,164 :: 		leftpulse = basespeed + correction;
$0257	$0859			MOVF	FLOC_main+0, 0
$0258	$00F0			MOVWF	STACK_0
$0259	$085A			MOVF	FLOC_main+1, 0
$025A	$00F1			MOVWF	STACK_0+1
$025B	$085B			MOVF	FLOC_main+2, 0
$025C	$00F2			MOVWF	STACK_0+2
$025D	$085C			MOVF	FLOC_main+3, 0
$025E	$00F3			MOVWF	STACK_0+3
$025F	$085D			MOVF	FLOC_main+4, 0
$0260	$00F4			MOVWF	STACK_4
$0261	$085E			MOVF	FLOC_main+5, 0
$0262	$00F5			MOVWF	STACK_4+1
$0263	$085F			MOVF	FLOC_main+6, 0
$0264	$00F6			MOVWF	STACK_4+2
$0265	$0860			MOVF	FLOC_main+7, 0
$0266	$00F7			MOVWF	STACK_4+3
$0267	$25F6			CALL	_add_32x32_fp
$0268	$0870			MOVF	STACK_0, 0
$0269	$00C5			MOVWF	_leftpulse
$026A	$0871			MOVF	STACK_0+1, 0
$026B	$00C6			MOVWF	_leftpulse+1
$026C	$0872			MOVF	STACK_0+2, 0
$026D	$00C7			MOVWF	_leftpulse+2
$026E	$0873			MOVF	STACK_0+3, 0
$026F	$00C8			MOVWF	_leftpulse+3
;lfr_pid_2.c,165 :: 		motor_RF();
$0270	$158A			BSF	PCLATH, 3
$0271	$23D9			CALL	_motor_RF
$0272	$118A			BCF	PCLATH, 3
;lfr_pid_2.c,166 :: 		motor_LF();
$0273	$158A			BSF	PCLATH, 3
$0274	$23AF			CALL	_motor_LF
$0275	$118A			BCF	PCLATH, 3
;lfr_pid_2.c,167 :: 		}
$0276	$2B98			GOTO	L_main_27
$0277	$	L_main_26:
;lfr_pid_2.c,170 :: 		error = -error;
$0277	$3000			MOVLW	0
$0278	$0631			XORWF	_error, 0
$0279	$00DD			MOVWF	FLOC_main+4
$027A	$3000			MOVLW	0
$027B	$0632			XORWF	_error+1, 0
$027C	$00DE			MOVWF	FLOC_main+5
$027D	$3080			MOVLW	128
$027E	$0633			XORWF	_error+2, 0
$027F	$00DF			MOVWF	FLOC_main+6
$0280	$3000			MOVLW	0
$0281	$0634			XORWF	_error+3, 0
$0282	$00E0			MOVWF	FLOC_main+7
$0283	$085D			MOVF	FLOC_main+4, 0
$0284	$00B1			MOVWF	_error
$0285	$085E			MOVF	FLOC_main+5, 0
$0286	$00B2			MOVWF	_error+1
$0287	$085F			MOVF	FLOC_main+6, 0
$0288	$00B3			MOVWF	_error+2
$0289	$0860			MOVF	FLOC_main+7, 0
$028A	$00B4			MOVWF	_error+3
;lfr_pid_2.c,171 :: 		PROPORTIONAL = error * kp2;
$028B	$083E			MOVF	_Kp2, 0
$028C	$00F0			MOVWF	STACK_0
$028D	$158A			BSF	PCLATH, 3
$028E	$234D			CALL	_byte2double
$028F	$118A			BCF	PCLATH, 3
$0290	$085D			MOVF	FLOC_main+4, 0
$0291	$00F4			MOVWF	STACK_4
$0292	$085E			MOVF	FLOC_main+5, 0
$0293	$00F5			MOVWF	STACK_4+1
$0294	$085F			MOVF	FLOC_main+6, 0
$0295	$00F6			MOVWF	STACK_4+2
$0296	$0860			MOVF	FLOC_main+7, 0
$0297	$00F7			MOVWF	STACK_4+3
$0298	$158A			BSF	PCLATH, 3
$0299	$2000			CALL	_mul_32x32_fp
$029A	$118A			BCF	PCLATH, 3
$029B	$0870			MOVF	STACK_0, 0
$029C	$00E1			MOVWF	FLOC_main+8
$029D	$0871			MOVF	STACK_0+1, 0
$029E	$00E2			MOVWF	FLOC_main+9
$029F	$0872			MOVF	STACK_0+2, 0
$02A0	$00E3			MOVWF	FLOC_main+10
$02A1	$0873			MOVF	STACK_0+3, 0
$02A2	$00E4			MOVWF	FLOC_main+11
$02A3	$0861			MOVF	FLOC_main+8, 0
$02A4	$00C9			MOVWF	_PROPORTIONAL
$02A5	$0862			MOVF	FLOC_main+9, 0
$02A6	$00CA			MOVWF	_PROPORTIONAL+1
$02A7	$0863			MOVF	FLOC_main+10, 0
$02A8	$00CB			MOVWF	_PROPORTIONAL+2
$02A9	$0864			MOVF	FLOC_main+11, 0
$02AA	$00CC			MOVWF	_PROPORTIONAL+3
;lfr_pid_2.c,172 :: 		INTEGRAL += error ;
$02AB	$084D			MOVF	_INTEGRAL, 0
$02AC	$00F0			MOVWF	STACK_0
$02AD	$084E			MOVF	_INTEGRAL+1, 0
$02AE	$00F1			MOVWF	STACK_0+1
$02AF	$084F			MOVF	_INTEGRAL+2, 0
$02B0	$00F2			MOVWF	STACK_0+2
$02B1	$0850			MOVF	_INTEGRAL+3, 0
$02B2	$00F3			MOVWF	STACK_0+3
$02B3	$085D			MOVF	FLOC_main+4, 0
$02B4	$00F4			MOVWF	STACK_4
$02B5	$085E			MOVF	FLOC_main+5, 0
$02B6	$00F5			MOVWF	STACK_4+1
$02B7	$085F			MOVF	FLOC_main+6, 0
$02B8	$00F6			MOVWF	STACK_4+2
$02B9	$0860			MOVF	FLOC_main+7, 0
$02BA	$00F7			MOVWF	STACK_4+3
$02BB	$25F6			CALL	_add_32x32_fp
$02BC	$0870			MOVF	STACK_0, 0
$02BD	$00D9			MOVWF	FLOC_main+0
$02BE	$0871			MOVF	STACK_0+1, 0
$02BF	$00DA			MOVWF	FLOC_main+1
$02C0	$0872			MOVF	STACK_0+2, 0
$02C1	$00DB			MOVWF	FLOC_main+2
$02C2	$0873			MOVF	STACK_0+3, 0
$02C3	$00DC			MOVWF	FLOC_main+3
$02C4	$0859			MOVF	FLOC_main+0, 0
$02C5	$00CD			MOVWF	_INTEGRAL
$02C6	$085A			MOVF	FLOC_main+1, 0
$02C7	$00CE			MOVWF	_INTEGRAL+1
$02C8	$085B			MOVF	FLOC_main+2, 0
$02C9	$00CF			MOVWF	_INTEGRAL+2
$02CA	$085C			MOVF	FLOC_main+3, 0
$02CB	$00D0			MOVWF	_INTEGRAL+3
;lfr_pid_2.c,173 :: 		INTEGRAL *= ki2;
$02CC	$083F			MOVF	_Ki2, 0
$02CD	$00F0			MOVWF	STACK_0
$02CE	$158A			BSF	PCLATH, 3
$02CF	$234D			CALL	_byte2double
$02D0	$118A			BCF	PCLATH, 3
$02D1	$0859			MOVF	FLOC_main+0, 0
$02D2	$00F4			MOVWF	STACK_4
$02D3	$085A			MOVF	FLOC_main+1, 0
$02D4	$00F5			MOVWF	STACK_4+1
$02D5	$085B			MOVF	FLOC_main+2, 0
$02D6	$00F6			MOVWF	STACK_4+2
$02D7	$085C			MOVF	FLOC_main+3, 0
$02D8	$00F7			MOVWF	STACK_4+3
$02D9	$158A			BSF	PCLATH, 3
$02DA	$2000			CALL	_mul_32x32_fp
$02DB	$118A			BCF	PCLATH, 3
$02DC	$0870			MOVF	STACK_0, 0
$02DD	$00D9			MOVWF	FLOC_main+0
$02DE	$0871			MOVF	STACK_0+1, 0
$02DF	$00DA			MOVWF	FLOC_main+1
$02E0	$0872			MOVF	STACK_0+2, 0
$02E1	$00DB			MOVWF	FLOC_main+2
$02E2	$0873			MOVF	STACK_0+3, 0
$02E3	$00DC			MOVWF	FLOC_main+3
$02E4	$0859			MOVF	FLOC_main+0, 0
$02E5	$00CD			MOVWF	_INTEGRAL
$02E6	$085A			MOVF	FLOC_main+1, 0
$02E7	$00CE			MOVWF	_INTEGRAL+1
$02E8	$085B			MOVF	FLOC_main+2, 0
$02E9	$00CF			MOVWF	_INTEGRAL+2
$02EA	$085C			MOVF	FLOC_main+3, 0
$02EB	$00D0			MOVWF	_INTEGRAL+3
;lfr_pid_2.c,174 :: 		DERIVATIVE = (error - perror);
$02EC	$0836			MOVF	_perror, 0
$02ED	$00F4			MOVWF	STACK_4
$02EE	$0837			MOVF	_perror+1, 0
$02EF	$00F5			MOVWF	STACK_4+1
$02F0	$0838			MOVF	_perror+2, 0
$02F1	$00F6			MOVWF	STACK_4+2
$02F2	$0839			MOVF	_perror+3, 0
$02F3	$00F7			MOVWF	STACK_4+3
$02F4	$085D			MOVF	FLOC_main+4, 0
$02F5	$00F0			MOVWF	STACK_0
$02F6	$085E			MOVF	FLOC_main+5, 0
$02F7	$00F1			MOVWF	STACK_0+1
$02F8	$085F			MOVF	FLOC_main+6, 0
$02F9	$00F2			MOVWF	STACK_0+2
$02FA	$0860			MOVF	FLOC_main+7, 0
$02FB	$00F3			MOVWF	STACK_0+3
$02FC	$158A			BSF	PCLATH, 3
$02FD	$2397			CALL	_sub_32x32_fp
$02FE	$118A			BCF	PCLATH, 3
$02FF	$0870			MOVF	STACK_0, 0
$0300	$00DD			MOVWF	FLOC_main+4
$0301	$0871			MOVF	STACK_0+1, 0
$0302	$00DE			MOVWF	FLOC_main+5
$0303	$0872			MOVF	STACK_0+2, 0
$0304	$00DF			MOVWF	FLOC_main+6
$0305	$0873			MOVF	STACK_0+3, 0
$0306	$00E0			MOVWF	FLOC_main+7
$0307	$085D			MOVF	FLOC_main+4, 0
$0308	$00D1			MOVWF	_DERIVATIVE
$0309	$085E			MOVF	FLOC_main+5, 0
$030A	$00D2			MOVWF	_DERIVATIVE+1
$030B	$085F			MOVF	FLOC_main+6, 0
$030C	$00D3			MOVWF	_DERIVATIVE+2
$030D	$0860			MOVF	FLOC_main+7, 0
$030E	$00D4			MOVWF	_DERIVATIVE+3
;lfr_pid_2.c,175 :: 		correction = ( (PROPORTIONAL) + (INTEGRAL) + (DERIVATIVE*kd2));
$030F	$0861			MOVF	FLOC_main+8, 0
$0310	$00F0			MOVWF	STACK_0
$0311	$0862			MOVF	FLOC_main+9, 0
$0312	$00F1			MOVWF	STACK_0+1
$0313	$0863			MOVF	FLOC_main+10, 0
$0314	$00F2			MOVWF	STACK_0+2
$0315	$0864			MOVF	FLOC_main+11, 0
$0316	$00F3			MOVWF	STACK_0+3
$0317	$0859			MOVF	FLOC_main+0, 0
$0318	$00F4			MOVWF	STACK_4
$0319	$085A			MOVF	FLOC_main+1, 0
$031A	$00F5			MOVWF	STACK_4+1
$031B	$085B			MOVF	FLOC_main+2, 0
$031C	$00F6			MOVWF	STACK_4+2
$031D	$085C			MOVF	FLOC_main+3, 0
$031E	$00F7			MOVWF	STACK_4+3
$031F	$25F6			CALL	_add_32x32_fp
$0320	$0870			MOVF	STACK_0, 0
$0321	$00D9			MOVWF	FLOC_main+0
$0322	$0871			MOVF	STACK_0+1, 0
$0323	$00DA			MOVWF	FLOC_main+1
$0324	$0872			MOVF	STACK_0+2, 0
$0325	$00DB			MOVWF	FLOC_main+2
$0326	$0873			MOVF	STACK_0+3, 0
$0327	$00DC			MOVWF	FLOC_main+3
$0328	$0840			MOVF	_Kd2, 0
$0329	$00F0			MOVWF	STACK_0
$032A	$158A			BSF	PCLATH, 3
$032B	$234D			CALL	_byte2double
$032C	$118A			BCF	PCLATH, 3
$032D	$085D			MOVF	FLOC_main+4, 0
$032E	$00F4			MOVWF	STACK_4
$032F	$085E			MOVF	FLOC_main+5, 0
$0330	$00F5			MOVWF	STACK_4+1
$0331	$085F			MOVF	FLOC_main+6, 0
$0332	$00F6			MOVWF	STACK_4+2
$0333	$0860			MOVF	FLOC_main+7, 0
$0334	$00F7			MOVWF	STACK_4+3
$0335	$158A			BSF	PCLATH, 3
$0336	$2000			CALL	_mul_32x32_fp
$0337	$118A			BCF	PCLATH, 3
$0338	$0859			MOVF	FLOC_main+0, 0
$0339	$00F4			MOVWF	STACK_4
$033A	$085A			MOVF	FLOC_main+1, 0
$033B	$00F5			MOVWF	STACK_4+1
$033C	$085B			MOVF	FLOC_main+2, 0
$033D	$00F6			MOVWF	STACK_4+2
$033E	$085C			MOVF	FLOC_main+3, 0
$033F	$00F7			MOVWF	STACK_4+3
$0340	$25F6			CALL	_add_32x32_fp
$0341	$0870			MOVF	STACK_0, 0
$0342	$00DD			MOVWF	FLOC_main+4
$0343	$0871			MOVF	STACK_0+1, 0
$0344	$00DE			MOVWF	FLOC_main+5
$0345	$0872			MOVF	STACK_0+2, 0
$0346	$00DF			MOVWF	FLOC_main+6
$0347	$0873			MOVF	STACK_0+3, 0
$0348	$00E0			MOVWF	FLOC_main+7
$0349	$085D			MOVF	FLOC_main+4, 0
$034A	$00D5			MOVWF	_correction
$034B	$085E			MOVF	FLOC_main+5, 0
$034C	$00D6			MOVWF	_correction+1
$034D	$085F			MOVF	FLOC_main+6, 0
$034E	$00D7			MOVWF	_correction+2
$034F	$0860			MOVF	FLOC_main+7, 0
$0350	$00D8			MOVWF	_correction+3
;lfr_pid_2.c,176 :: 		rightpulse =  basespeed - correction;
$0351	$083A			MOVF	_basespeed, 0
$0352	$00F0			MOVWF	STACK_0
$0353	$158A			BSF	PCLATH, 3
$0354	$234D			CALL	_byte2double
$0355	$118A			BCF	PCLATH, 3
$0356	$0870			MOVF	STACK_0, 0
$0357	$00D9			MOVWF	FLOC_main+0
$0358	$0871			MOVF	STACK_0+1, 0
$0359	$00DA			MOVWF	FLOC_main+1
$035A	$0872			MOVF	STACK_0+2, 0
$035B	$00DB			MOVWF	FLOC_main+2
$035C	$0873			MOVF	STACK_0+3, 0
$035D	$00DC			MOVWF	FLOC_main+3
$035E	$085D			MOVF	FLOC_main+4, 0
$035F	$00F4			MOVWF	STACK_4
$0360	$085E			MOVF	FLOC_main+5, 0
$0361	$00F5			MOVWF	STACK_4+1
$0362	$085F			MOVF	FLOC_main+6, 0
$0363	$00F6			MOVWF	STACK_4+2
$0364	$0860			MOVF	FLOC_main+7, 0
$0365	$00F7			MOVWF	STACK_4+3
$0366	$0859			MOVF	FLOC_main+0, 0
$0367	$00F0			MOVWF	STACK_0
$0368	$085A			MOVF	FLOC_main+1, 0
$0369	$00F1			MOVWF	STACK_0+1
$036A	$085B			MOVF	FLOC_main+2, 0
$036B	$00F2			MOVWF	STACK_0+2
$036C	$085C			MOVF	FLOC_main+3, 0
$036D	$00F3			MOVWF	STACK_0+3
$036E	$158A			BSF	PCLATH, 3
$036F	$2397			CALL	_sub_32x32_fp
$0370	$118A			BCF	PCLATH, 3
$0371	$0870			MOVF	STACK_0, 0
$0372	$00C1			MOVWF	_rightpulse
$0373	$0871			MOVF	STACK_0+1, 0
$0374	$00C2			MOVWF	_rightpulse+1
$0375	$0872			MOVF	STACK_0+2, 0
$0376	$00C3			MOVWF	_rightpulse+2
$0377	$0873			MOVF	STACK_0+3, 0
$0378	$00C4			MOVWF	_rightpulse+3
;lfr_pid_2.c,177 :: 		leftpulse = basespeed + correction;
$0379	$0859			MOVF	FLOC_main+0, 0
$037A	$00F0			MOVWF	STACK_0
$037B	$085A			MOVF	FLOC_main+1, 0
$037C	$00F1			MOVWF	STACK_0+1
$037D	$085B			MOVF	FLOC_main+2, 0
$037E	$00F2			MOVWF	STACK_0+2
$037F	$085C			MOVF	FLOC_main+3, 0
$0380	$00F3			MOVWF	STACK_0+3
$0381	$085D			MOVF	FLOC_main+4, 0
$0382	$00F4			MOVWF	STACK_4
$0383	$085E			MOVF	FLOC_main+5, 0
$0384	$00F5			MOVWF	STACK_4+1
$0385	$085F			MOVF	FLOC_main+6, 0
$0386	$00F6			MOVWF	STACK_4+2
$0387	$0860			MOVF	FLOC_main+7, 0
$0388	$00F7			MOVWF	STACK_4+3
$0389	$25F6			CALL	_add_32x32_fp
$038A	$0870			MOVF	STACK_0, 0
$038B	$00C5			MOVWF	_leftpulse
$038C	$0871			MOVF	STACK_0+1, 0
$038D	$00C6			MOVWF	_leftpulse+1
$038E	$0872			MOVF	STACK_0+2, 0
$038F	$00C7			MOVWF	_leftpulse+2
$0390	$0873			MOVF	STACK_0+3, 0
$0391	$00C8			MOVWF	_leftpulse+3
;lfr_pid_2.c,178 :: 		motor_RF();
$0392	$158A			BSF	PCLATH, 3
$0393	$23D9			CALL	_motor_RF
$0394	$118A			BCF	PCLATH, 3
;lfr_pid_2.c,179 :: 		motor_LF();
$0395	$158A			BSF	PCLATH, 3
$0396	$23AF			CALL	_motor_LF
$0397	$118A			BCF	PCLATH, 3
;lfr_pid_2.c,180 :: 		}
$0398	$	L_main_27:
;lfr_pid_2.c,182 :: 		if(leftpulse > 255)                  //LEFT CORRECTION EXCEED
$0398	$0845			MOVF	_leftpulse, 0
$0399	$00F4			MOVWF	STACK_4
$039A	$0846			MOVF	_leftpulse+1, 0
$039B	$00F5			MOVWF	STACK_4+1
$039C	$0847			MOVF	_leftpulse+2, 0
$039D	$00F6			MOVWF	STACK_4+2
$039E	$0848			MOVF	_leftpulse+3, 0
$039F	$00F7			MOVWF	STACK_4+3
$03A0	$3000			MOVLW	0
$03A1	$00F0			MOVWF	STACK_0
$03A2	$3000			MOVLW	0
$03A3	$00F1			MOVWF	STACK_0+1
$03A4	$307F			MOVLW	127
$03A5	$00F2			MOVWF	STACK_0+2
$03A6	$3086			MOVLW	134
$03A7	$00F3			MOVWF	STACK_0+3
$03A8	$158A			BSF	PCLATH, 3
$03A9	$2163			CALL	_compare_double
$03AA	$118A			BCF	PCLATH, 3
$03AB	$3001			MOVLW	1
$03AC	$1803			BTFSC	STATUS, C
$03AD	$3000			MOVLW	0
$03AE	$00F0			MOVWF	STACK_0
$03AF	$0870			MOVF	STACK_0, 0
$03B0	$1903			BTFSC	STATUS, Z
$03B1	$2BBA			GOTO	L_main_28
;lfr_pid_2.c,183 :: 		leftpulse = 255;
$03B2	$3000			MOVLW	0
$03B3	$00C5			MOVWF	_leftpulse
$03B4	$3000			MOVLW	0
$03B5	$00C6			MOVWF	_leftpulse+1
$03B6	$307F			MOVLW	127
$03B7	$00C7			MOVWF	_leftpulse+2
$03B8	$3086			MOVLW	134
$03B9	$00C8			MOVWF	_leftpulse+3
$03BA	$	L_main_28:
;lfr_pid_2.c,185 :: 		if(rightpulse > 255)                 //RIGHT CORRECTION EXCEED
$03BA	$0841			MOVF	_rightpulse, 0
$03BB	$00F4			MOVWF	STACK_4
$03BC	$0842			MOVF	_rightpulse+1, 0
$03BD	$00F5			MOVWF	STACK_4+1
$03BE	$0843			MOVF	_rightpulse+2, 0
$03BF	$00F6			MOVWF	STACK_4+2
$03C0	$0844			MOVF	_rightpulse+3, 0
$03C1	$00F7			MOVWF	STACK_4+3
$03C2	$3000			MOVLW	0
$03C3	$00F0			MOVWF	STACK_0
$03C4	$3000			MOVLW	0
$03C5	$00F1			MOVWF	STACK_0+1
$03C6	$307F			MOVLW	127
$03C7	$00F2			MOVWF	STACK_0+2
$03C8	$3086			MOVLW	134
$03C9	$00F3			MOVWF	STACK_0+3
$03CA	$158A			BSF	PCLATH, 3
$03CB	$2163			CALL	_compare_double
$03CC	$118A			BCF	PCLATH, 3
$03CD	$3001			MOVLW	1
$03CE	$1803			BTFSC	STATUS, C
$03CF	$3000			MOVLW	0
$03D0	$00F0			MOVWF	STACK_0
$03D1	$0870			MOVF	STACK_0, 0
$03D2	$1903			BTFSC	STATUS, Z
$03D3	$2BDC			GOTO	L_main_29
;lfr_pid_2.c,186 :: 		rightpulse = 255;
$03D4	$3000			MOVLW	0
$03D5	$00C1			MOVWF	_rightpulse
$03D6	$3000			MOVLW	0
$03D7	$00C2			MOVWF	_rightpulse+1
$03D8	$307F			MOVLW	127
$03D9	$00C3			MOVWF	_rightpulse+2
$03DA	$3086			MOVLW	134
$03DB	$00C4			MOVWF	_rightpulse+3
$03DC	$	L_main_29:
;lfr_pid_2.c,188 :: 		if(leftpulse < 0)                    //LEFT CORRECTION EXCEED
$03DC	$01F4			CLRF	STACK_4
$03DD	$01F5			CLRF	STACK_4+1
$03DE	$01F6			CLRF	STACK_4+2
$03DF	$01F7			CLRF	STACK_4+3
$03E0	$0845			MOVF	_leftpulse, 0
$03E1	$00F0			MOVWF	STACK_0
$03E2	$0846			MOVF	_leftpulse+1, 0
$03E3	$00F1			MOVWF	STACK_0+1
$03E4	$0847			MOVF	_leftpulse+2, 0
$03E5	$00F2			MOVWF	STACK_0+2
$03E6	$0848			MOVF	_leftpulse+3, 0
$03E7	$00F3			MOVWF	STACK_0+3
$03E8	$158A			BSF	PCLATH, 3
$03E9	$2163			CALL	_compare_double
$03EA	$118A			BCF	PCLATH, 3
$03EB	$3001			MOVLW	1
$03EC	$1803			BTFSC	STATUS, C
$03ED	$3000			MOVLW	0
$03EE	$00F0			MOVWF	STACK_0
$03EF	$0870			MOVF	STACK_0, 0
$03F0	$1903			BTFSC	STATUS, Z
$03F1	$2BF6			GOTO	L_main_30
;lfr_pid_2.c,189 :: 		leftpulse = 0;
$03F2	$01C5			CLRF	_leftpulse
$03F3	$01C6			CLRF	_leftpulse+1
$03F4	$01C7			CLRF	_leftpulse+2
$03F5	$01C8			CLRF	_leftpulse+3
$03F6	$	L_main_30:
;lfr_pid_2.c,191 :: 		if(rightpulse < 0)                   //RIGHT CORRECTION EXCEED
$03F6	$01F4			CLRF	STACK_4
$03F7	$01F5			CLRF	STACK_4+1
$03F8	$01F6			CLRF	STACK_4+2
$03F9	$01F7			CLRF	STACK_4+3
$03FA	$0841			MOVF	_rightpulse, 0
$03FB	$00F0			MOVWF	STACK_0
$03FC	$0842			MOVF	_rightpulse+1, 0
$03FD	$00F1			MOVWF	STACK_0+1
$03FE	$0843			MOVF	_rightpulse+2, 0
$03FF	$00F2			MOVWF	STACK_0+2
$0400	$0844			MOVF	_rightpulse+3, 0
$0401	$00F3			MOVWF	STACK_0+3
$0402	$158A			BSF	PCLATH, 3
$0403	$2163			CALL	_compare_double
$0404	$118A			BCF	PCLATH, 3
$0405	$3001			MOVLW	1
$0406	$1803			BTFSC	STATUS, C
$0407	$3000			MOVLW	0
$0408	$00F0			MOVWF	STACK_0
$0409	$0870			MOVF	STACK_0, 0
$040A	$1903			BTFSC	STATUS, Z
$040B	$2C10			GOTO	L_main_31
;lfr_pid_2.c,192 :: 		rightpulse = 0;
$040C	$01C1			CLRF	_rightpulse
$040D	$01C2			CLRF	_rightpulse+1
$040E	$01C3			CLRF	_rightpulse+2
$040F	$01C4			CLRF	_rightpulse+3
$0410	$	L_main_31:
;lfr_pid_2.c,194 :: 		PWM1_CHANGE_DUTY(rightpulse);
$0410	$0841			MOVF	_rightpulse, 0
$0411	$00F0			MOVWF	STACK_0
$0412	$0842			MOVF	_rightpulse+1, 0
$0413	$00F1			MOVWF	STACK_0+1
$0414	$0843			MOVF	_rightpulse+2, 0
$0415	$00F2			MOVWF	STACK_0+2
$0416	$0844			MOVF	_rightpulse+3, 0
$0417	$00F3			MOVWF	STACK_0+3
$0418	$158A			BSF	PCLATH, 3
$0419	$21FD			CALL	_double2byte
$041A	$118A			BCF	PCLATH, 3
$041B	$0870			MOVF	STACK_0, 0
$041C	$00E5			MOVWF	FARG_PWM1_Change_Duty+0
$041D	$158A			BSF	PCLATH, 3
$041E	$2279			CALL	_PWM1_Change_Duty
$041F	$118A			BCF	PCLATH, 3
;lfr_pid_2.c,195 :: 		PWM2_CHANGE_DUTY(leftpulse);
$0420	$0845			MOVF	_leftpulse, 0
$0421	$00F0			MOVWF	STACK_0
$0422	$0846			MOVF	_leftpulse+1, 0
$0423	$00F1			MOVWF	STACK_0+1
$0424	$0847			MOVF	_leftpulse+2, 0
$0425	$00F2			MOVWF	STACK_0+2
$0426	$0848			MOVF	_leftpulse+3, 0
$0427	$00F3			MOVWF	STACK_0+3
$0428	$158A			BSF	PCLATH, 3
$0429	$21FD			CALL	_double2byte
$042A	$118A			BCF	PCLATH, 3
$042B	$0870			MOVF	STACK_0, 0
$042C	$00E5			MOVWF	FARG_PWM2_Change_Duty+0
$042D	$158A			BSF	PCLATH, 3
$042E	$2240			CALL	_PWM2_Change_Duty
$042F	$118A			BCF	PCLATH, 3
;lfr_pid_2.c,196 :: 		}
$0430	$	L_main_23:
;lfr_pid_2.c,197 :: 		delay_ms(5);
$0430	$3007			MOVLW	7
$0431	$00FB			MOVWF	STACK_11
$0432	$30FF			MOVLW	255
$0433	$00FA			MOVWF	STACK_10
$0434	$0BFB			DECFSZ	STACK_11, F
$0435	$2C37			GOTO	$+2
$0436	$2C3A			GOTO	$+4
$0437	$0BFA			DECFSZ	STACK_10, F
$0438	$2C37			GOTO	$-1
$0439	$2C34			GOTO	$-5
$043A	$3078			MOVLW	120
$043B	$00FA			MOVWF	STACK_10
$043C	$0BFA			DECFSZ	STACK_10, F
$043D	$2C3C			GOTO	$-1
$043E	$0000			NOP
$043F	$0000			NOP
;lfr_pid_2.c,198 :: 		}
$0440	$280D			GOTO	L_main_14
;lfr_pid_2.c,199 :: 		}
$0441	$2C41			GOTO	$


//** Procedures locations **
//ADDRESS		PROCEDURE
//----------------------------------------------
$0004		main
$0442		CalcError
$05F6		Add_32x32_FP
$069E		Div_32x32_FP
$0740		RES032
$0800		Mul_32x32_FP
$0863		NRM4032
$08C1		indicator
$0912		GlobalInilfr_pid_2
$0963		Compare_Double
$09B3		Mul_16x16_S
$09FD		Double2Byte
$0A40		PWM2_Change_Duty
$0A79		PWM1_Change_Duty
$0AB2		NRM3232
$0AE5		Mul_16x16_U
$0B10		initpwm
$0B21		Word2Double
$0B37		Equals_Double
$0B4D		Byte2Double
$0B5D		SETIOV3224
$0B6C		initport
$0B7B		SETFOV32
$0B89		SETFUN32
$0B97		Sub_32x32_FP
$0B9F		PWM1_Start
$0BA7		PWM2_Start
$0BAF		motor_LF
$0BB6		motor_RB
$0BBD		PWM2_Init
$0BC3		FIXSIGN32
$0BC9		PWM1_Init
$0BCF		motor_LB
$0BD4		SETFDZ32
$0BD9		motor_RF


//** Labels locations **
//ADDRESS		LABEL
//----------------------------------------------
$0004		_main:
$000D		L_main_14:
$0035		L_main_38:
$005F		L_main_39:
$0061		L181_ex_L_main_18:
$0081		L_main_18:
$00B5		L_main_40:
$00DC		L_main_20:
$0100		L_main_21:
$0100		L_main_22:
$0101		L_main_19:
$0169		L282_ex_L_main_26:
$0277		L_main_26:
$0398		L_main_27:
$03BA		L_main_28:
$03DC		L_main_29:
$03F6		L_main_30:
$0410		L_main_31:
$0430		L_main_23:
$0442		_CalcError:
$04BC		L93_ex_L_CalcError_2:
$04C4		L_CalcError_3:
$04CA		L_CalcError_4:
$04D0		L_CalcError_5:
$04D6		L_CalcError_6:
$04DC		L_CalcError_7:
$04E2		L_CalcError_8:
$04E8		L_CalcError_9:
$04F0		L_CalcError_10:
$04F1		L_CalcError_2:
$04F7		L_CalcError_12:
$04FD		L_CalcError_11:
$04FD		L_CalcError_13:
$050C		L_CalcError_32:
$0513		L_CalcError_33:
$0533		L_CalcError_34:
$053A		L_CalcError_35:
$057A		L_CalcError_36:
$0581		L_CalcError_37:
$05F6		_Add_32x32_FP:
$0619		USEA32:
$0642		ALIGNB32:
$0645		ALOOPB32:
$064C		ALIGNED32:
$0659		AOK32:
$0672		ACOMP32:
$0682		JMPNRMRND4032:
$0688		JMPNRM4032:
$068E		JMPNRM32:
$0694		ADD_JMPSETFOV32:
$069A		JMPEEE:
$069C		ADD32EEE:
$069E		_Div_32x32_FP:
$06A0		FPD32:
$06A6		D32BNE0:
$06AC		TALIGN32:
$06B8		TS1ALIGN32:
$06BC		TS2ALIGN32:
$06C9		DALIGN32OK:
$06CD		AGEB32:
$06D3		ALTB32:
$06D8		DARGOK32:
$06DA		DLOOP32:
$06E6		DS132:
$06EA		DS232:
$06F1		DREST32:
$06F6		DAREST32:
$06FC		DOK32:
$0701		DROUND32:
$0723		DIV32OK:
$072D		JPDSETFDZ32:
$0732		JPDRES032:
$0735		JPDSETFOV32:
$073A		JPDSETFUN32:
$073E		DIV32EEE:
$0740		_RES032:
$0800		_Mul_32x32_FP:
$0802		FPM32:
$0808		M32BNE0:
$0814		MTUN32:
$0817		MOK32:
$0825		MLOOP32:
$0827		MADD32:
$0831		MNOADD32:
$0841		MROUND32:
$0853		MUL32OK:
$0857		JPMRES032:
$085C		JPMSETFOV32:
$085F		JPMSETFUN32:
$0861		MUL32EEE:
$0863		_NRM4032:
$086C		NRM4032:
$088C		NORM4032:
$0892		NORM4032A:
$089B		NRMRND4032:
$08AE		JMPRES032:
$08B4		JMPSETFUN32:
$08B8		JMPFIXSIGN32:
$08BC		JMPSETFOV32:
$08BF		NRM4032EEE:
$08C1		_indicator:
$0912		GlobalInilfr_pid_2:
$0963		_Compare_Double:
$0974		COMPARE_YNOTZERO:
$0977		COMPARE_XNOTZERO:
$097A		COMPARE_NOTZERO:
$0988		COMPARE_TESTALL:
$098F		COMPARE_C1:
$0996		COMPARE_C2:
$099D		COMPARE_C3:
$09A3		GT_FALSE:
$09A7		GT_TRUE:
$09AB		COMPARE_GT:
$09AD		COMPARE_LT:
$09AF		COMPARE_EQU:
$09B3		_Mul_16x16_S:
$09FD		_Double2Byte:
$09FF		INT32U08:
$0A0E		SETEXP08:
$0A1B		TSHIFT3208:
$0A1E		SHIFT3208:
$0A22		SHIFT3208OK:
$0A2A		INT3208OK:
$0A2A		IRES008:
$0A2C		SETIOV08:
$0A31		D2B_JPKSETIOV3224:
$0A34		INT3208EOK:
$0A37		INT3208EER:
$0A39		INT3208EEE:
$0A3D		L_Double2Byte_0:
$0A40		_PWM2_Change_Duty:
$0A54		L_PWM2_Change_Duty_0:
$0A5B		L_PWM2_Change_Duty_1:
$0A79		_PWM1_Change_Duty:
$0A8D		L_PWM1_Change_Duty_2:
$0A94		L_PWM1_Change_Duty_3:
$0AB2		_NRM3232:
$0AC9		NORM3232:
$0ACF		NORM3232A:
$0AD7		JPNRES032:
$0ADD		JPNSETFUN32:
$0AE1		JMPNFIXSIGN32:
$0AE4		NORM32EEE:
$0AE5		_Mul_16x16_U:
$0B10		_initpwm:
$0B21		_Word2Double:
$0B2A		FLO16U32:
$0B37		_Equals_Double:
$0B4A		EQU_FALSE:
$0B4D		_Byte2Double:
$0B4F		FLO08U32:
$0B5D		_SETIOV3224:
$0B6A		SETIOV3224EEE:
$0B6C		_initport:
$0B7B		_SETFOV32:
$0B87		SETFOV32EEE:
$0B89		_SETFUN32:
$0B95		SETFUN32EEE:
$0B97		_Sub_32x32_FP:
$0B9F		_PWM1_Start:
$0BA7		_PWM2_Start:
$0BAF		_motor_LF:
$0BB6		_motor_RB:
$0BBD		_PWM2_Init:
$0BC3		_FIXSIGN32:
$0BC9		_PWM1_Init:
$0BCF		_motor_LB:
$0BD4		_SETFDZ32:
$0BD9		_motor_RF:


//** Variables locations **
//ADDRESS		VARIABLE
//----------------------------------------------
$0000		INDF
$0002		PCL
$0003		STATUS
$0004		FSR
$0005		PORTA
$0007		PORTC
$0008		PORTD
$0009		PORTE
$000A		PCLATH
$0012		T2CON
$0015		CCPR1L
$0017		CCP1CON
$001B		CCPR2L
$001D		CCP2CON
$0020		___math_tempbD
$0021		_s1
$0023		_s2
$0025		_s3
$0027		_s4
$0029		_s5
$002B		_s6
$002D		_s7
$002F		_s8
$0031		_error
$0035		_lastreading
$0036		_perror
$003A		_basespeed
$003B		_Kp1
$003C		_Ki1
$003D		_Kd1
$003E		_Kp2
$003F		_Ki2
$0040		_Kd2
$0041		_rightpulse
$0045		_leftpulse
$0049		_PROPORTIONAL
$004D		_INTEGRAL
$0051		_DERIVATIVE
$0055		_correction
$0059		
$0065		
$0065		FARG_PWM1_Change_Duty+0
$0065		FARG_PWM2_Change_Duty+0
$0069		FARG_PWM1_Init+0
$0069		FARG_PWM2_Init+0
$0070		STACK_0
$0071		STACK_1
$0072		STACK_2
$0073		STACK_3
$0074		STACK_4
$0075		STACK_5
$0076		STACK_6
$0077		STACK_7
$0078		STACK_8
$0079		STACK_9
$007A		STACK_10
$007B		STACK_11
$007C		STACK_12
$007D		STACK_13
$007E		STACK_14
$007F		STACK_15
$0085		TRISA
$0087		TRISC
$0088		TRISD
$0089		TRISE
$0092		PR2
$009F		ADCON1


