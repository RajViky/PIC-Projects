;  ASM code generated by mikroVirtualMachine for PIC - V. 8.2.0.0
;  Date/Time: 3/21/2011 10:39:31 AM
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$2804			GOTO	_main
$0B44	$	_RES032:
$0B44	$1303			BCF	STATUS, RP1
$0B45	$1283			BCF	STATUS, RP0
$0B46	$01F2			CLRF	STACK_2
$0B47	$01F1			CLRF	STACK_1
$0B48	$01F0			CLRF	STACK_0
$0B49	$01F8			CLRF	STACK_8
$0B4A	$01F3			CLRF	STACK_3
$0B4B	$3000			MOVLW	0
$0B4C	$0008			RETURN
$0B2E	$	_SETFUN32:
$0B2E	$1303			BCF	STATUS, RP1
$0B2F	$1283			BCF	STATUS, RP0
$0B30	$157B			BSF	STACK_11, 2
$0B31	$1FFB			BTFSS	STACK_11, 7
$0B32	$2B3A			GOTO	SETFUN32EEE
$0B33	$3001			MOVLW	0x01
$0B34	$00F3			MOVWF	STACK_3
$0B35	$01F2			CLRF	STACK_2
$0B36	$01F1			CLRF	STACK_1
$0B37	$01F0			CLRF	STACK_0
$0B38	$0DFA			RLF	STACK_10, F
$0B39	$0CF2			RRF	STACK_2, F
$0B3A	$	SETFUN32EEE:
$0B3A	$30FF			MOVLW	0xFF
$0B3B	$0008			RETURN
$0B63	$	_FIXSIGN32:
$0B63	$1303			BCF	STATUS, RP1
$0B64	$1283			BCF	STATUS, RP0
$0B65	$1FFA			BTFSS	STACK_10, 7
$0B66	$13F2			BCF	STACK_2, 7
$0B67	$3000			MOVLW	0
$0B68	$0008			RETURN
$0B20	$	_SETFOV32:
$0B20	$1303			BCF	STATUS, RP1
$0B21	$1283			BCF	STATUS, RP0
$0B22	$14FB			BSF	STACK_11, 1
$0B23	$1FFB			BTFSS	STACK_11, 7
$0B24	$2B2C			GOTO	SETFOV32EEE
$0B25	$30FF			MOVLW	0xFF
$0B26	$00F3			MOVWF	STACK_3
$0B27	$00F2			MOVWF	STACK_2
$0B28	$00F1			MOVWF	STACK_1
$0B29	$00F0			MOVWF	STACK_0
$0B2A	$0DFA			RLF	STACK_10, F
$0B2B	$0CF2			RRF	STACK_2, F
$0B2C	$	SETFOV32EEE:
$0B2C	$30FF			MOVLW	0xFF
$0B2D	$0008			RETURN
$0861	$	_NRM4032:
$0861	$1303			BCF	STATUS, RP1
$0862	$1283			BCF	STATUS, RP0
$0863	$187C			BTFSC	STACK_12, 0
$0864	$2899			GOTO	NRMRND4032
$0865	$18FC			BTFSC	STACK_12, 1
$0866	$286A			GOTO	NRM4032
$0867	$197C			BTFSC	STACK_12, 2
$0868	$28B8			GOTO	JMPSETFOV32
$0869	$2863			GOTO	$-6
$086A	$	NRM4032:
$086A	$01A0			CLRF	__math_tempbD
$086B	$0872			MOVF	STACK_2, W
$086C	$1D03			BTFSS	STATUS, Z
$086D	$288A			GOTO	NORM4032
$086E	$0871			MOVF	STACK_1, W
$086F	$00F2			MOVWF	STACK_2
$0870	$0870			MOVF	STACK_0, W
$0871	$00F1			MOVWF	STACK_1
$0872	$0878			MOVF	STACK_8, W
$0873	$00F0			MOVWF	STACK_0
$0874	$01F8			CLRF	STACK_8
$0875	$15A0			BSF	__math_tempbD, 3
$0876	$0872			MOVF	STACK_2, W
$0877	$1D03			BTFSS	STATUS, Z
$0878	$288A			GOTO	NORM4032
$0879	$0871			MOVF	STACK_1, W
$087A	$00F2			MOVWF	STACK_2
$087B	$0870			MOVF	STACK_0, W
$087C	$00F1			MOVWF	STACK_1
$087D	$01F0			CLRF	STACK_0
$087E	$11A0			BCF	__math_tempbD, 3
$087F	$1620			BSF	__math_tempbD, 4
$0880	$0872			MOVF	STACK_2, W
$0881	$1D03			BTFSS	STATUS, Z
$0882	$288A			GOTO	NORM4032
$0883	$0871			MOVF	STACK_1, W
$0884	$00F2			MOVWF	STACK_2
$0885	$01F1			CLRF	STACK_1
$0886	$15A0			BSF	__math_tempbD, 3
$0887	$0872			MOVF	STACK_2, W
$0888	$1903			BTFSC	STATUS, Z
$0889	$28AC			GOTO	JMPRES032
$088A	$	NORM4032:
$088A	$0820			MOVF	__math_tempbD, W
$088B	$02F3			SUBWF	STACK_3, F
$088C	$1D03			BTFSS	STATUS, Z
$088D	$1C03			BTFSS	STATUS, C
$088E	$28B0			GOTO	JMPSETFUN32
$088F	$1003			BCF	STATUS, C
$0890	$	NORM4032A:
$0890	$1BF2			BTFSC	STACK_2, 7
$0891	$2899			GOTO	NRMRND4032
$0892	$0DF8			RLF	STACK_8, F
$0893	$0DF0			RLF	STACK_0, F
$0894	$0DF1			RLF	STACK_1, F
$0895	$0DF2			RLF	STACK_2, F
$0896	$0BF3			DECFSZ	STACK_3, F
$0897	$2890			GOTO	NORM4032A
$0898	$28B0			GOTO	JMPSETFUN32
$0899	$	NRMRND4032:
$0899	$1B7B			BTFSC	STACK_11, 6
$089A	$1C70			BTFSS	STACK_0, 0
$089B	$28B4			GOTO	JMPFIXSIGN32
$089C	$1FF8			BTFSS	STACK_8, 7
$089D	$28B4			GOTO	JMPFIXSIGN32
$089E	$0AF0			INCF	STACK_0, F
$089F	$1903			BTFSC	STATUS, Z
$08A0	$0AF1			INCF	STACK_1, F
$08A1	$1903			BTFSC	STATUS, Z
$08A2	$0AF2			INCF	STACK_2, F
$08A3	$1D03			BTFSS	STATUS, Z
$08A4	$28B4			GOTO	JMPFIXSIGN32
$08A5	$0CF2			RRF	STACK_2, F
$08A6	$0CF1			RRF	STACK_1, F
$08A7	$0CF0			RRF	STACK_0, F
$08A8	$0AF3			INCF	STACK_3, F
$08A9	$1903			BTFSC	STATUS, Z
$08AA	$28B8			GOTO	JMPSETFOV32
$08AB	$28B4			GOTO	JMPFIXSIGN32
$08AC	$	JMPRES032:
$08AC	$3001			MOVLW	0x01
$08AD	$00FC			MOVWF	STACK_12
$08AE	$2344			CALL	_RES032
$08AF	$28BB			GOTO	NRM4032EEE
$08B0	$	JMPSETFUN32:
$08B0	$3002			MOVLW	0x02
$08B1	$00FC			MOVWF	STACK_12
$08B2	$232E			CALL	_SETFUN32
$08B3	$28BB			GOTO	NRM4032EEE
$08B4	$	JMPFIXSIGN32:
$08B4	$3004			MOVLW	0x04
$08B5	$00FC			MOVWF	STACK_12
$08B6	$2363			CALL	_FIXSIGN32
$08B7	$28BB			GOTO	NRM4032EEE
$08B8	$	JMPSETFOV32:
$08B8	$3008			MOVLW	0x08
$08B9	$00FC			MOVWF	STACK_12
$08BA	$2320			CALL	_SETFOV32
$08BB	$	NRM4032EEE:
$08BB	$0000			NOP
$08BC	$0008			RETURN
$0A1E	$	_NRM3232:
$0A1E	$1303			BCF	STATUS, RP1
$0A1F	$1283			BCF	STATUS, RP0
$0A20	$01A0			CLRF	__math_tempbD
$0A21	$0872			MOVF	STACK_2, W
$0A22	$1D03			BTFSS	STATUS, Z
$0A23	$2A35			GOTO	NORM3232
$0A24	$0871			MOVF	STACK_1, W
$0A25	$00F2			MOVWF	STACK_2
$0A26	$0870			MOVF	STACK_0, W
$0A27	$00F1			MOVWF	STACK_1
$0A28	$01F0			CLRF	STACK_0
$0A29	$15A0			BSF	__math_tempbD, 3
$0A2A	$0872			MOVF	STACK_2, W
$0A2B	$1D03			BTFSS	STATUS, Z
$0A2C	$2A35			GOTO	NORM3232
$0A2D	$0871			MOVF	STACK_1, W
$0A2E	$00F2			MOVWF	STACK_2
$0A2F	$01F1			CLRF	STACK_1
$0A30	$11A0			BCF	__math_tempbD, 3
$0A31	$1620			BSF	__math_tempbD, 4
$0A32	$0872			MOVF	STACK_2, W
$0A33	$1903			BTFSC	STATUS, Z
$0A34	$2A43			GOTO	JPNRES032
$0A35	$	NORM3232:
$0A35	$0820			MOVF	__math_tempbD, W
$0A36	$02F3			SUBWF	STACK_3, F
$0A37	$1D03			BTFSS	STATUS, Z
$0A38	$1C03			BTFSS	STATUS, C
$0A39	$2A47			GOTO	JPNSETFUN32
$0A3A	$1003			BCF	STATUS, C
$0A3B	$	NORM3232A:
$0A3B	$1BF2			BTFSC	STACK_2, 7
$0A3C	$2A4B			GOTO	JMPNFIXSIGN32
$0A3D	$0DF0			RLF	STACK_0, F
$0A3E	$0DF1			RLF	STACK_1, F
$0A3F	$0DF2			RLF	STACK_2, F
$0A40	$0BF3			DECFSZ	STACK_3, F
$0A41	$2A3B			GOTO	NORM3232A
$0A42	$2A47			GOTO	JPNSETFUN32
$0A43	$	JPNRES032:
$0A43	$3001			MOVLW	0x01
$0A44	$00FC			MOVWF	STACK_12
$0A45	$2344			CALL	_RES032
$0A46	$2A4E			GOTO	NORM32EEE
$0A47	$	JPNSETFUN32:
$0A47	$3002			MOVLW	0x02
$0A48	$00FC			MOVWF	STACK_12
$0A49	$232E			CALL	_SETFUN32
$0A4A	$2A4E			GOTO	NORM32EEE
$0A4B	$	JMPNFIXSIGN32:
$0A4B	$3004			MOVLW	0x04
$0A4C	$00FC			MOVWF	STACK_12
$0A4D	$2363			CALL	_FIXSIGN32
$0A4E	$	NORM32EEE:
$0A4E	$0008			RETURN
$0B83	$	_SETFDZ32:
$0B83	$1303			BCF	STATUS, RP1
$0B84	$1283			BCF	STATUS, RP0
$0B85	$15FB			BSF	STACK_11, 3
$0B86	$30FF			MOVLW	0xFF
$0B87	$0008			RETURN
$05AB	$	_Add_32x32_FP:
$05AB	$1303			BCF	STATUS, RP1
$05AC	$1283			BCF	STATUS, RP0
$05AD	$0872			MOVF	STACK_2, W
$05AE	$0676			XORWF	STACK_6, W
$05AF	$00A0			MOVWF	__math_tempbD
$05B0	$01F8			CLRF	STACK_8
$05B1	$01F9			CLRF	STACK_9
$05B2	$0873			MOVF	STACK_3, W
$05B3	$0277			SUBWF	STACK_7, W
$05B4	$1C03			BTFSS	STATUS, C
$05B5	$2DCE			GOTO	USEA32
$05B6	$0877			MOVF	STACK_7, W
$05B7	$00FD			MOVWF	STACK_13
$05B8	$0873			MOVF	STACK_3, W
$05B9	$00F7			MOVWF	STACK_7
$05BA	$087D			MOVF	STACK_13, W
$05BB	$00F3			MOVWF	STACK_3
$05BC	$0876			MOVF	STACK_6, W
$05BD	$00FD			MOVWF	STACK_13
$05BE	$0872			MOVF	STACK_2, W
$05BF	$00F6			MOVWF	STACK_6
$05C0	$087D			MOVF	STACK_13, W
$05C1	$00F2			MOVWF	STACK_2
$05C2	$0875			MOVF	STACK_5, W
$05C3	$00FD			MOVWF	STACK_13
$05C4	$0871			MOVF	STACK_1, W
$05C5	$00F5			MOVWF	STACK_5
$05C6	$087D			MOVF	STACK_13, W
$05C7	$00F1			MOVWF	STACK_1
$05C8	$0874			MOVF	STACK_4, W
$05C9	$00FD			MOVWF	STACK_13
$05CA	$0870			MOVF	STACK_0, W
$05CB	$00F4			MOVWF	STACK_4
$05CC	$087D			MOVF	STACK_13, W
$05CD	$00F0			MOVWF	STACK_0
$05CE	$	USEA32:
$05CE	$0877			MOVF	STACK_7, W
$05CF	$1903			BTFSC	STATUS, Z
$05D0	$2E4F			GOTO	JMPEEE
$05D1	$0872			MOVF	STACK_2, W
$05D2	$00FA			MOVWF	STACK_10
$05D3	$17F2			BSF	STACK_2, 7
$05D4	$17F6			BSF	STACK_6, 7
$05D5	$0877			MOVF	STACK_7, W
$05D6	$0273			SUBWF	STACK_3, W
$05D7	$00F7			MOVWF	STACK_7
$05D8	$1903			BTFSC	STATUS, Z
$05D9	$2E01			GOTO	ALIGNED32
$05DA	$3008			MOVLW	8
$05DB	$0277			SUBWF	STACK_7, W
$05DC	$1C03			BTFSS	STATUS, C
$05DD	$2DF7			GOTO	ALIGNB32
$05DE	$00F7			MOVWF	STACK_7
$05DF	$0874			MOVF	STACK_4, W
$05E0	$00F9			MOVWF	STACK_9
$05E1	$0875			MOVF	STACK_5, W
$05E2	$00F4			MOVWF	STACK_4
$05E3	$0876			MOVF	STACK_6, W
$05E4	$00F5			MOVWF	STACK_5
$05E5	$01F6			CLRF	STACK_6
$05E6	$3008			MOVLW	8
$05E7	$0277			SUBWF	STACK_7, W
$05E8	$1C03			BTFSS	STATUS, C
$05E9	$2DF7			GOTO	ALIGNB32
$05EA	$00F7			MOVWF	STACK_7
$05EB	$0874			MOVF	STACK_4, W
$05EC	$00F9			MOVWF	STACK_9
$05ED	$0875			MOVF	STACK_5, W
$05EE	$00F4			MOVWF	STACK_4
$05EF	$01F5			CLRF	STACK_5
$05F0	$3008			MOVLW	8
$05F1	$0277			SUBWF	STACK_7, W
$05F2	$1C03			BTFSS	STATUS, C
$05F3	$2DF7			GOTO	ALIGNB32
$05F4	$087A			MOVF	STACK_10, W
$05F5	$00F2			MOVWF	STACK_2
$05F6	$2E4F			GOTO	JMPEEE
$05F7	$	ALIGNB32:
$05F7	$0877			MOVF	STACK_7, W
$05F8	$1903			BTFSC	STATUS, Z
$05F9	$2E01			GOTO	ALIGNED32
$05FA	$	ALOOPB32:
$05FA	$1003			BCF	STATUS, C
$05FB	$0CF6			RRF	STACK_6, F
$05FC	$0CF5			RRF	STACK_5, F
$05FD	$0CF4			RRF	STACK_4, F
$05FE	$0CF9			RRF	STACK_9, F
$05FF	$0BF7			DECFSZ	STACK_7, F
$0600	$2DFA			GOTO	ALOOPB32
$0601	$	ALIGNED32:
$0601	$1FA0			BTFSS	__math_tempbD, 7
$0602	$2E0E			GOTO	AOK32
$0603	$09F9			COMF	STACK_9, F
$0604	$09F4			COMF	STACK_4, F
$0605	$09F5			COMF	STACK_5, F
$0606	$09F6			COMF	STACK_6, F
$0607	$0AF9			INCF	STACK_9, F
$0608	$1903			BTFSC	STATUS, Z
$0609	$0AF4			INCF	STACK_4, F
$060A	$1903			BTFSC	STATUS, Z
$060B	$0AF5			INCF	STACK_5, F
$060C	$1903			BTFSC	STATUS, Z
$060D	$0AF6			INCF	STACK_6, F
$060E	$	AOK32:
$060E	$0879			MOVF	STACK_9, W
$060F	$07F8			ADDWF	STACK_8, F
$0610	$0874			MOVF	STACK_4, W
$0611	$1803			BTFSC	STATUS, C
$0612	$0F74			INCFSZ	STACK_4, W
$0613	$07F0			ADDWF	STACK_0, F
$0614	$0875			MOVF	STACK_5, W
$0615	$1803			BTFSC	STATUS, C
$0616	$0F75			INCFSZ	STACK_5, W
$0617	$07F1			ADDWF	STACK_1, F
$0618	$0876			MOVF	STACK_6, W
$0619	$1803			BTFSC	STATUS, C
$061A	$0F76			INCFSZ	STACK_6, W
$061B	$07F2			ADDWF	STACK_2, F
$061C	$1BA0			BTFSC	__math_tempbD, 7
$061D	$2E27			GOTO	ACOMP32
$061E	$1C03			BTFSS	STATUS, C
$061F	$2E37			GOTO	JMPNRMRND4032
$0620	$0CF2			RRF	STACK_2, F
$0621	$0CF1			RRF	STACK_1, F
$0622	$0CF0			RRF	STACK_0, F
$0623	$0CF8			RRF	STACK_8, F
$0624	$0FF3			INCFSZ	STACK_3, F
$0625	$2E37			GOTO	JMPNRMRND4032
$0626	$2E49			GOTO	ADD_JMPSETFOV32
$0627	$	ACOMP32:
$0627	$1803			BTFSC	STATUS, C
$0628	$2E3D			GOTO	JMPNRM4032
$0629	$09F8			COMF	STACK_8, F
$062A	$09F0			COMF	STACK_0, F
$062B	$09F1			COMF	STACK_1, F
$062C	$09F2			COMF	STACK_2, F
$062D	$0AF8			INCF	STACK_8, F
$062E	$1903			BTFSC	STATUS, Z
$062F	$0AF0			INCF	STACK_0, F
$0630	$1903			BTFSC	STATUS, Z
$0631	$0AF1			INCF	STACK_1, F
$0632	$1903			BTFSC	STATUS, Z
$0633	$0AF2			INCF	STACK_2, F
$0634	$3080			MOVLW	0x80
$0635	$06FA			XORWF	STACK_10, F
$0636	$2E43			GOTO	JMPNRM32
$0637	$	JMPNRMRND4032:
$0637	$3001			MOVLW	0x01
$0638	$00FC			MOVWF	STACK_12
$0639	$158A			BSF	PCLATH, 3
$063A	$2061			CALL	_NRM4032
$063B	$118A			BCF	PCLATH, 3
$063C	$2E51			GOTO	ADD32EEE
$063D	$	JMPNRM4032:
$063D	$3002			MOVLW	0x02
$063E	$00FC			MOVWF	STACK_12
$063F	$158A			BSF	PCLATH, 3
$0640	$2061			CALL	_NRM4032
$0641	$118A			BCF	PCLATH, 3
$0642	$2E51			GOTO	ADD32EEE
$0643	$	JMPNRM32:
$0643	$3004			MOVLW	0x04
$0644	$00FC			MOVWF	STACK_12
$0645	$158A			BSF	PCLATH, 3
$0646	$221E			CALL	_NRM3232
$0647	$118A			BCF	PCLATH, 3
$0648	$2E51			GOTO	ADD32EEE
$0649	$	ADD_JMPSETFOV32:
$0649	$3008			MOVLW	0x08
$064A	$00FC			MOVWF	STACK_12
$064B	$158A			BSF	PCLATH, 3
$064C	$2320			CALL	_SETFOV32
$064D	$118A			BCF	PCLATH, 3
$064E	$2E51			GOTO	ADD32EEE
$064F	$	JMPEEE:
$064F	$3000			MOVLW	0x00
$0650	$00FC			MOVWF	STACK_12
$0651	$	ADD32EEE:
$0651	$0000			NOP
$0652	$0008			RETURN
$0B4D	$	_PWM1_Start:
$0B4D	$1303			BCF	STATUS, RP1
$0B4E	$1683			BSF	STATUS, RP0
$0B4F	$1107			BCF	TRISC, 2
$0B50	$1283			BCF	STATUS, RP0
$0B51	$1512			BSF	T2CON, 2
$0B52	$300C			MOVLW	12
$0B53	$0497			IORWF	CCP1CON, 1
$0B54	$0008			RETURN
$0B55	$	_PWM2_Start:
$0B55	$1303			BCF	STATUS, RP1
$0B56	$1683			BSF	STATUS, RP0
$0B57	$1087			BCF	TRISC, 1
$0B58	$1283			BCF	STATUS, RP0
$0B59	$1512			BSF	T2CON, 2
$0B5A	$300C			MOVLW	12
$0B5B	$049D			IORWF	CCP2CON, 1
$0B5C	$0008			RETURN
$0B69	$	_PWM1_Init:
$0B69	$1303			BCF	STATUS, RP1
$0B6A	$1283			BCF	STATUS, RP0
$0B6B	$0195			CLRF	CCPR1L, 1
$0B6C	$1217			BCF	CCP1CON, 4
$0B6D	$1297			BCF	CCP1CON, 5
$0B6E	$0008			RETURN
$0B5D	$	_PWM2_Init:
$0B5D	$1303			BCF	STATUS, RP1
$0B5E	$1283			BCF	STATUS, RP0
$0B5F	$019B			CLRF	CCPR2L, 1
$0B60	$121D			BCF	CCP2CON, 4
$0B61	$129D			BCF	CCP2CON, 5
$0B62	$0008			RETURN
$0A88	$	_Mul_16x16_U:
$0A88	$1303			BCF	STATUS, RP1
$0A89	$1283			BCF	STATUS, RP0
$0A8A	$01FB			CLRF	STACK_11
$0A8B	$01FA			CLRF	STACK_10
$0A8C	$01F9			CLRF	STACK_9
$0A8D	$3080			MOVLW	128
$0A8E	$00F8			MOVWF	STACK_8
$0A8F	$0CF1			RRF	STACK_1, F
$0A90	$0CF0			RRF	STACK_0, F
$0A91	$1C03			BTFSS	STATUS, C
$0A92	$2A9C			GOTO	$+10
$0A93	$0874			MOVF	STACK_4, W
$0A94	$07F9			ADDWF	STACK_9, F
$0A95	$0875			MOVF	STACK_5, W
$0A96	$1803			BTFSC	STATUS, C
$0A97	$0F75			INCFSZ	STACK_5, W
$0A98	$07FA			ADDWF	STACK_10, F
$0A99	$1803			BTFSC	STATUS, C
$0A9A	$0AFB			INCF	STACK_11, F
$0A9B	$1003			BCF	STATUS, C
$0A9C	$1FF0			BTFSS	STACK_0, 7
$0A9D	$2AA4			GOTO	$+7
$0A9E	$0874			MOVF	STACK_4, W
$0A9F	$07FA			ADDWF	STACK_10, F
$0AA0	$0875			MOVF	STACK_5, W
$0AA1	$1803			BTFSC	STATUS, C
$0AA2	$0F75			INCFSZ	STACK_5, W
$0AA3	$07FB			ADDWF	STACK_11, F
$0AA4	$0CFB			RRF	STACK_11, F
$0AA5	$0CFA			RRF	STACK_10, F
$0AA6	$0CF9			RRF	STACK_9, F
$0AA7	$0CF8			RRF	STACK_8, F
$0AA8	$1C03			BTFSS	STATUS, C
$0AA9	$2A8F			GOTO	$-26
$0AAA	$087B			MOVF	STACK_11, W
$0AAB	$00F3			MOVWF	STACK_3
$0AAC	$087A			MOVF	STACK_10, W
$0AAD	$00F2			MOVWF	STACK_2
$0AAE	$0879			MOVF	STACK_9, W
$0AAF	$00F1			MOVWF	STACK_1
$0AB0	$0878			MOVF	STACK_8, W
$0AB1	$00F0			MOVWF	STACK_0
$0AB2	$0008			RETURN
$0AC4	$	_Word2Double:
$0AC4	$1303			BCF	STATUS, RP1
$0AC5	$1283			BCF	STATUS, RP0
$0AC6	$0870			MOVF	STACK_0, W
$0AC7	$00F8			MOVWF	STACK_8
$0AC8	$0871			MOVF	STACK_1, W
$0AC9	$00F0			MOVWF	STACK_0
$0ACA	$01F1			CLRF	STACK_1
$0ACB	$01F2			CLRF	STACK_2
$0ACC	$01F3			CLRF	STACK_3
$0ACD	$	FLO16U32:
$0ACD	$01FB			CLRF	STACK_11
$0ACE	$01FC			CLRF	STACK_12
$0ACF	$3096			MOVLW	150
$0AD0	$00F3			MOVWF	STACK_3
$0AD1	$01FA			CLRF	STACK_10
$0AD2	$0870			MOVF	STACK_0, W
$0AD3	$00F1			MOVWF	STACK_1
$0AD4	$0878			MOVF	STACK_8, W
$0AD5	$00F0			MOVWF	STACK_0
$0AD6	$01F8			CLRF	STACK_8
$0AD7	$01F2			CLRF	STACK_2
$0AD8	$221E			CALL	_NRM3232
$0AD9	$0008			RETURN
$0653	$	_Div_32x32_FP:
$0653	$1303			BCF	STATUS, RP1
$0654	$1283			BCF	STATUS, RP0
$0655	$	FPD32:
$0655	$0877			MOVF	STACK_7, W
$0656	$1903			BTFSC	STATUS, Z
$0657	$2EE2			GOTO	JPDSETFDZ32
$0658	$0873			MOVF	STACK_3, W
$0659	$1903			BTFSC	STATUS, Z
$065A	$2EE7			GOTO	JPDRES032
$065B	$	D32BNE0:
$065B	$0872			MOVF	STACK_2, W
$065C	$0676			XORWF	STACK_6, W
$065D	$3980			ANDLW	128
$065E	$00FA			MOVWF	STACK_10
$065F	$17F2			BSF	STACK_2, 7
$0660	$17F6			BSF	STACK_6, 7
$0661	$	TALIGN32:
$0661	$01A0			CLRF	__math_tempbD
$0662	$0872			MOVF	STACK_2, W
$0663	$00F8			MOVWF	STACK_8
$0664	$0871			MOVF	STACK_1, W
$0665	$00FC			MOVWF	STACK_12
$0666	$0870			MOVF	STACK_0, W
$0667	$00FD			MOVWF	STACK_13
$0668	$0874			MOVF	STACK_4, W
$0669	$02FD			SUBWF	STACK_13, F
$066A	$0875			MOVF	STACK_5, W
$066B	$1C03			BTFSS	STATUS, C
$066C	$0F75			INCFSZ	STACK_5, W
$066D	$	TS1ALIGN32:
$066D	$02FC			SUBWF	STACK_12, F
$066E	$0876			MOVF	STACK_6, W
$066F	$1C03			BTFSS	STATUS, C
$0670	$0F76			INCFSZ	STACK_6, W
$0671	$	TS2ALIGN32:
$0671	$02F8			SUBWF	STACK_8, F
$0672	$01F8			CLRF	STACK_8
$0673	$01FC			CLRF	STACK_12
$0674	$01FD			CLRF	STACK_13
$0675	$1C03			BTFSS	STATUS, C
$0676	$2E7E			GOTO	DALIGN32OK
$0677	$1003			BCF	STATUS, C
$0678	$0CF2			RRF	STACK_2, F
$0679	$0CF1			RRF	STACK_1, F
$067A	$0CF0			RRF	STACK_0, F
$067B	$0CF8			RRF	STACK_8, F
$067C	$3001			MOVLW	0x01
$067D	$00A0			MOVWF	__math_tempbD
$067E	$	DALIGN32OK:
$067E	$0877			MOVF	STACK_7, W
$067F	$02F3			SUBWF	STACK_3, F
$0680	$1C03			BTFSS	STATUS, C
$0681	$2E88			GOTO	ALTB32
$0682	$	AGEB32:
$0682	$307E			MOVLW	126
$0683	$0720			ADDWF	__math_tempbD, W
$0684	$07F3			ADDWF	STACK_3, F
$0685	$1803			BTFSC	STATUS, C
$0686	$2EEC			GOTO	JPDSETFOV32
$0687	$2E8D			GOTO	DARGOK32
$0688	$	ALTB32:
$0688	$307E			MOVLW	126
$0689	$0720			ADDWF	__math_tempbD, W
$068A	$07F3			ADDWF	STACK_3, F
$068B	$1C03			BTFSS	STATUS, C
$068C	$2EF1			GOTO	JPDSETFUN32
$068D	$	DARGOK32:
$068D	$3018			MOVLW	24
$068E	$07FA			ADDWF	STACK_10, F
$068F	$	DLOOP32:
$068F	$0DFD			RLF	STACK_13, F
$0690	$0DFC			RLF	STACK_12, F
$0691	$0DF8			RLF	STACK_8, F
$0692	$0DF0			RLF	STACK_0, F
$0693	$0DF1			RLF	STACK_1, F
$0694	$0DF2			RLF	STACK_2, F
$0695	$0DA0			RLF	__math_tempbD, F
$0696	$0874			MOVF	STACK_4, W
$0697	$02F0			SUBWF	STACK_0, F
$0698	$0875			MOVF	STACK_5, W
$0699	$1C03			BTFSS	STATUS, C
$069A	$0F75			INCFSZ	STACK_5, W
$069B	$	DS132:
$069B	$02F1			SUBWF	STACK_1, F
$069C	$0876			MOVF	STACK_6, W
$069D	$1C03			BTFSS	STATUS, C
$069E	$0F76			INCFSZ	STACK_6, W
$069F	$	DS232:
$069F	$02F2			SUBWF	STACK_2, F
$06A0	$0D76			RLF	STACK_6, W
$06A1	$04A0			IORWF	__math_tempbD, F
$06A2	$1C20			BTFSS	__math_tempbD, 0
$06A3	$2EA6			GOTO	DREST32
$06A4	$147D			BSF	STACK_13, 0
$06A5	$2EB1			GOTO	DOK32
$06A6	$	DREST32:
$06A6	$0874			MOVF	STACK_4, W
$06A7	$07F0			ADDWF	STACK_0, F
$06A8	$0875			MOVF	STACK_5, W
$06A9	$1803			BTFSC	STATUS, C
$06AA	$0F75			INCFSZ	STACK_5, W
$06AB	$	DAREST32:
$06AB	$07F1			ADDWF	STACK_1, F
$06AC	$0876			MOVF	STACK_6, W
$06AD	$1803			BTFSC	STATUS, C
$06AE	$0A76			INCF	STACK_6, W
$06AF	$07F2			ADDWF	STACK_2, F
$06B0	$107D			BCF	STACK_13, 0
$06B1	$	DOK32:
$06B1	$03FA			DECF	STACK_10, F
$06B2	$301F			MOVLW	31
$06B3	$057A			ANDWF	STACK_10, W
$06B4	$1D03			BTFSS	STATUS, Z
$06B5	$2E8F			GOTO	DLOOP32
$06B6	$	DROUND32:
$06B6	$1B7B			BTFSC	STACK_11, 6
$06B7	$1C7D			BTFSS	STACK_13, 0
$06B8	$2ED8			GOTO	DIV32OK
$06B9	$1003			BCF	STATUS, C
$06BA	$0DF0			RLF	STACK_0, F
$06BB	$0DF1			RLF	STACK_1, F
$06BC	$0DF2			RLF	STACK_2, F
$06BD	$0DA0			RLF	__math_tempbD, F
$06BE	$0874			MOVF	STACK_4, W
$06BF	$02F0			SUBWF	STACK_0, F
$06C0	$0875			MOVF	STACK_5, W
$06C1	$1C03			BTFSS	STATUS, C
$06C2	$0F75			INCFSZ	STACK_5, W
$06C3	$02F1			SUBWF	STACK_1, F
$06C4	$0876			MOVF	STACK_6, W
$06C5	$1C03			BTFSS	STATUS, C
$06C6	$0F76			INCFSZ	STACK_6, W
$06C7	$02F2			SUBWF	STACK_2, F
$06C8	$0D76			RLF	STACK_6, W
$06C9	$0420			IORWF	__math_tempbD, W
$06CA	$3901			ANDLW	0x01
$06CB	$07FD			ADDWF	STACK_13, F
$06CC	$1803			BTFSC	STATUS, C
$06CD	$0AFC			INCF	STACK_12, F
$06CE	$1903			BTFSC	STATUS, Z
$06CF	$0AF8			INCF	STACK_8, F
$06D0	$1D03			BTFSS	STATUS, Z
$06D1	$2ED8			GOTO	DIV32OK
$06D2	$0CF8			RRF	STACK_8, F
$06D3	$0CFC			RRF	STACK_12, F
$06D4	$0CFD			RRF	STACK_13, F
$06D5	$0AF3			INCF	STACK_3, F
$06D6	$1903			BTFSC	STATUS, Z
$06D7	$2EEC			GOTO	JPDSETFOV32
$06D8	$	DIV32OK:
$06D8	$1FFA			BTFSS	STACK_10, 7
$06D9	$13F8			BCF	STACK_8, 7
$06DA	$0878			MOVF	STACK_8, W
$06DB	$00F2			MOVWF	STACK_2
$06DC	$087C			MOVF	STACK_12, W
$06DD	$00F1			MOVWF	STACK_1
$06DE	$087D			MOVF	STACK_13, W
$06DF	$00F0			MOVWF	STACK_0
$06E0	$3000			MOVLW	0x00
$06E1	$2EF5			GOTO	DIV32EEE
$06E2	$	JPDSETFDZ32:
$06E2	$3001			MOVLW	0x01
$06E3	$158A			BSF	PCLATH, 3
$06E4	$2383			CALL	_SETFDZ32
$06E5	$118A			BCF	PCLATH, 3
$06E6	$2EF5			GOTO	DIV32EEE
$06E7	$	JPDRES032:
$06E7	$3002			MOVLW	0x02
$06E8	$158A			BSF	PCLATH, 3
$06E9	$2344			CALL	_RES032
$06EA	$118A			BCF	PCLATH, 3
$06EB	$2EF5			GOTO	DIV32EEE
$06EC	$	JPDSETFOV32:
$06EC	$3004			MOVLW	0x04
$06ED	$158A			BSF	PCLATH, 3
$06EE	$2320			CALL	_SETFOV32
$06EF	$118A			BCF	PCLATH, 3
$06F0	$2EF5			GOTO	DIV32EEE
$06F1	$	JPDSETFUN32:
$06F1	$3008			MOVLW	0x08
$06F2	$158A			BSF	PCLATH, 3
$06F3	$232E			CALL	_SETFUN32
$06F4	$118A			BCF	PCLATH, 3
$06F5	$	DIV32EEE:
$06F5	$0000			NOP
$06F6	$0008			RETURN
$0B3C	$	_Sub_32x32_FP:
$0B3C	$1303			BCF	STATUS, RP1
$0B3D	$1283			BCF	STATUS, RP0
$0B3E	$3080			MOVLW	0x80
$0B3F	$06F6			XORWF	STACK_6, F
$0B40	$118A			BCF	PCLATH, 3
$0B41	$25AB			CALL	_Add_32x32_FP
$0B42	$158A			BSF	PCLATH, 3
$0B43	$0008			RETURN
$0958	$	_Mul_16x16_S:
$0958	$1303			BCF	STATUS, RP1
$0959	$1283			BCF	STATUS, RP0
$095A	$01FB			CLRF	STACK_11
$095B	$01FA			CLRF	STACK_10
$095C	$01F9			CLRF	STACK_9
$095D	$3080			MOVLW	128
$095E	$00F8			MOVWF	STACK_8
$095F	$01FD			CLRF	STACK_13
$0960	$1FF1			BTFSS	STACK_1, 7
$0961	$2968			GOTO	$+7
$0962	$09F1			COMF	STACK_1, F
$0963	$09F0			COMF	STACK_0, F
$0964	$0AF0			INCF	STACK_0, F
$0965	$1903			BTFSC	STATUS, Z
$0966	$0AF1			INCF	STACK_1, F
$0967	$0AFD			INCF	STACK_13, F
$0968	$1FF5			BTFSS	STACK_5, 7
$0969	$2970			GOTO	$+7
$096A	$09F5			COMF	STACK_5, F
$096B	$09F4			COMF	STACK_4, F
$096C	$0AF4			INCF	STACK_4, F
$096D	$1903			BTFSC	STATUS, Z
$096E	$0AF5			INCF	STACK_5, F
$096F	$0AFD			INCF	STACK_13, F
$0970	$0CF1			RRF	STACK_1, F
$0971	$0CF0			RRF	STACK_0, F
$0972	$1C03			BTFSS	STATUS, C
$0973	$297D			GOTO	$+10
$0974	$0874			MOVF	STACK_4, W
$0975	$07F9			ADDWF	STACK_9, F
$0976	$0875			MOVF	STACK_5, W
$0977	$1803			BTFSC	STATUS, C
$0978	$0F75			INCFSZ	STACK_5, W
$0979	$07FA			ADDWF	STACK_10, F
$097A	$1803			BTFSC	STATUS, C
$097B	$0AFB			INCF	STACK_11, F
$097C	$1003			BCF	STATUS, C
$097D	$1FF0			BTFSS	STACK_0, 7
$097E	$2985			GOTO	$+7
$097F	$0874			MOVF	STACK_4, W
$0980	$07FA			ADDWF	STACK_10, F
$0981	$1803			BTFSC	STATUS, C
$0982	$0AFB			INCF	STACK_11, F
$0983	$0875			MOVF	STACK_5, W
$0984	$07FB			ADDWF	STACK_11, F
$0985	$0CFB			RRF	STACK_11, F
$0986	$0CFA			RRF	STACK_10, F
$0987	$0CF9			RRF	STACK_9, F
$0988	$0CF8			RRF	STACK_8, F
$0989	$1C03			BTFSS	STATUS, C
$098A	$2970			GOTO	$-26
$098B	$1C7D			BTFSS	STACK_13, 0
$098C	$2998			GOTO	$+12
$098D	$09FB			COMF	STACK_11, F
$098E	$09FA			COMF	STACK_10, F
$098F	$09F9			COMF	STACK_9, F
$0990	$09F8			COMF	STACK_8, F
$0991	$0AF8			INCF	STACK_8, F
$0992	$1903			BTFSC	STATUS, Z
$0993	$0AF9			INCF	STACK_9, F
$0994	$1903			BTFSC	STATUS, Z
$0995	$0AFA			INCF	STACK_10, F
$0996	$1903			BTFSC	STATUS, Z
$0997	$0AFB			INCF	STACK_11, F
$0998	$087B			MOVF	STACK_11, W
$0999	$00F3			MOVWF	STACK_3
$099A	$087A			MOVF	STACK_10, W
$099B	$00F2			MOVWF	STACK_2
$099C	$0879			MOVF	STACK_9, W
$099D	$00F1			MOVWF	STACK_1
$099E	$0878			MOVF	STACK_8, W
$099F	$00F0			MOVWF	STACK_0
$09A0	$0000			NOP
$09A1	$0008			RETURN
$0B11	$	_SETIOV3224:
$0B11	$1303			BCF	STATUS, RP1
$0B12	$1283			BCF	STATUS, RP0
$0B13	$147B			BSF	STACK_11, 0
$0B14	$1FFB			BTFSS	STACK_11, 7
$0B15	$2B1E			GOTO	SETIOV3224EEE
$0B16	$01F2			CLRF	STACK_2
$0B17	$1FFA			BTFSS	STACK_10, 7
$0B18	$30FF			MOVLW	0xFF
$0B19	$00F2			MOVWF	STACK_2
$0B1A	$00F1			MOVWF	STACK_1
$0B1B	$00F0			MOVWF	STACK_0
$0B1C	$0DFA			RLF	STACK_10, F
$0B1D	$0CF2			RRF	STACK_2, F
$0B1E	$	SETIOV3224EEE:
$0B1E	$30FF			MOVLW	0xFF
$0B1F	$0008			RETURN
$0B00	$	_initport:
;lfr_pid_annauniv.c,15 :: 		void initport()
;lfr_pid_annauniv.c,17 :: 		ADCON1 =0x06;          //TURN OFF ADC AND CONFIGURE A AND E AS DIG I/O
$0B00	$3006			MOVLW	6
$0B01	$1303			BCF	STATUS, RP1
$0B02	$1683			BSF	STATUS, RP0
$0B03	$009F			MOVWF	ADCON1
;lfr_pid_annauniv.c,18 :: 		PORTA = 0;             //CLEAR PORTA
$0B04	$1283			BCF	STATUS, RP0
$0B05	$0185			CLRF	PORTA, 1
;lfr_pid_annauniv.c,19 :: 		PORTE = 0;             //CLEAR PORTE
$0B06	$0189			CLRF	PORTE, 1
;lfr_pid_annauniv.c,20 :: 		TRISA = 0x3F;          //INITIALIZE PORTA AS INPUT
$0B07	$303F			MOVLW	63
$0B08	$1683			BSF	STATUS, RP0
$0B09	$0085			MOVWF	TRISA
;lfr_pid_annauniv.c,21 :: 		TRISE = 0x03;          //INITIALIZE PORTE AS INPUT
$0B0A	$3003			MOVLW	3
$0B0B	$0089			MOVWF	TRISE
;lfr_pid_annauniv.c,22 :: 		TRISD = 0x00;          //INITIALIZE PORTD AS OUTPUT
$0B0C	$0188			CLRF	TRISD, 1
;lfr_pid_annauniv.c,23 :: 		TRISC = 0b00000000;    //INITIALIZE PORTC AS OUTPUT
$0B0D	$0187			CLRF	TRISC, 1
;lfr_pid_annauniv.c,24 :: 		TRISB = 0b11000000;    //INITIALIZE PORTB AS INPUT
$0B0E	$30C0			MOVLW	192
$0B0F	$0086			MOVWF	TRISB
;lfr_pid_annauniv.c,25 :: 		}
$0B10	$0008			RETURN
$0AB3	$	_initpwm:
;lfr_pid_annauniv.c,27 :: 		void initpwm()
;lfr_pid_annauniv.c,29 :: 		PWM1_Init(5000);
$0AB3	$1303			BCF	STATUS, RP1
$0AB4	$1283			BCF	STATUS, RP0
$0AB5	$1012			BCF	T2CON, T2CKPS0
$0AB6	$1092			BCF	T2CON, T2CKPS1
$0AB7	$30C7			MOVLW	199
$0AB8	$1683			BSF	STATUS, RP0
$0AB9	$0092			MOVWF	PR2
$0ABA	$2369			CALL	_PWM1_Init
;lfr_pid_annauniv.c,30 :: 		PWM2_Init(5000);
$0ABB	$1012			BCF	T2CON, T2CKPS0
$0ABC	$1092			BCF	T2CON, T2CKPS1
$0ABD	$30C7			MOVLW	199
$0ABE	$1683			BSF	STATUS, RP0
$0ABF	$0092			MOVWF	PR2
$0AC0	$235D			CALL	_PWM2_Init
;lfr_pid_annauniv.c,31 :: 		Pwm1_Start();          //RIGHT MOTOR
$0AC1	$234D			CALL	_PWM1_Start
;lfr_pid_annauniv.c,32 :: 		Pwm2_Start();          //LEFT MOTOR
$0AC2	$2355			CALL	_PWM2_Start
;lfr_pid_annauniv.c,33 :: 		}
$0AC3	$0008			RETURN
$06F7	$	_indicator:
;lfr_pid_annauniv.c,59 :: 		void indicator()        //COPY THE SENSOR OUTPUT TO PORTD-INDICATOR
;lfr_pid_annauniv.c,61 :: 		PORTD.F7 = PORTA.F0;
$06F7	$3001			MOVLW	1
$06F8	$1303			BCF	STATUS, RP1
$06F9	$1283			BCF	STATUS, RP0
$06FA	$0505			ANDWF	PORTA, 0
$06FB	$00F0			MOVWF	STACK_0
$06FC	$3000			MOVLW	0
$06FD	$1870			BTFSC	STACK_0, 0
$06FE	$3080			MOVLW	128
$06FF	$0608			XORWF	PORTD, 0
$0700	$3980			ANDLW	128
$0701	$0688			XORWF	PORTD, 1
;lfr_pid_annauniv.c,62 :: 		PORTD.F6 = PORTA.F1;
$0702	$3000			MOVLW	0
$0703	$1885			BTFSC	PORTA, 1
$0704	$3001			MOVLW	1
$0705	$00F1			MOVWF	STACK_1
$0706	$3000			MOVLW	0
$0707	$1871			BTFSC	STACK_1, 0
$0708	$3040			MOVLW	64
$0709	$0608			XORWF	PORTD, 0
$070A	$3940			ANDLW	64
$070B	$0688			XORWF	PORTD, 1
;lfr_pid_annauniv.c,63 :: 		PORTD.F5 = PORTA.F2;
$070C	$3000			MOVLW	0
$070D	$1905			BTFSC	PORTA, 2
$070E	$3001			MOVLW	1
$070F	$00F1			MOVWF	STACK_1
$0710	$3000			MOVLW	0
$0711	$1871			BTFSC	STACK_1, 0
$0712	$3020			MOVLW	32
$0713	$0608			XORWF	PORTD, 0
$0714	$3920			ANDLW	32
$0715	$0688			XORWF	PORTD, 1
;lfr_pid_annauniv.c,64 :: 		PORTD.F4 = PORTA.F3;
$0716	$3000			MOVLW	0
$0717	$1985			BTFSC	PORTA, 3
$0718	$3001			MOVLW	1
$0719	$00F1			MOVWF	STACK_1
$071A	$3000			MOVLW	0
$071B	$1871			BTFSC	STACK_1, 0
$071C	$3010			MOVLW	16
$071D	$0608			XORWF	PORTD, 0
$071E	$3910			ANDLW	16
$071F	$0688			XORWF	PORTD, 1
;lfr_pid_annauniv.c,65 :: 		PORTD.F3 = PORTA.F4;
$0720	$3000			MOVLW	0
$0721	$1A05			BTFSC	PORTA, 4
$0722	$3001			MOVLW	1
$0723	$00F1			MOVWF	STACK_1
$0724	$3000			MOVLW	0
$0725	$1871			BTFSC	STACK_1, 0
$0726	$3008			MOVLW	8
$0727	$0608			XORWF	PORTD, 0
$0728	$3908			ANDLW	8
$0729	$0688			XORWF	PORTD, 1
;lfr_pid_annauniv.c,66 :: 		PORTD.F2 = PORTA.F5;
$072A	$3000			MOVLW	0
$072B	$1A85			BTFSC	PORTA, 5
$072C	$3001			MOVLW	1
$072D	$00F1			MOVWF	STACK_1
$072E	$3000			MOVLW	0
$072F	$1871			BTFSC	STACK_1, 0
$0730	$3004			MOVLW	4
$0731	$0608			XORWF	PORTD, 0
$0732	$3904			ANDLW	4
$0733	$0688			XORWF	PORTD, 1
;lfr_pid_annauniv.c,67 :: 		PORTD.F1 = PORTE.F0;
$0734	$3001			MOVLW	1
$0735	$0509			ANDWF	PORTE, 0
$0736	$00F0			MOVWF	STACK_0
$0737	$3000			MOVLW	0
$0738	$1870			BTFSC	STACK_0, 0
$0739	$3002			MOVLW	2
$073A	$0608			XORWF	PORTD, 0
$073B	$3902			ANDLW	2
$073C	$0688			XORWF	PORTD, 1
;lfr_pid_annauniv.c,68 :: 		PORTD.F0 = PORTE.F1;
$073D	$3000			MOVLW	0
$073E	$1889			BTFSC	PORTE, 1
$073F	$3001			MOVLW	1
$0740	$00F1			MOVWF	STACK_1
$0741	$3000			MOVLW	0
$0742	$1871			BTFSC	STACK_1, 0
$0743	$3001			MOVLW	1
$0744	$0608			XORWF	PORTD, 0
$0745	$3901			ANDLW	1
$0746	$0688			XORWF	PORTD, 1
;lfr_pid_annauniv.c,69 :: 		}
$0747	$0008			RETURN
$046C	$	_CalcError:
;lfr_pid_annauniv.c,71 :: 		void CalcError()				//calculates the current error
;lfr_pid_annauniv.c,73 :: 		s1 = 0;
$046C	$1303			BCF	STATUS, RP1
$046D	$1283			BCF	STATUS, RP0
$046E	$01A1			CLRF	_s1
$046F	$01A2			CLRF	_s1+1
;lfr_pid_annauniv.c,74 :: 		s2 = 0;
$0470	$01A3			CLRF	_s2
$0471	$01A4			CLRF	_s2+1
;lfr_pid_annauniv.c,75 :: 		s3 = 0;
$0472	$01A5			CLRF	_s3
$0473	$01A6			CLRF	_s3+1
;lfr_pid_annauniv.c,76 :: 		s4 = 0;
$0474	$01A7			CLRF	_s4
$0475	$01A8			CLRF	_s4+1
;lfr_pid_annauniv.c,77 :: 		s5 = 0;
$0476	$01A9			CLRF	_s5
$0477	$01AA			CLRF	_s5+1
;lfr_pid_annauniv.c,78 :: 		s6 = 0;
$0478	$01AB			CLRF	_s6
$0479	$01AC			CLRF	_s6+1
;lfr_pid_annauniv.c,79 :: 		s7 = 0;
$047A	$01AD			CLRF	_s7
$047B	$01AE			CLRF	_s7+1
;lfr_pid_annauniv.c,80 :: 		s8 = 0;
$047C	$01AF			CLRF	_s8
$047D	$01B0			CLRF	_s8+1
;lfr_pid_annauniv.c,82 :: 		if(PORTA.F0)
$047E	$1C05			BTFSS	PORTA, 0
$047F	$2C86			GOTO	L_CalcError_0
;lfr_pid_annauniv.c,84 :: 		lastreading='r';
$0480	$3072			MOVLW	114
$0481	$00B1			MOVWF	_lastreading
;lfr_pid_annauniv.c,85 :: 		s1 = 1;
$0482	$3001			MOVLW	1
$0483	$00A1			MOVWF	_s1
$0484	$3000			MOVLW	0
$0485	$00A2			MOVWF	_s1+1
;lfr_pid_annauniv.c,86 :: 		}
$0486	$	L_CalcError_0:
;lfr_pid_annauniv.c,87 :: 		if(PORTA.F1)
$0486	$1C85			BTFSS	PORTA, 1
$0487	$2C8C			GOTO	L_CalcError_1
;lfr_pid_annauniv.c,89 :: 		s2 = 1;
$0488	$3001			MOVLW	1
$0489	$00A3			MOVWF	_s2
$048A	$3000			MOVLW	0
$048B	$00A4			MOVWF	_s2+1
;lfr_pid_annauniv.c,90 :: 		}
$048C	$	L_CalcError_1:
;lfr_pid_annauniv.c,91 :: 		if(PORTA.F2)
$048C	$1D05			BTFSS	PORTA, 2
$048D	$2C92			GOTO	L_CalcError_2
;lfr_pid_annauniv.c,93 :: 		s3 = 1;
$048E	$3001			MOVLW	1
$048F	$00A5			MOVWF	_s3
$0490	$3000			MOVLW	0
$0491	$00A6			MOVWF	_s3+1
;lfr_pid_annauniv.c,94 :: 		}
$0492	$	L_CalcError_2:
;lfr_pid_annauniv.c,95 :: 		if(PORTA.F3)
$0492	$1D85			BTFSS	PORTA, 3
$0493	$2C98			GOTO	L_CalcError_3
;lfr_pid_annauniv.c,98 :: 		s4 = 1;
$0494	$3001			MOVLW	1
$0495	$00A7			MOVWF	_s4
$0496	$3000			MOVLW	0
$0497	$00A8			MOVWF	_s4+1
;lfr_pid_annauniv.c,99 :: 		}
$0498	$	L_CalcError_3:
;lfr_pid_annauniv.c,100 :: 		if(PORTA.F4)
$0498	$1E05			BTFSS	PORTA, 4
$0499	$2C9E			GOTO	L_CalcError_4
;lfr_pid_annauniv.c,102 :: 		s5 = 1;
$049A	$3001			MOVLW	1
$049B	$00A9			MOVWF	_s5
$049C	$3000			MOVLW	0
$049D	$00AA			MOVWF	_s5+1
;lfr_pid_annauniv.c,103 :: 		}
$049E	$	L_CalcError_4:
;lfr_pid_annauniv.c,104 :: 		if(PORTA.F5)
$049E	$1E85			BTFSS	PORTA, 5
$049F	$2CA4			GOTO	L_CalcError_5
;lfr_pid_annauniv.c,106 :: 		s6 = 1;
$04A0	$3001			MOVLW	1
$04A1	$00AB			MOVWF	_s6
$04A2	$3000			MOVLW	0
$04A3	$00AC			MOVWF	_s6+1
$04A4	$	L_CalcError_5:
;lfr_pid_annauniv.c,107 :: 		if(PORTE.F0)
$04A4	$1C09			BTFSS	PORTE, 0
$04A5	$2CAA			GOTO	L_CalcError_6
;lfr_pid_annauniv.c,109 :: 		s7 = 1;
$04A6	$3001			MOVLW	1
$04A7	$00AD			MOVWF	_s7
$04A8	$3000			MOVLW	0
$04A9	$00AE			MOVWF	_s7+1
;lfr_pid_annauniv.c,110 :: 		}
$04AA	$	L_CalcError_6:
;lfr_pid_annauniv.c,111 :: 		if(PORTE.F1)
$04AA	$1C89			BTFSS	PORTE, 1
$04AB	$2CB2			GOTO	L_CalcError_7
;lfr_pid_annauniv.c,113 :: 		lastreading='l';
$04AC	$306C			MOVLW	108
$04AD	$00B1			MOVWF	_lastreading
;lfr_pid_annauniv.c,114 :: 		s8 = 1;
$04AE	$3001			MOVLW	1
$04AF	$00AF			MOVWF	_s8
$04B0	$3000			MOVLW	0
$04B1	$00B0			MOVWF	_s8+1
;lfr_pid_annauniv.c,115 :: 		}
$04B2	$	L_CalcError_7:
;lfr_pid_annauniv.c,117 :: 		perror = error;
$04B2	$0836			MOVF	_error, 0
$04B3	$00B2			MOVWF	_perror
$04B4	$0837			MOVF	_error+1, 0
$04B5	$00B3			MOVWF	_perror+1
$04B6	$0838			MOVF	_error+2, 0
$04B7	$00B4			MOVWF	_perror+2
$04B8	$0839			MOVF	_error+3, 0
$04B9	$00B5			MOVWF	_perror+3
;lfr_pid_annauniv.c,121 :: 		error = (s1 * 1) + (s2 * 2) + (s3 * 3) + (s4 * 4) + (s5 * 5) + (s6 * 6) +(s7 * 7) + (s8 * 8);
$04BA	$3001			MOVLW	1
$04BB	$00F4			MOVWF	STACK_4
$04BC	$0823			MOVF	_s2, 0
$04BD	$00F0			MOVWF	STACK_0
$04BE	$0824			MOVF	_s2+1, 0
$04BF	$00F1			MOVWF	STACK_0+1
$04C0	$0874			MOVF	STACK_4, 0
$04C1	$	L_CalcError_27:
$04C1	$1903			BTFSC	STATUS, Z
$04C2	$2CC8			GOTO	L_CalcError_28
$04C3	$0DF0			RLF	STACK_0, 1
$04C4	$0DF1			RLF	STACK_0+1, 1
$04C5	$1070			BCF	STACK_0, 0
$04C6	$3FFF			ADDLW	255
$04C7	$2CC1			GOTO	L_CalcError_27
$04C8	$	L_CalcError_28:
$04C8	$0870			MOVF	STACK_0, 0
$04C9	$0721			ADDWF	_s1, 0
$04CA	$00E2			MOVWF	FLOC_CalcError+0
$04CB	$0822			MOVF	_s1+1, 0
$04CC	$1803			BTFSC	STATUS, C
$04CD	$3F01			ADDLW	1
$04CE	$0771			ADDWF	STACK_0+1, 0
$04CF	$00E3			MOVWF	FLOC_CalcError+1
$04D0	$0825			MOVF	_s3, 0
$04D1	$00F0			MOVWF	STACK_0
$04D2	$0826			MOVF	_s3+1, 0
$04D3	$00F1			MOVWF	STACK_0+1
$04D4	$3003			MOVLW	3
$04D5	$00F4			MOVWF	STACK_4
$04D6	$3000			MOVLW	0
$04D7	$00F5			MOVWF	STACK_4+1
$04D8	$158A			BSF	PCLATH, 3
$04D9	$2288			CALL	_mul_16x16_u
$04DA	$118A			BCF	PCLATH, 3
$04DB	$0870			MOVF	STACK_0, 0
$04DC	$07E2			ADDWF	FLOC_CalcError+0, 1
$04DD	$0871			MOVF	STACK_0+1, 0
$04DE	$1803			BTFSC	STATUS, C
$04DF	$3F01			ADDLW	1
$04E0	$07E3			ADDWF	FLOC_CalcError+1, 1
$04E1	$3002			MOVLW	2
$04E2	$00F4			MOVWF	STACK_4
$04E3	$0827			MOVF	_s4, 0
$04E4	$00F0			MOVWF	STACK_0
$04E5	$0828			MOVF	_s4+1, 0
$04E6	$00F1			MOVWF	STACK_0+1
$04E7	$0874			MOVF	STACK_4, 0
$04E8	$	L_CalcError_29:
$04E8	$1903			BTFSC	STATUS, Z
$04E9	$2CEF			GOTO	L_CalcError_30
$04EA	$0DF0			RLF	STACK_0, 1
$04EB	$0DF1			RLF	STACK_0+1, 1
$04EC	$1070			BCF	STACK_0, 0
$04ED	$3FFF			ADDLW	255
$04EE	$2CE8			GOTO	L_CalcError_29
$04EF	$	L_CalcError_30:
$04EF	$0870			MOVF	STACK_0, 0
$04F0	$07E2			ADDWF	FLOC_CalcError+0, 1
$04F1	$0871			MOVF	STACK_0+1, 0
$04F2	$1803			BTFSC	STATUS, C
$04F3	$3F01			ADDLW	1
$04F4	$07E3			ADDWF	FLOC_CalcError+1, 1
$04F5	$0829			MOVF	_s5, 0
$04F6	$00F0			MOVWF	STACK_0
$04F7	$082A			MOVF	_s5+1, 0
$04F8	$00F1			MOVWF	STACK_0+1
$04F9	$3005			MOVLW	5
$04FA	$00F4			MOVWF	STACK_4
$04FB	$3000			MOVLW	0
$04FC	$00F5			MOVWF	STACK_4+1
$04FD	$158A			BSF	PCLATH, 3
$04FE	$2288			CALL	_mul_16x16_u
$04FF	$118A			BCF	PCLATH, 3
$0500	$0870			MOVF	STACK_0, 0
$0501	$07E2			ADDWF	FLOC_CalcError+0, 1
$0502	$0871			MOVF	STACK_0+1, 0
$0503	$1803			BTFSC	STATUS, C
$0504	$3F01			ADDLW	1
$0505	$07E3			ADDWF	FLOC_CalcError+1, 1
$0506	$082B			MOVF	_s6, 0
$0507	$00F0			MOVWF	STACK_0
$0508	$082C			MOVF	_s6+1, 0
$0509	$00F1			MOVWF	STACK_0+1
$050A	$3006			MOVLW	6
$050B	$00F4			MOVWF	STACK_4
$050C	$3000			MOVLW	0
$050D	$00F5			MOVWF	STACK_4+1
$050E	$158A			BSF	PCLATH, 3
$050F	$2288			CALL	_mul_16x16_u
$0510	$118A			BCF	PCLATH, 3
$0511	$0870			MOVF	STACK_0, 0
$0512	$07E2			ADDWF	FLOC_CalcError+0, 1
$0513	$0871			MOVF	STACK_0+1, 0
$0514	$1803			BTFSC	STATUS, C
$0515	$3F01			ADDLW	1
$0516	$07E3			ADDWF	FLOC_CalcError+1, 1
$0517	$082D			MOVF	_s7, 0
$0518	$00F0			MOVWF	STACK_0
$0519	$082E			MOVF	_s7+1, 0
$051A	$00F1			MOVWF	STACK_0+1
$051B	$3007			MOVLW	7
$051C	$00F4			MOVWF	STACK_4
$051D	$3000			MOVLW	0
$051E	$00F5			MOVWF	STACK_4+1
$051F	$158A			BSF	PCLATH, 3
$0520	$2288			CALL	_mul_16x16_u
$0521	$118A			BCF	PCLATH, 3
$0522	$0870			MOVF	STACK_0, 0
$0523	$07E2			ADDWF	FLOC_CalcError+0, 1
$0524	$0871			MOVF	STACK_0+1, 0
$0525	$1803			BTFSC	STATUS, C
$0526	$3F01			ADDLW	1
$0527	$07E3			ADDWF	FLOC_CalcError+1, 1
$0528	$3003			MOVLW	3
$0529	$00F4			MOVWF	STACK_4
$052A	$082F			MOVF	_s8, 0
$052B	$00F0			MOVWF	STACK_0
$052C	$0830			MOVF	_s8+1, 0
$052D	$00F1			MOVWF	STACK_0+1
$052E	$0874			MOVF	STACK_4, 0
$052F	$	L_CalcError_31:
$052F	$1903			BTFSC	STATUS, Z
$0530	$2D36			GOTO	L_CalcError_32
$0531	$0DF0			RLF	STACK_0, 1
$0532	$0DF1			RLF	STACK_0+1, 1
$0533	$1070			BCF	STACK_0, 0
$0534	$3FFF			ADDLW	255
$0535	$2D2F			GOTO	L_CalcError_31
$0536	$	L_CalcError_32:
$0536	$0862			MOVF	FLOC_CalcError+0, 0
$0537	$07F0			ADDWF	STACK_0, 1
$0538	$0863			MOVF	FLOC_CalcError+1, 0
$0539	$1803			BTFSC	STATUS, C
$053A	$3F01			ADDLW	1
$053B	$07F1			ADDWF	STACK_0+1, 1
$053C	$158A			BSF	PCLATH, 3
$053D	$22C4			CALL	_word2double
$053E	$118A			BCF	PCLATH, 3
$053F	$0870			MOVF	STACK_0, 0
$0540	$00E2			MOVWF	FLOC_CalcError+0
$0541	$0871			MOVF	STACK_0+1, 0
$0542	$00E3			MOVWF	FLOC_CalcError+1
$0543	$0872			MOVF	STACK_0+2, 0
$0544	$00E4			MOVWF	FLOC_CalcError+2
$0545	$0873			MOVF	STACK_0+3, 0
$0546	$00E5			MOVWF	FLOC_CalcError+3
$0547	$0862			MOVF	FLOC_CalcError+0, 0
$0548	$00B6			MOVWF	_error
$0549	$0863			MOVF	FLOC_CalcError+1, 0
$054A	$00B7			MOVWF	_error+1
$054B	$0864			MOVF	FLOC_CalcError+2, 0
$054C	$00B8			MOVWF	_error+2
$054D	$0865			MOVF	FLOC_CalcError+3, 0
$054E	$00B9			MOVWF	_error+3
;lfr_pid_annauniv.c,122 :: 		error = (error)/(s1+s2+s3+s4+s5+s6+s7+s8);
$054F	$0823			MOVF	_s2, 0
$0550	$0721			ADDWF	_s1, 0
$0551	$00F0			MOVWF	STACK_0
$0552	$0822			MOVF	_s1+1, 0
$0553	$1803			BTFSC	STATUS, C
$0554	$3F01			ADDLW	1
$0555	$0724			ADDWF	_s2+1, 0
$0556	$00F1			MOVWF	STACK_0+1
$0557	$0825			MOVF	_s3, 0
$0558	$07F0			ADDWF	STACK_0, 1
$0559	$0826			MOVF	_s3+1, 0
$055A	$1803			BTFSC	STATUS, C
$055B	$3F01			ADDLW	1
$055C	$07F1			ADDWF	STACK_0+1, 1
$055D	$0827			MOVF	_s4, 0
$055E	$07F0			ADDWF	STACK_0, 1
$055F	$0828			MOVF	_s4+1, 0
$0560	$1803			BTFSC	STATUS, C
$0561	$3F01			ADDLW	1
$0562	$07F1			ADDWF	STACK_0+1, 1
$0563	$0829			MOVF	_s5, 0
$0564	$07F0			ADDWF	STACK_0, 1
$0565	$082A			MOVF	_s5+1, 0
$0566	$1803			BTFSC	STATUS, C
$0567	$3F01			ADDLW	1
$0568	$07F1			ADDWF	STACK_0+1, 1
$0569	$082B			MOVF	_s6, 0
$056A	$07F0			ADDWF	STACK_0, 1
$056B	$082C			MOVF	_s6+1, 0
$056C	$1803			BTFSC	STATUS, C
$056D	$3F01			ADDLW	1
$056E	$07F1			ADDWF	STACK_0+1, 1
$056F	$082D			MOVF	_s7, 0
$0570	$07F0			ADDWF	STACK_0, 1
$0571	$082E			MOVF	_s7+1, 0
$0572	$1803			BTFSC	STATUS, C
$0573	$3F01			ADDLW	1
$0574	$07F1			ADDWF	STACK_0+1, 1
$0575	$082F			MOVF	_s8, 0
$0576	$07F0			ADDWF	STACK_0, 1
$0577	$0830			MOVF	_s8+1, 0
$0578	$1803			BTFSC	STATUS, C
$0579	$3F01			ADDLW	1
$057A	$07F1			ADDWF	STACK_0+1, 1
$057B	$158A			BSF	PCLATH, 3
$057C	$22C4			CALL	_word2double
$057D	$118A			BCF	PCLATH, 3
$057E	$0870			MOVF	STACK_0, 0
$057F	$00F4			MOVWF	STACK_4
$0580	$0871			MOVF	STACK_0+1, 0
$0581	$00F5			MOVWF	STACK_4+1
$0582	$0872			MOVF	STACK_0+2, 0
$0583	$00F6			MOVWF	STACK_4+2
$0584	$0873			MOVF	STACK_0+3, 0
$0585	$00F7			MOVWF	STACK_4+3
$0586	$0862			MOVF	FLOC_CalcError+0, 0
$0587	$00F0			MOVWF	STACK_0
$0588	$0863			MOVF	FLOC_CalcError+1, 0
$0589	$00F1			MOVWF	STACK_0+1
$058A	$0864			MOVF	FLOC_CalcError+2, 0
$058B	$00F2			MOVWF	STACK_0+2
$058C	$0865			MOVF	FLOC_CalcError+3, 0
$058D	$00F3			MOVWF	STACK_0+3
$058E	$2653			CALL	_div_32x32_fp
$058F	$0870			MOVF	STACK_0, 0
$0590	$00B6			MOVWF	_error
$0591	$0871			MOVF	STACK_0+1, 0
$0592	$00B7			MOVWF	_error+1
$0593	$0872			MOVF	STACK_0+2, 0
$0594	$00B8			MOVWF	_error+2
$0595	$0873			MOVF	STACK_0+3, 0
$0596	$00B9			MOVWF	_error+3
;lfr_pid_annauniv.c,123 :: 		error = error - 4;
$0597	$3000			MOVLW	0
$0598	$00F4			MOVWF	STACK_4
$0599	$3000			MOVLW	0
$059A	$00F5			MOVWF	STACK_4+1
$059B	$3000			MOVLW	0
$059C	$00F6			MOVWF	STACK_4+2
$059D	$3081			MOVLW	129
$059E	$00F7			MOVWF	STACK_4+3
$059F	$158A			BSF	PCLATH, 3
$05A0	$233C			CALL	_sub_32x32_fp
$05A1	$118A			BCF	PCLATH, 3
$05A2	$0870			MOVF	STACK_0, 0
$05A3	$00B6			MOVWF	_error
$05A4	$0871			MOVF	STACK_0+1, 0
$05A5	$00B7			MOVWF	_error+1
$05A6	$0872			MOVF	STACK_0+2, 0
$05A7	$00B8			MOVWF	_error+2
$05A8	$0873			MOVF	STACK_0+3, 0
$05A9	$00B9			MOVWF	_error+3
;lfr_pid_annauniv.c,124 :: 		}
$05AA	$0008			RETURN
$0B79	$	_motor_LF:
;lfr_pid_annauniv.c,47 :: 		void motor_LF()         //LEFT MOTOR FWD DIR
;lfr_pid_annauniv.c,49 :: 		PORTC.F5 = 1;
$0B79	$1303			BCF	STATUS, RP1
$0B7A	$1283			BCF	STATUS, RP0
$0B7B	$1687			BSF	PORTC, 5
;lfr_pid_annauniv.c,50 :: 		PORTC.F4 = 0;
$0B7C	$1207			BCF	PORTC, 4
;lfr_pid_annauniv.c,51 :: 		}
$0B7D	$0008			RETURN
$0B74	$	_motor_RF:
;lfr_pid_annauniv.c,35 :: 		void motor_RF()         //RIGHT MOTOR FWD DIR
;lfr_pid_annauniv.c,37 :: 		PORTC.F7 = 1;
$0B74	$1303			BCF	STATUS, RP1
$0B75	$1283			BCF	STATUS, RP0
$0B76	$1787			BSF	PORTC, 7
;lfr_pid_annauniv.c,38 :: 		PORTC.F6 = 0;
$0B77	$1307			BCF	PORTC, 6
;lfr_pid_annauniv.c,39 :: 		}
$0B78	$0008			RETURN
$0A4F	$	_PWM1_Change_Duty:
$0A4F	$1303			BCF	STATUS, RP1
$0A50	$1683			BSF	STATUS, RP0
$0A51	$0812			MOVF	PR2, 0
$0A52	$3F01			ADDLW	1
$0A53	$00F0			MOVWF	STACK_0
$0A54	$01F1			CLRF	STACK_0+1
$0A55	$1803			BTFSC	STATUS, C
$0A56	$0AF1			INCF	STACK_0+1, 1
$0A57	$1283			BCF	STATUS, RP0
$0A58	$0862			MOVF	FARG_PWM1_Change_Duty+0, 0
$0A59	$00F4			MOVWF	STACK_4
$0A5A	$01F5			CLRF	STACK_4+1
$0A5B	$2158			CALL	_mul_16x16_s
$0A5C	$3006			MOVLW	6
$0A5D	$00F2			MOVWF	STACK_2
$0A5E	$0870			MOVF	STACK_0, 0
$0A5F	$00F4			MOVWF	STACK_4
$0A60	$0871			MOVF	STACK_0+1, 0
$0A61	$00F5			MOVWF	STACK_4+1
$0A62	$0872			MOVF	STACK_2, 0
$0A63	$	L_PWM1_Change_Duty_2:
$0A63	$1903			BTFSC	STATUS, Z
$0A64	$2A6A			GOTO	L_PWM1_Change_Duty_3
$0A65	$0CF5			RRF	STACK_4+1, 1
$0A66	$0CF4			RRF	STACK_4, 1
$0A67	$13F5			BCF	STACK_4+1, 7
$0A68	$3FFF			ADDLW	255
$0A69	$2A63			GOTO	L_PWM1_Change_Duty_2
$0A6A	$	L_PWM1_Change_Duty_3:
$0A6A	$0874			MOVF	STACK_4, 0
$0A6B	$00F0			MOVWF	STACK_0
$0A6C	$0DF0			RLF	STACK_0, 1
$0A6D	$1070			BCF	STACK_0, 0
$0A6E	$0DF0			RLF	STACK_0, 1
$0A6F	$1070			BCF	STACK_0, 0
$0A70	$0DF0			RLF	STACK_0, 1
$0A71	$1070			BCF	STACK_0, 0
$0A72	$0DF0			RLF	STACK_0, 1
$0A73	$1070			BCF	STACK_0, 0
$0A74	$3030			MOVLW	48
$0A75	$0570			ANDWF	STACK_0, 0
$0A76	$00F3			MOVWF	STACK_3
$0A77	$0874			MOVF	STACK_4, 0
$0A78	$00F0			MOVWF	STACK_0
$0A79	$0875			MOVF	STACK_4+1, 0
$0A7A	$00F1			MOVWF	STACK_0+1
$0A7B	$0CF1			RRF	STACK_0+1, 1
$0A7C	$0CF0			RRF	STACK_0, 1
$0A7D	$13F1			BCF	STACK_0+1, 7
$0A7E	$0CF1			RRF	STACK_0+1, 1
$0A7F	$0CF0			RRF	STACK_0, 1
$0A80	$13F1			BCF	STACK_0+1, 7
$0A81	$0870			MOVF	STACK_0, 0
$0A82	$0095			MOVWF	CCPR1L
$0A83	$300F			MOVLW	15
$0A84	$0597			ANDWF	CCP1CON, 1
$0A85	$0873			MOVF	STACK_3, 0
$0A86	$0497			IORWF	CCP1CON, 1
$0A87	$0008			RETURN
$09E5	$	_PWM2_Change_Duty:
$09E5	$1303			BCF	STATUS, RP1
$09E6	$1683			BSF	STATUS, RP0
$09E7	$0812			MOVF	PR2, 0
$09E8	$3F01			ADDLW	1
$09E9	$00F0			MOVWF	STACK_0
$09EA	$01F1			CLRF	STACK_0+1
$09EB	$1803			BTFSC	STATUS, C
$09EC	$0AF1			INCF	STACK_0+1, 1
$09ED	$1283			BCF	STATUS, RP0
$09EE	$0862			MOVF	FARG_PWM2_Change_Duty+0, 0
$09EF	$00F4			MOVWF	STACK_4
$09F0	$01F5			CLRF	STACK_4+1
$09F1	$2158			CALL	_mul_16x16_s
$09F2	$3006			MOVLW	6
$09F3	$00F2			MOVWF	STACK_2
$09F4	$0870			MOVF	STACK_0, 0
$09F5	$00F4			MOVWF	STACK_4
$09F6	$0871			MOVF	STACK_0+1, 0
$09F7	$00F5			MOVWF	STACK_4+1
$09F8	$0872			MOVF	STACK_2, 0
$09F9	$	L_PWM2_Change_Duty_0:
$09F9	$1903			BTFSC	STATUS, Z
$09FA	$2A00			GOTO	L_PWM2_Change_Duty_1
$09FB	$0CF5			RRF	STACK_4+1, 1
$09FC	$0CF4			RRF	STACK_4, 1
$09FD	$13F5			BCF	STACK_4+1, 7
$09FE	$3FFF			ADDLW	255
$09FF	$29F9			GOTO	L_PWM2_Change_Duty_0
$0A00	$	L_PWM2_Change_Duty_1:
$0A00	$0874			MOVF	STACK_4, 0
$0A01	$00F0			MOVWF	STACK_0
$0A02	$0DF0			RLF	STACK_0, 1
$0A03	$1070			BCF	STACK_0, 0
$0A04	$0DF0			RLF	STACK_0, 1
$0A05	$1070			BCF	STACK_0, 0
$0A06	$0DF0			RLF	STACK_0, 1
$0A07	$1070			BCF	STACK_0, 0
$0A08	$0DF0			RLF	STACK_0, 1
$0A09	$1070			BCF	STACK_0, 0
$0A0A	$3030			MOVLW	48
$0A0B	$0570			ANDWF	STACK_0, 0
$0A0C	$00F3			MOVWF	STACK_3
$0A0D	$0874			MOVF	STACK_4, 0
$0A0E	$00F0			MOVWF	STACK_0
$0A0F	$0875			MOVF	STACK_4+1, 0
$0A10	$00F1			MOVWF	STACK_0+1
$0A11	$0CF1			RRF	STACK_0+1, 1
$0A12	$0CF0			RRF	STACK_0, 1
$0A13	$13F1			BCF	STACK_0+1, 7
$0A14	$0CF1			RRF	STACK_0+1, 1
$0A15	$0CF0			RRF	STACK_0, 1
$0A16	$13F1			BCF	STACK_0+1, 7
$0A17	$0870			MOVF	STACK_0, 0
$0A18	$009B			MOVWF	CCPR2L
$0A19	$300F			MOVLW	15
$0A1A	$059D			ANDWF	CCP2CON, 1
$0A1B	$0873			MOVF	STACK_3, 0
$0A1C	$049D			IORWF	CCP2CON, 1
$0A1D	$0008			RETURN
$0B7E	$	_motor_RB:
;lfr_pid_annauniv.c,41 :: 		void motor_RB()         //RIGHT MOTOR REV DIR
;lfr_pid_annauniv.c,43 :: 		PORTC.F7 = 0;
$0B7E	$1303			BCF	STATUS, RP1
$0B7F	$1283			BCF	STATUS, RP0
$0B80	$1387			BCF	PORTC, 7
;lfr_pid_annauniv.c,44 :: 		PORTC.F6 = 1;
$0B81	$1707			BSF	PORTC, 6
;lfr_pid_annauniv.c,45 :: 		}
$0B82	$0008			RETURN
$0B6F	$	_motor_LB:
;lfr_pid_annauniv.c,53 :: 		void motor_LB()         //LEFT MOTOR REV DIR
;lfr_pid_annauniv.c,55 :: 		PORTC.F5 = 0;
$0B6F	$1303			BCF	STATUS, RP1
$0B70	$1283			BCF	STATUS, RP0
$0B71	$1287			BCF	PORTC, 5
;lfr_pid_annauniv.c,56 :: 		PORTC.F4 = 1;
$0B72	$1607			BSF	PORTC, 4
;lfr_pid_annauniv.c,57 :: 		}
$0B73	$0008			RETURN
$090D	$	GlobalInilfr_pid_annauniv:
$090D	$3078			MOVLW	120
$090E	$1303			BCF	STATUS, RP1
$090F	$1283			BCF	STATUS, RP0
$0910	$00BA			MOVWF	_basespeed+0
$0911	$305A			MOVLW	90
$0912	$00BB			MOVWF	_Kp+0
$0913	$300A			MOVLW	10
$0914	$00BC			MOVWF	_Ki+0
$0915	$3023			MOVLW	35
$0916	$00BD			MOVWF	_Kd+0
$0917	$3000			MOVLW	0
$0918	$00BE			MOVWF	_rightpulse+0
$0919	$3000			MOVLW	0
$091A	$00BF			MOVWF	_rightpulse+1
$091B	$3000			MOVLW	0
$091C	$00C0			MOVWF	_rightpulse+2
$091D	$3000			MOVLW	0
$091E	$00C1			MOVWF	_rightpulse+3
$091F	$3000			MOVLW	0
$0920	$00C2			MOVWF	_leftpulse+0
$0921	$3000			MOVLW	0
$0922	$00C3			MOVWF	_leftpulse+1
$0923	$3000			MOVLW	0
$0924	$00C4			MOVWF	_leftpulse+2
$0925	$3000			MOVLW	0
$0926	$00C5			MOVWF	_leftpulse+3
$0927	$3000			MOVLW	0
$0928	$00B2			MOVWF	_perror+0
$0929	$3000			MOVLW	0
$092A	$00B3			MOVWF	_perror+1
$092B	$3000			MOVLW	0
$092C	$00B4			MOVWF	_perror+2
$092D	$3000			MOVLW	0
$092E	$00B5			MOVWF	_perror+3
$092F	$3000			MOVLW	0
$0930	$00B6			MOVWF	_error+0
$0931	$3000			MOVLW	0
$0932	$00B7			MOVWF	_error+1
$0933	$3000			MOVLW	0
$0934	$00B8			MOVWF	_error+2
$0935	$3000			MOVLW	0
$0936	$00B9			MOVWF	_error+3
$0937	$3000			MOVLW	0
$0938	$00C6			MOVWF	_PROPORTIONAL+0
$0939	$3000			MOVLW	0
$093A	$00C7			MOVWF	_PROPORTIONAL+1
$093B	$3000			MOVLW	0
$093C	$00C8			MOVWF	_PROPORTIONAL+2
$093D	$3000			MOVLW	0
$093E	$00C9			MOVWF	_PROPORTIONAL+3
$093F	$3000			MOVLW	0
$0940	$00CA			MOVWF	_INTEGRAL+0
$0941	$3000			MOVLW	0
$0942	$00CB			MOVWF	_INTEGRAL+1
$0943	$3000			MOVLW	0
$0944	$00CC			MOVWF	_INTEGRAL+2
$0945	$3000			MOVLW	0
$0946	$00CD			MOVWF	_INTEGRAL+3
$0947	$3000			MOVLW	0
$0948	$00CE			MOVWF	_DERIVATIVE+0
$0949	$3000			MOVLW	0
$094A	$00CF			MOVWF	_DERIVATIVE+1
$094B	$3000			MOVLW	0
$094C	$00D0			MOVWF	_DERIVATIVE+2
$094D	$3000			MOVLW	0
$094E	$00D1			MOVWF	_DERIVATIVE+3
$094F	$3000			MOVLW	0
$0950	$00D2			MOVWF	_correction+0
$0951	$3000			MOVLW	0
$0952	$00D3			MOVWF	_correction+1
$0953	$3000			MOVLW	0
$0954	$00D4			MOVWF	_correction+2
$0955	$3000			MOVLW	0
$0956	$00D5			MOVWF	_correction+3
$0957	$0008			RETURN
$0ADA	$	_Equals_Double:
$0ADA	$1303			BCF	STATUS, RP1
$0ADB	$1283			BCF	STATUS, RP0
$0ADC	$0873			MOVF	STACK_3, W
$0ADD	$0677			XORWF	STACK_7, W
$0ADE	$1D03			BTFSS	STATUS, Z
$0ADF	$2AED			GOTO	EQU_FALSE
$0AE0	$0872			MOVF	STACK_2, W
$0AE1	$0676			XORWF	STACK_6, W
$0AE2	$1D03			BTFSS	STATUS, Z
$0AE3	$2AED			GOTO	EQU_FALSE
$0AE4	$0871			MOVF	STACK_1, W
$0AE5	$0675			XORWF	STACK_5, W
$0AE6	$1D03			BTFSS	STATUS, Z
$0AE7	$2AED			GOTO	EQU_FALSE
$0AE8	$0870			MOVF	STACK_0, W
$0AE9	$0674			XORWF	STACK_4, W
$0AEA	$1903			BTFSC	STATUS, Z
$0AEB	$1503			BSF	STATUS, Z
$0AEC	$0008			RETURN
$0AED	$	EQU_FALSE:
$0AED	$1103			BCF	STATUS, Z
$0AEE	$0008			RETURN
$0AEF	$0008			RETURN
$0AF0	$	_Byte2Double:
$0AF0	$1303			BCF	STATUS, RP1
$0AF1	$1283			BCF	STATUS, RP0
$0AF2	$	FLO08U32:
$0AF2	$0870			MOVF	STACK_0, W
$0AF3	$00F8			MOVWF	STACK_8
$0AF4	$01FB			CLRF	STACK_11
$0AF5	$01FC			CLRF	STACK_12
$0AF6	$309E			MOVLW	0x9E
$0AF7	$00F3			MOVWF	STACK_3
$0AF8	$01FA			CLRF	STACK_10
$0AF9	$01F2			CLRF	STACK_2
$0AFA	$01F1			CLRF	STACK_1
$0AFB	$01F0			CLRF	STACK_0
$0AFC	$3002			MOVLW	0x02
$0AFD	$00FC			MOVWF	STACK_12
$0AFE	$2061			CALL	_NRM4032
$0AFF	$0008			RETURN
$0800	$	_Mul_32x32_FP:
$0800	$1303			BCF	STATUS, RP1
$0801	$1283			BCF	STATUS, RP0
$0802	$	FPM32:
$0802	$01FB			CLRF	STACK_11
$0803	$0873			MOVF	STACK_3, W
$0804	$1D03			BTFSS	STATUS, Z
$0805	$0877			MOVF	STACK_7, W
$0806	$1903			BTFSC	STATUS, Z
$0807	$2857			GOTO	JPMRES032
$0808	$	M32BNE0:
$0808	$0872			MOVF	STACK_2, W
$0809	$0676			XORWF	STACK_6, W
$080A	$00FA			MOVWF	STACK_10
$080B	$0877			MOVF	STACK_7, W
$080C	$07F3			ADDWF	STACK_3, F
$080D	$307E			MOVLW	126
$080E	$1C03			BTFSS	STATUS, C
$080F	$2814			GOTO	MTUN32
$0810	$02F3			SUBWF	STACK_3, F
$0811	$1803			BTFSC	STATUS, C
$0812	$285A			GOTO	JPMSETFOV32
$0813	$2817			GOTO	MOK32
$0814	$	MTUN32:
$0814	$02F3			SUBWF	STACK_3, F
$0815	$1C03			BTFSS	STATUS, C
$0816	$285D			GOTO	JPMSETFUN32
$0817	$	MOK32:
$0817	$0872			MOVF	STACK_2, W
$0818	$00F8			MOVWF	STACK_8
$0819	$0871			MOVF	STACK_1, W
$081A	$00FC			MOVWF	STACK_12
$081B	$0870			MOVF	STACK_0, W
$081C	$00FD			MOVWF	STACK_13
$081D	$17F8			BSF	STACK_8, 7
$081E	$17F6			BSF	STACK_6, 7
$081F	$1003			BCF	STATUS, C
$0820	$01F2			CLRF	STACK_2
$0821	$01F1			CLRF	STACK_1
$0822	$01F0			CLRF	STACK_0
$0823	$3018			MOVLW	24
$0824	$00A0			MOVWF	__math_tempbD
$0825	$	MLOOP32:
$0825	$1C7D			BTFSS	STACK_13, 0
$0826	$2831			GOTO	MNOADD32
$0827	$	MADD32:
$0827	$0874			MOVF	STACK_4, W
$0828	$07F0			ADDWF	STACK_0, F
$0829	$0875			MOVF	STACK_5, W
$082A	$1803			BTFSC	STATUS, C
$082B	$0F75			INCFSZ	STACK_5, W
$082C	$07F1			ADDWF	STACK_1, F
$082D	$0876			MOVF	STACK_6, W
$082E	$1803			BTFSC	STATUS, C
$082F	$0F76			INCFSZ	STACK_6, W
$0830	$07F2			ADDWF	STACK_2, F
$0831	$	MNOADD32:
$0831	$0CF2			RRF	STACK_2, F
$0832	$0CF1			RRF	STACK_1, F
$0833	$0CF0			RRF	STACK_0, F
$0834	$0CF8			RRF	STACK_8, F
$0835	$0CFC			RRF	STACK_12, F
$0836	$0CFD			RRF	STACK_13, F
$0837	$1003			BCF	STATUS, C
$0838	$0BA0			DECFSZ	__math_tempbD, F
$0839	$2825			GOTO	MLOOP32
$083A	$1BF2			BTFSC	STACK_2, 7
$083B	$2841			GOTO	MROUND32
$083C	$0DF8			RLF	STACK_8, F
$083D	$0DF0			RLF	STACK_0, F
$083E	$0DF1			RLF	STACK_1, F
$083F	$0DF2			RLF	STACK_2, F
$0840	$03F3			DECF	STACK_3, F
$0841	$	MROUND32:
$0841	$1B7B			BTFSC	STACK_11, 6
$0842	$1C70			BTFSS	STACK_0, 0
$0843	$2853			GOTO	MUL32OK
$0844	$1FF8			BTFSS	STACK_8, 7
$0845	$2853			GOTO	MUL32OK
$0846	$0AF0			INCF	STACK_0, F
$0847	$1903			BTFSC	STATUS, Z
$0848	$0AF1			INCF	STACK_1, F
$0849	$1903			BTFSC	STATUS, Z
$084A	$0AF2			INCF	STACK_2, F
$084B	$1D03			BTFSS	STATUS, Z
$084C	$2853			GOTO	MUL32OK
$084D	$0CF2			RRF	STACK_2, F
$084E	$0CF1			RRF	STACK_1, F
$084F	$0CF0			RRF	STACK_0, F
$0850	$0AF3			INCF	STACK_3, F
$0851	$1903			BTFSC	STATUS, Z
$0852	$285A			GOTO	JPMSETFOV32
$0853	$	MUL32OK:
$0853	$1FFA			BTFSS	STACK_10, 7
$0854	$13F2			BCF	STACK_2, 7
$0855	$3000			MOVLW	0x00
$0856	$285F			GOTO	MUL32EEE
$0857	$	JPMRES032:
$0857	$3001			MOVLW	0x01
$0858	$2344			CALL	_RES032
$0859	$285F			GOTO	MUL32EEE
$085A	$	JPMSETFOV32:
$085A	$3002			MOVLW	0x02
$085B	$2320			CALL	_SETFOV32
$085C	$285F			GOTO	MUL32EEE
$085D	$	JPMSETFUN32:
$085D	$3004			MOVLW	0x04
$085E	$232E			CALL	_SETFUN32
$085F	$	MUL32EEE:
$085F	$0000			NOP
$0860	$0008			RETURN
$08BD	$	_Compare_Double:
$08BD	$1303			BCF	STATUS, RP1
$08BE	$1283			BCF	STATUS, RP0
$08BF	$01FA			CLRF	STACK_10
$08C0	$0873			MOVF	STACK_3, W
$08C1	$1D03			BTFSS	STATUS, Z
$08C2	$147A			BSF	STACK_10, 0
$08C3	$0877			MOVF	STACK_7, W
$08C4	$1D03			BTFSS	STATUS, Z
$08C5	$14FA			BSF	STACK_10, 1
$08C6	$087A			MOVF	STACK_10, W
$08C7	$1903			BTFSC	STATUS, Z
$08C8	$2909			GOTO	COMPARE_EQU
$08C9	$3A03			XORLW	0x03
$08CA	$1903			BTFSC	STATUS, Z
$08CB	$28D4			GOTO	COMPARE_NOTZERO
$08CC	$187A			BTFSC	STACK_10, 0
$08CD	$28D1			GOTO	COMPARE_XNOTZERO
$08CE	$	COMPARE_YNOTZERO:
$08CE	$1FF6			BTFSS	STACK_6, 7
$08CF	$2907			GOTO	COMPARE_LT
$08D0	$2905			GOTO	COMPARE_GT
$08D1	$	COMPARE_XNOTZERO:
$08D1	$1FF2			BTFSS	STACK_2, 7
$08D2	$2905			GOTO	COMPARE_GT
$08D3	$2907			GOTO	COMPARE_LT
$08D4	$	COMPARE_NOTZERO:
$08D4	$0872			MOVF	STACK_2, W
$08D5	$3980			ANDLW	0x80
$08D6	$00FA			MOVWF	STACK_10
$08D7	$13F2			BCF	STACK_2, 7
$08D8	$0876			MOVF	STACK_6, W
$08D9	$3980			ANDLW	0x80
$08DA	$13F6			BCF	STACK_6, 7
$08DB	$067A			XORWF	STACK_10, W
$08DC	$1903			BTFSC	STATUS, Z
$08DD	$28E2			GOTO	COMPARE_TESTALL
$08DE	$087A			MOVF	STACK_10, W
$08DF	$1903			BTFSC	STATUS, Z
$08E0	$2905			GOTO	COMPARE_GT
$08E1	$2907			GOTO	COMPARE_LT
$08E2	$	COMPARE_TESTALL:
$08E2	$0877			MOVF	STACK_7, W
$08E3	$0273			SUBWF	STACK_3, W
$08E4	$1903			BTFSC	STATUS, Z
$08E5	$28E9			GOTO	COMPARE_C1
$08E6	$1C03			BTFSS	STATUS, C
$08E7	$28FD			GOTO	GT_FALSE
$08E8	$2901			GOTO	GT_TRUE
$08E9	$	COMPARE_C1:
$08E9	$0876			MOVF	STACK_6, W
$08EA	$0272			SUBWF	STACK_2, W
$08EB	$1903			BTFSC	STATUS, Z
$08EC	$28F0			GOTO	COMPARE_C2
$08ED	$1C03			BTFSS	STATUS, C
$08EE	$28FD			GOTO	GT_FALSE
$08EF	$2901			GOTO	GT_TRUE
$08F0	$	COMPARE_C2:
$08F0	$0875			MOVF	STACK_5, W
$08F1	$0271			SUBWF	STACK_1, W
$08F2	$1903			BTFSC	STATUS, Z
$08F3	$28F7			GOTO	COMPARE_C3
$08F4	$1C03			BTFSS	STATUS, C
$08F5	$28FD			GOTO	GT_FALSE
$08F6	$2901			GOTO	GT_TRUE
$08F7	$	COMPARE_C3:
$08F7	$0874			MOVF	STACK_4, W
$08F8	$0270			SUBWF	STACK_0, W
$08F9	$1903			BTFSC	STATUS, Z
$08FA	$2909			GOTO	COMPARE_EQU
$08FB	$1803			BTFSC	STATUS, C
$08FC	$2901			GOTO	GT_TRUE
$08FD	$	GT_FALSE:
$08FD	$08FA			MOVF	STACK_10, F
$08FE	$1903			BTFSC	STATUS, Z
$08FF	$2907			GOTO	COMPARE_LT
$0900	$2905			GOTO	COMPARE_GT
$0901	$	GT_TRUE:
$0901	$08FA			MOVF	STACK_10, F
$0902	$1903			BTFSC	STATUS, Z
$0903	$2905			GOTO	COMPARE_GT
$0904	$2907			GOTO	COMPARE_LT
$0905	$	COMPARE_GT:
$0905	$1403			BSF	STATUS, C
$0906	$0008			RETURN
$0907	$	COMPARE_LT:
$0907	$1003			BCF	STATUS, C
$0908	$0008			RETURN
$0909	$	COMPARE_EQU:
$0909	$1403			BSF	STATUS, C
$090A	$1503			BSF	STATUS, Z
$090B	$0008			RETURN
$090C	$0008			RETURN
$09A2	$	_Double2Byte:
$09A2	$1303			BCF	STATUS, RP1
$09A3	$1283			BCF	STATUS, RP0
$09A4	$	INT32U08:
$09A4	$01FB			CLRF	STACK_11
$09A5	$01FC			CLRF	STACK_12
$09A6	$01FA			CLRF	STACK_10
$09A7	$0873			MOVF	STACK_3, W
$09A8	$1903			BTFSC	STATUS, Z
$09A9	$29CF			GOTO	IRES008
$09AA	$13FA			BCF	STACK_10, 7
$09AB	$17F2			BSF	STACK_2, 7
$09AC	$3086			MOVLW	134
$09AD	$02F3			SUBWF	STACK_3, F
$09AE	$1BF3			BTFSC	STACK_3, 7
$09AF	$29B3			GOTO	SETEXP08
$09B0	$1903			BTFSC	STATUS, Z
$09B1	$29B3			GOTO	SETEXP08
$09B2	$29D1			GOTO	SETIOV08
$09B3	$	SETEXP08:
$09B3	$09F3			COMF	STACK_3, F
$09B4	$0AF3			INCF	STACK_3, F
$09B5	$3008			MOVLW	8
$09B6	$0273			SUBWF	STACK_3, W
$09B7	$1C03			BTFSS	STATUS, C
$09B8	$29C0			GOTO	TSHIFT3208
$09B9	$00F3			MOVWF	STACK_3
$09BA	$0DF2			RLF	STACK_2, F
$09BB	$01F2			CLRF	STACK_2
$09BC	$0873			MOVF	STACK_3, W
$09BD	$1D03			BTFSS	STATUS, Z
$09BE	$1003			BCF	STATUS, C
$09BF	$29C7			GOTO	SHIFT3208OK
$09C0	$	TSHIFT3208:
$09C0	$0873			MOVF	STACK_3, W
$09C1	$1903			BTFSC	STATUS, Z
$09C2	$29C7			GOTO	SHIFT3208OK
$09C3	$	SHIFT3208:
$09C3	$1003			BCF	STATUS, C
$09C4	$0CF2			RRF	STACK_2, F
$09C5	$0BF3			DECFSZ	STACK_3, F
$09C6	$29C3			GOTO	SHIFT3208
$09C7	$	SHIFT3208OK:
$09C7	$1B7B			BTFSC	STACK_11, 6
$09C8	$1C72			BTFSS	STACK_2, 0
$09C9	$29CF			GOTO	INT3208OK
$09CA	$1C03			BTFSS	STATUS, C
$09CB	$29CF			GOTO	INT3208OK
$09CC	$0AF2			INCF	STACK_2, F
$09CD	$1903			BTFSC	STATUS, Z
$09CE	$29D6			GOTO	D2B_JPKSETIOV3224
$09CF	$	INT3208OK:
$09CF	$	IRES008:
$09CF	$01F1			CLRF	STACK_1
$09D0	$29D9			GOTO	INT3208EOK
$09D1	$	SETIOV08:
$09D1	$147B			BSF	STACK_11, 0
$09D2	$1FFB			BTFSS	STACK_11, 7
$09D3	$29DC			GOTO	INT3208EER
$09D4	$01F1			CLRF	STACK_1
$09D5	$29DC			GOTO	INT3208EER
$09D6	$	D2B_JPKSETIOV3224:
$09D6	$3001			MOVLW	0x01
$09D7	$00FC			MOVWF	STACK_12
$09D8	$29DE			GOTO	INT3208EEE
$09D9	$	INT3208EOK:
$09D9	$3000			MOVLW	0x00
$09DA	$00FC			MOVWF	STACK_12
$09DB	$29DE			GOTO	INT3208EEE
$09DC	$	INT3208EER:
$09DC	$30FF			MOVLW	0xFF
$09DD	$00FC			MOVWF	STACK_12
$09DE	$	INT3208EEE:
$09DE	$08FC			MOVF	STACK_12, F
$09DF	$1903			BTFSC	STATUS, Z
$09E0	$29E2			GOTO	L_Double2Byte_0
$09E1	$2311			CALL	_SETIOV3224
$09E2	$	L_Double2Byte_0:
$09E2	$0872			MOVF	STACK_2, W
$09E3	$00F0			MOVWF	STACK_0
$09E4	$0008			RETURN
$0004	$	_main:
;lfr_pid_annauniv.c,125 :: 		void main()
;lfr_pid_annauniv.c,128 :: 		initport();
$0004	$158A			BSF	PCLATH, 3
$0005	$210D			CALL	GlobalInilfr_pid_annauniv
$0006	$118A			BCF	PCLATH, 3
$0007	$158A			BSF	PCLATH, 3
$0008	$2300			CALL	_initport
$0009	$118A			BCF	PCLATH, 3
;lfr_pid_annauniv.c,129 :: 		initpwm();
$000A	$158A			BSF	PCLATH, 3
$000B	$22B3			CALL	_initpwm
$000C	$118A			BCF	PCLATH, 3
;lfr_pid_annauniv.c,130 :: 		while(1)
$000D	$	L_main_8:
;lfr_pid_annauniv.c,132 :: 		indicator();
$000D	$26F7			CALL	_indicator
;lfr_pid_annauniv.c,133 :: 		CalcError();
$000E	$246C			CALL	_CalcError
;lfr_pid_annauniv.c,134 :: 		if((error == 0) && (s4==1) && ((s1+s2+s3+s5+s6+s7+s8)==0))
$000F	$01F4			CLRF	STACK_4
$0010	$01F5			CLRF	STACK_4+1
$0011	$01F6			CLRF	STACK_4+2
$0012	$01F7			CLRF	STACK_4+3
$0013	$0836			MOVF	_error, 0
$0014	$00F0			MOVWF	STACK_0
$0015	$0837			MOVF	_error+1, 0
$0016	$00F1			MOVWF	STACK_0+1
$0017	$0838			MOVF	_error+2, 0
$0018	$00F2			MOVWF	STACK_0+2
$0019	$0839			MOVF	_error+3, 0
$001A	$00F3			MOVWF	STACK_0+3
$001B	$158A			BSF	PCLATH, 3
$001C	$22DA			CALL	_equals_double
$001D	$118A			BCF	PCLATH, 3
$001E	$3001			MOVLW	1
$001F	$1D03			BTFSS	STATUS, Z
$0020	$3000			MOVLW	0
$0021	$00F0			MOVWF	STACK_0
$0022	$0870			MOVF	STACK_0, 0
$0023	$1903			BTFSC	STATUS, Z
$0024	$287C			GOTO	L_main_12
$0025	$3000			MOVLW	0
$0026	$0628			XORWF	_s4+1, 0
$0027	$1D03			BTFSS	STATUS, Z
$0028	$282B			GOTO	L_main_33
$0029	$3001			MOVLW	1
$002A	$0627			XORWF	_s4, 0
$002B	$	L_main_33:
$002B	$1D03			BTFSS	STATUS, Z
$002C	$287C			GOTO	L_main_12
$002D	$0823			MOVF	_s2, 0
$002E	$0721			ADDWF	_s1, 0
$002F	$00F0			MOVWF	STACK_0
$0030	$0822			MOVF	_s1+1, 0
$0031	$1803			BTFSC	STATUS, C
$0032	$3F01			ADDLW	1
$0033	$0724			ADDWF	_s2+1, 0
$0034	$00F1			MOVWF	STACK_0+1
$0035	$0825			MOVF	_s3, 0
$0036	$07F0			ADDWF	STACK_0, 1
$0037	$0826			MOVF	_s3+1, 0
$0038	$1803			BTFSC	STATUS, C
$0039	$3F01			ADDLW	1
$003A	$07F1			ADDWF	STACK_0+1, 1
$003B	$0829			MOVF	_s5, 0
$003C	$07F0			ADDWF	STACK_0, 1
$003D	$082A			MOVF	_s5+1, 0
$003E	$1803			BTFSC	STATUS, C
$003F	$3F01			ADDLW	1
$0040	$07F1			ADDWF	STACK_0+1, 1
$0041	$082B			MOVF	_s6, 0
$0042	$07F0			ADDWF	STACK_0, 1
$0043	$082C			MOVF	_s6+1, 0
$0044	$1803			BTFSC	STATUS, C
$0045	$3F01			ADDLW	1
$0046	$07F1			ADDWF	STACK_0+1, 1
$0047	$082D			MOVF	_s7, 0
$0048	$07F0			ADDWF	STACK_0, 1
$0049	$082E			MOVF	_s7+1, 0
$004A	$1803			BTFSC	STATUS, C
$004B	$3F01			ADDLW	1
$004C	$07F1			ADDWF	STACK_0+1, 1
$004D	$082F			MOVF	_s8, 0
$004E	$0770			ADDWF	STACK_0, 0
$004F	$00F4			MOVWF	STACK_4
$0050	$0871			MOVF	STACK_0+1, 0
$0051	$1803			BTFSC	STATUS, C
$0052	$3F01			ADDLW	1
$0053	$0730			ADDWF	_s8+1, 0
$0054	$00F5			MOVWF	STACK_4+1
$0055	$3000			MOVLW	0
$0056	$0675			XORWF	STACK_4+1, 0
$0057	$1D03			BTFSS	STATUS, Z
$0058	$285B			GOTO	L_main_34
$0059	$3000			MOVLW	0
$005A	$0674			XORWF	STACK_4, 0
$005B	$	L_main_34:
$005B	$1D03			BTFSS	STATUS, Z
$005C	$287C			GOTO	L_main_12
$005D	$	L160_ex_L_main_12:
;lfr_pid_annauniv.c,136 :: 		motor_LF();					        	    //FWD AT FULL SPEED
$005D	$158A			BSF	PCLATH, 3
$005E	$2379			CALL	_motor_LF
$005F	$118A			BCF	PCLATH, 3
;lfr_pid_annauniv.c,137 :: 		motor_RF();
$0060	$158A			BSF	PCLATH, 3
$0061	$2374			CALL	_motor_RF
$0062	$118A			BCF	PCLATH, 3
;lfr_pid_annauniv.c,138 :: 		PWM1_CHANGE_DUTY(255);
$0063	$30FF			MOVLW	255
$0064	$00E2			MOVWF	FARG_PWM1_Change_Duty+0
$0065	$158A			BSF	PCLATH, 3
$0066	$224F			CALL	_PWM1_Change_Duty
$0067	$118A			BCF	PCLATH, 3
;lfr_pid_annauniv.c,139 :: 		PWM2_CHANGE_DUTY(255);
$0068	$30FF			MOVLW	255
$0069	$00E2			MOVWF	FARG_PWM2_Change_Duty+0
$006A	$158A			BSF	PCLATH, 3
$006B	$21E5			CALL	_PWM2_Change_Duty
$006C	$118A			BCF	PCLATH, 3
;lfr_pid_annauniv.c,140 :: 		delay_ms(10);
$006D	$300D			MOVLW	13
$006E	$00FB			MOVWF	STACK_11
$006F	$30FF			MOVLW	255
$0070	$00FA			MOVWF	STACK_10
$0071	$0BFB			DECFSZ	STACK_11, F
$0072	$2874			GOTO	$+2
$0073	$2877			GOTO	$+4
$0074	$0BFA			DECFSZ	STACK_10, F
$0075	$2874			GOTO	$-1
$0076	$2871			GOTO	$-5
$0077	$30F3			MOVLW	243
$0078	$00FA			MOVWF	STACK_10
$0079	$0BFA			DECFSZ	STACK_10, F
$007A	$2879			GOTO	$-1
$007B	$0000			NOP
;lfr_pid_annauniv.c,141 :: 		}
$007C	$	L_main_12:
;lfr_pid_annauniv.c,142 :: 		if((s1+s2+s3+s4+s5+s6+s7+s8) == 0)		//ROBOT HAS OVERSHOOT
$007C	$0823			MOVF	_s2, 0
$007D	$0721			ADDWF	_s1, 0
$007E	$00F0			MOVWF	STACK_0
$007F	$0822			MOVF	_s1+1, 0
$0080	$1803			BTFSC	STATUS, C
$0081	$3F01			ADDLW	1
$0082	$0724			ADDWF	_s2+1, 0
$0083	$00F1			MOVWF	STACK_0+1
$0084	$0825			MOVF	_s3, 0
$0085	$07F0			ADDWF	STACK_0, 1
$0086	$0826			MOVF	_s3+1, 0
$0087	$1803			BTFSC	STATUS, C
$0088	$3F01			ADDLW	1
$0089	$07F1			ADDWF	STACK_0+1, 1
$008A	$0827			MOVF	_s4, 0
$008B	$07F0			ADDWF	STACK_0, 1
$008C	$0828			MOVF	_s4+1, 0
$008D	$1803			BTFSC	STATUS, C
$008E	$3F01			ADDLW	1
$008F	$07F1			ADDWF	STACK_0+1, 1
$0090	$0829			MOVF	_s5, 0
$0091	$07F0			ADDWF	STACK_0, 1
$0092	$082A			MOVF	_s5+1, 0
$0093	$1803			BTFSC	STATUS, C
$0094	$3F01			ADDLW	1
$0095	$07F1			ADDWF	STACK_0+1, 1
$0096	$082B			MOVF	_s6, 0
$0097	$07F0			ADDWF	STACK_0, 1
$0098	$082C			MOVF	_s6+1, 0
$0099	$1803			BTFSC	STATUS, C
$009A	$3F01			ADDLW	1
$009B	$07F1			ADDWF	STACK_0+1, 1
$009C	$082D			MOVF	_s7, 0
$009D	$07F0			ADDWF	STACK_0, 1
$009E	$082E			MOVF	_s7+1, 0
$009F	$1803			BTFSC	STATUS, C
$00A0	$3F01			ADDLW	1
$00A1	$07F1			ADDWF	STACK_0+1, 1
$00A2	$082F			MOVF	_s8, 0
$00A3	$0770			ADDWF	STACK_0, 0
$00A4	$00F4			MOVWF	STACK_4
$00A5	$0871			MOVF	STACK_0+1, 0
$00A6	$1803			BTFSC	STATUS, C
$00A7	$3F01			ADDLW	1
$00A8	$0730			ADDWF	_s8+1, 0
$00A9	$00F5			MOVWF	STACK_4+1
$00AA	$3000			MOVLW	0
$00AB	$0675			XORWF	STACK_4+1, 0
$00AC	$1D03			BTFSS	STATUS, Z
$00AD	$28B0			GOTO	L_main_35
$00AE	$3000			MOVLW	0
$00AF	$0674			XORWF	STACK_4, 0
$00B0	$	L_main_35:
$00B0	$1D03			BTFSS	STATUS, Z
$00B1	$28F9			GOTO	L_main_13
;lfr_pid_annauniv.c,144 :: 		if(lastreading == 'r')				  //CHECKS IF THE LAST SENSOR ACTIVATED WAS RIGHT
$00B2	$0831			MOVF	_lastreading, 0
$00B3	$3A72			XORLW	114
$00B4	$1D03			BTFSS	STATUS, Z
$00B5	$28D6			GOTO	L_main_14
;lfr_pid_annauniv.c,146 :: 		motor_RB();						        //TURN RIGHT AT FULL SPEED
$00B6	$158A			BSF	PCLATH, 3
$00B7	$237E			CALL	_motor_RB
$00B8	$118A			BCF	PCLATH, 3
;lfr_pid_annauniv.c,147 :: 		motor_LF();
$00B9	$158A			BSF	PCLATH, 3
$00BA	$2379			CALL	_motor_LF
$00BB	$118A			BCF	PCLATH, 3
;lfr_pid_annauniv.c,148 :: 		PWM1_CHANGE_DUTY(255);
$00BC	$30FF			MOVLW	255
$00BD	$00E2			MOVWF	FARG_PWM1_Change_Duty+0
$00BE	$158A			BSF	PCLATH, 3
$00BF	$224F			CALL	_PWM1_Change_Duty
$00C0	$118A			BCF	PCLATH, 3
;lfr_pid_annauniv.c,149 :: 		PWM2_CHANGE_DUTY(255);
$00C1	$30FF			MOVLW	255
$00C2	$00E2			MOVWF	FARG_PWM2_Change_Duty+0
$00C3	$158A			BSF	PCLATH, 3
$00C4	$21E5			CALL	_PWM2_Change_Duty
$00C5	$118A			BCF	PCLATH, 3
;lfr_pid_annauniv.c,150 :: 		delay_ms(10);
$00C6	$300D			MOVLW	13
$00C7	$00FB			MOVWF	STACK_11
$00C8	$30FF			MOVLW	255
$00C9	$00FA			MOVWF	STACK_10
$00CA	$0BFB			DECFSZ	STACK_11, F
$00CB	$28CD			GOTO	$+2
$00CC	$28D0			GOTO	$+4
$00CD	$0BFA			DECFSZ	STACK_10, F
$00CE	$28CD			GOTO	$-1
$00CF	$28CA			GOTO	$-5
$00D0	$30F3			MOVLW	243
$00D1	$00FA			MOVWF	STACK_10
$00D2	$0BFA			DECFSZ	STACK_10, F
$00D3	$28D2			GOTO	$-1
$00D4	$0000			NOP
;lfr_pid_annauniv.c,151 :: 		}
$00D5	$28F9			GOTO	L_main_15
$00D6	$	L_main_14:
;lfr_pid_annauniv.c,152 :: 		else if(lastreading == 'l')			  //CHECKS IF THE LAST SENSOR ACTIVATED WAS LEFT
$00D6	$0831			MOVF	_lastreading, 0
$00D7	$3A6C			XORLW	108
$00D8	$1D03			BTFSS	STATUS, Z
$00D9	$28F9			GOTO	L_main_16
;lfr_pid_annauniv.c,154 :: 		motor_LB();					        	//TURN LEFT AT FULL SPEED
$00DA	$158A			BSF	PCLATH, 3
$00DB	$236F			CALL	_motor_LB
$00DC	$118A			BCF	PCLATH, 3
;lfr_pid_annauniv.c,155 :: 		motor_RF();
$00DD	$158A			BSF	PCLATH, 3
$00DE	$2374			CALL	_motor_RF
$00DF	$118A			BCF	PCLATH, 3
;lfr_pid_annauniv.c,156 :: 		PWM1_CHANGE_DUTY(255);
$00E0	$30FF			MOVLW	255
$00E1	$00E2			MOVWF	FARG_PWM1_Change_Duty+0
$00E2	$158A			BSF	PCLATH, 3
$00E3	$224F			CALL	_PWM1_Change_Duty
$00E4	$118A			BCF	PCLATH, 3
;lfr_pid_annauniv.c,157 :: 		PWM2_CHANGE_DUTY(255);
$00E5	$30FF			MOVLW	255
$00E6	$00E2			MOVWF	FARG_PWM2_Change_Duty+0
$00E7	$158A			BSF	PCLATH, 3
$00E8	$21E5			CALL	_PWM2_Change_Duty
$00E9	$118A			BCF	PCLATH, 3
;lfr_pid_annauniv.c,158 :: 		delay_ms(10);
$00EA	$300D			MOVLW	13
$00EB	$00FB			MOVWF	STACK_11
$00EC	$30FF			MOVLW	255
$00ED	$00FA			MOVWF	STACK_10
$00EE	$0BFB			DECFSZ	STACK_11, F
$00EF	$28F1			GOTO	$+2
$00F0	$28F4			GOTO	$+4
$00F1	$0BFA			DECFSZ	STACK_10, F
$00F2	$28F1			GOTO	$-1
$00F3	$28EE			GOTO	$-5
$00F4	$30F3			MOVLW	243
$00F5	$00FA			MOVWF	STACK_10
$00F6	$0BFA			DECFSZ	STACK_10, F
$00F7	$28F6			GOTO	$-1
$00F8	$0000			NOP
;lfr_pid_annauniv.c,159 :: 		}
$00F9	$	L_main_16:
$00F9	$	L_main_15:
;lfr_pid_annauniv.c,160 :: 		}
$00F9	$	L_main_13:
;lfr_pid_annauniv.c,161 :: 		if(PORTB.F7==0)                         // TSOP FRONT ACTIVE
$00F9	$3000			MOVLW	0
$00FA	$1B86			BTFSC	PORTB, 7
$00FB	$3001			MOVLW	1
$00FC	$00F4			MOVWF	STACK_4
$00FD	$0874			MOVF	STACK_4, 0
$00FE	$3A00			XORLW	0
$00FF	$1D03			BTFSS	STATUS, Z
$0100	$2AB6			GOTO	L_main_17
;lfr_pid_annauniv.c,163 :: 		PROPORTIONAL = error * kp;
$0101	$083B			MOVF	_Kp, 0
$0102	$00F0			MOVWF	STACK_0
$0103	$158A			BSF	PCLATH, 3
$0104	$22F0			CALL	_byte2double
$0105	$118A			BCF	PCLATH, 3
$0106	$0836			MOVF	_error, 0
$0107	$00F4			MOVWF	STACK_4
$0108	$0837			MOVF	_error+1, 0
$0109	$00F5			MOVWF	STACK_4+1
$010A	$0838			MOVF	_error+2, 0
$010B	$00F6			MOVWF	STACK_4+2
$010C	$0839			MOVF	_error+3, 0
$010D	$00F7			MOVWF	STACK_4+3
$010E	$158A			BSF	PCLATH, 3
$010F	$2000			CALL	_mul_32x32_fp
$0110	$118A			BCF	PCLATH, 3
$0111	$0870			MOVF	STACK_0, 0
$0112	$00DE			MOVWF	FLOC_main+8
$0113	$0871			MOVF	STACK_0+1, 0
$0114	$00DF			MOVWF	FLOC_main+9
$0115	$0872			MOVF	STACK_0+2, 0
$0116	$00E0			MOVWF	FLOC_main+10
$0117	$0873			MOVF	STACK_0+3, 0
$0118	$00E1			MOVWF	FLOC_main+11
$0119	$085E			MOVF	FLOC_main+8, 0
$011A	$00C6			MOVWF	_PROPORTIONAL
$011B	$085F			MOVF	FLOC_main+9, 0
$011C	$00C7			MOVWF	_PROPORTIONAL+1
$011D	$0860			MOVF	FLOC_main+10, 0
$011E	$00C8			MOVWF	_PROPORTIONAL+2
$011F	$0861			MOVF	FLOC_main+11, 0
$0120	$00C9			MOVWF	_PROPORTIONAL+3
;lfr_pid_annauniv.c,164 :: 		INTEGRAL += error ;
$0121	$084A			MOVF	_INTEGRAL, 0
$0122	$00F0			MOVWF	STACK_0
$0123	$084B			MOVF	_INTEGRAL+1, 0
$0124	$00F1			MOVWF	STACK_0+1
$0125	$084C			MOVF	_INTEGRAL+2, 0
$0126	$00F2			MOVWF	STACK_0+2
$0127	$084D			MOVF	_INTEGRAL+3, 0
$0128	$00F3			MOVWF	STACK_0+3
$0129	$0836			MOVF	_error, 0
$012A	$00F4			MOVWF	STACK_4
$012B	$0837			MOVF	_error+1, 0
$012C	$00F5			MOVWF	STACK_4+1
$012D	$0838			MOVF	_error+2, 0
$012E	$00F6			MOVWF	STACK_4+2
$012F	$0839			MOVF	_error+3, 0
$0130	$00F7			MOVWF	STACK_4+3
$0131	$25AB			CALL	_add_32x32_fp
$0132	$0870			MOVF	STACK_0, 0
$0133	$00D6			MOVWF	FLOC_main+0
$0134	$0871			MOVF	STACK_0+1, 0
$0135	$00D7			MOVWF	FLOC_main+1
$0136	$0872			MOVF	STACK_0+2, 0
$0137	$00D8			MOVWF	FLOC_main+2
$0138	$0873			MOVF	STACK_0+3, 0
$0139	$00D9			MOVWF	FLOC_main+3
$013A	$0856			MOVF	FLOC_main+0, 0
$013B	$00CA			MOVWF	_INTEGRAL
$013C	$0857			MOVF	FLOC_main+1, 0
$013D	$00CB			MOVWF	_INTEGRAL+1
$013E	$0858			MOVF	FLOC_main+2, 0
$013F	$00CC			MOVWF	_INTEGRAL+2
$0140	$0859			MOVF	FLOC_main+3, 0
$0141	$00CD			MOVWF	_INTEGRAL+3
;lfr_pid_annauniv.c,165 :: 		INTEGRAL *= ki;
$0142	$083C			MOVF	_Ki, 0
$0143	$00F0			MOVWF	STACK_0
$0144	$158A			BSF	PCLATH, 3
$0145	$22F0			CALL	_byte2double
$0146	$118A			BCF	PCLATH, 3
$0147	$0856			MOVF	FLOC_main+0, 0
$0148	$00F4			MOVWF	STACK_4
$0149	$0857			MOVF	FLOC_main+1, 0
$014A	$00F5			MOVWF	STACK_4+1
$014B	$0858			MOVF	FLOC_main+2, 0
$014C	$00F6			MOVWF	STACK_4+2
$014D	$0859			MOVF	FLOC_main+3, 0
$014E	$00F7			MOVWF	STACK_4+3
$014F	$158A			BSF	PCLATH, 3
$0150	$2000			CALL	_mul_32x32_fp
$0151	$118A			BCF	PCLATH, 3
$0152	$0870			MOVF	STACK_0, 0
$0153	$00D6			MOVWF	FLOC_main+0
$0154	$0871			MOVF	STACK_0+1, 0
$0155	$00D7			MOVWF	FLOC_main+1
$0156	$0872			MOVF	STACK_0+2, 0
$0157	$00D8			MOVWF	FLOC_main+2
$0158	$0873			MOVF	STACK_0+3, 0
$0159	$00D9			MOVWF	FLOC_main+3
$015A	$0856			MOVF	FLOC_main+0, 0
$015B	$00CA			MOVWF	_INTEGRAL
$015C	$0857			MOVF	FLOC_main+1, 0
$015D	$00CB			MOVWF	_INTEGRAL+1
$015E	$0858			MOVF	FLOC_main+2, 0
$015F	$00CC			MOVWF	_INTEGRAL+2
$0160	$0859			MOVF	FLOC_main+3, 0
$0161	$00CD			MOVWF	_INTEGRAL+3
;lfr_pid_annauniv.c,166 :: 		DERIVATIVE = (error - perror);
$0162	$0832			MOVF	_perror, 0
$0163	$00F4			MOVWF	STACK_4
$0164	$0833			MOVF	_perror+1, 0
$0165	$00F5			MOVWF	STACK_4+1
$0166	$0834			MOVF	_perror+2, 0
$0167	$00F6			MOVWF	STACK_4+2
$0168	$0835			MOVF	_perror+3, 0
$0169	$00F7			MOVWF	STACK_4+3
$016A	$0836			MOVF	_error, 0
$016B	$00F0			MOVWF	STACK_0
$016C	$0837			MOVF	_error+1, 0
$016D	$00F1			MOVWF	STACK_0+1
$016E	$0838			MOVF	_error+2, 0
$016F	$00F2			MOVWF	STACK_0+2
$0170	$0839			MOVF	_error+3, 0
$0171	$00F3			MOVWF	STACK_0+3
$0172	$158A			BSF	PCLATH, 3
$0173	$233C			CALL	_sub_32x32_fp
$0174	$118A			BCF	PCLATH, 3
$0175	$0870			MOVF	STACK_0, 0
$0176	$00DA			MOVWF	FLOC_main+4
$0177	$0871			MOVF	STACK_0+1, 0
$0178	$00DB			MOVWF	FLOC_main+5
$0179	$0872			MOVF	STACK_0+2, 0
$017A	$00DC			MOVWF	FLOC_main+6
$017B	$0873			MOVF	STACK_0+3, 0
$017C	$00DD			MOVWF	FLOC_main+7
$017D	$085A			MOVF	FLOC_main+4, 0
$017E	$00CE			MOVWF	_DERIVATIVE
$017F	$085B			MOVF	FLOC_main+5, 0
$0180	$00CF			MOVWF	_DERIVATIVE+1
$0181	$085C			MOVF	FLOC_main+6, 0
$0182	$00D0			MOVWF	_DERIVATIVE+2
$0183	$085D			MOVF	FLOC_main+7, 0
$0184	$00D1			MOVWF	_DERIVATIVE+3
;lfr_pid_annauniv.c,167 :: 		correction = ( (PROPORTIONAL) + (INTEGRAL) + (DERIVATIVE*kd));
$0185	$085E			MOVF	FLOC_main+8, 0
$0186	$00F0			MOVWF	STACK_0
$0187	$085F			MOVF	FLOC_main+9, 0
$0188	$00F1			MOVWF	STACK_0+1
$0189	$0860			MOVF	FLOC_main+10, 0
$018A	$00F2			MOVWF	STACK_0+2
$018B	$0861			MOVF	FLOC_main+11, 0
$018C	$00F3			MOVWF	STACK_0+3
$018D	$0856			MOVF	FLOC_main+0, 0
$018E	$00F4			MOVWF	STACK_4
$018F	$0857			MOVF	FLOC_main+1, 0
$0190	$00F5			MOVWF	STACK_4+1
$0191	$0858			MOVF	FLOC_main+2, 0
$0192	$00F6			MOVWF	STACK_4+2
$0193	$0859			MOVF	FLOC_main+3, 0
$0194	$00F7			MOVWF	STACK_4+3
$0195	$25AB			CALL	_add_32x32_fp
$0196	$0870			MOVF	STACK_0, 0
$0197	$00D6			MOVWF	FLOC_main+0
$0198	$0871			MOVF	STACK_0+1, 0
$0199	$00D7			MOVWF	FLOC_main+1
$019A	$0872			MOVF	STACK_0+2, 0
$019B	$00D8			MOVWF	FLOC_main+2
$019C	$0873			MOVF	STACK_0+3, 0
$019D	$00D9			MOVWF	FLOC_main+3
$019E	$083D			MOVF	_Kd, 0
$019F	$00F0			MOVWF	STACK_0
$01A0	$158A			BSF	PCLATH, 3
$01A1	$22F0			CALL	_byte2double
$01A2	$118A			BCF	PCLATH, 3
$01A3	$085A			MOVF	FLOC_main+4, 0
$01A4	$00F4			MOVWF	STACK_4
$01A5	$085B			MOVF	FLOC_main+5, 0
$01A6	$00F5			MOVWF	STACK_4+1
$01A7	$085C			MOVF	FLOC_main+6, 0
$01A8	$00F6			MOVWF	STACK_4+2
$01A9	$085D			MOVF	FLOC_main+7, 0
$01AA	$00F7			MOVWF	STACK_4+3
$01AB	$158A			BSF	PCLATH, 3
$01AC	$2000			CALL	_mul_32x32_fp
$01AD	$118A			BCF	PCLATH, 3
$01AE	$0856			MOVF	FLOC_main+0, 0
$01AF	$00F4			MOVWF	STACK_4
$01B0	$0857			MOVF	FLOC_main+1, 0
$01B1	$00F5			MOVWF	STACK_4+1
$01B2	$0858			MOVF	FLOC_main+2, 0
$01B3	$00F6			MOVWF	STACK_4+2
$01B4	$0859			MOVF	FLOC_main+3, 0
$01B5	$00F7			MOVWF	STACK_4+3
$01B6	$25AB			CALL	_add_32x32_fp
$01B7	$0870			MOVF	STACK_0, 0
$01B8	$00DA			MOVWF	FLOC_main+4
$01B9	$0871			MOVF	STACK_0+1, 0
$01BA	$00DB			MOVWF	FLOC_main+5
$01BB	$0872			MOVF	STACK_0+2, 0
$01BC	$00DC			MOVWF	FLOC_main+6
$01BD	$0873			MOVF	STACK_0+3, 0
$01BE	$00DD			MOVWF	FLOC_main+7
$01BF	$085A			MOVF	FLOC_main+4, 0
$01C0	$00D2			MOVWF	_correction
$01C1	$085B			MOVF	FLOC_main+5, 0
$01C2	$00D3			MOVWF	_correction+1
$01C3	$085C			MOVF	FLOC_main+6, 0
$01C4	$00D4			MOVWF	_correction+2
$01C5	$085D			MOVF	FLOC_main+7, 0
$01C6	$00D5			MOVWF	_correction+3
;lfr_pid_annauniv.c,168 :: 		rightpulse =  basespeed + correction;
$01C7	$083A			MOVF	_basespeed, 0
$01C8	$00F0			MOVWF	STACK_0
$01C9	$158A			BSF	PCLATH, 3
$01CA	$22F0			CALL	_byte2double
$01CB	$118A			BCF	PCLATH, 3
$01CC	$0870			MOVF	STACK_0, 0
$01CD	$00D6			MOVWF	FLOC_main+0
$01CE	$0871			MOVF	STACK_0+1, 0
$01CF	$00D7			MOVWF	FLOC_main+1
$01D0	$0872			MOVF	STACK_0+2, 0
$01D1	$00D8			MOVWF	FLOC_main+2
$01D2	$0873			MOVF	STACK_0+3, 0
$01D3	$00D9			MOVWF	FLOC_main+3
$01D4	$0856			MOVF	FLOC_main+0, 0
$01D5	$00F0			MOVWF	STACK_0
$01D6	$0857			MOVF	FLOC_main+1, 0
$01D7	$00F1			MOVWF	STACK_0+1
$01D8	$0858			MOVF	FLOC_main+2, 0
$01D9	$00F2			MOVWF	STACK_0+2
$01DA	$0859			MOVF	FLOC_main+3, 0
$01DB	$00F3			MOVWF	STACK_0+3
$01DC	$085A			MOVF	FLOC_main+4, 0
$01DD	$00F4			MOVWF	STACK_4
$01DE	$085B			MOVF	FLOC_main+5, 0
$01DF	$00F5			MOVWF	STACK_4+1
$01E0	$085C			MOVF	FLOC_main+6, 0
$01E1	$00F6			MOVWF	STACK_4+2
$01E2	$085D			MOVF	FLOC_main+7, 0
$01E3	$00F7			MOVWF	STACK_4+3
$01E4	$25AB			CALL	_add_32x32_fp
$01E5	$0870			MOVF	STACK_0, 0
$01E6	$00BE			MOVWF	_rightpulse
$01E7	$0871			MOVF	STACK_0+1, 0
$01E8	$00BF			MOVWF	_rightpulse+1
$01E9	$0872			MOVF	STACK_0+2, 0
$01EA	$00C0			MOVWF	_rightpulse+2
$01EB	$0873			MOVF	STACK_0+3, 0
$01EC	$00C1			MOVWF	_rightpulse+3
;lfr_pid_annauniv.c,169 :: 		leftpulse = basespeed - correction;
$01ED	$085A			MOVF	FLOC_main+4, 0
$01EE	$00F4			MOVWF	STACK_4
$01EF	$085B			MOVF	FLOC_main+5, 0
$01F0	$00F5			MOVWF	STACK_4+1
$01F1	$085C			MOVF	FLOC_main+6, 0
$01F2	$00F6			MOVWF	STACK_4+2
$01F3	$085D			MOVF	FLOC_main+7, 0
$01F4	$00F7			MOVWF	STACK_4+3
$01F5	$0856			MOVF	FLOC_main+0, 0
$01F6	$00F0			MOVWF	STACK_0
$01F7	$0857			MOVF	FLOC_main+1, 0
$01F8	$00F1			MOVWF	STACK_0+1
$01F9	$0858			MOVF	FLOC_main+2, 0
$01FA	$00F2			MOVWF	STACK_0+2
$01FB	$0859			MOVF	FLOC_main+3, 0
$01FC	$00F3			MOVWF	STACK_0+3
$01FD	$158A			BSF	PCLATH, 3
$01FE	$233C			CALL	_sub_32x32_fp
$01FF	$118A			BCF	PCLATH, 3
$0200	$0870			MOVF	STACK_0, 0
$0201	$00C2			MOVWF	_leftpulse
$0202	$0871			MOVF	STACK_0+1, 0
$0203	$00C3			MOVWF	_leftpulse+1
$0204	$0872			MOVF	STACK_0+2, 0
$0205	$00C4			MOVWF	_leftpulse+2
$0206	$0873			MOVF	STACK_0+3, 0
$0207	$00C5			MOVWF	_leftpulse+3
;lfr_pid_annauniv.c,170 :: 		motor_LB();
$0208	$158A			BSF	PCLATH, 3
$0209	$236F			CALL	_motor_LB
$020A	$118A			BCF	PCLATH, 3
;lfr_pid_annauniv.c,171 :: 		motor_RB();
$020B	$158A			BSF	PCLATH, 3
$020C	$237E			CALL	_motor_RB
$020D	$118A			BCF	PCLATH, 3
;lfr_pid_annauniv.c,173 :: 		if(leftpulse > 255)                 //LEFT CORRECTION EXCEED
$020E	$0842			MOVF	_leftpulse, 0
$020F	$00F4			MOVWF	STACK_4
$0210	$0843			MOVF	_leftpulse+1, 0
$0211	$00F5			MOVWF	STACK_4+1
$0212	$0844			MOVF	_leftpulse+2, 0
$0213	$00F6			MOVWF	STACK_4+2
$0214	$0845			MOVF	_leftpulse+3, 0
$0215	$00F7			MOVWF	STACK_4+3
$0216	$3000			MOVLW	0
$0217	$00F0			MOVWF	STACK_0
$0218	$3000			MOVLW	0
$0219	$00F1			MOVWF	STACK_0+1
$021A	$307F			MOVLW	127
$021B	$00F2			MOVWF	STACK_0+2
$021C	$3086			MOVLW	134
$021D	$00F3			MOVWF	STACK_0+3
$021E	$158A			BSF	PCLATH, 3
$021F	$20BD			CALL	_compare_double
$0220	$118A			BCF	PCLATH, 3
$0221	$3001			MOVLW	1
$0222	$1803			BTFSC	STATUS, C
$0223	$3000			MOVLW	0
$0224	$00F0			MOVWF	STACK_0
$0225	$0870			MOVF	STACK_0, 0
$0226	$1903			BTFSC	STATUS, Z
$0227	$2A30			GOTO	L_main_18
;lfr_pid_annauniv.c,174 :: 		leftpulse = 255;
$0228	$3000			MOVLW	0
$0229	$00C2			MOVWF	_leftpulse
$022A	$3000			MOVLW	0
$022B	$00C3			MOVWF	_leftpulse+1
$022C	$307F			MOVLW	127
$022D	$00C4			MOVWF	_leftpulse+2
$022E	$3086			MOVLW	134
$022F	$00C5			MOVWF	_leftpulse+3
$0230	$	L_main_18:
;lfr_pid_annauniv.c,176 :: 		if(rightpulse > 255)                //RIGHT CORRECTION EXCEED
$0230	$083E			MOVF	_rightpulse, 0
$0231	$00F4			MOVWF	STACK_4
$0232	$083F			MOVF	_rightpulse+1, 0
$0233	$00F5			MOVWF	STACK_4+1
$0234	$0840			MOVF	_rightpulse+2, 0
$0235	$00F6			MOVWF	STACK_4+2
$0236	$0841			MOVF	_rightpulse+3, 0
$0237	$00F7			MOVWF	STACK_4+3
$0238	$3000			MOVLW	0
$0239	$00F0			MOVWF	STACK_0
$023A	$3000			MOVLW	0
$023B	$00F1			MOVWF	STACK_0+1
$023C	$307F			MOVLW	127
$023D	$00F2			MOVWF	STACK_0+2
$023E	$3086			MOVLW	134
$023F	$00F3			MOVWF	STACK_0+3
$0240	$158A			BSF	PCLATH, 3
$0241	$20BD			CALL	_compare_double
$0242	$118A			BCF	PCLATH, 3
$0243	$3001			MOVLW	1
$0244	$1803			BTFSC	STATUS, C
$0245	$3000			MOVLW	0
$0246	$00F0			MOVWF	STACK_0
$0247	$0870			MOVF	STACK_0, 0
$0248	$1903			BTFSC	STATUS, Z
$0249	$2A52			GOTO	L_main_19
;lfr_pid_annauniv.c,177 :: 		rightpulse = 255;
$024A	$3000			MOVLW	0
$024B	$00BE			MOVWF	_rightpulse
$024C	$3000			MOVLW	0
$024D	$00BF			MOVWF	_rightpulse+1
$024E	$307F			MOVLW	127
$024F	$00C0			MOVWF	_rightpulse+2
$0250	$3086			MOVLW	134
$0251	$00C1			MOVWF	_rightpulse+3
$0252	$	L_main_19:
;lfr_pid_annauniv.c,179 :: 		if(leftpulse < 0)                   //LEFT CORRECTION EXCEED
$0252	$01F4			CLRF	STACK_4
$0253	$01F5			CLRF	STACK_4+1
$0254	$01F6			CLRF	STACK_4+2
$0255	$01F7			CLRF	STACK_4+3
$0256	$0842			MOVF	_leftpulse, 0
$0257	$00F0			MOVWF	STACK_0
$0258	$0843			MOVF	_leftpulse+1, 0
$0259	$00F1			MOVWF	STACK_0+1
$025A	$0844			MOVF	_leftpulse+2, 0
$025B	$00F2			MOVWF	STACK_0+2
$025C	$0845			MOVF	_leftpulse+3, 0
$025D	$00F3			MOVWF	STACK_0+3
$025E	$158A			BSF	PCLATH, 3
$025F	$20BD			CALL	_compare_double
$0260	$118A			BCF	PCLATH, 3
$0261	$3001			MOVLW	1
$0262	$1803			BTFSC	STATUS, C
$0263	$3000			MOVLW	0
$0264	$00F0			MOVWF	STACK_0
$0265	$0870			MOVF	STACK_0, 0
$0266	$1903			BTFSC	STATUS, Z
$0267	$2A6C			GOTO	L_main_20
;lfr_pid_annauniv.c,180 :: 		leftpulse = 0;
$0268	$01C2			CLRF	_leftpulse
$0269	$01C3			CLRF	_leftpulse+1
$026A	$01C4			CLRF	_leftpulse+2
$026B	$01C5			CLRF	_leftpulse+3
$026C	$	L_main_20:
;lfr_pid_annauniv.c,182 :: 		if(rightpulse < 0)                  //RIGHT CORRECTION EXCEED
$026C	$01F4			CLRF	STACK_4
$026D	$01F5			CLRF	STACK_4+1
$026E	$01F6			CLRF	STACK_4+2
$026F	$01F7			CLRF	STACK_4+3
$0270	$083E			MOVF	_rightpulse, 0
$0271	$00F0			MOVWF	STACK_0
$0272	$083F			MOVF	_rightpulse+1, 0
$0273	$00F1			MOVWF	STACK_0+1
$0274	$0840			MOVF	_rightpulse+2, 0
$0275	$00F2			MOVWF	STACK_0+2
$0276	$0841			MOVF	_rightpulse+3, 0
$0277	$00F3			MOVWF	STACK_0+3
$0278	$158A			BSF	PCLATH, 3
$0279	$20BD			CALL	_compare_double
$027A	$118A			BCF	PCLATH, 3
$027B	$3001			MOVLW	1
$027C	$1803			BTFSC	STATUS, C
$027D	$3000			MOVLW	0
$027E	$00F0			MOVWF	STACK_0
$027F	$0870			MOVF	STACK_0, 0
$0280	$1903			BTFSC	STATUS, Z
$0281	$2A86			GOTO	L_main_21
;lfr_pid_annauniv.c,183 :: 		rightpulse = 0;
$0282	$01BE			CLRF	_rightpulse
$0283	$01BF			CLRF	_rightpulse+1
$0284	$01C0			CLRF	_rightpulse+2
$0285	$01C1			CLRF	_rightpulse+3
$0286	$	L_main_21:
;lfr_pid_annauniv.c,185 :: 		PWM1_CHANGE_DUTY(leftpulse);
$0286	$0842			MOVF	_leftpulse, 0
$0287	$00F0			MOVWF	STACK_0
$0288	$0843			MOVF	_leftpulse+1, 0
$0289	$00F1			MOVWF	STACK_0+1
$028A	$0844			MOVF	_leftpulse+2, 0
$028B	$00F2			MOVWF	STACK_0+2
$028C	$0845			MOVF	_leftpulse+3, 0
$028D	$00F3			MOVWF	STACK_0+3
$028E	$158A			BSF	PCLATH, 3
$028F	$21A2			CALL	_double2byte
$0290	$118A			BCF	PCLATH, 3
$0291	$0870			MOVF	STACK_0, 0
$0292	$00E2			MOVWF	FARG_PWM1_Change_Duty+0
$0293	$158A			BSF	PCLATH, 3
$0294	$224F			CALL	_PWM1_Change_Duty
$0295	$118A			BCF	PCLATH, 3
;lfr_pid_annauniv.c,186 :: 		PWM2_CHANGE_DUTY(rightpulse);
$0296	$083E			MOVF	_rightpulse, 0
$0297	$00F0			MOVWF	STACK_0
$0298	$083F			MOVF	_rightpulse+1, 0
$0299	$00F1			MOVWF	STACK_0+1
$029A	$0840			MOVF	_rightpulse+2, 0
$029B	$00F2			MOVWF	STACK_0+2
$029C	$0841			MOVF	_rightpulse+3, 0
$029D	$00F3			MOVWF	STACK_0+3
$029E	$158A			BSF	PCLATH, 3
$029F	$21A2			CALL	_double2byte
$02A0	$118A			BCF	PCLATH, 3
$02A1	$0870			MOVF	STACK_0, 0
$02A2	$00E2			MOVWF	FARG_PWM2_Change_Duty+0
$02A3	$158A			BSF	PCLATH, 3
$02A4	$21E5			CALL	_PWM2_Change_Duty
$02A5	$118A			BCF	PCLATH, 3
;lfr_pid_annauniv.c,187 :: 		delay_ms(10);
$02A6	$300D			MOVLW	13
$02A7	$00FB			MOVWF	STACK_11
$02A8	$30FF			MOVLW	255
$02A9	$00FA			MOVWF	STACK_10
$02AA	$0BFB			DECFSZ	STACK_11, F
$02AB	$2AAD			GOTO	$+2
$02AC	$2AB0			GOTO	$+4
$02AD	$0BFA			DECFSZ	STACK_10, F
$02AE	$2AAD			GOTO	$-1
$02AF	$2AAA			GOTO	$-5
$02B0	$30F3			MOVLW	243
$02B1	$00FA			MOVWF	STACK_10
$02B2	$0BFA			DECFSZ	STACK_10, F
$02B3	$2AB2			GOTO	$-1
$02B4	$0000			NOP
;lfr_pid_annauniv.c,188 :: 		}
$02B5	$2C5B			GOTO	L_main_22
$02B6	$	L_main_17:
;lfr_pid_annauniv.c,193 :: 		PROPORTIONAL = error * kp;
$02B6	$083B			MOVF	_Kp, 0
$02B7	$00F0			MOVWF	STACK_0
$02B8	$158A			BSF	PCLATH, 3
$02B9	$22F0			CALL	_byte2double
$02BA	$118A			BCF	PCLATH, 3
$02BB	$0836			MOVF	_error, 0
$02BC	$00F4			MOVWF	STACK_4
$02BD	$0837			MOVF	_error+1, 0
$02BE	$00F5			MOVWF	STACK_4+1
$02BF	$0838			MOVF	_error+2, 0
$02C0	$00F6			MOVWF	STACK_4+2
$02C1	$0839			MOVF	_error+3, 0
$02C2	$00F7			MOVWF	STACK_4+3
$02C3	$158A			BSF	PCLATH, 3
$02C4	$2000			CALL	_mul_32x32_fp
$02C5	$118A			BCF	PCLATH, 3
$02C6	$0870			MOVF	STACK_0, 0
$02C7	$00DE			MOVWF	FLOC_main+8
$02C8	$0871			MOVF	STACK_0+1, 0
$02C9	$00DF			MOVWF	FLOC_main+9
$02CA	$0872			MOVF	STACK_0+2, 0
$02CB	$00E0			MOVWF	FLOC_main+10
$02CC	$0873			MOVF	STACK_0+3, 0
$02CD	$00E1			MOVWF	FLOC_main+11
$02CE	$085E			MOVF	FLOC_main+8, 0
$02CF	$00C6			MOVWF	_PROPORTIONAL
$02D0	$085F			MOVF	FLOC_main+9, 0
$02D1	$00C7			MOVWF	_PROPORTIONAL+1
$02D2	$0860			MOVF	FLOC_main+10, 0
$02D3	$00C8			MOVWF	_PROPORTIONAL+2
$02D4	$0861			MOVF	FLOC_main+11, 0
$02D5	$00C9			MOVWF	_PROPORTIONAL+3
;lfr_pid_annauniv.c,194 :: 		INTEGRAL += error ;
$02D6	$084A			MOVF	_INTEGRAL, 0
$02D7	$00F0			MOVWF	STACK_0
$02D8	$084B			MOVF	_INTEGRAL+1, 0
$02D9	$00F1			MOVWF	STACK_0+1
$02DA	$084C			MOVF	_INTEGRAL+2, 0
$02DB	$00F2			MOVWF	STACK_0+2
$02DC	$084D			MOVF	_INTEGRAL+3, 0
$02DD	$00F3			MOVWF	STACK_0+3
$02DE	$0836			MOVF	_error, 0
$02DF	$00F4			MOVWF	STACK_4
$02E0	$0837			MOVF	_error+1, 0
$02E1	$00F5			MOVWF	STACK_4+1
$02E2	$0838			MOVF	_error+2, 0
$02E3	$00F6			MOVWF	STACK_4+2
$02E4	$0839			MOVF	_error+3, 0
$02E5	$00F7			MOVWF	STACK_4+3
$02E6	$25AB			CALL	_add_32x32_fp
$02E7	$0870			MOVF	STACK_0, 0
$02E8	$00D6			MOVWF	FLOC_main+0
$02E9	$0871			MOVF	STACK_0+1, 0
$02EA	$00D7			MOVWF	FLOC_main+1
$02EB	$0872			MOVF	STACK_0+2, 0
$02EC	$00D8			MOVWF	FLOC_main+2
$02ED	$0873			MOVF	STACK_0+3, 0
$02EE	$00D9			MOVWF	FLOC_main+3
$02EF	$0856			MOVF	FLOC_main+0, 0
$02F0	$00CA			MOVWF	_INTEGRAL
$02F1	$0857			MOVF	FLOC_main+1, 0
$02F2	$00CB			MOVWF	_INTEGRAL+1
$02F3	$0858			MOVF	FLOC_main+2, 0
$02F4	$00CC			MOVWF	_INTEGRAL+2
$02F5	$0859			MOVF	FLOC_main+3, 0
$02F6	$00CD			MOVWF	_INTEGRAL+3
;lfr_pid_annauniv.c,195 :: 		INTEGRAL *= ki;
$02F7	$083C			MOVF	_Ki, 0
$02F8	$00F0			MOVWF	STACK_0
$02F9	$158A			BSF	PCLATH, 3
$02FA	$22F0			CALL	_byte2double
$02FB	$118A			BCF	PCLATH, 3
$02FC	$0856			MOVF	FLOC_main+0, 0
$02FD	$00F4			MOVWF	STACK_4
$02FE	$0857			MOVF	FLOC_main+1, 0
$02FF	$00F5			MOVWF	STACK_4+1
$0300	$0858			MOVF	FLOC_main+2, 0
$0301	$00F6			MOVWF	STACK_4+2
$0302	$0859			MOVF	FLOC_main+3, 0
$0303	$00F7			MOVWF	STACK_4+3
$0304	$158A			BSF	PCLATH, 3
$0305	$2000			CALL	_mul_32x32_fp
$0306	$118A			BCF	PCLATH, 3
$0307	$0870			MOVF	STACK_0, 0
$0308	$00D6			MOVWF	FLOC_main+0
$0309	$0871			MOVF	STACK_0+1, 0
$030A	$00D7			MOVWF	FLOC_main+1
$030B	$0872			MOVF	STACK_0+2, 0
$030C	$00D8			MOVWF	FLOC_main+2
$030D	$0873			MOVF	STACK_0+3, 0
$030E	$00D9			MOVWF	FLOC_main+3
$030F	$0856			MOVF	FLOC_main+0, 0
$0310	$00CA			MOVWF	_INTEGRAL
$0311	$0857			MOVF	FLOC_main+1, 0
$0312	$00CB			MOVWF	_INTEGRAL+1
$0313	$0858			MOVF	FLOC_main+2, 0
$0314	$00CC			MOVWF	_INTEGRAL+2
$0315	$0859			MOVF	FLOC_main+3, 0
$0316	$00CD			MOVWF	_INTEGRAL+3
;lfr_pid_annauniv.c,196 :: 		DERIVATIVE = (error - perror);
$0317	$0832			MOVF	_perror, 0
$0318	$00F4			MOVWF	STACK_4
$0319	$0833			MOVF	_perror+1, 0
$031A	$00F5			MOVWF	STACK_4+1
$031B	$0834			MOVF	_perror+2, 0
$031C	$00F6			MOVWF	STACK_4+2
$031D	$0835			MOVF	_perror+3, 0
$031E	$00F7			MOVWF	STACK_4+3
$031F	$0836			MOVF	_error, 0
$0320	$00F0			MOVWF	STACK_0
$0321	$0837			MOVF	_error+1, 0
$0322	$00F1			MOVWF	STACK_0+1
$0323	$0838			MOVF	_error+2, 0
$0324	$00F2			MOVWF	STACK_0+2
$0325	$0839			MOVF	_error+3, 0
$0326	$00F3			MOVWF	STACK_0+3
$0327	$158A			BSF	PCLATH, 3
$0328	$233C			CALL	_sub_32x32_fp
$0329	$118A			BCF	PCLATH, 3
$032A	$0870			MOVF	STACK_0, 0
$032B	$00DA			MOVWF	FLOC_main+4
$032C	$0871			MOVF	STACK_0+1, 0
$032D	$00DB			MOVWF	FLOC_main+5
$032E	$0872			MOVF	STACK_0+2, 0
$032F	$00DC			MOVWF	FLOC_main+6
$0330	$0873			MOVF	STACK_0+3, 0
$0331	$00DD			MOVWF	FLOC_main+7
$0332	$085A			MOVF	FLOC_main+4, 0
$0333	$00CE			MOVWF	_DERIVATIVE
$0334	$085B			MOVF	FLOC_main+5, 0
$0335	$00CF			MOVWF	_DERIVATIVE+1
$0336	$085C			MOVF	FLOC_main+6, 0
$0337	$00D0			MOVWF	_DERIVATIVE+2
$0338	$085D			MOVF	FLOC_main+7, 0
$0339	$00D1			MOVWF	_DERIVATIVE+3
;lfr_pid_annauniv.c,197 :: 		correction = ( (PROPORTIONAL) + (INTEGRAL) + (DERIVATIVE*kd));
$033A	$085E			MOVF	FLOC_main+8, 0
$033B	$00F0			MOVWF	STACK_0
$033C	$085F			MOVF	FLOC_main+9, 0
$033D	$00F1			MOVWF	STACK_0+1
$033E	$0860			MOVF	FLOC_main+10, 0
$033F	$00F2			MOVWF	STACK_0+2
$0340	$0861			MOVF	FLOC_main+11, 0
$0341	$00F3			MOVWF	STACK_0+3
$0342	$0856			MOVF	FLOC_main+0, 0
$0343	$00F4			MOVWF	STACK_4
$0344	$0857			MOVF	FLOC_main+1, 0
$0345	$00F5			MOVWF	STACK_4+1
$0346	$0858			MOVF	FLOC_main+2, 0
$0347	$00F6			MOVWF	STACK_4+2
$0348	$0859			MOVF	FLOC_main+3, 0
$0349	$00F7			MOVWF	STACK_4+3
$034A	$25AB			CALL	_add_32x32_fp
$034B	$0870			MOVF	STACK_0, 0
$034C	$00D6			MOVWF	FLOC_main+0
$034D	$0871			MOVF	STACK_0+1, 0
$034E	$00D7			MOVWF	FLOC_main+1
$034F	$0872			MOVF	STACK_0+2, 0
$0350	$00D8			MOVWF	FLOC_main+2
$0351	$0873			MOVF	STACK_0+3, 0
$0352	$00D9			MOVWF	FLOC_main+3
$0353	$083D			MOVF	_Kd, 0
$0354	$00F0			MOVWF	STACK_0
$0355	$158A			BSF	PCLATH, 3
$0356	$22F0			CALL	_byte2double
$0357	$118A			BCF	PCLATH, 3
$0358	$085A			MOVF	FLOC_main+4, 0
$0359	$00F4			MOVWF	STACK_4
$035A	$085B			MOVF	FLOC_main+5, 0
$035B	$00F5			MOVWF	STACK_4+1
$035C	$085C			MOVF	FLOC_main+6, 0
$035D	$00F6			MOVWF	STACK_4+2
$035E	$085D			MOVF	FLOC_main+7, 0
$035F	$00F7			MOVWF	STACK_4+3
$0360	$158A			BSF	PCLATH, 3
$0361	$2000			CALL	_mul_32x32_fp
$0362	$118A			BCF	PCLATH, 3
$0363	$0856			MOVF	FLOC_main+0, 0
$0364	$00F4			MOVWF	STACK_4
$0365	$0857			MOVF	FLOC_main+1, 0
$0366	$00F5			MOVWF	STACK_4+1
$0367	$0858			MOVF	FLOC_main+2, 0
$0368	$00F6			MOVWF	STACK_4+2
$0369	$0859			MOVF	FLOC_main+3, 0
$036A	$00F7			MOVWF	STACK_4+3
$036B	$25AB			CALL	_add_32x32_fp
$036C	$0870			MOVF	STACK_0, 0
$036D	$00DA			MOVWF	FLOC_main+4
$036E	$0871			MOVF	STACK_0+1, 0
$036F	$00DB			MOVWF	FLOC_main+5
$0370	$0872			MOVF	STACK_0+2, 0
$0371	$00DC			MOVWF	FLOC_main+6
$0372	$0873			MOVF	STACK_0+3, 0
$0373	$00DD			MOVWF	FLOC_main+7
$0374	$085A			MOVF	FLOC_main+4, 0
$0375	$00D2			MOVWF	_correction
$0376	$085B			MOVF	FLOC_main+5, 0
$0377	$00D3			MOVWF	_correction+1
$0378	$085C			MOVF	FLOC_main+6, 0
$0379	$00D4			MOVWF	_correction+2
$037A	$085D			MOVF	FLOC_main+7, 0
$037B	$00D5			MOVWF	_correction+3
;lfr_pid_annauniv.c,198 :: 		rightpulse =  basespeed + correction;
$037C	$083A			MOVF	_basespeed, 0
$037D	$00F0			MOVWF	STACK_0
$037E	$158A			BSF	PCLATH, 3
$037F	$22F0			CALL	_byte2double
$0380	$118A			BCF	PCLATH, 3
$0381	$0870			MOVF	STACK_0, 0
$0382	$00D6			MOVWF	FLOC_main+0
$0383	$0871			MOVF	STACK_0+1, 0
$0384	$00D7			MOVWF	FLOC_main+1
$0385	$0872			MOVF	STACK_0+2, 0
$0386	$00D8			MOVWF	FLOC_main+2
$0387	$0873			MOVF	STACK_0+3, 0
$0388	$00D9			MOVWF	FLOC_main+3
$0389	$0856			MOVF	FLOC_main+0, 0
$038A	$00F0			MOVWF	STACK_0
$038B	$0857			MOVF	FLOC_main+1, 0
$038C	$00F1			MOVWF	STACK_0+1
$038D	$0858			MOVF	FLOC_main+2, 0
$038E	$00F2			MOVWF	STACK_0+2
$038F	$0859			MOVF	FLOC_main+3, 0
$0390	$00F3			MOVWF	STACK_0+3
$0391	$085A			MOVF	FLOC_main+4, 0
$0392	$00F4			MOVWF	STACK_4
$0393	$085B			MOVF	FLOC_main+5, 0
$0394	$00F5			MOVWF	STACK_4+1
$0395	$085C			MOVF	FLOC_main+6, 0
$0396	$00F6			MOVWF	STACK_4+2
$0397	$085D			MOVF	FLOC_main+7, 0
$0398	$00F7			MOVWF	STACK_4+3
$0399	$25AB			CALL	_add_32x32_fp
$039A	$0870			MOVF	STACK_0, 0
$039B	$00BE			MOVWF	_rightpulse
$039C	$0871			MOVF	STACK_0+1, 0
$039D	$00BF			MOVWF	_rightpulse+1
$039E	$0872			MOVF	STACK_0+2, 0
$039F	$00C0			MOVWF	_rightpulse+2
$03A0	$0873			MOVF	STACK_0+3, 0
$03A1	$00C1			MOVWF	_rightpulse+3
;lfr_pid_annauniv.c,199 :: 		leftpulse = basespeed - correction;
$03A2	$085A			MOVF	FLOC_main+4, 0
$03A3	$00F4			MOVWF	STACK_4
$03A4	$085B			MOVF	FLOC_main+5, 0
$03A5	$00F5			MOVWF	STACK_4+1
$03A6	$085C			MOVF	FLOC_main+6, 0
$03A7	$00F6			MOVWF	STACK_4+2
$03A8	$085D			MOVF	FLOC_main+7, 0
$03A9	$00F7			MOVWF	STACK_4+3
$03AA	$0856			MOVF	FLOC_main+0, 0
$03AB	$00F0			MOVWF	STACK_0
$03AC	$0857			MOVF	FLOC_main+1, 0
$03AD	$00F1			MOVWF	STACK_0+1
$03AE	$0858			MOVF	FLOC_main+2, 0
$03AF	$00F2			MOVWF	STACK_0+2
$03B0	$0859			MOVF	FLOC_main+3, 0
$03B1	$00F3			MOVWF	STACK_0+3
$03B2	$158A			BSF	PCLATH, 3
$03B3	$233C			CALL	_sub_32x32_fp
$03B4	$118A			BCF	PCLATH, 3
$03B5	$0870			MOVF	STACK_0, 0
$03B6	$00C2			MOVWF	_leftpulse
$03B7	$0871			MOVF	STACK_0+1, 0
$03B8	$00C3			MOVWF	_leftpulse+1
$03B9	$0872			MOVF	STACK_0+2, 0
$03BA	$00C4			MOVWF	_leftpulse+2
$03BB	$0873			MOVF	STACK_0+3, 0
$03BC	$00C5			MOVWF	_leftpulse+3
;lfr_pid_annauniv.c,200 :: 		motor_RF();
$03BD	$158A			BSF	PCLATH, 3
$03BE	$2374			CALL	_motor_RF
$03BF	$118A			BCF	PCLATH, 3
;lfr_pid_annauniv.c,201 :: 		motor_LF();
$03C0	$158A			BSF	PCLATH, 3
$03C1	$2379			CALL	_motor_LF
$03C2	$118A			BCF	PCLATH, 3
;lfr_pid_annauniv.c,203 :: 		if(leftpulse > 255)                 //LEFT CORRECTION EXCEED
$03C3	$0842			MOVF	_leftpulse, 0
$03C4	$00F4			MOVWF	STACK_4
$03C5	$0843			MOVF	_leftpulse+1, 0
$03C6	$00F5			MOVWF	STACK_4+1
$03C7	$0844			MOVF	_leftpulse+2, 0
$03C8	$00F6			MOVWF	STACK_4+2
$03C9	$0845			MOVF	_leftpulse+3, 0
$03CA	$00F7			MOVWF	STACK_4+3
$03CB	$3000			MOVLW	0
$03CC	$00F0			MOVWF	STACK_0
$03CD	$3000			MOVLW	0
$03CE	$00F1			MOVWF	STACK_0+1
$03CF	$307F			MOVLW	127
$03D0	$00F2			MOVWF	STACK_0+2
$03D1	$3086			MOVLW	134
$03D2	$00F3			MOVWF	STACK_0+3
$03D3	$158A			BSF	PCLATH, 3
$03D4	$20BD			CALL	_compare_double
$03D5	$118A			BCF	PCLATH, 3
$03D6	$3001			MOVLW	1
$03D7	$1803			BTFSC	STATUS, C
$03D8	$3000			MOVLW	0
$03D9	$00F0			MOVWF	STACK_0
$03DA	$0870			MOVF	STACK_0, 0
$03DB	$1903			BTFSC	STATUS, Z
$03DC	$2BE5			GOTO	L_main_23
;lfr_pid_annauniv.c,204 :: 		leftpulse = 255;
$03DD	$3000			MOVLW	0
$03DE	$00C2			MOVWF	_leftpulse
$03DF	$3000			MOVLW	0
$03E0	$00C3			MOVWF	_leftpulse+1
$03E1	$307F			MOVLW	127
$03E2	$00C4			MOVWF	_leftpulse+2
$03E3	$3086			MOVLW	134
$03E4	$00C5			MOVWF	_leftpulse+3
$03E5	$	L_main_23:
;lfr_pid_annauniv.c,206 :: 		if(rightpulse > 255)                //RIGHT CORRECTION EXCEED
$03E5	$083E			MOVF	_rightpulse, 0
$03E6	$00F4			MOVWF	STACK_4
$03E7	$083F			MOVF	_rightpulse+1, 0
$03E8	$00F5			MOVWF	STACK_4+1
$03E9	$0840			MOVF	_rightpulse+2, 0
$03EA	$00F6			MOVWF	STACK_4+2
$03EB	$0841			MOVF	_rightpulse+3, 0
$03EC	$00F7			MOVWF	STACK_4+3
$03ED	$3000			MOVLW	0
$03EE	$00F0			MOVWF	STACK_0
$03EF	$3000			MOVLW	0
$03F0	$00F1			MOVWF	STACK_0+1
$03F1	$307F			MOVLW	127
$03F2	$00F2			MOVWF	STACK_0+2
$03F3	$3086			MOVLW	134
$03F4	$00F3			MOVWF	STACK_0+3
$03F5	$158A			BSF	PCLATH, 3
$03F6	$20BD			CALL	_compare_double
$03F7	$118A			BCF	PCLATH, 3
$03F8	$3001			MOVLW	1
$03F9	$1803			BTFSC	STATUS, C
$03FA	$3000			MOVLW	0
$03FB	$00F0			MOVWF	STACK_0
$03FC	$0870			MOVF	STACK_0, 0
$03FD	$1903			BTFSC	STATUS, Z
$03FE	$2C07			GOTO	L_main_24
;lfr_pid_annauniv.c,207 :: 		rightpulse = 255;
$03FF	$3000			MOVLW	0
$0400	$00BE			MOVWF	_rightpulse
$0401	$3000			MOVLW	0
$0402	$00BF			MOVWF	_rightpulse+1
$0403	$307F			MOVLW	127
$0404	$00C0			MOVWF	_rightpulse+2
$0405	$3086			MOVLW	134
$0406	$00C1			MOVWF	_rightpulse+3
$0407	$	L_main_24:
;lfr_pid_annauniv.c,209 :: 		if(leftpulse < 0)                   //LEFT CORRECTION EXCEED
$0407	$01F4			CLRF	STACK_4
$0408	$01F5			CLRF	STACK_4+1
$0409	$01F6			CLRF	STACK_4+2
$040A	$01F7			CLRF	STACK_4+3
$040B	$0842			MOVF	_leftpulse, 0
$040C	$00F0			MOVWF	STACK_0
$040D	$0843			MOVF	_leftpulse+1, 0
$040E	$00F1			MOVWF	STACK_0+1
$040F	$0844			MOVF	_leftpulse+2, 0
$0410	$00F2			MOVWF	STACK_0+2
$0411	$0845			MOVF	_leftpulse+3, 0
$0412	$00F3			MOVWF	STACK_0+3
$0413	$158A			BSF	PCLATH, 3
$0414	$20BD			CALL	_compare_double
$0415	$118A			BCF	PCLATH, 3
$0416	$3001			MOVLW	1
$0417	$1803			BTFSC	STATUS, C
$0418	$3000			MOVLW	0
$0419	$00F0			MOVWF	STACK_0
$041A	$0870			MOVF	STACK_0, 0
$041B	$1903			BTFSC	STATUS, Z
$041C	$2C21			GOTO	L_main_25
;lfr_pid_annauniv.c,210 :: 		leftpulse = 0;
$041D	$01C2			CLRF	_leftpulse
$041E	$01C3			CLRF	_leftpulse+1
$041F	$01C4			CLRF	_leftpulse+2
$0420	$01C5			CLRF	_leftpulse+3
$0421	$	L_main_25:
;lfr_pid_annauniv.c,212 :: 		if(rightpulse < 0)                  //RIGHT CORRECTION EXCEED
$0421	$01F4			CLRF	STACK_4
$0422	$01F5			CLRF	STACK_4+1
$0423	$01F6			CLRF	STACK_4+2
$0424	$01F7			CLRF	STACK_4+3
$0425	$083E			MOVF	_rightpulse, 0
$0426	$00F0			MOVWF	STACK_0
$0427	$083F			MOVF	_rightpulse+1, 0
$0428	$00F1			MOVWF	STACK_0+1
$0429	$0840			MOVF	_rightpulse+2, 0
$042A	$00F2			MOVWF	STACK_0+2
$042B	$0841			MOVF	_rightpulse+3, 0
$042C	$00F3			MOVWF	STACK_0+3
$042D	$158A			BSF	PCLATH, 3
$042E	$20BD			CALL	_compare_double
$042F	$118A			BCF	PCLATH, 3
$0430	$3001			MOVLW	1
$0431	$1803			BTFSC	STATUS, C
$0432	$3000			MOVLW	0
$0433	$00F0			MOVWF	STACK_0
$0434	$0870			MOVF	STACK_0, 0
$0435	$1903			BTFSC	STATUS, Z
$0436	$2C3B			GOTO	L_main_26
;lfr_pid_annauniv.c,213 :: 		rightpulse = 0;
$0437	$01BE			CLRF	_rightpulse
$0438	$01BF			CLRF	_rightpulse+1
$0439	$01C0			CLRF	_rightpulse+2
$043A	$01C1			CLRF	_rightpulse+3
$043B	$	L_main_26:
;lfr_pid_annauniv.c,215 :: 		PWM1_CHANGE_DUTY(rightpulse);
$043B	$083E			MOVF	_rightpulse, 0
$043C	$00F0			MOVWF	STACK_0
$043D	$083F			MOVF	_rightpulse+1, 0
$043E	$00F1			MOVWF	STACK_0+1
$043F	$0840			MOVF	_rightpulse+2, 0
$0440	$00F2			MOVWF	STACK_0+2
$0441	$0841			MOVF	_rightpulse+3, 0
$0442	$00F3			MOVWF	STACK_0+3
$0443	$158A			BSF	PCLATH, 3
$0444	$21A2			CALL	_double2byte
$0445	$118A			BCF	PCLATH, 3
$0446	$0870			MOVF	STACK_0, 0
$0447	$00E2			MOVWF	FARG_PWM1_Change_Duty+0
$0448	$158A			BSF	PCLATH, 3
$0449	$224F			CALL	_PWM1_Change_Duty
$044A	$118A			BCF	PCLATH, 3
;lfr_pid_annauniv.c,216 :: 		PWM2_CHANGE_DUTY(leftpulse);
$044B	$0842			MOVF	_leftpulse, 0
$044C	$00F0			MOVWF	STACK_0
$044D	$0843			MOVF	_leftpulse+1, 0
$044E	$00F1			MOVWF	STACK_0+1
$044F	$0844			MOVF	_leftpulse+2, 0
$0450	$00F2			MOVWF	STACK_0+2
$0451	$0845			MOVF	_leftpulse+3, 0
$0452	$00F3			MOVWF	STACK_0+3
$0453	$158A			BSF	PCLATH, 3
$0454	$21A2			CALL	_double2byte
$0455	$118A			BCF	PCLATH, 3
$0456	$0870			MOVF	STACK_0, 0
$0457	$00E2			MOVWF	FARG_PWM2_Change_Duty+0
$0458	$158A			BSF	PCLATH, 3
$0459	$21E5			CALL	_PWM2_Change_Duty
$045A	$118A			BCF	PCLATH, 3
;lfr_pid_annauniv.c,217 :: 		}
$045B	$	L_main_22:
;lfr_pid_annauniv.c,218 :: 		delay_ms(10);
$045B	$300D			MOVLW	13
$045C	$00FB			MOVWF	STACK_11
$045D	$30FF			MOVLW	255
$045E	$00FA			MOVWF	STACK_10
$045F	$0BFB			DECFSZ	STACK_11, F
$0460	$2C62			GOTO	$+2
$0461	$2C65			GOTO	$+4
$0462	$0BFA			DECFSZ	STACK_10, F
$0463	$2C62			GOTO	$-1
$0464	$2C5F			GOTO	$-5
$0465	$30F3			MOVLW	243
$0466	$00FA			MOVWF	STACK_10
$0467	$0BFA			DECFSZ	STACK_10, F
$0468	$2C67			GOTO	$-1
$0469	$0000			NOP
;lfr_pid_annauniv.c,219 :: 		}
$046A	$280D			GOTO	L_main_8
;lfr_pid_annauniv.c,220 :: 		}
$046B	$2C6B			GOTO	$
