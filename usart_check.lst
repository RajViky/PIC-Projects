;  ASM code generated by mikroVirtualMachine for PIC - V. 8.2.0.0
;  Date/Time: 4/22/2012 3:22:39 PM
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$2804			GOTO	_main
$0041	$	_Usart_Data_Ready:
$0041	$3000			MOVLW	0
$0042	$1303			BCF	STATUS, RP1
$0043	$1283			BCF	STATUS, RP0
$0044	$1A8C			BTFSC	PIR1, 5
$0045	$3001			MOVLW	1
$0046	$00F1			MOVWF	STACK_1
$0047	$0871			MOVF	STACK_1, 0
$0048	$00F0			MOVWF	STACK_0
$0049	$0008			RETURN
$0036	$	_Usart_Read:
$0036	$1303			BCF	STATUS, RP1
$0037	$1283			BCF	STATUS, RP0
$0038	$081A			MOVF	RCREG, 0
$0039	$00A1			MOVWF	Usart_Read_tmp_L0
$003A	$1C98			BTFSS	RCSTA, 1
$003B	$283E			GOTO	L_Usart_Read_2
$003C	$1218			BCF	RCSTA, 4
$003D	$1618			BSF	RCSTA, 4
$003E	$	L_Usart_Read_2:
$003E	$0821			MOVF	Usart_Read_tmp_L0, 0
$003F	$00F0			MOVWF	STACK_0
$0040	$0008			RETURN
$0016	$	_Usart_Write:
$0016	$	L_Usart_Write_3:
$0016	$3000			MOVLW	0
$0017	$1303			BCF	STATUS, RP1
$0018	$1683			BSF	STATUS, RP0
$0019	$1898			BTFSC	TXSTA, 1
$001A	$3001			MOVLW	1
$001B	$00F1			MOVWF	STACK_1
$001C	$0871			MOVF	STACK_1, 0
$001D	$3A00			XORLW	0
$001E	$1D03			BTFSS	STATUS, Z
$001F	$2822			GOTO	L_Usart_Write_4
$0020	$0000			NOP
$0021	$2816			GOTO	L_Usart_Write_3
$0022	$	L_Usart_Write_4:
$0022	$1283			BCF	STATUS, RP0
$0023	$0821			MOVF	FARG_Usart_Write+0, 0
$0024	$0099			MOVWF	TXREG
$0025	$0008			RETURN
$0026	$	_Usart_Init:
$0026	$1303			BCF	STATUS, RP1
$0027	$1683			BSF	STATUS, RP0
$0028	$1698			BSF	TXSTA, 5
$0029	$3090			MOVLW	144
$002A	$1283			BCF	STATUS, RP0
$002B	$0098			MOVWF	RCSTA
$002C	$1683			BSF	STATUS, RP0
$002D	$1787			BSF	TRISC, 7
$002E	$1307			BCF	TRISC, 6
$002F	$	L_Usart_Init_0:
$002F	$1283			BCF	STATUS, RP0
$0030	$1E8C			BTFSS	PIR1, 5
$0031	$2835			GOTO	L_Usart_Init_1
$0032	$081A			MOVF	RCREG, 0
$0033	$00A5			MOVWF	Usart_Init_tmp_L0
$0034	$282F			GOTO	L_Usart_Init_0
$0035	$	L_Usart_Init_1:
$0035	$0008			RETURN
$0004	$	_main:
;usart_check.c,3 :: 		void main()
;usart_check.c,7 :: 		Usart_Init(2400);
$0004	$3081			MOVLW	129
$0005	$1303			BCF	STATUS, RP1
$0006	$1683			BSF	STATUS, RP0
$0007	$0099			MOVWF	SPBRG
$0008	$1118			BCF	TXSTA, BRGH
$0009	$2026			CALL	_Usart_Init
;usart_check.c,9 :: 		do {
$000A	$	L_main_0:
;usart_check.c,10 :: 		if (Usart_Data_Ready())
$000A	$2041			CALL	_Usart_Data_Ready
$000B	$0870			MOVF	STACK_0, 0
$000C	$1903			BTFSC	STATUS, Z
$000D	$2814			GOTO	L_main_2
;usart_check.c,12 :: 		i = Usart_Read();         // Read the received data
$000E	$2036			CALL	_Usart_Read
$000F	$0870			MOVF	STACK_0, 0
$0010	$00A0			MOVWF	_i
;usart_check.c,13 :: 		Usart_Write(i+1);           // Send data via USART
$0011	$0A70			INCF	STACK_0, 0
$0012	$00A1			MOVWF	FARG_Usart_Write+0
$0013	$2016			CALL	_Usart_Write
;usart_check.c,14 :: 		}
$0014	$	L_main_2:
;usart_check.c,15 :: 		} while (1);
$0014	$280A			GOTO	L_main_0
;usart_check.c,16 :: 		}
$0015	$2815			GOTO	$


//** Procedures locations **
//ADDRESS		PROCEDURE
//----------------------------------------------
$0004		main
$0016		Usart_Write
$0026		Usart_Init
$0036		Usart_Read
$0041		Usart_Data_Ready


//** Labels locations **
//ADDRESS		LABEL
//----------------------------------------------
$0004		_main:
$000A		L_main_0:
$0014		L_main_2:
$0016		_Usart_Write:
$0016		L_Usart_Write_3:
$0022		L_Usart_Write_4:
$0026		_Usart_Init:
$002F		L_Usart_Init_0:
$0035		L_Usart_Init_1:
$0036		_Usart_Read:
$003E		L_Usart_Read_2:
$0041		_Usart_Data_Ready:


//** Variables locations **
//ADDRESS		VARIABLE
//----------------------------------------------
$0000		INDF
$0002		PCL
$0003		STATUS
$0004		FSR
$000A		PCLATH
$000C		PIR1
$0018		RCSTA
$0019		TXREG
$001A		RCREG
$0020		_i
$0021		FARG_Usart_Init+0
$0021		FARG_Usart_Write+0
$0021		Usart_Read_tmp_L0
$0025		Usart_Init_tmp_L0
$0070		STACK_0
$0071		STACK_1
$0072		STACK_2
$0073		STACK_3
$0074		STACK_4
$0075		STACK_5
$0076		STACK_6
$0077		STACK_7
$0078		STACK_8
$0079		STACK_9
$007A		STACK_10
$007B		STACK_11
$007C		STACK_12
$007D		STACK_13
$007E		STACK_14
$007F		STACK_15
$0087		TRISC
$0098		TXSTA
$0099		SPBRG


