;  ASM code generated by mikroVirtualMachine for PIC - V. 8.2.0.0
;  Date/Time: 3/22/2011 10:17:44 PM
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$2804			GOTO	_main
$0897	$	_RES032:
$0897	$1303			BCF	STATUS, RP1
$0898	$1283			BCF	STATUS, RP0
$0899	$01F2			CLRF	STACK_2
$089A	$01F1			CLRF	STACK_1
$089B	$01F0			CLRF	STACK_0
$089C	$01F8			CLRF	STACK_8
$089D	$01F3			CLRF	STACK_3
$089E	$3000			MOVLW	0
$089F	$0008			RETURN
$0881	$	_SETFUN32:
$0881	$1303			BCF	STATUS, RP1
$0882	$1283			BCF	STATUS, RP0
$0883	$157B			BSF	STACK_11, 2
$0884	$1FFB			BTFSS	STACK_11, 7
$0885	$288D			GOTO	SETFUN32EEE
$0886	$3001			MOVLW	0x01
$0887	$00F3			MOVWF	STACK_3
$0888	$01F2			CLRF	STACK_2
$0889	$01F1			CLRF	STACK_1
$088A	$01F0			CLRF	STACK_0
$088B	$0DFA			RLF	STACK_10, F
$088C	$0CF2			RRF	STACK_2, F
$088D	$	SETFUN32EEE:
$088D	$30FF			MOVLW	0xFF
$088E	$0008			RETURN
$08B0	$	_FIXSIGN32:
$08B0	$1303			BCF	STATUS, RP1
$08B1	$1283			BCF	STATUS, RP0
$08B2	$1FFA			BTFSS	STACK_10, 7
$08B3	$13F2			BCF	STACK_2, 7
$08B4	$3000			MOVLW	0
$08B5	$0008			RETURN
$0873	$	_SETFOV32:
$0873	$1303			BCF	STATUS, RP1
$0874	$1283			BCF	STATUS, RP0
$0875	$14FB			BSF	STACK_11, 1
$0876	$1FFB			BTFSS	STACK_11, 7
$0877	$287F			GOTO	SETFOV32EEE
$0878	$30FF			MOVLW	0xFF
$0879	$00F3			MOVWF	STACK_3
$087A	$00F2			MOVWF	STACK_2
$087B	$00F1			MOVWF	STACK_1
$087C	$00F0			MOVWF	STACK_0
$087D	$0DFA			RLF	STACK_10, F
$087E	$0CF2			RRF	STACK_2, F
$087F	$	SETFOV32EEE:
$087F	$30FF			MOVLW	0xFF
$0880	$0008			RETURN
$04A5	$	_NRM4032:
$04A5	$1303			BCF	STATUS, RP1
$04A6	$1283			BCF	STATUS, RP0
$04A7	$187C			BTFSC	STACK_12, 0
$04A8	$2CDD			GOTO	NRMRND4032
$04A9	$18FC			BTFSC	STACK_12, 1
$04AA	$2CAE			GOTO	NRM4032
$04AB	$197C			BTFSC	STACK_12, 2
$04AC	$2D02			GOTO	JMPSETFOV32
$04AD	$2CA7			GOTO	$-6
$04AE	$	NRM4032:
$04AE	$01A0			CLRF	__math_tempbD
$04AF	$0872			MOVF	STACK_2, W
$04B0	$1D03			BTFSS	STATUS, Z
$04B1	$2CCE			GOTO	NORM4032
$04B2	$0871			MOVF	STACK_1, W
$04B3	$00F2			MOVWF	STACK_2
$04B4	$0870			MOVF	STACK_0, W
$04B5	$00F1			MOVWF	STACK_1
$04B6	$0878			MOVF	STACK_8, W
$04B7	$00F0			MOVWF	STACK_0
$04B8	$01F8			CLRF	STACK_8
$04B9	$15A0			BSF	__math_tempbD, 3
$04BA	$0872			MOVF	STACK_2, W
$04BB	$1D03			BTFSS	STATUS, Z
$04BC	$2CCE			GOTO	NORM4032
$04BD	$0871			MOVF	STACK_1, W
$04BE	$00F2			MOVWF	STACK_2
$04BF	$0870			MOVF	STACK_0, W
$04C0	$00F1			MOVWF	STACK_1
$04C1	$01F0			CLRF	STACK_0
$04C2	$11A0			BCF	__math_tempbD, 3
$04C3	$1620			BSF	__math_tempbD, 4
$04C4	$0872			MOVF	STACK_2, W
$04C5	$1D03			BTFSS	STATUS, Z
$04C6	$2CCE			GOTO	NORM4032
$04C7	$0871			MOVF	STACK_1, W
$04C8	$00F2			MOVWF	STACK_2
$04C9	$01F1			CLRF	STACK_1
$04CA	$15A0			BSF	__math_tempbD, 3
$04CB	$0872			MOVF	STACK_2, W
$04CC	$1903			BTFSC	STATUS, Z
$04CD	$2CF0			GOTO	JMPRES032
$04CE	$	NORM4032:
$04CE	$0820			MOVF	__math_tempbD, W
$04CF	$02F3			SUBWF	STACK_3, F
$04D0	$1D03			BTFSS	STATUS, Z
$04D1	$1C03			BTFSS	STATUS, C
$04D2	$2CF6			GOTO	JMPSETFUN32
$04D3	$1003			BCF	STATUS, C
$04D4	$	NORM4032A:
$04D4	$1BF2			BTFSC	STACK_2, 7
$04D5	$2CDD			GOTO	NRMRND4032
$04D6	$0DF8			RLF	STACK_8, F
$04D7	$0DF0			RLF	STACK_0, F
$04D8	$0DF1			RLF	STACK_1, F
$04D9	$0DF2			RLF	STACK_2, F
$04DA	$0BF3			DECFSZ	STACK_3, F
$04DB	$2CD4			GOTO	NORM4032A
$04DC	$2CF6			GOTO	JMPSETFUN32
$04DD	$	NRMRND4032:
$04DD	$1B7B			BTFSC	STACK_11, 6
$04DE	$1C70			BTFSS	STACK_0, 0
$04DF	$2CFC			GOTO	JMPFIXSIGN32
$04E0	$1FF8			BTFSS	STACK_8, 7
$04E1	$2CFC			GOTO	JMPFIXSIGN32
$04E2	$0AF0			INCF	STACK_0, F
$04E3	$1903			BTFSC	STATUS, Z
$04E4	$0AF1			INCF	STACK_1, F
$04E5	$1903			BTFSC	STATUS, Z
$04E6	$0AF2			INCF	STACK_2, F
$04E7	$1D03			BTFSS	STATUS, Z
$04E8	$2CFC			GOTO	JMPFIXSIGN32
$04E9	$0CF2			RRF	STACK_2, F
$04EA	$0CF1			RRF	STACK_1, F
$04EB	$0CF0			RRF	STACK_0, F
$04EC	$0AF3			INCF	STACK_3, F
$04ED	$1903			BTFSC	STATUS, Z
$04EE	$2D02			GOTO	JMPSETFOV32
$04EF	$2CFC			GOTO	JMPFIXSIGN32
$04F0	$	JMPRES032:
$04F0	$3001			MOVLW	0x01
$04F1	$00FC			MOVWF	STACK_12
$04F2	$158A			BSF	PCLATH, 3
$04F3	$2097			CALL	_RES032
$04F4	$118A			BCF	PCLATH, 3
$04F5	$2D07			GOTO	NRM4032EEE
$04F6	$	JMPSETFUN32:
$04F6	$3002			MOVLW	0x02
$04F7	$00FC			MOVWF	STACK_12
$04F8	$158A			BSF	PCLATH, 3
$04F9	$2081			CALL	_SETFUN32
$04FA	$118A			BCF	PCLATH, 3
$04FB	$2D07			GOTO	NRM4032EEE
$04FC	$	JMPFIXSIGN32:
$04FC	$3004			MOVLW	0x04
$04FD	$00FC			MOVWF	STACK_12
$04FE	$158A			BSF	PCLATH, 3
$04FF	$20B0			CALL	_FIXSIGN32
$0500	$118A			BCF	PCLATH, 3
$0501	$2D07			GOTO	NRM4032EEE
$0502	$	JMPSETFOV32:
$0502	$3008			MOVLW	0x08
$0503	$00FC			MOVWF	STACK_12
$0504	$158A			BSF	PCLATH, 3
$0505	$2073			CALL	_SETFOV32
$0506	$118A			BCF	PCLATH, 3
$0507	$	NRM4032EEE:
$0507	$0000			NOP
$0508	$0008			RETURN
$0674	$	_NRM3232:
$0674	$1303			BCF	STATUS, RP1
$0675	$1283			BCF	STATUS, RP0
$0676	$01A0			CLRF	__math_tempbD
$0677	$0872			MOVF	STACK_2, W
$0678	$1D03			BTFSS	STATUS, Z
$0679	$2E8B			GOTO	NORM3232
$067A	$0871			MOVF	STACK_1, W
$067B	$00F2			MOVWF	STACK_2
$067C	$0870			MOVF	STACK_0, W
$067D	$00F1			MOVWF	STACK_1
$067E	$01F0			CLRF	STACK_0
$067F	$15A0			BSF	__math_tempbD, 3
$0680	$0872			MOVF	STACK_2, W
$0681	$1D03			BTFSS	STATUS, Z
$0682	$2E8B			GOTO	NORM3232
$0683	$0871			MOVF	STACK_1, W
$0684	$00F2			MOVWF	STACK_2
$0685	$01F1			CLRF	STACK_1
$0686	$11A0			BCF	__math_tempbD, 3
$0687	$1620			BSF	__math_tempbD, 4
$0688	$0872			MOVF	STACK_2, W
$0689	$1903			BTFSC	STATUS, Z
$068A	$2E99			GOTO	JPNRES032
$068B	$	NORM3232:
$068B	$0820			MOVF	__math_tempbD, W
$068C	$02F3			SUBWF	STACK_3, F
$068D	$1D03			BTFSS	STATUS, Z
$068E	$1C03			BTFSS	STATUS, C
$068F	$2E9F			GOTO	JPNSETFUN32
$0690	$1003			BCF	STATUS, C
$0691	$	NORM3232A:
$0691	$1BF2			BTFSC	STACK_2, 7
$0692	$2EA5			GOTO	JMPNFIXSIGN32
$0693	$0DF0			RLF	STACK_0, F
$0694	$0DF1			RLF	STACK_1, F
$0695	$0DF2			RLF	STACK_2, F
$0696	$0BF3			DECFSZ	STACK_3, F
$0697	$2E91			GOTO	NORM3232A
$0698	$2E9F			GOTO	JPNSETFUN32
$0699	$	JPNRES032:
$0699	$3001			MOVLW	0x01
$069A	$00FC			MOVWF	STACK_12
$069B	$158A			BSF	PCLATH, 3
$069C	$2097			CALL	_RES032
$069D	$118A			BCF	PCLATH, 3
$069E	$2EAA			GOTO	NORM32EEE
$069F	$	JPNSETFUN32:
$069F	$3002			MOVLW	0x02
$06A0	$00FC			MOVWF	STACK_12
$06A1	$158A			BSF	PCLATH, 3
$06A2	$2081			CALL	_SETFUN32
$06A3	$118A			BCF	PCLATH, 3
$06A4	$2EAA			GOTO	NORM32EEE
$06A5	$	JMPNFIXSIGN32:
$06A5	$3004			MOVLW	0x04
$06A6	$00FC			MOVWF	STACK_12
$06A7	$158A			BSF	PCLATH, 3
$06A8	$20B0			CALL	_FIXSIGN32
$06A9	$118A			BCF	PCLATH, 3
$06AA	$	NORM32EEE:
$06AA	$0008			RETURN
$08D0	$	_SETFDZ32:
$08D0	$1303			BCF	STATUS, RP1
$08D1	$1283			BCF	STATUS, RP0
$08D2	$15FB			BSF	STACK_11, 3
$08D3	$30FF			MOVLW	0xFF
$08D4	$0008			RETURN
$025C	$	_Add_32x32_FP:
$025C	$1303			BCF	STATUS, RP1
$025D	$1283			BCF	STATUS, RP0
$025E	$0872			MOVF	STACK_2, W
$025F	$0676			XORWF	STACK_6, W
$0260	$00A0			MOVWF	__math_tempbD
$0261	$01F8			CLRF	STACK_8
$0262	$01F9			CLRF	STACK_9
$0263	$0873			MOVF	STACK_3, W
$0264	$0277			SUBWF	STACK_7, W
$0265	$1C03			BTFSS	STATUS, C
$0266	$2A7F			GOTO	USEA32
$0267	$0877			MOVF	STACK_7, W
$0268	$00FD			MOVWF	STACK_13
$0269	$0873			MOVF	STACK_3, W
$026A	$00F7			MOVWF	STACK_7
$026B	$087D			MOVF	STACK_13, W
$026C	$00F3			MOVWF	STACK_3
$026D	$0876			MOVF	STACK_6, W
$026E	$00FD			MOVWF	STACK_13
$026F	$0872			MOVF	STACK_2, W
$0270	$00F6			MOVWF	STACK_6
$0271	$087D			MOVF	STACK_13, W
$0272	$00F2			MOVWF	STACK_2
$0273	$0875			MOVF	STACK_5, W
$0274	$00FD			MOVWF	STACK_13
$0275	$0871			MOVF	STACK_1, W
$0276	$00F5			MOVWF	STACK_5
$0277	$087D			MOVF	STACK_13, W
$0278	$00F1			MOVWF	STACK_1
$0279	$0874			MOVF	STACK_4, W
$027A	$00FD			MOVWF	STACK_13
$027B	$0870			MOVF	STACK_0, W
$027C	$00F4			MOVWF	STACK_4
$027D	$087D			MOVF	STACK_13, W
$027E	$00F0			MOVWF	STACK_0
$027F	$	USEA32:
$027F	$0877			MOVF	STACK_7, W
$0280	$1903			BTFSC	STATUS, Z
$0281	$2AFA			GOTO	JMPEEE
$0282	$0872			MOVF	STACK_2, W
$0283	$00FA			MOVWF	STACK_10
$0284	$17F2			BSF	STACK_2, 7
$0285	$17F6			BSF	STACK_6, 7
$0286	$0877			MOVF	STACK_7, W
$0287	$0273			SUBWF	STACK_3, W
$0288	$00F7			MOVWF	STACK_7
$0289	$1903			BTFSC	STATUS, Z
$028A	$2AB2			GOTO	ALIGNED32
$028B	$3008			MOVLW	8
$028C	$0277			SUBWF	STACK_7, W
$028D	$1C03			BTFSS	STATUS, C
$028E	$2AA8			GOTO	ALIGNB32
$028F	$00F7			MOVWF	STACK_7
$0290	$0874			MOVF	STACK_4, W
$0291	$00F9			MOVWF	STACK_9
$0292	$0875			MOVF	STACK_5, W
$0293	$00F4			MOVWF	STACK_4
$0294	$0876			MOVF	STACK_6, W
$0295	$00F5			MOVWF	STACK_5
$0296	$01F6			CLRF	STACK_6
$0297	$3008			MOVLW	8
$0298	$0277			SUBWF	STACK_7, W
$0299	$1C03			BTFSS	STATUS, C
$029A	$2AA8			GOTO	ALIGNB32
$029B	$00F7			MOVWF	STACK_7
$029C	$0874			MOVF	STACK_4, W
$029D	$00F9			MOVWF	STACK_9
$029E	$0875			MOVF	STACK_5, W
$029F	$00F4			MOVWF	STACK_4
$02A0	$01F5			CLRF	STACK_5
$02A1	$3008			MOVLW	8
$02A2	$0277			SUBWF	STACK_7, W
$02A3	$1C03			BTFSS	STATUS, C
$02A4	$2AA8			GOTO	ALIGNB32
$02A5	$087A			MOVF	STACK_10, W
$02A6	$00F2			MOVWF	STACK_2
$02A7	$2AFA			GOTO	JMPEEE
$02A8	$	ALIGNB32:
$02A8	$0877			MOVF	STACK_7, W
$02A9	$1903			BTFSC	STATUS, Z
$02AA	$2AB2			GOTO	ALIGNED32
$02AB	$	ALOOPB32:
$02AB	$1003			BCF	STATUS, C
$02AC	$0CF6			RRF	STACK_6, F
$02AD	$0CF5			RRF	STACK_5, F
$02AE	$0CF4			RRF	STACK_4, F
$02AF	$0CF9			RRF	STACK_9, F
$02B0	$0BF7			DECFSZ	STACK_7, F
$02B1	$2AAB			GOTO	ALOOPB32
$02B2	$	ALIGNED32:
$02B2	$1FA0			BTFSS	__math_tempbD, 7
$02B3	$2ABF			GOTO	AOK32
$02B4	$09F9			COMF	STACK_9, F
$02B5	$09F4			COMF	STACK_4, F
$02B6	$09F5			COMF	STACK_5, F
$02B7	$09F6			COMF	STACK_6, F
$02B8	$0AF9			INCF	STACK_9, F
$02B9	$1903			BTFSC	STATUS, Z
$02BA	$0AF4			INCF	STACK_4, F
$02BB	$1903			BTFSC	STATUS, Z
$02BC	$0AF5			INCF	STACK_5, F
$02BD	$1903			BTFSC	STATUS, Z
$02BE	$0AF6			INCF	STACK_6, F
$02BF	$	AOK32:
$02BF	$0879			MOVF	STACK_9, W
$02C0	$07F8			ADDWF	STACK_8, F
$02C1	$0874			MOVF	STACK_4, W
$02C2	$1803			BTFSC	STATUS, C
$02C3	$0F74			INCFSZ	STACK_4, W
$02C4	$07F0			ADDWF	STACK_0, F
$02C5	$0875			MOVF	STACK_5, W
$02C6	$1803			BTFSC	STATUS, C
$02C7	$0F75			INCFSZ	STACK_5, W
$02C8	$07F1			ADDWF	STACK_1, F
$02C9	$0876			MOVF	STACK_6, W
$02CA	$1803			BTFSC	STATUS, C
$02CB	$0F76			INCFSZ	STACK_6, W
$02CC	$07F2			ADDWF	STACK_2, F
$02CD	$1BA0			BTFSC	__math_tempbD, 7
$02CE	$2AD8			GOTO	ACOMP32
$02CF	$1C03			BTFSS	STATUS, C
$02D0	$2AE8			GOTO	JMPNRMRND4032
$02D1	$0CF2			RRF	STACK_2, F
$02D2	$0CF1			RRF	STACK_1, F
$02D3	$0CF0			RRF	STACK_0, F
$02D4	$0CF8			RRF	STACK_8, F
$02D5	$0FF3			INCFSZ	STACK_3, F
$02D6	$2AE8			GOTO	JMPNRMRND4032
$02D7	$2AF4			GOTO	ADD_JMPSETFOV32
$02D8	$	ACOMP32:
$02D8	$1803			BTFSC	STATUS, C
$02D9	$2AEC			GOTO	JMPNRM4032
$02DA	$09F8			COMF	STACK_8, F
$02DB	$09F0			COMF	STACK_0, F
$02DC	$09F1			COMF	STACK_1, F
$02DD	$09F2			COMF	STACK_2, F
$02DE	$0AF8			INCF	STACK_8, F
$02DF	$1903			BTFSC	STATUS, Z
$02E0	$0AF0			INCF	STACK_0, F
$02E1	$1903			BTFSC	STATUS, Z
$02E2	$0AF1			INCF	STACK_1, F
$02E3	$1903			BTFSC	STATUS, Z
$02E4	$0AF2			INCF	STACK_2, F
$02E5	$3080			MOVLW	0x80
$02E6	$06FA			XORWF	STACK_10, F
$02E7	$2AF0			GOTO	JMPNRM32
$02E8	$	JMPNRMRND4032:
$02E8	$3001			MOVLW	0x01
$02E9	$00FC			MOVWF	STACK_12
$02EA	$24A5			CALL	_NRM4032
$02EB	$2AFC			GOTO	ADD32EEE
$02EC	$	JMPNRM4032:
$02EC	$3002			MOVLW	0x02
$02ED	$00FC			MOVWF	STACK_12
$02EE	$24A5			CALL	_NRM4032
$02EF	$2AFC			GOTO	ADD32EEE
$02F0	$	JMPNRM32:
$02F0	$3004			MOVLW	0x04
$02F1	$00FC			MOVWF	STACK_12
$02F2	$2674			CALL	_NRM3232
$02F3	$2AFC			GOTO	ADD32EEE
$02F4	$	ADD_JMPSETFOV32:
$02F4	$3008			MOVLW	0x08
$02F5	$00FC			MOVWF	STACK_12
$02F6	$158A			BSF	PCLATH, 3
$02F7	$2073			CALL	_SETFOV32
$02F8	$118A			BCF	PCLATH, 3
$02F9	$2AFC			GOTO	ADD32EEE
$02FA	$	JMPEEE:
$02FA	$3000			MOVLW	0x00
$02FB	$00FC			MOVWF	STACK_12
$02FC	$	ADD32EEE:
$02FC	$0000			NOP
$02FD	$0008			RETURN
$08A0	$	_PWM1_Start:
$08A0	$1303			BCF	STATUS, RP1
$08A1	$1683			BSF	STATUS, RP0
$08A2	$1107			BCF	TRISC, 2
$08A3	$1283			BCF	STATUS, RP0
$08A4	$1512			BSF	T2CON, 2
$08A5	$300C			MOVLW	12
$08A6	$0497			IORWF	CCP1CON, 1
$08A7	$0008			RETURN
$08A8	$	_PWM2_Start:
$08A8	$1303			BCF	STATUS, RP1
$08A9	$1683			BSF	STATUS, RP0
$08AA	$1087			BCF	TRISC, 1
$08AB	$1283			BCF	STATUS, RP0
$08AC	$1512			BSF	T2CON, 2
$08AD	$300C			MOVLW	12
$08AE	$049D			IORWF	CCP2CON, 1
$08AF	$0008			RETURN
$08B6	$	_PWM1_Init:
$08B6	$1303			BCF	STATUS, RP1
$08B7	$1283			BCF	STATUS, RP0
$08B8	$0195			CLRF	CCPR1L, 1
$08B9	$1217			BCF	CCP1CON, 4
$08BA	$1297			BCF	CCP1CON, 5
$08BB	$0008			RETURN
$0735	$	_PWM2_Init:
$0735	$1303			BCF	STATUS, RP1
$0736	$1283			BCF	STATUS, RP0
$0737	$019B			CLRF	CCPR2L, 1
$0738	$121D			BCF	CCP2CON, 4
$0739	$129D			BCF	CCP2CON, 5
$073A	$0008			RETURN
$06E4	$	_Mul_16x16_U:
$06E4	$1303			BCF	STATUS, RP1
$06E5	$1283			BCF	STATUS, RP0
$06E6	$01FB			CLRF	STACK_11
$06E7	$01FA			CLRF	STACK_10
$06E8	$01F9			CLRF	STACK_9
$06E9	$3080			MOVLW	128
$06EA	$00F8			MOVWF	STACK_8
$06EB	$0CF1			RRF	STACK_1, F
$06EC	$0CF0			RRF	STACK_0, F
$06ED	$1C03			BTFSS	STATUS, C
$06EE	$2EF8			GOTO	$+10
$06EF	$0874			MOVF	STACK_4, W
$06F0	$07F9			ADDWF	STACK_9, F
$06F1	$0875			MOVF	STACK_5, W
$06F2	$1803			BTFSC	STATUS, C
$06F3	$0F75			INCFSZ	STACK_5, W
$06F4	$07FA			ADDWF	STACK_10, F
$06F5	$1803			BTFSC	STATUS, C
$06F6	$0AFB			INCF	STACK_11, F
$06F7	$1003			BCF	STATUS, C
$06F8	$1FF0			BTFSS	STACK_0, 7
$06F9	$2F00			GOTO	$+7
$06FA	$0874			MOVF	STACK_4, W
$06FB	$07FA			ADDWF	STACK_10, F
$06FC	$0875			MOVF	STACK_5, W
$06FD	$1803			BTFSC	STATUS, C
$06FE	$0F75			INCFSZ	STACK_5, W
$06FF	$07FB			ADDWF	STACK_11, F
$0700	$0CFB			RRF	STACK_11, F
$0701	$0CFA			RRF	STACK_10, F
$0702	$0CF9			RRF	STACK_9, F
$0703	$0CF8			RRF	STACK_8, F
$0704	$1C03			BTFSS	STATUS, C
$0705	$2EEB			GOTO	$-26
$0706	$087B			MOVF	STACK_11, W
$0707	$00F3			MOVWF	STACK_3
$0708	$087A			MOVF	STACK_10, W
$0709	$00F2			MOVWF	STACK_2
$070A	$0879			MOVF	STACK_9, W
$070B	$00F1			MOVWF	STACK_1
$070C	$0878			MOVF	STACK_8, W
$070D	$00F0			MOVWF	STACK_0
$070E	$0008			RETURN
$0813	$	_Word2Double:
$0813	$1303			BCF	STATUS, RP1
$0814	$1283			BCF	STATUS, RP0
$0815	$0870			MOVF	STACK_0, W
$0816	$00F8			MOVWF	STACK_8
$0817	$0871			MOVF	STACK_1, W
$0818	$00F0			MOVWF	STACK_0
$0819	$01F1			CLRF	STACK_1
$081A	$01F2			CLRF	STACK_2
$081B	$01F3			CLRF	STACK_3
$081C	$	FLO16U32:
$081C	$01FB			CLRF	STACK_11
$081D	$01FC			CLRF	STACK_12
$081E	$3096			MOVLW	150
$081F	$00F3			MOVWF	STACK_3
$0820	$01FA			CLRF	STACK_10
$0821	$0870			MOVF	STACK_0, W
$0822	$00F1			MOVWF	STACK_1
$0823	$0878			MOVF	STACK_8, W
$0824	$00F0			MOVWF	STACK_0
$0825	$01F8			CLRF	STACK_8
$0826	$01F2			CLRF	STACK_2
$0827	$118A			BCF	PCLATH, 3
$0828	$2674			CALL	_NRM3232
$0829	$158A			BSF	PCLATH, 3
$082A	$0008			RETURN
$02FE	$	_Div_32x32_FP:
$02FE	$1303			BCF	STATUS, RP1
$02FF	$1283			BCF	STATUS, RP0
$0300	$	FPD32:
$0300	$0877			MOVF	STACK_7, W
$0301	$1903			BTFSC	STATUS, Z
$0302	$2B8D			GOTO	JPDSETFDZ32
$0303	$0873			MOVF	STACK_3, W
$0304	$1903			BTFSC	STATUS, Z
$0305	$2B92			GOTO	JPDRES032
$0306	$	D32BNE0:
$0306	$0872			MOVF	STACK_2, W
$0307	$0676			XORWF	STACK_6, W
$0308	$3980			ANDLW	128
$0309	$00FA			MOVWF	STACK_10
$030A	$17F2			BSF	STACK_2, 7
$030B	$17F6			BSF	STACK_6, 7
$030C	$	TALIGN32:
$030C	$01A0			CLRF	__math_tempbD
$030D	$0872			MOVF	STACK_2, W
$030E	$00F8			MOVWF	STACK_8
$030F	$0871			MOVF	STACK_1, W
$0310	$00FC			MOVWF	STACK_12
$0311	$0870			MOVF	STACK_0, W
$0312	$00FD			MOVWF	STACK_13
$0313	$0874			MOVF	STACK_4, W
$0314	$02FD			SUBWF	STACK_13, F
$0315	$0875			MOVF	STACK_5, W
$0316	$1C03			BTFSS	STATUS, C
$0317	$0F75			INCFSZ	STACK_5, W
$0318	$	TS1ALIGN32:
$0318	$02FC			SUBWF	STACK_12, F
$0319	$0876			MOVF	STACK_6, W
$031A	$1C03			BTFSS	STATUS, C
$031B	$0F76			INCFSZ	STACK_6, W
$031C	$	TS2ALIGN32:
$031C	$02F8			SUBWF	STACK_8, F
$031D	$01F8			CLRF	STACK_8
$031E	$01FC			CLRF	STACK_12
$031F	$01FD			CLRF	STACK_13
$0320	$1C03			BTFSS	STATUS, C
$0321	$2B29			GOTO	DALIGN32OK
$0322	$1003			BCF	STATUS, C
$0323	$0CF2			RRF	STACK_2, F
$0324	$0CF1			RRF	STACK_1, F
$0325	$0CF0			RRF	STACK_0, F
$0326	$0CF8			RRF	STACK_8, F
$0327	$3001			MOVLW	0x01
$0328	$00A0			MOVWF	__math_tempbD
$0329	$	DALIGN32OK:
$0329	$0877			MOVF	STACK_7, W
$032A	$02F3			SUBWF	STACK_3, F
$032B	$1C03			BTFSS	STATUS, C
$032C	$2B33			GOTO	ALTB32
$032D	$	AGEB32:
$032D	$307E			MOVLW	126
$032E	$0720			ADDWF	__math_tempbD, W
$032F	$07F3			ADDWF	STACK_3, F
$0330	$1803			BTFSC	STATUS, C
$0331	$2B97			GOTO	JPDSETFOV32
$0332	$2B38			GOTO	DARGOK32
$0333	$	ALTB32:
$0333	$307E			MOVLW	126
$0334	$0720			ADDWF	__math_tempbD, W
$0335	$07F3			ADDWF	STACK_3, F
$0336	$1C03			BTFSS	STATUS, C
$0337	$2B9C			GOTO	JPDSETFUN32
$0338	$	DARGOK32:
$0338	$3018			MOVLW	24
$0339	$07FA			ADDWF	STACK_10, F
$033A	$	DLOOP32:
$033A	$0DFD			RLF	STACK_13, F
$033B	$0DFC			RLF	STACK_12, F
$033C	$0DF8			RLF	STACK_8, F
$033D	$0DF0			RLF	STACK_0, F
$033E	$0DF1			RLF	STACK_1, F
$033F	$0DF2			RLF	STACK_2, F
$0340	$0DA0			RLF	__math_tempbD, F
$0341	$0874			MOVF	STACK_4, W
$0342	$02F0			SUBWF	STACK_0, F
$0343	$0875			MOVF	STACK_5, W
$0344	$1C03			BTFSS	STATUS, C
$0345	$0F75			INCFSZ	STACK_5, W
$0346	$	DS132:
$0346	$02F1			SUBWF	STACK_1, F
$0347	$0876			MOVF	STACK_6, W
$0348	$1C03			BTFSS	STATUS, C
$0349	$0F76			INCFSZ	STACK_6, W
$034A	$	DS232:
$034A	$02F2			SUBWF	STACK_2, F
$034B	$0D76			RLF	STACK_6, W
$034C	$04A0			IORWF	__math_tempbD, F
$034D	$1C20			BTFSS	__math_tempbD, 0
$034E	$2B51			GOTO	DREST32
$034F	$147D			BSF	STACK_13, 0
$0350	$2B5C			GOTO	DOK32
$0351	$	DREST32:
$0351	$0874			MOVF	STACK_4, W
$0352	$07F0			ADDWF	STACK_0, F
$0353	$0875			MOVF	STACK_5, W
$0354	$1803			BTFSC	STATUS, C
$0355	$0F75			INCFSZ	STACK_5, W
$0356	$	DAREST32:
$0356	$07F1			ADDWF	STACK_1, F
$0357	$0876			MOVF	STACK_6, W
$0358	$1803			BTFSC	STATUS, C
$0359	$0A76			INCF	STACK_6, W
$035A	$07F2			ADDWF	STACK_2, F
$035B	$107D			BCF	STACK_13, 0
$035C	$	DOK32:
$035C	$03FA			DECF	STACK_10, F
$035D	$301F			MOVLW	31
$035E	$057A			ANDWF	STACK_10, W
$035F	$1D03			BTFSS	STATUS, Z
$0360	$2B3A			GOTO	DLOOP32
$0361	$	DROUND32:
$0361	$1B7B			BTFSC	STACK_11, 6
$0362	$1C7D			BTFSS	STACK_13, 0
$0363	$2B83			GOTO	DIV32OK
$0364	$1003			BCF	STATUS, C
$0365	$0DF0			RLF	STACK_0, F
$0366	$0DF1			RLF	STACK_1, F
$0367	$0DF2			RLF	STACK_2, F
$0368	$0DA0			RLF	__math_tempbD, F
$0369	$0874			MOVF	STACK_4, W
$036A	$02F0			SUBWF	STACK_0, F
$036B	$0875			MOVF	STACK_5, W
$036C	$1C03			BTFSS	STATUS, C
$036D	$0F75			INCFSZ	STACK_5, W
$036E	$02F1			SUBWF	STACK_1, F
$036F	$0876			MOVF	STACK_6, W
$0370	$1C03			BTFSS	STATUS, C
$0371	$0F76			INCFSZ	STACK_6, W
$0372	$02F2			SUBWF	STACK_2, F
$0373	$0D76			RLF	STACK_6, W
$0374	$0420			IORWF	__math_tempbD, W
$0375	$3901			ANDLW	0x01
$0376	$07FD			ADDWF	STACK_13, F
$0377	$1803			BTFSC	STATUS, C
$0378	$0AFC			INCF	STACK_12, F
$0379	$1903			BTFSC	STATUS, Z
$037A	$0AF8			INCF	STACK_8, F
$037B	$1D03			BTFSS	STATUS, Z
$037C	$2B83			GOTO	DIV32OK
$037D	$0CF8			RRF	STACK_8, F
$037E	$0CFC			RRF	STACK_12, F
$037F	$0CFD			RRF	STACK_13, F
$0380	$0AF3			INCF	STACK_3, F
$0381	$1903			BTFSC	STATUS, Z
$0382	$2B97			GOTO	JPDSETFOV32
$0383	$	DIV32OK:
$0383	$1FFA			BTFSS	STACK_10, 7
$0384	$13F8			BCF	STACK_8, 7
$0385	$0878			MOVF	STACK_8, W
$0386	$00F2			MOVWF	STACK_2
$0387	$087C			MOVF	STACK_12, W
$0388	$00F1			MOVWF	STACK_1
$0389	$087D			MOVF	STACK_13, W
$038A	$00F0			MOVWF	STACK_0
$038B	$3000			MOVLW	0x00
$038C	$2BA0			GOTO	DIV32EEE
$038D	$	JPDSETFDZ32:
$038D	$3001			MOVLW	0x01
$038E	$158A			BSF	PCLATH, 3
$038F	$20D0			CALL	_SETFDZ32
$0390	$118A			BCF	PCLATH, 3
$0391	$2BA0			GOTO	DIV32EEE
$0392	$	JPDRES032:
$0392	$3002			MOVLW	0x02
$0393	$158A			BSF	PCLATH, 3
$0394	$2097			CALL	_RES032
$0395	$118A			BCF	PCLATH, 3
$0396	$2BA0			GOTO	DIV32EEE
$0397	$	JPDSETFOV32:
$0397	$3004			MOVLW	0x04
$0398	$158A			BSF	PCLATH, 3
$0399	$2073			CALL	_SETFOV32
$039A	$118A			BCF	PCLATH, 3
$039B	$2BA0			GOTO	DIV32EEE
$039C	$	JPDSETFUN32:
$039C	$3008			MOVLW	0x08
$039D	$158A			BSF	PCLATH, 3
$039E	$2081			CALL	_SETFUN32
$039F	$118A			BCF	PCLATH, 3
$03A0	$	DIV32EEE:
$03A0	$0000			NOP
$03A1	$0008			RETURN
$088F	$	_Sub_32x32_FP:
$088F	$1303			BCF	STATUS, RP1
$0890	$1283			BCF	STATUS, RP0
$0891	$3080			MOVLW	0x80
$0892	$06F6			XORWF	STACK_6, F
$0893	$118A			BCF	PCLATH, 3
$0894	$225C			CALL	_Add_32x32_FP
$0895	$158A			BSF	PCLATH, 3
$0896	$0008			RETURN
$05AC	$	_Mul_16x16_S:
$05AC	$1303			BCF	STATUS, RP1
$05AD	$1283			BCF	STATUS, RP0
$05AE	$01FB			CLRF	STACK_11
$05AF	$01FA			CLRF	STACK_10
$05B0	$01F9			CLRF	STACK_9
$05B1	$3080			MOVLW	128
$05B2	$00F8			MOVWF	STACK_8
$05B3	$01FD			CLRF	STACK_13
$05B4	$1FF1			BTFSS	STACK_1, 7
$05B5	$2DBC			GOTO	$+7
$05B6	$09F1			COMF	STACK_1, F
$05B7	$09F0			COMF	STACK_0, F
$05B8	$0AF0			INCF	STACK_0, F
$05B9	$1903			BTFSC	STATUS, Z
$05BA	$0AF1			INCF	STACK_1, F
$05BB	$0AFD			INCF	STACK_13, F
$05BC	$1FF5			BTFSS	STACK_5, 7
$05BD	$2DC4			GOTO	$+7
$05BE	$09F5			COMF	STACK_5, F
$05BF	$09F4			COMF	STACK_4, F
$05C0	$0AF4			INCF	STACK_4, F
$05C1	$1903			BTFSC	STATUS, Z
$05C2	$0AF5			INCF	STACK_5, F
$05C3	$0AFD			INCF	STACK_13, F
$05C4	$0CF1			RRF	STACK_1, F
$05C5	$0CF0			RRF	STACK_0, F
$05C6	$1C03			BTFSS	STATUS, C
$05C7	$2DD1			GOTO	$+10
$05C8	$0874			MOVF	STACK_4, W
$05C9	$07F9			ADDWF	STACK_9, F
$05CA	$0875			MOVF	STACK_5, W
$05CB	$1803			BTFSC	STATUS, C
$05CC	$0F75			INCFSZ	STACK_5, W
$05CD	$07FA			ADDWF	STACK_10, F
$05CE	$1803			BTFSC	STATUS, C
$05CF	$0AFB			INCF	STACK_11, F
$05D0	$1003			BCF	STATUS, C
$05D1	$1FF0			BTFSS	STACK_0, 7
$05D2	$2DD9			GOTO	$+7
$05D3	$0874			MOVF	STACK_4, W
$05D4	$07FA			ADDWF	STACK_10, F
$05D5	$1803			BTFSC	STATUS, C
$05D6	$0AFB			INCF	STACK_11, F
$05D7	$0875			MOVF	STACK_5, W
$05D8	$07FB			ADDWF	STACK_11, F
$05D9	$0CFB			RRF	STACK_11, F
$05DA	$0CFA			RRF	STACK_10, F
$05DB	$0CF9			RRF	STACK_9, F
$05DC	$0CF8			RRF	STACK_8, F
$05DD	$1C03			BTFSS	STATUS, C
$05DE	$2DC4			GOTO	$-26
$05DF	$1C7D			BTFSS	STACK_13, 0
$05E0	$2DEC			GOTO	$+12
$05E1	$09FB			COMF	STACK_11, F
$05E2	$09FA			COMF	STACK_10, F
$05E3	$09F9			COMF	STACK_9, F
$05E4	$09F8			COMF	STACK_8, F
$05E5	$0AF8			INCF	STACK_8, F
$05E6	$1903			BTFSC	STATUS, Z
$05E7	$0AF9			INCF	STACK_9, F
$05E8	$1903			BTFSC	STATUS, Z
$05E9	$0AFA			INCF	STACK_10, F
$05EA	$1903			BTFSC	STATUS, Z
$05EB	$0AFB			INCF	STACK_11, F
$05EC	$087B			MOVF	STACK_11, W
$05ED	$00F3			MOVWF	STACK_3
$05EE	$087A			MOVF	STACK_10, W
$05EF	$00F2			MOVWF	STACK_2
$05F0	$0879			MOVF	STACK_9, W
$05F1	$00F1			MOVWF	STACK_1
$05F2	$0878			MOVF	STACK_8, W
$05F3	$00F0			MOVWF	STACK_0
$05F4	$0000			NOP
$05F5	$0008			RETURN
$0864	$	_SETIOV3224:
$0864	$1303			BCF	STATUS, RP1
$0865	$1283			BCF	STATUS, RP0
$0866	$147B			BSF	STACK_11, 0
$0867	$1FFB			BTFSS	STACK_11, 7
$0868	$2871			GOTO	SETIOV3224EEE
$0869	$01F2			CLRF	STACK_2
$086A	$1FFA			BTFSS	STACK_10, 7
$086B	$30FF			MOVLW	0xFF
$086C	$00F2			MOVWF	STACK_2
$086D	$00F1			MOVWF	STACK_1
$086E	$00F0			MOVWF	STACK_0
$086F	$0DFA			RLF	STACK_10, F
$0870	$0CF2			RRF	STACK_2, F
$0871	$	SETIOV3224EEE:
$0871	$30FF			MOVLW	0xFF
$0872	$0008			RETURN
$0853	$	_initport:
;lfr_pid_runner_3sen.c,14 :: 		void initport()
;lfr_pid_runner_3sen.c,16 :: 		ADCON1 =0x06;          //TURN OFF ADC AND CONFIGURE A AND E AS DIG I/O
$0853	$3006			MOVLW	6
$0854	$1303			BCF	STATUS, RP1
$0855	$1683			BSF	STATUS, RP0
$0856	$009F			MOVWF	ADCON1
;lfr_pid_runner_3sen.c,17 :: 		PORTA = 0;             //CLEAR PORTA
$0857	$1283			BCF	STATUS, RP0
$0858	$0185			CLRF	PORTA, 1
;lfr_pid_runner_3sen.c,18 :: 		PORTE = 0;             //CLEAR PORTE
$0859	$0189			CLRF	PORTE, 1
;lfr_pid_runner_3sen.c,19 :: 		TRISA = 0x3F;          //INITIALIZE PORTA AS INPUT
$085A	$303F			MOVLW	63
$085B	$1683			BSF	STATUS, RP0
$085C	$0085			MOVWF	TRISA
;lfr_pid_runner_3sen.c,20 :: 		TRISE = 0x03;          //INITIALIZE PORTE AS INPUT
$085D	$3003			MOVLW	3
$085E	$0089			MOVWF	TRISE
;lfr_pid_runner_3sen.c,21 :: 		TRISD = 0x00;          //INITIALIZE PORTD AS OUTPUT
$085F	$0188			CLRF	TRISD, 1
;lfr_pid_runner_3sen.c,22 :: 		TRISC = 0b00000000;    //INITIALIZE PORTC AS OUTPUT
$0860	$0187			CLRF	TRISC, 1
;lfr_pid_runner_3sen.c,23 :: 		TRISB = 0b11000000;    //INITIALIZE PORTB AS INPUT  FOR TSOP
$0861	$30C0			MOVLW	192
$0862	$0086			MOVWF	TRISB
;lfr_pid_runner_3sen.c,24 :: 		}
$0863	$0008			RETURN
$0800	$	_initpwm:
;lfr_pid_runner_3sen.c,26 :: 		void initpwm()
;lfr_pid_runner_3sen.c,28 :: 		PWM1_Init(5000);
$0800	$1303			BCF	STATUS, RP1
$0801	$1283			BCF	STATUS, RP0
$0802	$1012			BCF	T2CON, T2CKPS0
$0803	$1092			BCF	T2CON, T2CKPS1
$0804	$30C7			MOVLW	199
$0805	$1683			BSF	STATUS, RP0
$0806	$0092			MOVWF	PR2
$0807	$20B6			CALL	_PWM1_Init
;lfr_pid_runner_3sen.c,29 :: 		PWM2_Init(5000);
$0808	$1012			BCF	T2CON, T2CKPS0
$0809	$1092			BCF	T2CON, T2CKPS1
$080A	$30C7			MOVLW	199
$080B	$1683			BSF	STATUS, RP0
$080C	$0092			MOVWF	PR2
$080D	$118A			BCF	PCLATH, 3
$080E	$2735			CALL	_PWM2_Init
$080F	$158A			BSF	PCLATH, 3
;lfr_pid_runner_3sen.c,30 :: 		Pwm1_Start();          //RIGHT MOTOR
$0810	$20A0			CALL	_PWM1_Start
;lfr_pid_runner_3sen.c,31 :: 		Pwm2_Start();          //LEFT MOTOR
$0811	$20A8			CALL	_PWM2_Start
;lfr_pid_runner_3sen.c,32 :: 		}
$0812	$0008			RETURN
$070F	$	_indicator:
;lfr_pid_runner_3sen.c,57 :: 		void indicator()        //COPY THE SENSOR OUTPUT TO PORTD-INDICATOR
;lfr_pid_runner_3sen.c,60 :: 		PORTD.F7 = 0;
$070F	$1303			BCF	STATUS, RP1
$0710	$1283			BCF	STATUS, RP0
$0711	$1388			BCF	PORTD, 7
;lfr_pid_runner_3sen.c,61 :: 		PORTD.F6 = 0;
$0712	$1308			BCF	PORTD, 6
;lfr_pid_runner_3sen.c,62 :: 		PORTD.F5 = PORTA.F2;
$0713	$3000			MOVLW	0
$0714	$1905			BTFSC	PORTA, 2
$0715	$3001			MOVLW	1
$0716	$00F1			MOVWF	STACK_1
$0717	$3000			MOVLW	0
$0718	$1871			BTFSC	STACK_1, 0
$0719	$3020			MOVLW	32
$071A	$0608			XORWF	PORTD, 0
$071B	$3920			ANDLW	32
$071C	$0688			XORWF	PORTD, 1
;lfr_pid_runner_3sen.c,63 :: 		PORTD.F4 = PORTA.F3;
$071D	$3000			MOVLW	0
$071E	$1985			BTFSC	PORTA, 3
$071F	$3001			MOVLW	1
$0720	$00F1			MOVWF	STACK_1
$0721	$3000			MOVLW	0
$0722	$1871			BTFSC	STACK_1, 0
$0723	$3010			MOVLW	16
$0724	$0608			XORWF	PORTD, 0
$0725	$3910			ANDLW	16
$0726	$0688			XORWF	PORTD, 1
;lfr_pid_runner_3sen.c,64 :: 		PORTD.F3 = PORTA.F4;
$0727	$3000			MOVLW	0
$0728	$1A05			BTFSC	PORTA, 4
$0729	$3001			MOVLW	1
$072A	$00F1			MOVWF	STACK_1
$072B	$3000			MOVLW	0
$072C	$1871			BTFSC	STACK_1, 0
$072D	$3008			MOVLW	8
$072E	$0608			XORWF	PORTD, 0
$072F	$3908			ANDLW	8
$0730	$0688			XORWF	PORTD, 1
;lfr_pid_runner_3sen.c,65 :: 		PORTD.F2 = 0;
$0731	$1108			BCF	PORTD, 2
;lfr_pid_runner_3sen.c,66 :: 		PORTD.F1 = 0;
$0732	$1088			BCF	PORTD, 1
;lfr_pid_runner_3sen.c,67 :: 		PORTD.F0 = 0;
$0733	$1008			BCF	PORTD, 0
;lfr_pid_runner_3sen.c,68 :: 		}
$0734	$0008			RETURN
$03A2	$	_CalcError:
;lfr_pid_runner_3sen.c,69 :: 		void CalcError()				//calculates the current error
;lfr_pid_runner_3sen.c,71 :: 		s1 = 0;
$03A2	$1303			BCF	STATUS, RP1
$03A3	$1283			BCF	STATUS, RP0
$03A4	$01A1			CLRF	_s1
$03A5	$01A2			CLRF	_s1+1
;lfr_pid_runner_3sen.c,72 :: 		s2 = 0;
$03A6	$01A3			CLRF	_s2
$03A7	$01A4			CLRF	_s2+1
;lfr_pid_runner_3sen.c,73 :: 		s3 = 0;
$03A8	$01A5			CLRF	_s3
$03A9	$01A6			CLRF	_s3+1
;lfr_pid_runner_3sen.c,75 :: 		if(PORTA.F2)
$03AA	$1D05			BTFSS	PORTA, 2
$03AB	$2BB2			GOTO	L_CalcError_0
;lfr_pid_runner_3sen.c,77 :: 		lastreading='r';
$03AC	$3072			MOVLW	114
$03AD	$00A7			MOVWF	_lastreading
;lfr_pid_runner_3sen.c,78 :: 		s1 = 1;
$03AE	$3001			MOVLW	1
$03AF	$00A1			MOVWF	_s1
$03B0	$3000			MOVLW	0
$03B1	$00A2			MOVWF	_s1+1
;lfr_pid_runner_3sen.c,79 :: 		}
$03B2	$	L_CalcError_0:
;lfr_pid_runner_3sen.c,80 :: 		if(PORTA.F3)
$03B2	$1D85			BTFSS	PORTA, 3
$03B3	$2BB8			GOTO	L_CalcError_1
;lfr_pid_runner_3sen.c,82 :: 		s2 = 1;
$03B4	$3001			MOVLW	1
$03B5	$00A3			MOVWF	_s2
$03B6	$3000			MOVLW	0
$03B7	$00A4			MOVWF	_s2+1
;lfr_pid_runner_3sen.c,83 :: 		}
$03B8	$	L_CalcError_1:
;lfr_pid_runner_3sen.c,84 :: 		if(PORTA.F4)
$03B8	$1E05			BTFSS	PORTA, 4
$03B9	$2BC0			GOTO	L_CalcError_2
;lfr_pid_runner_3sen.c,86 :: 		s3 = 1;
$03BA	$3001			MOVLW	1
$03BB	$00A5			MOVWF	_s3
$03BC	$3000			MOVLW	0
$03BD	$00A6			MOVWF	_s3+1
;lfr_pid_runner_3sen.c,87 :: 		lastreading='l';
$03BE	$306C			MOVLW	108
$03BF	$00A7			MOVWF	_lastreading
;lfr_pid_runner_3sen.c,88 :: 		}
$03C0	$	L_CalcError_2:
;lfr_pid_runner_3sen.c,89 :: 		perror = error;
$03C0	$082C			MOVF	_error, 0
$03C1	$00A8			MOVWF	_perror
$03C2	$082D			MOVF	_error+1, 0
$03C3	$00A9			MOVWF	_perror+1
$03C4	$082E			MOVF	_error+2, 0
$03C5	$00AA			MOVWF	_perror+2
$03C6	$082F			MOVF	_error+3, 0
$03C7	$00AB			MOVWF	_perror+3
;lfr_pid_runner_3sen.c,93 :: 		error = (s1 * 1) + (s2 * 2) + (s3 * 3) ;
$03C8	$3001			MOVLW	1
$03C9	$00F4			MOVWF	STACK_4
$03CA	$0823			MOVF	_s2, 0
$03CB	$00F0			MOVWF	STACK_0
$03CC	$0824			MOVF	_s2+1, 0
$03CD	$00F1			MOVWF	STACK_0+1
$03CE	$0874			MOVF	STACK_4, 0
$03CF	$	L_CalcError_16:
$03CF	$1903			BTFSC	STATUS, Z
$03D0	$2BD6			GOTO	L_CalcError_17
$03D1	$0DF0			RLF	STACK_0, 1
$03D2	$0DF1			RLF	STACK_0+1, 1
$03D3	$1070			BCF	STACK_0, 0
$03D4	$3FFF			ADDLW	255
$03D5	$2BCF			GOTO	L_CalcError_16
$03D6	$	L_CalcError_17:
$03D6	$0870			MOVF	STACK_0, 0
$03D7	$0721			ADDWF	_s1, 0
$03D8	$00E0			MOVWF	FLOC_CalcError+0
$03D9	$0822			MOVF	_s1+1, 0
$03DA	$1803			BTFSC	STATUS, C
$03DB	$3F01			ADDLW	1
$03DC	$0771			ADDWF	STACK_0+1, 0
$03DD	$00E1			MOVWF	FLOC_CalcError+1
$03DE	$0825			MOVF	_s3, 0
$03DF	$00F0			MOVWF	STACK_0
$03E0	$0826			MOVF	_s3+1, 0
$03E1	$00F1			MOVWF	STACK_0+1
$03E2	$3003			MOVLW	3
$03E3	$00F4			MOVWF	STACK_4
$03E4	$3000			MOVLW	0
$03E5	$00F5			MOVWF	STACK_4+1
$03E6	$26E4			CALL	_mul_16x16_u
$03E7	$0860			MOVF	FLOC_CalcError+0, 0
$03E8	$07F0			ADDWF	STACK_0, 1
$03E9	$0861			MOVF	FLOC_CalcError+1, 0
$03EA	$1803			BTFSC	STATUS, C
$03EB	$3F01			ADDLW	1
$03EC	$07F1			ADDWF	STACK_0+1, 1
$03ED	$158A			BSF	PCLATH, 3
$03EE	$2013			CALL	_word2double
$03EF	$118A			BCF	PCLATH, 3
$03F0	$0870			MOVF	STACK_0, 0
$03F1	$00E0			MOVWF	FLOC_CalcError+0
$03F2	$0871			MOVF	STACK_0+1, 0
$03F3	$00E1			MOVWF	FLOC_CalcError+1
$03F4	$0872			MOVF	STACK_0+2, 0
$03F5	$00E2			MOVWF	FLOC_CalcError+2
$03F6	$0873			MOVF	STACK_0+3, 0
$03F7	$00E3			MOVWF	FLOC_CalcError+3
$03F8	$0860			MOVF	FLOC_CalcError+0, 0
$03F9	$00AC			MOVWF	_error
$03FA	$0861			MOVF	FLOC_CalcError+1, 0
$03FB	$00AD			MOVWF	_error+1
$03FC	$0862			MOVF	FLOC_CalcError+2, 0
$03FD	$00AE			MOVWF	_error+2
$03FE	$0863			MOVF	FLOC_CalcError+3, 0
$03FF	$00AF			MOVWF	_error+3
;lfr_pid_runner_3sen.c,94 :: 		error = (error)/(s1+s2+s3);
$0400	$0823			MOVF	_s2, 0
$0401	$0721			ADDWF	_s1, 0
$0402	$00F0			MOVWF	STACK_0
$0403	$0822			MOVF	_s1+1, 0
$0404	$1803			BTFSC	STATUS, C
$0405	$3F01			ADDLW	1
$0406	$0724			ADDWF	_s2+1, 0
$0407	$00F1			MOVWF	STACK_0+1
$0408	$0825			MOVF	_s3, 0
$0409	$07F0			ADDWF	STACK_0, 1
$040A	$0826			MOVF	_s3+1, 0
$040B	$1803			BTFSC	STATUS, C
$040C	$3F01			ADDLW	1
$040D	$07F1			ADDWF	STACK_0+1, 1
$040E	$158A			BSF	PCLATH, 3
$040F	$2013			CALL	_word2double
$0410	$118A			BCF	PCLATH, 3
$0411	$0870			MOVF	STACK_0, 0
$0412	$00F4			MOVWF	STACK_4
$0413	$0871			MOVF	STACK_0+1, 0
$0414	$00F5			MOVWF	STACK_4+1
$0415	$0872			MOVF	STACK_0+2, 0
$0416	$00F6			MOVWF	STACK_4+2
$0417	$0873			MOVF	STACK_0+3, 0
$0418	$00F7			MOVWF	STACK_4+3
$0419	$0860			MOVF	FLOC_CalcError+0, 0
$041A	$00F0			MOVWF	STACK_0
$041B	$0861			MOVF	FLOC_CalcError+1, 0
$041C	$00F1			MOVWF	STACK_0+1
$041D	$0862			MOVF	FLOC_CalcError+2, 0
$041E	$00F2			MOVWF	STACK_0+2
$041F	$0863			MOVF	FLOC_CalcError+3, 0
$0420	$00F3			MOVWF	STACK_0+3
$0421	$22FE			CALL	_div_32x32_fp
$0422	$0870			MOVF	STACK_0, 0
$0423	$00AC			MOVWF	_error
$0424	$0871			MOVF	STACK_0+1, 0
$0425	$00AD			MOVWF	_error+1
$0426	$0872			MOVF	STACK_0+2, 0
$0427	$00AE			MOVWF	_error+2
$0428	$0873			MOVF	STACK_0+3, 0
$0429	$00AF			MOVWF	_error+3
;lfr_pid_runner_3sen.c,95 :: 		error = error - 3;
$042A	$3000			MOVLW	0
$042B	$00F4			MOVWF	STACK_4
$042C	$3000			MOVLW	0
$042D	$00F5			MOVWF	STACK_4+1
$042E	$3040			MOVLW	64
$042F	$00F6			MOVWF	STACK_4+2
$0430	$3080			MOVLW	128
$0431	$00F7			MOVWF	STACK_4+3
$0432	$158A			BSF	PCLATH, 3
$0433	$208F			CALL	_sub_32x32_fp
$0434	$118A			BCF	PCLATH, 3
$0435	$0870			MOVF	STACK_0, 0
$0436	$00AC			MOVWF	_error
$0437	$0871			MOVF	STACK_0+1, 0
$0438	$00AD			MOVWF	_error+1
$0439	$0872			MOVF	STACK_0+2, 0
$043A	$00AE			MOVWF	_error+2
$043B	$0873			MOVF	STACK_0+3, 0
$043C	$00AF			MOVWF	_error+3
;lfr_pid_runner_3sen.c,96 :: 		}
$043D	$0008			RETURN
$08C6	$	_motor_LF:
;lfr_pid_runner_3sen.c,46 :: 		void motor_LF()         //LEFT MOTOR FWD DIR
;lfr_pid_runner_3sen.c,48 :: 		PORTC.F5 = 1;
$08C6	$1303			BCF	STATUS, RP1
$08C7	$1283			BCF	STATUS, RP0
$08C8	$1687			BSF	PORTC, 5
;lfr_pid_runner_3sen.c,49 :: 		PORTC.F4 = 0;
$08C9	$1207			BCF	PORTC, 4
;lfr_pid_runner_3sen.c,50 :: 		}
$08CA	$0008			RETURN
$08C1	$	_motor_RF:
;lfr_pid_runner_3sen.c,34 :: 		void motor_RF()         //RIGHT MOTOR FWD DIR
;lfr_pid_runner_3sen.c,36 :: 		PORTC.F7 = 1;
$08C1	$1303			BCF	STATUS, RP1
$08C2	$1283			BCF	STATUS, RP0
$08C3	$1787			BSF	PORTC, 7
;lfr_pid_runner_3sen.c,37 :: 		PORTC.F6 = 0;
$08C4	$1307			BCF	PORTC, 6
;lfr_pid_runner_3sen.c,38 :: 		}
$08C5	$0008			RETURN
$063B	$	_PWM1_Change_Duty:
$063B	$1303			BCF	STATUS, RP1
$063C	$1683			BSF	STATUS, RP0
$063D	$0812			MOVF	PR2, 0
$063E	$3F01			ADDLW	1
$063F	$00F0			MOVWF	STACK_0
$0640	$01F1			CLRF	STACK_0+1
$0641	$1803			BTFSC	STATUS, C
$0642	$0AF1			INCF	STACK_0+1, 1
$0643	$1283			BCF	STATUS, RP0
$0644	$0860			MOVF	FARG_PWM1_Change_Duty+0, 0
$0645	$00F4			MOVWF	STACK_4
$0646	$01F5			CLRF	STACK_4+1
$0647	$25AC			CALL	_mul_16x16_s
$0648	$3006			MOVLW	6
$0649	$00F2			MOVWF	STACK_2
$064A	$0870			MOVF	STACK_0, 0
$064B	$00F4			MOVWF	STACK_4
$064C	$0871			MOVF	STACK_0+1, 0
$064D	$00F5			MOVWF	STACK_4+1
$064E	$0872			MOVF	STACK_2, 0
$064F	$	L_PWM1_Change_Duty_2:
$064F	$1903			BTFSC	STATUS, Z
$0650	$2E56			GOTO	L_PWM1_Change_Duty_3
$0651	$0CF5			RRF	STACK_4+1, 1
$0652	$0CF4			RRF	STACK_4, 1
$0653	$13F5			BCF	STACK_4+1, 7
$0654	$3FFF			ADDLW	255
$0655	$2E4F			GOTO	L_PWM1_Change_Duty_2
$0656	$	L_PWM1_Change_Duty_3:
$0656	$0874			MOVF	STACK_4, 0
$0657	$00F0			MOVWF	STACK_0
$0658	$0DF0			RLF	STACK_0, 1
$0659	$1070			BCF	STACK_0, 0
$065A	$0DF0			RLF	STACK_0, 1
$065B	$1070			BCF	STACK_0, 0
$065C	$0DF0			RLF	STACK_0, 1
$065D	$1070			BCF	STACK_0, 0
$065E	$0DF0			RLF	STACK_0, 1
$065F	$1070			BCF	STACK_0, 0
$0660	$3030			MOVLW	48
$0661	$0570			ANDWF	STACK_0, 0
$0662	$00F3			MOVWF	STACK_3
$0663	$0874			MOVF	STACK_4, 0
$0664	$00F0			MOVWF	STACK_0
$0665	$0875			MOVF	STACK_4+1, 0
$0666	$00F1			MOVWF	STACK_0+1
$0667	$0CF1			RRF	STACK_0+1, 1
$0668	$0CF0			RRF	STACK_0, 1
$0669	$13F1			BCF	STACK_0+1, 7
$066A	$0CF1			RRF	STACK_0+1, 1
$066B	$0CF0			RRF	STACK_0, 1
$066C	$13F1			BCF	STACK_0+1, 7
$066D	$0870			MOVF	STACK_0, 0
$066E	$0095			MOVWF	CCPR1L
$066F	$300F			MOVLW	15
$0670	$0597			ANDWF	CCP1CON, 1
$0671	$0873			MOVF	STACK_3, 0
$0672	$0497			IORWF	CCP1CON, 1
$0673	$0008			RETURN
$06AB	$	_PWM2_Change_Duty:
$06AB	$1303			BCF	STATUS, RP1
$06AC	$1683			BSF	STATUS, RP0
$06AD	$0812			MOVF	PR2, 0
$06AE	$3F01			ADDLW	1
$06AF	$00F0			MOVWF	STACK_0
$06B0	$01F1			CLRF	STACK_0+1
$06B1	$1803			BTFSC	STATUS, C
$06B2	$0AF1			INCF	STACK_0+1, 1
$06B3	$1283			BCF	STATUS, RP0
$06B4	$0860			MOVF	FARG_PWM2_Change_Duty+0, 0
$06B5	$00F4			MOVWF	STACK_4
$06B6	$01F5			CLRF	STACK_4+1
$06B7	$25AC			CALL	_mul_16x16_s
$06B8	$3006			MOVLW	6
$06B9	$00F2			MOVWF	STACK_2
$06BA	$0870			MOVF	STACK_0, 0
$06BB	$00F4			MOVWF	STACK_4
$06BC	$0871			MOVF	STACK_0+1, 0
$06BD	$00F5			MOVWF	STACK_4+1
$06BE	$0872			MOVF	STACK_2, 0
$06BF	$	L_PWM2_Change_Duty_0:
$06BF	$1903			BTFSC	STATUS, Z
$06C0	$2EC6			GOTO	L_PWM2_Change_Duty_1
$06C1	$0CF5			RRF	STACK_4+1, 1
$06C2	$0CF4			RRF	STACK_4, 1
$06C3	$13F5			BCF	STACK_4+1, 7
$06C4	$3FFF			ADDLW	255
$06C5	$2EBF			GOTO	L_PWM2_Change_Duty_0
$06C6	$	L_PWM2_Change_Duty_1:
$06C6	$0874			MOVF	STACK_4, 0
$06C7	$00F0			MOVWF	STACK_0
$06C8	$0DF0			RLF	STACK_0, 1
$06C9	$1070			BCF	STACK_0, 0
$06CA	$0DF0			RLF	STACK_0, 1
$06CB	$1070			BCF	STACK_0, 0
$06CC	$0DF0			RLF	STACK_0, 1
$06CD	$1070			BCF	STACK_0, 0
$06CE	$0DF0			RLF	STACK_0, 1
$06CF	$1070			BCF	STACK_0, 0
$06D0	$3030			MOVLW	48
$06D1	$0570			ANDWF	STACK_0, 0
$06D2	$00F3			MOVWF	STACK_3
$06D3	$0874			MOVF	STACK_4, 0
$06D4	$00F0			MOVWF	STACK_0
$06D5	$0875			MOVF	STACK_4+1, 0
$06D6	$00F1			MOVWF	STACK_0+1
$06D7	$0CF1			RRF	STACK_0+1, 1
$06D8	$0CF0			RRF	STACK_0, 1
$06D9	$13F1			BCF	STACK_0+1, 7
$06DA	$0CF1			RRF	STACK_0+1, 1
$06DB	$0CF0			RRF	STACK_0, 1
$06DC	$13F1			BCF	STACK_0+1, 7
$06DD	$0870			MOVF	STACK_0, 0
$06DE	$009B			MOVWF	CCPR2L
$06DF	$300F			MOVLW	15
$06E0	$059D			ANDWF	CCP2CON, 1
$06E1	$0873			MOVF	STACK_3, 0
$06E2	$049D			IORWF	CCP2CON, 1
$06E3	$0008			RETURN
$08CB	$	_motor_RB:
;lfr_pid_runner_3sen.c,40 :: 		void motor_RB()         //RIGHT MOTOR REV DIR
;lfr_pid_runner_3sen.c,42 :: 		PORTC.F7 = 0;
$08CB	$1303			BCF	STATUS, RP1
$08CC	$1283			BCF	STATUS, RP0
$08CD	$1387			BCF	PORTC, 7
;lfr_pid_runner_3sen.c,43 :: 		PORTC.F6 = 1;
$08CE	$1707			BSF	PORTC, 6
;lfr_pid_runner_3sen.c,44 :: 		}
$08CF	$0008			RETURN
$08BC	$	_motor_LB:
;lfr_pid_runner_3sen.c,52 :: 		void motor_LB()         //LEFT MOTOR REV DIR
;lfr_pid_runner_3sen.c,54 :: 		PORTC.F5 = 0;
$08BC	$1303			BCF	STATUS, RP1
$08BD	$1283			BCF	STATUS, RP0
$08BE	$1287			BCF	PORTC, 5
;lfr_pid_runner_3sen.c,55 :: 		PORTC.F4 = 1;
$08BF	$1607			BSF	PORTC, 4
;lfr_pid_runner_3sen.c,56 :: 		}
$08C0	$0008			RETURN
$0509	$	GlobalInilfr_pid_runner_3sen:
$0509	$3000			MOVLW	0
$050A	$1303			BCF	STATUS, RP1
$050B	$1283			BCF	STATUS, RP0
$050C	$00B0			MOVWF	_TF+0
$050D	$3000			MOVLW	0
$050E	$00B1			MOVWF	_TF+1
$050F	$3000			MOVLW	0
$0510	$00B2			MOVWF	_TB+0
$0511	$3000			MOVLW	0
$0512	$00B3			MOVWF	_TB+1
$0513	$30AA			MOVLW	170
$0514	$00B4			MOVWF	_basespeed+0
$0515	$3032			MOVLW	50
$0516	$00B5			MOVWF	_Kp+0
$0517	$300A			MOVLW	10
$0518	$00B6			MOVWF	_Ki+0
$0519	$3014			MOVLW	20
$051A	$00B7			MOVWF	_Kd+0
$051B	$3000			MOVLW	0
$051C	$00B8			MOVWF	_rightpulse+0
$051D	$3000			MOVLW	0
$051E	$00B9			MOVWF	_rightpulse+1
$051F	$3000			MOVLW	0
$0520	$00BA			MOVWF	_rightpulse+2
$0521	$3000			MOVLW	0
$0522	$00BB			MOVWF	_rightpulse+3
$0523	$3000			MOVLW	0
$0524	$00BC			MOVWF	_leftpulse+0
$0525	$3000			MOVLW	0
$0526	$00BD			MOVWF	_leftpulse+1
$0527	$3000			MOVLW	0
$0528	$00BE			MOVWF	_leftpulse+2
$0529	$3000			MOVLW	0
$052A	$00BF			MOVWF	_leftpulse+3
$052B	$3000			MOVLW	0
$052C	$00A8			MOVWF	_perror+0
$052D	$3000			MOVLW	0
$052E	$00A9			MOVWF	_perror+1
$052F	$3000			MOVLW	0
$0530	$00AA			MOVWF	_perror+2
$0531	$3000			MOVLW	0
$0532	$00AB			MOVWF	_perror+3
$0533	$3000			MOVLW	0
$0534	$00AC			MOVWF	_error+0
$0535	$3000			MOVLW	0
$0536	$00AD			MOVWF	_error+1
$0537	$3000			MOVLW	0
$0538	$00AE			MOVWF	_error+2
$0539	$3000			MOVLW	0
$053A	$00AF			MOVWF	_error+3
$053B	$3000			MOVLW	0
$053C	$00C0			MOVWF	_PROPORTIONAL+0
$053D	$3000			MOVLW	0
$053E	$00C1			MOVWF	_PROPORTIONAL+1
$053F	$3000			MOVLW	0
$0540	$00C2			MOVWF	_PROPORTIONAL+2
$0541	$3000			MOVLW	0
$0542	$00C3			MOVWF	_PROPORTIONAL+3
$0543	$3000			MOVLW	0
$0544	$00C4			MOVWF	_INTEGRAL+0
$0545	$3000			MOVLW	0
$0546	$00C5			MOVWF	_INTEGRAL+1
$0547	$3000			MOVLW	0
$0548	$00C6			MOVWF	_INTEGRAL+2
$0549	$3000			MOVLW	0
$054A	$00C7			MOVWF	_INTEGRAL+3
$054B	$3000			MOVLW	0
$054C	$00C8			MOVWF	_DERIVATIVE+0
$054D	$3000			MOVLW	0
$054E	$00C9			MOVWF	_DERIVATIVE+1
$054F	$3000			MOVLW	0
$0550	$00CA			MOVWF	_DERIVATIVE+2
$0551	$3000			MOVLW	0
$0552	$00CB			MOVWF	_DERIVATIVE+3
$0553	$3000			MOVLW	0
$0554	$00CC			MOVWF	_correction+0
$0555	$3000			MOVLW	0
$0556	$00CD			MOVWF	_correction+1
$0557	$3000			MOVLW	0
$0558	$00CE			MOVWF	_correction+2
$0559	$3000			MOVLW	0
$055A	$00CF			MOVWF	_correction+3
$055B	$0008			RETURN
$082B	$	_Equals_Double:
$082B	$1303			BCF	STATUS, RP1
$082C	$1283			BCF	STATUS, RP0
$082D	$0873			MOVF	STACK_3, W
$082E	$0677			XORWF	STACK_7, W
$082F	$1D03			BTFSS	STATUS, Z
$0830	$283E			GOTO	EQU_FALSE
$0831	$0872			MOVF	STACK_2, W
$0832	$0676			XORWF	STACK_6, W
$0833	$1D03			BTFSS	STATUS, Z
$0834	$283E			GOTO	EQU_FALSE
$0835	$0871			MOVF	STACK_1, W
$0836	$0675			XORWF	STACK_5, W
$0837	$1D03			BTFSS	STATUS, Z
$0838	$283E			GOTO	EQU_FALSE
$0839	$0870			MOVF	STACK_0, W
$083A	$0674			XORWF	STACK_4, W
$083B	$1903			BTFSC	STATUS, Z
$083C	$1503			BSF	STATUS, Z
$083D	$0008			RETURN
$083E	$	EQU_FALSE:
$083E	$1103			BCF	STATUS, Z
$083F	$0008			RETURN
$0840	$0008			RETURN
$0841	$	_Byte2Double:
$0841	$1303			BCF	STATUS, RP1
$0842	$1283			BCF	STATUS, RP0
$0843	$	FLO08U32:
$0843	$0870			MOVF	STACK_0, W
$0844	$00F8			MOVWF	STACK_8
$0845	$01FB			CLRF	STACK_11
$0846	$01FC			CLRF	STACK_12
$0847	$309E			MOVLW	0x9E
$0848	$00F3			MOVWF	STACK_3
$0849	$01FA			CLRF	STACK_10
$084A	$01F2			CLRF	STACK_2
$084B	$01F1			CLRF	STACK_1
$084C	$01F0			CLRF	STACK_0
$084D	$3002			MOVLW	0x02
$084E	$00FC			MOVWF	STACK_12
$084F	$118A			BCF	PCLATH, 3
$0850	$24A5			CALL	_NRM4032
$0851	$158A			BSF	PCLATH, 3
$0852	$0008			RETURN
$043E	$	_Mul_32x32_FP:
$043E	$1303			BCF	STATUS, RP1
$043F	$1283			BCF	STATUS, RP0
$0440	$	FPM32:
$0440	$01FB			CLRF	STACK_11
$0441	$0873			MOVF	STACK_3, W
$0442	$1D03			BTFSS	STATUS, Z
$0443	$0877			MOVF	STACK_7, W
$0444	$1903			BTFSC	STATUS, Z
$0445	$2C95			GOTO	JPMRES032
$0446	$	M32BNE0:
$0446	$0872			MOVF	STACK_2, W
$0447	$0676			XORWF	STACK_6, W
$0448	$00FA			MOVWF	STACK_10
$0449	$0877			MOVF	STACK_7, W
$044A	$07F3			ADDWF	STACK_3, F
$044B	$307E			MOVLW	126
$044C	$1C03			BTFSS	STATUS, C
$044D	$2C52			GOTO	MTUN32
$044E	$02F3			SUBWF	STACK_3, F
$044F	$1803			BTFSC	STATUS, C
$0450	$2C9A			GOTO	JPMSETFOV32
$0451	$2C55			GOTO	MOK32
$0452	$	MTUN32:
$0452	$02F3			SUBWF	STACK_3, F
$0453	$1C03			BTFSS	STATUS, C
$0454	$2C9F			GOTO	JPMSETFUN32
$0455	$	MOK32:
$0455	$0872			MOVF	STACK_2, W
$0456	$00F8			MOVWF	STACK_8
$0457	$0871			MOVF	STACK_1, W
$0458	$00FC			MOVWF	STACK_12
$0459	$0870			MOVF	STACK_0, W
$045A	$00FD			MOVWF	STACK_13
$045B	$17F8			BSF	STACK_8, 7
$045C	$17F6			BSF	STACK_6, 7
$045D	$1003			BCF	STATUS, C
$045E	$01F2			CLRF	STACK_2
$045F	$01F1			CLRF	STACK_1
$0460	$01F0			CLRF	STACK_0
$0461	$3018			MOVLW	24
$0462	$00A0			MOVWF	__math_tempbD
$0463	$	MLOOP32:
$0463	$1C7D			BTFSS	STACK_13, 0
$0464	$2C6F			GOTO	MNOADD32
$0465	$	MADD32:
$0465	$0874			MOVF	STACK_4, W
$0466	$07F0			ADDWF	STACK_0, F
$0467	$0875			MOVF	STACK_5, W
$0468	$1803			BTFSC	STATUS, C
$0469	$0F75			INCFSZ	STACK_5, W
$046A	$07F1			ADDWF	STACK_1, F
$046B	$0876			MOVF	STACK_6, W
$046C	$1803			BTFSC	STATUS, C
$046D	$0F76			INCFSZ	STACK_6, W
$046E	$07F2			ADDWF	STACK_2, F
$046F	$	MNOADD32:
$046F	$0CF2			RRF	STACK_2, F
$0470	$0CF1			RRF	STACK_1, F
$0471	$0CF0			RRF	STACK_0, F
$0472	$0CF8			RRF	STACK_8, F
$0473	$0CFC			RRF	STACK_12, F
$0474	$0CFD			RRF	STACK_13, F
$0475	$1003			BCF	STATUS, C
$0476	$0BA0			DECFSZ	__math_tempbD, F
$0477	$2C63			GOTO	MLOOP32
$0478	$1BF2			BTFSC	STACK_2, 7
$0479	$2C7F			GOTO	MROUND32
$047A	$0DF8			RLF	STACK_8, F
$047B	$0DF0			RLF	STACK_0, F
$047C	$0DF1			RLF	STACK_1, F
$047D	$0DF2			RLF	STACK_2, F
$047E	$03F3			DECF	STACK_3, F
$047F	$	MROUND32:
$047F	$1B7B			BTFSC	STACK_11, 6
$0480	$1C70			BTFSS	STACK_0, 0
$0481	$2C91			GOTO	MUL32OK
$0482	$1FF8			BTFSS	STACK_8, 7
$0483	$2C91			GOTO	MUL32OK
$0484	$0AF0			INCF	STACK_0, F
$0485	$1903			BTFSC	STATUS, Z
$0486	$0AF1			INCF	STACK_1, F
$0487	$1903			BTFSC	STATUS, Z
$0488	$0AF2			INCF	STACK_2, F
$0489	$1D03			BTFSS	STATUS, Z
$048A	$2C91			GOTO	MUL32OK
$048B	$0CF2			RRF	STACK_2, F
$048C	$0CF1			RRF	STACK_1, F
$048D	$0CF0			RRF	STACK_0, F
$048E	$0AF3			INCF	STACK_3, F
$048F	$1903			BTFSC	STATUS, Z
$0490	$2C9A			GOTO	JPMSETFOV32
$0491	$	MUL32OK:
$0491	$1FFA			BTFSS	STACK_10, 7
$0492	$13F2			BCF	STACK_2, 7
$0493	$3000			MOVLW	0x00
$0494	$2CA3			GOTO	MUL32EEE
$0495	$	JPMRES032:
$0495	$3001			MOVLW	0x01
$0496	$158A			BSF	PCLATH, 3
$0497	$2097			CALL	_RES032
$0498	$118A			BCF	PCLATH, 3
$0499	$2CA3			GOTO	MUL32EEE
$049A	$	JPMSETFOV32:
$049A	$3002			MOVLW	0x02
$049B	$158A			BSF	PCLATH, 3
$049C	$2073			CALL	_SETFOV32
$049D	$118A			BCF	PCLATH, 3
$049E	$2CA3			GOTO	MUL32EEE
$049F	$	JPMSETFUN32:
$049F	$3004			MOVLW	0x04
$04A0	$158A			BSF	PCLATH, 3
$04A1	$2081			CALL	_SETFUN32
$04A2	$118A			BCF	PCLATH, 3
$04A3	$	MUL32EEE:
$04A3	$0000			NOP
$04A4	$0008			RETURN
$055C	$	_Compare_Double:
$055C	$1303			BCF	STATUS, RP1
$055D	$1283			BCF	STATUS, RP0
$055E	$01FA			CLRF	STACK_10
$055F	$0873			MOVF	STACK_3, W
$0560	$1D03			BTFSS	STATUS, Z
$0561	$147A			BSF	STACK_10, 0
$0562	$0877			MOVF	STACK_7, W
$0563	$1D03			BTFSS	STATUS, Z
$0564	$14FA			BSF	STACK_10, 1
$0565	$087A			MOVF	STACK_10, W
$0566	$1903			BTFSC	STATUS, Z
$0567	$2DA8			GOTO	COMPARE_EQU
$0568	$3A03			XORLW	0x03
$0569	$1903			BTFSC	STATUS, Z
$056A	$2D73			GOTO	COMPARE_NOTZERO
$056B	$187A			BTFSC	STACK_10, 0
$056C	$2D70			GOTO	COMPARE_XNOTZERO
$056D	$	COMPARE_YNOTZERO:
$056D	$1FF6			BTFSS	STACK_6, 7
$056E	$2DA6			GOTO	COMPARE_LT
$056F	$2DA4			GOTO	COMPARE_GT
$0570	$	COMPARE_XNOTZERO:
$0570	$1FF2			BTFSS	STACK_2, 7
$0571	$2DA4			GOTO	COMPARE_GT
$0572	$2DA6			GOTO	COMPARE_LT
$0573	$	COMPARE_NOTZERO:
$0573	$0872			MOVF	STACK_2, W
$0574	$3980			ANDLW	0x80
$0575	$00FA			MOVWF	STACK_10
$0576	$13F2			BCF	STACK_2, 7
$0577	$0876			MOVF	STACK_6, W
$0578	$3980			ANDLW	0x80
$0579	$13F6			BCF	STACK_6, 7
$057A	$067A			XORWF	STACK_10, W
$057B	$1903			BTFSC	STATUS, Z
$057C	$2D81			GOTO	COMPARE_TESTALL
$057D	$087A			MOVF	STACK_10, W
$057E	$1903			BTFSC	STATUS, Z
$057F	$2DA4			GOTO	COMPARE_GT
$0580	$2DA6			GOTO	COMPARE_LT
$0581	$	COMPARE_TESTALL:
$0581	$0877			MOVF	STACK_7, W
$0582	$0273			SUBWF	STACK_3, W
$0583	$1903			BTFSC	STATUS, Z
$0584	$2D88			GOTO	COMPARE_C1
$0585	$1C03			BTFSS	STATUS, C
$0586	$2D9C			GOTO	GT_FALSE
$0587	$2DA0			GOTO	GT_TRUE
$0588	$	COMPARE_C1:
$0588	$0876			MOVF	STACK_6, W
$0589	$0272			SUBWF	STACK_2, W
$058A	$1903			BTFSC	STATUS, Z
$058B	$2D8F			GOTO	COMPARE_C2
$058C	$1C03			BTFSS	STATUS, C
$058D	$2D9C			GOTO	GT_FALSE
$058E	$2DA0			GOTO	GT_TRUE
$058F	$	COMPARE_C2:
$058F	$0875			MOVF	STACK_5, W
$0590	$0271			SUBWF	STACK_1, W
$0591	$1903			BTFSC	STATUS, Z
$0592	$2D96			GOTO	COMPARE_C3
$0593	$1C03			BTFSS	STATUS, C
$0594	$2D9C			GOTO	GT_FALSE
$0595	$2DA0			GOTO	GT_TRUE
$0596	$	COMPARE_C3:
$0596	$0874			MOVF	STACK_4, W
$0597	$0270			SUBWF	STACK_0, W
$0598	$1903			BTFSC	STATUS, Z
$0599	$2DA8			GOTO	COMPARE_EQU
$059A	$1803			BTFSC	STATUS, C
$059B	$2DA0			GOTO	GT_TRUE
$059C	$	GT_FALSE:
$059C	$08FA			MOVF	STACK_10, F
$059D	$1903			BTFSC	STATUS, Z
$059E	$2DA6			GOTO	COMPARE_LT
$059F	$2DA4			GOTO	COMPARE_GT
$05A0	$	GT_TRUE:
$05A0	$08FA			MOVF	STACK_10, F
$05A1	$1903			BTFSC	STATUS, Z
$05A2	$2DA4			GOTO	COMPARE_GT
$05A3	$2DA6			GOTO	COMPARE_LT
$05A4	$	COMPARE_GT:
$05A4	$1403			BSF	STATUS, C
$05A5	$0008			RETURN
$05A6	$	COMPARE_LT:
$05A6	$1003			BCF	STATUS, C
$05A7	$0008			RETURN
$05A8	$	COMPARE_EQU:
$05A8	$1403			BSF	STATUS, C
$05A9	$1503			BSF	STATUS, Z
$05AA	$0008			RETURN
$05AB	$0008			RETURN
$05F6	$	_Double2Byte:
$05F6	$1303			BCF	STATUS, RP1
$05F7	$1283			BCF	STATUS, RP0
$05F8	$	INT32U08:
$05F8	$01FB			CLRF	STACK_11
$05F9	$01FC			CLRF	STACK_12
$05FA	$01FA			CLRF	STACK_10
$05FB	$0873			MOVF	STACK_3, W
$05FC	$1903			BTFSC	STATUS, Z
$05FD	$2E23			GOTO	IRES008
$05FE	$13FA			BCF	STACK_10, 7
$05FF	$17F2			BSF	STACK_2, 7
$0600	$3086			MOVLW	134
$0601	$02F3			SUBWF	STACK_3, F
$0602	$1BF3			BTFSC	STACK_3, 7
$0603	$2E07			GOTO	SETEXP08
$0604	$1903			BTFSC	STATUS, Z
$0605	$2E07			GOTO	SETEXP08
$0606	$2E25			GOTO	SETIOV08
$0607	$	SETEXP08:
$0607	$09F3			COMF	STACK_3, F
$0608	$0AF3			INCF	STACK_3, F
$0609	$3008			MOVLW	8
$060A	$0273			SUBWF	STACK_3, W
$060B	$1C03			BTFSS	STATUS, C
$060C	$2E14			GOTO	TSHIFT3208
$060D	$00F3			MOVWF	STACK_3
$060E	$0DF2			RLF	STACK_2, F
$060F	$01F2			CLRF	STACK_2
$0610	$0873			MOVF	STACK_3, W
$0611	$1D03			BTFSS	STATUS, Z
$0612	$1003			BCF	STATUS, C
$0613	$2E1B			GOTO	SHIFT3208OK
$0614	$	TSHIFT3208:
$0614	$0873			MOVF	STACK_3, W
$0615	$1903			BTFSC	STATUS, Z
$0616	$2E1B			GOTO	SHIFT3208OK
$0617	$	SHIFT3208:
$0617	$1003			BCF	STATUS, C
$0618	$0CF2			RRF	STACK_2, F
$0619	$0BF3			DECFSZ	STACK_3, F
$061A	$2E17			GOTO	SHIFT3208
$061B	$	SHIFT3208OK:
$061B	$1B7B			BTFSC	STACK_11, 6
$061C	$1C72			BTFSS	STACK_2, 0
$061D	$2E23			GOTO	INT3208OK
$061E	$1C03			BTFSS	STATUS, C
$061F	$2E23			GOTO	INT3208OK
$0620	$0AF2			INCF	STACK_2, F
$0621	$1903			BTFSC	STATUS, Z
$0622	$2E2A			GOTO	D2B_JPKSETIOV3224
$0623	$	INT3208OK:
$0623	$	IRES008:
$0623	$01F1			CLRF	STACK_1
$0624	$2E2D			GOTO	INT3208EOK
$0625	$	SETIOV08:
$0625	$147B			BSF	STACK_11, 0
$0626	$1FFB			BTFSS	STACK_11, 7
$0627	$2E30			GOTO	INT3208EER
$0628	$01F1			CLRF	STACK_1
$0629	$2E30			GOTO	INT3208EER
$062A	$	D2B_JPKSETIOV3224:
$062A	$3001			MOVLW	0x01
$062B	$00FC			MOVWF	STACK_12
$062C	$2E32			GOTO	INT3208EEE
$062D	$	INT3208EOK:
$062D	$3000			MOVLW	0x00
$062E	$00FC			MOVWF	STACK_12
$062F	$2E32			GOTO	INT3208EEE
$0630	$	INT3208EER:
$0630	$30FF			MOVLW	0xFF
$0631	$00FC			MOVWF	STACK_12
$0632	$	INT3208EEE:
$0632	$08FC			MOVF	STACK_12, F
$0633	$1903			BTFSC	STATUS, Z
$0634	$2E38			GOTO	L_Double2Byte_0
$0635	$158A			BSF	PCLATH, 3
$0636	$2064			CALL	_SETIOV3224
$0637	$118A			BCF	PCLATH, 3
$0638	$	L_Double2Byte_0:
$0638	$0872			MOVF	STACK_2, W
$0639	$00F0			MOVWF	STACK_0
$063A	$0008			RETURN
$0004	$	_main:
;lfr_pid_runner_3sen.c,98 :: 		void main()
;lfr_pid_runner_3sen.c,101 :: 		initport();
$0004	$2509			CALL	GlobalInilfr_pid_runner_3sen
$0005	$158A			BSF	PCLATH, 3
$0006	$2053			CALL	_initport
$0007	$118A			BCF	PCLATH, 3
;lfr_pid_runner_3sen.c,102 :: 		initpwm();
$0008	$158A			BSF	PCLATH, 3
$0009	$2000			CALL	_initpwm
$000A	$118A			BCF	PCLATH, 3
;lfr_pid_runner_3sen.c,103 :: 		while(1)
$000B	$	L_main_3:
;lfr_pid_runner_3sen.c,105 :: 		indicator();
$000B	$270F			CALL	_indicator
;lfr_pid_runner_3sen.c,106 :: 		CalcError();
$000C	$23A2			CALL	_CalcError
;lfr_pid_runner_3sen.c,107 :: 		if((error == 0) && (s2==1) && ((s1+s3)==0))
$000D	$01F4			CLRF	STACK_4
$000E	$01F5			CLRF	STACK_4+1
$000F	$01F6			CLRF	STACK_4+2
$0010	$01F7			CLRF	STACK_4+3
$0011	$082C			MOVF	_error, 0
$0012	$00F0			MOVWF	STACK_0
$0013	$082D			MOVF	_error+1, 0
$0014	$00F1			MOVWF	STACK_0+1
$0015	$082E			MOVF	_error+2, 0
$0016	$00F2			MOVWF	STACK_0+2
$0017	$082F			MOVF	_error+3, 0
$0018	$00F3			MOVWF	STACK_0+3
$0019	$158A			BSF	PCLATH, 3
$001A	$202B			CALL	_equals_double
$001B	$118A			BCF	PCLATH, 3
$001C	$3001			MOVLW	1
$001D	$1D03			BTFSS	STATUS, Z
$001E	$3000			MOVLW	0
$001F	$00F0			MOVWF	STACK_0
$0020	$0870			MOVF	STACK_0, 0
$0021	$1903			BTFSC	STATUS, Z
$0022	$2857			GOTO	L_main_7
$0023	$3000			MOVLW	0
$0024	$0624			XORWF	_s2+1, 0
$0025	$1D03			BTFSS	STATUS, Z
$0026	$2829			GOTO	L_main_18
$0027	$3001			MOVLW	1
$0028	$0623			XORWF	_s2, 0
$0029	$	L_main_18:
$0029	$1D03			BTFSS	STATUS, Z
$002A	$2857			GOTO	L_main_7
$002B	$0825			MOVF	_s3, 0
$002C	$0721			ADDWF	_s1, 0
$002D	$00F4			MOVWF	STACK_4
$002E	$0822			MOVF	_s1+1, 0
$002F	$1803			BTFSC	STATUS, C
$0030	$3F01			ADDLW	1
$0031	$0726			ADDWF	_s3+1, 0
$0032	$00F5			MOVWF	STACK_4+1
$0033	$3000			MOVLW	0
$0034	$0675			XORWF	STACK_4+1, 0
$0035	$1D03			BTFSS	STATUS, Z
$0036	$2839			GOTO	L_main_19
$0037	$3000			MOVLW	0
$0038	$0674			XORWF	STACK_4, 0
$0039	$	L_main_19:
$0039	$1D03			BTFSS	STATUS, Z
$003A	$2857			GOTO	L_main_7
$003B	$	L109_ex_L_main_7:
;lfr_pid_runner_3sen.c,109 :: 		motor_LF();					        	     //FWD AT FULL SPEED
$003B	$158A			BSF	PCLATH, 3
$003C	$20C6			CALL	_motor_LF
$003D	$118A			BCF	PCLATH, 3
;lfr_pid_runner_3sen.c,110 :: 		motor_RF();
$003E	$158A			BSF	PCLATH, 3
$003F	$20C1			CALL	_motor_RF
$0040	$118A			BCF	PCLATH, 3
;lfr_pid_runner_3sen.c,111 :: 		PWM1_CHANGE_DUTY(255);
$0041	$30FF			MOVLW	255
$0042	$00E0			MOVWF	FARG_PWM1_Change_Duty+0
$0043	$263B			CALL	_PWM1_Change_Duty
;lfr_pid_runner_3sen.c,112 :: 		PWM2_CHANGE_DUTY(255);
$0044	$30FF			MOVLW	255
$0045	$00E0			MOVWF	FARG_PWM2_Change_Duty+0
$0046	$26AB			CALL	_PWM2_Change_Duty
;lfr_pid_runner_3sen.c,113 :: 		delay_ms(15);
$0047	$3014			MOVLW	20
$0048	$00FB			MOVWF	STACK_11
$0049	$30FF			MOVLW	255
$004A	$00FA			MOVWF	STACK_10
$004B	$0BFB			DECFSZ	STACK_11, F
$004C	$284E			GOTO	$+2
$004D	$2851			GOTO	$+4
$004E	$0BFA			DECFSZ	STACK_10, F
$004F	$284E			GOTO	$-1
$0050	$284B			GOTO	$-5
$0051	$306C			MOVLW	108
$0052	$00FA			MOVWF	STACK_10
$0053	$0BFA			DECFSZ	STACK_10, F
$0054	$2853			GOTO	$-1
$0055	$0000			NOP
$0056	$0000			NOP
;lfr_pid_runner_3sen.c,114 :: 		}
$0057	$	L_main_7:
;lfr_pid_runner_3sen.c,115 :: 		if((s1+s2+s3+s4+s5) == 0)		           //ROBOT HAS OVERSHOOT
$0057	$0823			MOVF	_s2, 0
$0058	$0721			ADDWF	_s1, 0
$0059	$00F0			MOVWF	STACK_0
$005A	$0822			MOVF	_s1+1, 0
$005B	$1803			BTFSC	STATUS, C
$005C	$3F01			ADDLW	1
$005D	$0724			ADDWF	_s2+1, 0
$005E	$00F1			MOVWF	STACK_0+1
$005F	$0825			MOVF	_s3, 0
$0060	$07F0			ADDWF	STACK_0, 1
$0061	$0826			MOVF	_s3+1, 0
$0062	$1803			BTFSC	STATUS, C
$0063	$3F01			ADDLW	1
$0064	$07F1			ADDWF	STACK_0+1, 1
$0065	$0850			MOVF	_s4, 0
$0066	$07F0			ADDWF	STACK_0, 1
$0067	$0851			MOVF	_s4+1, 0
$0068	$1803			BTFSC	STATUS, C
$0069	$3F01			ADDLW	1
$006A	$07F1			ADDWF	STACK_0+1, 1
$006B	$0852			MOVF	_s5, 0
$006C	$0770			ADDWF	STACK_0, 0
$006D	$00F4			MOVWF	STACK_4
$006E	$0871			MOVF	STACK_0+1, 0
$006F	$1803			BTFSC	STATUS, C
$0070	$3F01			ADDLW	1
$0071	$0753			ADDWF	_s5+1, 0
$0072	$00F5			MOVWF	STACK_4+1
$0073	$3000			MOVLW	0
$0074	$0675			XORWF	STACK_4+1, 0
$0075	$1D03			BTFSS	STATUS, Z
$0076	$2879			GOTO	L_main_20
$0077	$3000			MOVLW	0
$0078	$0674			XORWF	STACK_4, 0
$0079	$	L_main_20:
$0079	$1D03			BTFSS	STATUS, Z
$007A	$28BC			GOTO	L_main_8
;lfr_pid_runner_3sen.c,117 :: 		if(lastreading == 'r')				     //CHECKS IF THE LAST SENSOR ACTIVATED WAS RIGHT
$007B	$0827			MOVF	_lastreading, 0
$007C	$3A72			XORLW	114
$007D	$1D03			BTFSS	STATUS, Z
$007E	$289B			GOTO	L_main_9
;lfr_pid_runner_3sen.c,119 :: 		motor_RB();						         //TURN RIGHT AT FULL SPEED
$007F	$158A			BSF	PCLATH, 3
$0080	$20CB			CALL	_motor_RB
$0081	$118A			BCF	PCLATH, 3
;lfr_pid_runner_3sen.c,120 :: 		motor_LF();
$0082	$158A			BSF	PCLATH, 3
$0083	$20C6			CALL	_motor_LF
$0084	$118A			BCF	PCLATH, 3
;lfr_pid_runner_3sen.c,121 :: 		PWM1_CHANGE_DUTY(255);
$0085	$30FF			MOVLW	255
$0086	$00E0			MOVWF	FARG_PWM1_Change_Duty+0
$0087	$263B			CALL	_PWM1_Change_Duty
;lfr_pid_runner_3sen.c,122 :: 		PWM2_CHANGE_DUTY(255);
$0088	$30FF			MOVLW	255
$0089	$00E0			MOVWF	FARG_PWM2_Change_Duty+0
$008A	$26AB			CALL	_PWM2_Change_Duty
;lfr_pid_runner_3sen.c,123 :: 		delay_ms(15);
$008B	$3014			MOVLW	20
$008C	$00FB			MOVWF	STACK_11
$008D	$30FF			MOVLW	255
$008E	$00FA			MOVWF	STACK_10
$008F	$0BFB			DECFSZ	STACK_11, F
$0090	$2892			GOTO	$+2
$0091	$2895			GOTO	$+4
$0092	$0BFA			DECFSZ	STACK_10, F
$0093	$2892			GOTO	$-1
$0094	$288F			GOTO	$-5
$0095	$306C			MOVLW	108
$0096	$00FA			MOVWF	STACK_10
$0097	$0BFA			DECFSZ	STACK_10, F
$0098	$2897			GOTO	$-1
$0099	$0000			NOP
$009A	$0000			NOP
;lfr_pid_runner_3sen.c,124 :: 		}
$009B	$	L_main_9:
;lfr_pid_runner_3sen.c,125 :: 		if(lastreading == 'l')			      //CHECKS IF THE LAST SENSOR ACTIVATED WAS LEFT
$009B	$0827			MOVF	_lastreading, 0
$009C	$3A6C			XORLW	108
$009D	$1D03			BTFSS	STATUS, Z
$009E	$28BB			GOTO	L_main_10
;lfr_pid_runner_3sen.c,127 :: 		motor_LB();					        	//TURN LEFT AT FULL SPEED
$009F	$158A			BSF	PCLATH, 3
$00A0	$20BC			CALL	_motor_LB
$00A1	$118A			BCF	PCLATH, 3
;lfr_pid_runner_3sen.c,128 :: 		motor_RF();
$00A2	$158A			BSF	PCLATH, 3
$00A3	$20C1			CALL	_motor_RF
$00A4	$118A			BCF	PCLATH, 3
;lfr_pid_runner_3sen.c,129 :: 		PWM1_CHANGE_DUTY(255);
$00A5	$30FF			MOVLW	255
$00A6	$00E0			MOVWF	FARG_PWM1_Change_Duty+0
$00A7	$263B			CALL	_PWM1_Change_Duty
;lfr_pid_runner_3sen.c,130 :: 		PWM2_CHANGE_DUTY(255);
$00A8	$30FF			MOVLW	255
$00A9	$00E0			MOVWF	FARG_PWM2_Change_Duty+0
$00AA	$26AB			CALL	_PWM2_Change_Duty
;lfr_pid_runner_3sen.c,131 :: 		delay_ms(15);
$00AB	$3014			MOVLW	20
$00AC	$00FB			MOVWF	STACK_11
$00AD	$30FF			MOVLW	255
$00AE	$00FA			MOVWF	STACK_10
$00AF	$0BFB			DECFSZ	STACK_11, F
$00B0	$28B2			GOTO	$+2
$00B1	$28B5			GOTO	$+4
$00B2	$0BFA			DECFSZ	STACK_10, F
$00B3	$28B2			GOTO	$-1
$00B4	$28AF			GOTO	$-5
$00B5	$306C			MOVLW	108
$00B6	$00FA			MOVWF	STACK_10
$00B7	$0BFA			DECFSZ	STACK_10, F
$00B8	$28B7			GOTO	$-1
$00B9	$0000			NOP
$00BA	$0000			NOP
;lfr_pid_runner_3sen.c,132 :: 		}
$00BB	$	L_main_10:
;lfr_pid_runner_3sen.c,133 :: 		}
$00BB	$2A4B			GOTO	L_main_11
$00BC	$	L_main_8:
;lfr_pid_runner_3sen.c,136 :: 		PROPORTIONAL = error * kp;
$00BC	$0835			MOVF	_Kp, 0
$00BD	$00F0			MOVWF	STACK_0
$00BE	$158A			BSF	PCLATH, 3
$00BF	$2041			CALL	_byte2double
$00C0	$118A			BCF	PCLATH, 3
$00C1	$082C			MOVF	_error, 0
$00C2	$00F4			MOVWF	STACK_4
$00C3	$082D			MOVF	_error+1, 0
$00C4	$00F5			MOVWF	STACK_4+1
$00C5	$082E			MOVF	_error+2, 0
$00C6	$00F6			MOVWF	STACK_4+2
$00C7	$082F			MOVF	_error+3, 0
$00C8	$00F7			MOVWF	STACK_4+3
$00C9	$243E			CALL	_mul_32x32_fp
$00CA	$0870			MOVF	STACK_0, 0
$00CB	$00DC			MOVWF	FLOC_main+8
$00CC	$0871			MOVF	STACK_0+1, 0
$00CD	$00DD			MOVWF	FLOC_main+9
$00CE	$0872			MOVF	STACK_0+2, 0
$00CF	$00DE			MOVWF	FLOC_main+10
$00D0	$0873			MOVF	STACK_0+3, 0
$00D1	$00DF			MOVWF	FLOC_main+11
$00D2	$085C			MOVF	FLOC_main+8, 0
$00D3	$00C0			MOVWF	_PROPORTIONAL
$00D4	$085D			MOVF	FLOC_main+9, 0
$00D5	$00C1			MOVWF	_PROPORTIONAL+1
$00D6	$085E			MOVF	FLOC_main+10, 0
$00D7	$00C2			MOVWF	_PROPORTIONAL+2
$00D8	$085F			MOVF	FLOC_main+11, 0
$00D9	$00C3			MOVWF	_PROPORTIONAL+3
;lfr_pid_runner_3sen.c,137 :: 		INTEGRAL += error ;
$00DA	$0844			MOVF	_INTEGRAL, 0
$00DB	$00F0			MOVWF	STACK_0
$00DC	$0845			MOVF	_INTEGRAL+1, 0
$00DD	$00F1			MOVWF	STACK_0+1
$00DE	$0846			MOVF	_INTEGRAL+2, 0
$00DF	$00F2			MOVWF	STACK_0+2
$00E0	$0847			MOVF	_INTEGRAL+3, 0
$00E1	$00F3			MOVWF	STACK_0+3
$00E2	$082C			MOVF	_error, 0
$00E3	$00F4			MOVWF	STACK_4
$00E4	$082D			MOVF	_error+1, 0
$00E5	$00F5			MOVWF	STACK_4+1
$00E6	$082E			MOVF	_error+2, 0
$00E7	$00F6			MOVWF	STACK_4+2
$00E8	$082F			MOVF	_error+3, 0
$00E9	$00F7			MOVWF	STACK_4+3
$00EA	$225C			CALL	_add_32x32_fp
$00EB	$0870			MOVF	STACK_0, 0
$00EC	$00D4			MOVWF	FLOC_main+0
$00ED	$0871			MOVF	STACK_0+1, 0
$00EE	$00D5			MOVWF	FLOC_main+1
$00EF	$0872			MOVF	STACK_0+2, 0
$00F0	$00D6			MOVWF	FLOC_main+2
$00F1	$0873			MOVF	STACK_0+3, 0
$00F2	$00D7			MOVWF	FLOC_main+3
$00F3	$0854			MOVF	FLOC_main+0, 0
$00F4	$00C4			MOVWF	_INTEGRAL
$00F5	$0855			MOVF	FLOC_main+1, 0
$00F6	$00C5			MOVWF	_INTEGRAL+1
$00F7	$0856			MOVF	FLOC_main+2, 0
$00F8	$00C6			MOVWF	_INTEGRAL+2
$00F9	$0857			MOVF	FLOC_main+3, 0
$00FA	$00C7			MOVWF	_INTEGRAL+3
;lfr_pid_runner_3sen.c,138 :: 		INTEGRAL *= ki;
$00FB	$0836			MOVF	_Ki, 0
$00FC	$00F0			MOVWF	STACK_0
$00FD	$158A			BSF	PCLATH, 3
$00FE	$2041			CALL	_byte2double
$00FF	$118A			BCF	PCLATH, 3
$0100	$0854			MOVF	FLOC_main+0, 0
$0101	$00F4			MOVWF	STACK_4
$0102	$0855			MOVF	FLOC_main+1, 0
$0103	$00F5			MOVWF	STACK_4+1
$0104	$0856			MOVF	FLOC_main+2, 0
$0105	$00F6			MOVWF	STACK_4+2
$0106	$0857			MOVF	FLOC_main+3, 0
$0107	$00F7			MOVWF	STACK_4+3
$0108	$243E			CALL	_mul_32x32_fp
$0109	$0870			MOVF	STACK_0, 0
$010A	$00D4			MOVWF	FLOC_main+0
$010B	$0871			MOVF	STACK_0+1, 0
$010C	$00D5			MOVWF	FLOC_main+1
$010D	$0872			MOVF	STACK_0+2, 0
$010E	$00D6			MOVWF	FLOC_main+2
$010F	$0873			MOVF	STACK_0+3, 0
$0110	$00D7			MOVWF	FLOC_main+3
$0111	$0854			MOVF	FLOC_main+0, 0
$0112	$00C4			MOVWF	_INTEGRAL
$0113	$0855			MOVF	FLOC_main+1, 0
$0114	$00C5			MOVWF	_INTEGRAL+1
$0115	$0856			MOVF	FLOC_main+2, 0
$0116	$00C6			MOVWF	_INTEGRAL+2
$0117	$0857			MOVF	FLOC_main+3, 0
$0118	$00C7			MOVWF	_INTEGRAL+3
;lfr_pid_runner_3sen.c,139 :: 		DERIVATIVE = (error - perror);
$0119	$0828			MOVF	_perror, 0
$011A	$00F4			MOVWF	STACK_4
$011B	$0829			MOVF	_perror+1, 0
$011C	$00F5			MOVWF	STACK_4+1
$011D	$082A			MOVF	_perror+2, 0
$011E	$00F6			MOVWF	STACK_4+2
$011F	$082B			MOVF	_perror+3, 0
$0120	$00F7			MOVWF	STACK_4+3
$0121	$082C			MOVF	_error, 0
$0122	$00F0			MOVWF	STACK_0
$0123	$082D			MOVF	_error+1, 0
$0124	$00F1			MOVWF	STACK_0+1
$0125	$082E			MOVF	_error+2, 0
$0126	$00F2			MOVWF	STACK_0+2
$0127	$082F			MOVF	_error+3, 0
$0128	$00F3			MOVWF	STACK_0+3
$0129	$158A			BSF	PCLATH, 3
$012A	$208F			CALL	_sub_32x32_fp
$012B	$118A			BCF	PCLATH, 3
$012C	$0870			MOVF	STACK_0, 0
$012D	$00D8			MOVWF	FLOC_main+4
$012E	$0871			MOVF	STACK_0+1, 0
$012F	$00D9			MOVWF	FLOC_main+5
$0130	$0872			MOVF	STACK_0+2, 0
$0131	$00DA			MOVWF	FLOC_main+6
$0132	$0873			MOVF	STACK_0+3, 0
$0133	$00DB			MOVWF	FLOC_main+7
$0134	$0858			MOVF	FLOC_main+4, 0
$0135	$00C8			MOVWF	_DERIVATIVE
$0136	$0859			MOVF	FLOC_main+5, 0
$0137	$00C9			MOVWF	_DERIVATIVE+1
$0138	$085A			MOVF	FLOC_main+6, 0
$0139	$00CA			MOVWF	_DERIVATIVE+2
$013A	$085B			MOVF	FLOC_main+7, 0
$013B	$00CB			MOVWF	_DERIVATIVE+3
;lfr_pid_runner_3sen.c,140 :: 		correction = ( (PROPORTIONAL) + (INTEGRAL) + (DERIVATIVE*kd));
$013C	$085C			MOVF	FLOC_main+8, 0
$013D	$00F0			MOVWF	STACK_0
$013E	$085D			MOVF	FLOC_main+9, 0
$013F	$00F1			MOVWF	STACK_0+1
$0140	$085E			MOVF	FLOC_main+10, 0
$0141	$00F2			MOVWF	STACK_0+2
$0142	$085F			MOVF	FLOC_main+11, 0
$0143	$00F3			MOVWF	STACK_0+3
$0144	$0854			MOVF	FLOC_main+0, 0
$0145	$00F4			MOVWF	STACK_4
$0146	$0855			MOVF	FLOC_main+1, 0
$0147	$00F5			MOVWF	STACK_4+1
$0148	$0856			MOVF	FLOC_main+2, 0
$0149	$00F6			MOVWF	STACK_4+2
$014A	$0857			MOVF	FLOC_main+3, 0
$014B	$00F7			MOVWF	STACK_4+3
$014C	$225C			CALL	_add_32x32_fp
$014D	$0870			MOVF	STACK_0, 0
$014E	$00D4			MOVWF	FLOC_main+0
$014F	$0871			MOVF	STACK_0+1, 0
$0150	$00D5			MOVWF	FLOC_main+1
$0151	$0872			MOVF	STACK_0+2, 0
$0152	$00D6			MOVWF	FLOC_main+2
$0153	$0873			MOVF	STACK_0+3, 0
$0154	$00D7			MOVWF	FLOC_main+3
$0155	$0837			MOVF	_Kd, 0
$0156	$00F0			MOVWF	STACK_0
$0157	$158A			BSF	PCLATH, 3
$0158	$2041			CALL	_byte2double
$0159	$118A			BCF	PCLATH, 3
$015A	$0858			MOVF	FLOC_main+4, 0
$015B	$00F4			MOVWF	STACK_4
$015C	$0859			MOVF	FLOC_main+5, 0
$015D	$00F5			MOVWF	STACK_4+1
$015E	$085A			MOVF	FLOC_main+6, 0
$015F	$00F6			MOVWF	STACK_4+2
$0160	$085B			MOVF	FLOC_main+7, 0
$0161	$00F7			MOVWF	STACK_4+3
$0162	$243E			CALL	_mul_32x32_fp
$0163	$0854			MOVF	FLOC_main+0, 0
$0164	$00F4			MOVWF	STACK_4
$0165	$0855			MOVF	FLOC_main+1, 0
$0166	$00F5			MOVWF	STACK_4+1
$0167	$0856			MOVF	FLOC_main+2, 0
$0168	$00F6			MOVWF	STACK_4+2
$0169	$0857			MOVF	FLOC_main+3, 0
$016A	$00F7			MOVWF	STACK_4+3
$016B	$225C			CALL	_add_32x32_fp
$016C	$0870			MOVF	STACK_0, 0
$016D	$00D8			MOVWF	FLOC_main+4
$016E	$0871			MOVF	STACK_0+1, 0
$016F	$00D9			MOVWF	FLOC_main+5
$0170	$0872			MOVF	STACK_0+2, 0
$0171	$00DA			MOVWF	FLOC_main+6
$0172	$0873			MOVF	STACK_0+3, 0
$0173	$00DB			MOVWF	FLOC_main+7
$0174	$0858			MOVF	FLOC_main+4, 0
$0175	$00CC			MOVWF	_correction
$0176	$0859			MOVF	FLOC_main+5, 0
$0177	$00CD			MOVWF	_correction+1
$0178	$085A			MOVF	FLOC_main+6, 0
$0179	$00CE			MOVWF	_correction+2
$017A	$085B			MOVF	FLOC_main+7, 0
$017B	$00CF			MOVWF	_correction+3
;lfr_pid_runner_3sen.c,141 :: 		rightpulse =  basespeed + correction;
$017C	$0834			MOVF	_basespeed, 0
$017D	$00F0			MOVWF	STACK_0
$017E	$158A			BSF	PCLATH, 3
$017F	$2041			CALL	_byte2double
$0180	$118A			BCF	PCLATH, 3
$0181	$0870			MOVF	STACK_0, 0
$0182	$00D4			MOVWF	FLOC_main+0
$0183	$0871			MOVF	STACK_0+1, 0
$0184	$00D5			MOVWF	FLOC_main+1
$0185	$0872			MOVF	STACK_0+2, 0
$0186	$00D6			MOVWF	FLOC_main+2
$0187	$0873			MOVF	STACK_0+3, 0
$0188	$00D7			MOVWF	FLOC_main+3
$0189	$0854			MOVF	FLOC_main+0, 0
$018A	$00F0			MOVWF	STACK_0
$018B	$0855			MOVF	FLOC_main+1, 0
$018C	$00F1			MOVWF	STACK_0+1
$018D	$0856			MOVF	FLOC_main+2, 0
$018E	$00F2			MOVWF	STACK_0+2
$018F	$0857			MOVF	FLOC_main+3, 0
$0190	$00F3			MOVWF	STACK_0+3
$0191	$0858			MOVF	FLOC_main+4, 0
$0192	$00F4			MOVWF	STACK_4
$0193	$0859			MOVF	FLOC_main+5, 0
$0194	$00F5			MOVWF	STACK_4+1
$0195	$085A			MOVF	FLOC_main+6, 0
$0196	$00F6			MOVWF	STACK_4+2
$0197	$085B			MOVF	FLOC_main+7, 0
$0198	$00F7			MOVWF	STACK_4+3
$0199	$225C			CALL	_add_32x32_fp
$019A	$0870			MOVF	STACK_0, 0
$019B	$00B8			MOVWF	_rightpulse
$019C	$0871			MOVF	STACK_0+1, 0
$019D	$00B9			MOVWF	_rightpulse+1
$019E	$0872			MOVF	STACK_0+2, 0
$019F	$00BA			MOVWF	_rightpulse+2
$01A0	$0873			MOVF	STACK_0+3, 0
$01A1	$00BB			MOVWF	_rightpulse+3
;lfr_pid_runner_3sen.c,142 :: 		leftpulse = basespeed - correction;
$01A2	$0858			MOVF	FLOC_main+4, 0
$01A3	$00F4			MOVWF	STACK_4
$01A4	$0859			MOVF	FLOC_main+5, 0
$01A5	$00F5			MOVWF	STACK_4+1
$01A6	$085A			MOVF	FLOC_main+6, 0
$01A7	$00F6			MOVWF	STACK_4+2
$01A8	$085B			MOVF	FLOC_main+7, 0
$01A9	$00F7			MOVWF	STACK_4+3
$01AA	$0854			MOVF	FLOC_main+0, 0
$01AB	$00F0			MOVWF	STACK_0
$01AC	$0855			MOVF	FLOC_main+1, 0
$01AD	$00F1			MOVWF	STACK_0+1
$01AE	$0856			MOVF	FLOC_main+2, 0
$01AF	$00F2			MOVWF	STACK_0+2
$01B0	$0857			MOVF	FLOC_main+3, 0
$01B1	$00F3			MOVWF	STACK_0+3
$01B2	$158A			BSF	PCLATH, 3
$01B3	$208F			CALL	_sub_32x32_fp
$01B4	$118A			BCF	PCLATH, 3
$01B5	$0870			MOVF	STACK_0, 0
$01B6	$00BC			MOVWF	_leftpulse
$01B7	$0871			MOVF	STACK_0+1, 0
$01B8	$00BD			MOVWF	_leftpulse+1
$01B9	$0872			MOVF	STACK_0+2, 0
$01BA	$00BE			MOVWF	_leftpulse+2
$01BB	$0873			MOVF	STACK_0+3, 0
$01BC	$00BF			MOVWF	_leftpulse+3
;lfr_pid_runner_3sen.c,143 :: 		motor_RF();
$01BD	$158A			BSF	PCLATH, 3
$01BE	$20C1			CALL	_motor_RF
$01BF	$118A			BCF	PCLATH, 3
;lfr_pid_runner_3sen.c,144 :: 		motor_LF();
$01C0	$158A			BSF	PCLATH, 3
$01C1	$20C6			CALL	_motor_LF
$01C2	$118A			BCF	PCLATH, 3
;lfr_pid_runner_3sen.c,146 :: 		if(leftpulse > 255)                  //LEFT CORRECTION EXCEED
$01C3	$083C			MOVF	_leftpulse, 0
$01C4	$00F4			MOVWF	STACK_4
$01C5	$083D			MOVF	_leftpulse+1, 0
$01C6	$00F5			MOVWF	STACK_4+1
$01C7	$083E			MOVF	_leftpulse+2, 0
$01C8	$00F6			MOVWF	STACK_4+2
$01C9	$083F			MOVF	_leftpulse+3, 0
$01CA	$00F7			MOVWF	STACK_4+3
$01CB	$3000			MOVLW	0
$01CC	$00F0			MOVWF	STACK_0
$01CD	$3000			MOVLW	0
$01CE	$00F1			MOVWF	STACK_0+1
$01CF	$307F			MOVLW	127
$01D0	$00F2			MOVWF	STACK_0+2
$01D1	$3086			MOVLW	134
$01D2	$00F3			MOVWF	STACK_0+3
$01D3	$255C			CALL	_compare_double
$01D4	$3001			MOVLW	1
$01D5	$1803			BTFSC	STATUS, C
$01D6	$3000			MOVLW	0
$01D7	$00F0			MOVWF	STACK_0
$01D8	$0870			MOVF	STACK_0, 0
$01D9	$1903			BTFSC	STATUS, Z
$01DA	$29E3			GOTO	L_main_12
;lfr_pid_runner_3sen.c,147 :: 		leftpulse = 255;
$01DB	$3000			MOVLW	0
$01DC	$00BC			MOVWF	_leftpulse
$01DD	$3000			MOVLW	0
$01DE	$00BD			MOVWF	_leftpulse+1
$01DF	$307F			MOVLW	127
$01E0	$00BE			MOVWF	_leftpulse+2
$01E1	$3086			MOVLW	134
$01E2	$00BF			MOVWF	_leftpulse+3
$01E3	$	L_main_12:
;lfr_pid_runner_3sen.c,149 :: 		if(rightpulse > 255)                 //RIGHT CORRECTION EXCEED
$01E3	$0838			MOVF	_rightpulse, 0
$01E4	$00F4			MOVWF	STACK_4
$01E5	$0839			MOVF	_rightpulse+1, 0
$01E6	$00F5			MOVWF	STACK_4+1
$01E7	$083A			MOVF	_rightpulse+2, 0
$01E8	$00F6			MOVWF	STACK_4+2
$01E9	$083B			MOVF	_rightpulse+3, 0
$01EA	$00F7			MOVWF	STACK_4+3
$01EB	$3000			MOVLW	0
$01EC	$00F0			MOVWF	STACK_0
$01ED	$3000			MOVLW	0
$01EE	$00F1			MOVWF	STACK_0+1
$01EF	$307F			MOVLW	127
$01F0	$00F2			MOVWF	STACK_0+2
$01F1	$3086			MOVLW	134
$01F2	$00F3			MOVWF	STACK_0+3
$01F3	$255C			CALL	_compare_double
$01F4	$3001			MOVLW	1
$01F5	$1803			BTFSC	STATUS, C
$01F6	$3000			MOVLW	0
$01F7	$00F0			MOVWF	STACK_0
$01F8	$0870			MOVF	STACK_0, 0
$01F9	$1903			BTFSC	STATUS, Z
$01FA	$2A03			GOTO	L_main_13
;lfr_pid_runner_3sen.c,150 :: 		rightpulse = 255;
$01FB	$3000			MOVLW	0
$01FC	$00B8			MOVWF	_rightpulse
$01FD	$3000			MOVLW	0
$01FE	$00B9			MOVWF	_rightpulse+1
$01FF	$307F			MOVLW	127
$0200	$00BA			MOVWF	_rightpulse+2
$0201	$3086			MOVLW	134
$0202	$00BB			MOVWF	_rightpulse+3
$0203	$	L_main_13:
;lfr_pid_runner_3sen.c,152 :: 		if(leftpulse < 0)                    //LEFT CORRECTION EXCEED
$0203	$01F4			CLRF	STACK_4
$0204	$01F5			CLRF	STACK_4+1
$0205	$01F6			CLRF	STACK_4+2
$0206	$01F7			CLRF	STACK_4+3
$0207	$083C			MOVF	_leftpulse, 0
$0208	$00F0			MOVWF	STACK_0
$0209	$083D			MOVF	_leftpulse+1, 0
$020A	$00F1			MOVWF	STACK_0+1
$020B	$083E			MOVF	_leftpulse+2, 0
$020C	$00F2			MOVWF	STACK_0+2
$020D	$083F			MOVF	_leftpulse+3, 0
$020E	$00F3			MOVWF	STACK_0+3
$020F	$255C			CALL	_compare_double
$0210	$3001			MOVLW	1
$0211	$1803			BTFSC	STATUS, C
$0212	$3000			MOVLW	0
$0213	$00F0			MOVWF	STACK_0
$0214	$0870			MOVF	STACK_0, 0
$0215	$1903			BTFSC	STATUS, Z
$0216	$2A1B			GOTO	L_main_14
;lfr_pid_runner_3sen.c,153 :: 		leftpulse = 0;
$0217	$01BC			CLRF	_leftpulse
$0218	$01BD			CLRF	_leftpulse+1
$0219	$01BE			CLRF	_leftpulse+2
$021A	$01BF			CLRF	_leftpulse+3
$021B	$	L_main_14:
;lfr_pid_runner_3sen.c,155 :: 		if(rightpulse < 0)                   //RIGHT CORRECTION EXCEED
$021B	$01F4			CLRF	STACK_4
$021C	$01F5			CLRF	STACK_4+1
$021D	$01F6			CLRF	STACK_4+2
$021E	$01F7			CLRF	STACK_4+3
$021F	$0838			MOVF	_rightpulse, 0
$0220	$00F0			MOVWF	STACK_0
$0221	$0839			MOVF	_rightpulse+1, 0
$0222	$00F1			MOVWF	STACK_0+1
$0223	$083A			MOVF	_rightpulse+2, 0
$0224	$00F2			MOVWF	STACK_0+2
$0225	$083B			MOVF	_rightpulse+3, 0
$0226	$00F3			MOVWF	STACK_0+3
$0227	$255C			CALL	_compare_double
$0228	$3001			MOVLW	1
$0229	$1803			BTFSC	STATUS, C
$022A	$3000			MOVLW	0
$022B	$00F0			MOVWF	STACK_0
$022C	$0870			MOVF	STACK_0, 0
$022D	$1903			BTFSC	STATUS, Z
$022E	$2A33			GOTO	L_main_15
;lfr_pid_runner_3sen.c,156 :: 		rightpulse = 0;
$022F	$01B8			CLRF	_rightpulse
$0230	$01B9			CLRF	_rightpulse+1
$0231	$01BA			CLRF	_rightpulse+2
$0232	$01BB			CLRF	_rightpulse+3
$0233	$	L_main_15:
;lfr_pid_runner_3sen.c,158 :: 		PWM1_CHANGE_DUTY(rightpulse);
$0233	$0838			MOVF	_rightpulse, 0
$0234	$00F0			MOVWF	STACK_0
$0235	$0839			MOVF	_rightpulse+1, 0
$0236	$00F1			MOVWF	STACK_0+1
$0237	$083A			MOVF	_rightpulse+2, 0
$0238	$00F2			MOVWF	STACK_0+2
$0239	$083B			MOVF	_rightpulse+3, 0
$023A	$00F3			MOVWF	STACK_0+3
$023B	$25F6			CALL	_double2byte
$023C	$0870			MOVF	STACK_0, 0
$023D	$00E0			MOVWF	FARG_PWM1_Change_Duty+0
$023E	$263B			CALL	_PWM1_Change_Duty
;lfr_pid_runner_3sen.c,159 :: 		PWM2_CHANGE_DUTY(leftpulse);
$023F	$083C			MOVF	_leftpulse, 0
$0240	$00F0			MOVWF	STACK_0
$0241	$083D			MOVF	_leftpulse+1, 0
$0242	$00F1			MOVWF	STACK_0+1
$0243	$083E			MOVF	_leftpulse+2, 0
$0244	$00F2			MOVWF	STACK_0+2
$0245	$083F			MOVF	_leftpulse+3, 0
$0246	$00F3			MOVWF	STACK_0+3
$0247	$25F6			CALL	_double2byte
$0248	$0870			MOVF	STACK_0, 0
$0249	$00E0			MOVWF	FARG_PWM2_Change_Duty+0
$024A	$26AB			CALL	_PWM2_Change_Duty
;lfr_pid_runner_3sen.c,160 :: 		}
$024B	$	L_main_11:
;lfr_pid_runner_3sen.c,161 :: 		delay_ms(10);
$024B	$300D			MOVLW	13
$024C	$00FB			MOVWF	STACK_11
$024D	$30FF			MOVLW	255
$024E	$00FA			MOVWF	STACK_10
$024F	$0BFB			DECFSZ	STACK_11, F
$0250	$2A52			GOTO	$+2
$0251	$2A55			GOTO	$+4
$0252	$0BFA			DECFSZ	STACK_10, F
$0253	$2A52			GOTO	$-1
$0254	$2A4F			GOTO	$-5
$0255	$30F3			MOVLW	243
$0256	$00FA			MOVWF	STACK_10
$0257	$0BFA			DECFSZ	STACK_10, F
$0258	$2A57			GOTO	$-1
$0259	$0000			NOP
;lfr_pid_runner_3sen.c,162 :: 		}
$025A	$280B			GOTO	L_main_3
;lfr_pid_runner_3sen.c,163 :: 		}
$025B	$2A5B			GOTO	$
