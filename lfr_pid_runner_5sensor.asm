;  ASM code generated by mikroVirtualMachine for PIC - V. 8.2.0.0
;  Date/Time: 3/22/2011 10:58:00 PM
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$2804			GOTO	_main
$08E6	$	_RES032:
$08E6	$1303			BCF	STATUS, RP1
$08E7	$1283			BCF	STATUS, RP0
$08E8	$01F2			CLRF	STACK_2
$08E9	$01F1			CLRF	STACK_1
$08EA	$01F0			CLRF	STACK_0
$08EB	$01F8			CLRF	STACK_8
$08EC	$01F3			CLRF	STACK_3
$08ED	$3000			MOVLW	0
$08EE	$0008			RETURN
$08D0	$	_SETFUN32:
$08D0	$1303			BCF	STATUS, RP1
$08D1	$1283			BCF	STATUS, RP0
$08D2	$157B			BSF	STACK_11, 2
$08D3	$1FFB			BTFSS	STACK_11, 7
$08D4	$28DC			GOTO	SETFUN32EEE
$08D5	$3001			MOVLW	0x01
$08D6	$00F3			MOVWF	STACK_3
$08D7	$01F2			CLRF	STACK_2
$08D8	$01F1			CLRF	STACK_1
$08D9	$01F0			CLRF	STACK_0
$08DA	$0DFA			RLF	STACK_10, F
$08DB	$0CF2			RRF	STACK_2, F
$08DC	$	SETFUN32EEE:
$08DC	$30FF			MOVLW	0xFF
$08DD	$0008			RETURN
$0905	$	_FIXSIGN32:
$0905	$1303			BCF	STATUS, RP1
$0906	$1283			BCF	STATUS, RP0
$0907	$1FFA			BTFSS	STACK_10, 7
$0908	$13F2			BCF	STACK_2, 7
$0909	$3000			MOVLW	0
$090A	$0008			RETURN
$08C2	$	_SETFOV32:
$08C2	$1303			BCF	STATUS, RP1
$08C3	$1283			BCF	STATUS, RP0
$08C4	$14FB			BSF	STACK_11, 1
$08C5	$1FFB			BTFSS	STACK_11, 7
$08C6	$28CE			GOTO	SETFOV32EEE
$08C7	$30FF			MOVLW	0xFF
$08C8	$00F3			MOVWF	STACK_3
$08C9	$00F2			MOVWF	STACK_2
$08CA	$00F1			MOVWF	STACK_1
$08CB	$00F0			MOVWF	STACK_0
$08CC	$0DFA			RLF	STACK_10, F
$08CD	$0CF2			RRF	STACK_2, F
$08CE	$	SETFOV32EEE:
$08CE	$30FF			MOVLW	0xFF
$08CF	$0008			RETURN
$04F3	$	_NRM4032:
$04F3	$1303			BCF	STATUS, RP1
$04F4	$1283			BCF	STATUS, RP0
$04F5	$187C			BTFSC	STACK_12, 0
$04F6	$2D2B			GOTO	NRMRND4032
$04F7	$18FC			BTFSC	STACK_12, 1
$04F8	$2CFC			GOTO	NRM4032
$04F9	$197C			BTFSC	STACK_12, 2
$04FA	$2D50			GOTO	JMPSETFOV32
$04FB	$2CF5			GOTO	$-6
$04FC	$	NRM4032:
$04FC	$01A0			CLRF	__math_tempbD
$04FD	$0872			MOVF	STACK_2, W
$04FE	$1D03			BTFSS	STATUS, Z
$04FF	$2D1C			GOTO	NORM4032
$0500	$0871			MOVF	STACK_1, W
$0501	$00F2			MOVWF	STACK_2
$0502	$0870			MOVF	STACK_0, W
$0503	$00F1			MOVWF	STACK_1
$0504	$0878			MOVF	STACK_8, W
$0505	$00F0			MOVWF	STACK_0
$0506	$01F8			CLRF	STACK_8
$0507	$15A0			BSF	__math_tempbD, 3
$0508	$0872			MOVF	STACK_2, W
$0509	$1D03			BTFSS	STATUS, Z
$050A	$2D1C			GOTO	NORM4032
$050B	$0871			MOVF	STACK_1, W
$050C	$00F2			MOVWF	STACK_2
$050D	$0870			MOVF	STACK_0, W
$050E	$00F1			MOVWF	STACK_1
$050F	$01F0			CLRF	STACK_0
$0510	$11A0			BCF	__math_tempbD, 3
$0511	$1620			BSF	__math_tempbD, 4
$0512	$0872			MOVF	STACK_2, W
$0513	$1D03			BTFSS	STATUS, Z
$0514	$2D1C			GOTO	NORM4032
$0515	$0871			MOVF	STACK_1, W
$0516	$00F2			MOVWF	STACK_2
$0517	$01F1			CLRF	STACK_1
$0518	$15A0			BSF	__math_tempbD, 3
$0519	$0872			MOVF	STACK_2, W
$051A	$1903			BTFSC	STATUS, Z
$051B	$2D3E			GOTO	JMPRES032
$051C	$	NORM4032:
$051C	$0820			MOVF	__math_tempbD, W
$051D	$02F3			SUBWF	STACK_3, F
$051E	$1D03			BTFSS	STATUS, Z
$051F	$1C03			BTFSS	STATUS, C
$0520	$2D44			GOTO	JMPSETFUN32
$0521	$1003			BCF	STATUS, C
$0522	$	NORM4032A:
$0522	$1BF2			BTFSC	STACK_2, 7
$0523	$2D2B			GOTO	NRMRND4032
$0524	$0DF8			RLF	STACK_8, F
$0525	$0DF0			RLF	STACK_0, F
$0526	$0DF1			RLF	STACK_1, F
$0527	$0DF2			RLF	STACK_2, F
$0528	$0BF3			DECFSZ	STACK_3, F
$0529	$2D22			GOTO	NORM4032A
$052A	$2D44			GOTO	JMPSETFUN32
$052B	$	NRMRND4032:
$052B	$1B7B			BTFSC	STACK_11, 6
$052C	$1C70			BTFSS	STACK_0, 0
$052D	$2D4A			GOTO	JMPFIXSIGN32
$052E	$1FF8			BTFSS	STACK_8, 7
$052F	$2D4A			GOTO	JMPFIXSIGN32
$0530	$0AF0			INCF	STACK_0, F
$0531	$1903			BTFSC	STATUS, Z
$0532	$0AF1			INCF	STACK_1, F
$0533	$1903			BTFSC	STATUS, Z
$0534	$0AF2			INCF	STACK_2, F
$0535	$1D03			BTFSS	STATUS, Z
$0536	$2D4A			GOTO	JMPFIXSIGN32
$0537	$0CF2			RRF	STACK_2, F
$0538	$0CF1			RRF	STACK_1, F
$0539	$0CF0			RRF	STACK_0, F
$053A	$0AF3			INCF	STACK_3, F
$053B	$1903			BTFSC	STATUS, Z
$053C	$2D50			GOTO	JMPSETFOV32
$053D	$2D4A			GOTO	JMPFIXSIGN32
$053E	$	JMPRES032:
$053E	$3001			MOVLW	0x01
$053F	$00FC			MOVWF	STACK_12
$0540	$158A			BSF	PCLATH, 3
$0541	$20E6			CALL	_RES032
$0542	$118A			BCF	PCLATH, 3
$0543	$2D55			GOTO	NRM4032EEE
$0544	$	JMPSETFUN32:
$0544	$3002			MOVLW	0x02
$0545	$00FC			MOVWF	STACK_12
$0546	$158A			BSF	PCLATH, 3
$0547	$20D0			CALL	_SETFUN32
$0548	$118A			BCF	PCLATH, 3
$0549	$2D55			GOTO	NRM4032EEE
$054A	$	JMPFIXSIGN32:
$054A	$3004			MOVLW	0x04
$054B	$00FC			MOVWF	STACK_12
$054C	$158A			BSF	PCLATH, 3
$054D	$2105			CALL	_FIXSIGN32
$054E	$118A			BCF	PCLATH, 3
$054F	$2D55			GOTO	NRM4032EEE
$0550	$	JMPSETFOV32:
$0550	$3008			MOVLW	0x08
$0551	$00FC			MOVWF	STACK_12
$0552	$158A			BSF	PCLATH, 3
$0553	$20C2			CALL	_SETFOV32
$0554	$118A			BCF	PCLATH, 3
$0555	$	NRM4032EEE:
$0555	$0000			NOP
$0556	$0008			RETURN
$06BA	$	_NRM3232:
$06BA	$1303			BCF	STATUS, RP1
$06BB	$1283			BCF	STATUS, RP0
$06BC	$01A0			CLRF	__math_tempbD
$06BD	$0872			MOVF	STACK_2, W
$06BE	$1D03			BTFSS	STATUS, Z
$06BF	$2ED1			GOTO	NORM3232
$06C0	$0871			MOVF	STACK_1, W
$06C1	$00F2			MOVWF	STACK_2
$06C2	$0870			MOVF	STACK_0, W
$06C3	$00F1			MOVWF	STACK_1
$06C4	$01F0			CLRF	STACK_0
$06C5	$15A0			BSF	__math_tempbD, 3
$06C6	$0872			MOVF	STACK_2, W
$06C7	$1D03			BTFSS	STATUS, Z
$06C8	$2ED1			GOTO	NORM3232
$06C9	$0871			MOVF	STACK_1, W
$06CA	$00F2			MOVWF	STACK_2
$06CB	$01F1			CLRF	STACK_1
$06CC	$11A0			BCF	__math_tempbD, 3
$06CD	$1620			BSF	__math_tempbD, 4
$06CE	$0872			MOVF	STACK_2, W
$06CF	$1903			BTFSC	STATUS, Z
$06D0	$2EDF			GOTO	JPNRES032
$06D1	$	NORM3232:
$06D1	$0820			MOVF	__math_tempbD, W
$06D2	$02F3			SUBWF	STACK_3, F
$06D3	$1D03			BTFSS	STATUS, Z
$06D4	$1C03			BTFSS	STATUS, C
$06D5	$2EE5			GOTO	JPNSETFUN32
$06D6	$1003			BCF	STATUS, C
$06D7	$	NORM3232A:
$06D7	$1BF2			BTFSC	STACK_2, 7
$06D8	$2EEB			GOTO	JMPNFIXSIGN32
$06D9	$0DF0			RLF	STACK_0, F
$06DA	$0DF1			RLF	STACK_1, F
$06DB	$0DF2			RLF	STACK_2, F
$06DC	$0BF3			DECFSZ	STACK_3, F
$06DD	$2ED7			GOTO	NORM3232A
$06DE	$2EE5			GOTO	JPNSETFUN32
$06DF	$	JPNRES032:
$06DF	$3001			MOVLW	0x01
$06E0	$00FC			MOVWF	STACK_12
$06E1	$158A			BSF	PCLATH, 3
$06E2	$20E6			CALL	_RES032
$06E3	$118A			BCF	PCLATH, 3
$06E4	$2EF0			GOTO	NORM32EEE
$06E5	$	JPNSETFUN32:
$06E5	$3002			MOVLW	0x02
$06E6	$00FC			MOVWF	STACK_12
$06E7	$158A			BSF	PCLATH, 3
$06E8	$20D0			CALL	_SETFUN32
$06E9	$118A			BCF	PCLATH, 3
$06EA	$2EF0			GOTO	NORM32EEE
$06EB	$	JMPNFIXSIGN32:
$06EB	$3004			MOVLW	0x04
$06EC	$00FC			MOVWF	STACK_12
$06ED	$158A			BSF	PCLATH, 3
$06EE	$2105			CALL	_FIXSIGN32
$06EF	$118A			BCF	PCLATH, 3
$06F0	$	NORM32EEE:
$06F0	$0008			RETURN
$0925	$	_SETFDZ32:
$0925	$1303			BCF	STATUS, RP1
$0926	$1283			BCF	STATUS, RP0
$0927	$15FB			BSF	STACK_11, 3
$0928	$30FF			MOVLW	0xFF
$0929	$0008			RETURN
$0346	$	_Add_32x32_FP:
$0346	$1303			BCF	STATUS, RP1
$0347	$1283			BCF	STATUS, RP0
$0348	$0872			MOVF	STACK_2, W
$0349	$0676			XORWF	STACK_6, W
$034A	$00A0			MOVWF	__math_tempbD
$034B	$01F8			CLRF	STACK_8
$034C	$01F9			CLRF	STACK_9
$034D	$0873			MOVF	STACK_3, W
$034E	$0277			SUBWF	STACK_7, W
$034F	$1C03			BTFSS	STATUS, C
$0350	$2B69			GOTO	USEA32
$0351	$0877			MOVF	STACK_7, W
$0352	$00FD			MOVWF	STACK_13
$0353	$0873			MOVF	STACK_3, W
$0354	$00F7			MOVWF	STACK_7
$0355	$087D			MOVF	STACK_13, W
$0356	$00F3			MOVWF	STACK_3
$0357	$0876			MOVF	STACK_6, W
$0358	$00FD			MOVWF	STACK_13
$0359	$0872			MOVF	STACK_2, W
$035A	$00F6			MOVWF	STACK_6
$035B	$087D			MOVF	STACK_13, W
$035C	$00F2			MOVWF	STACK_2
$035D	$0875			MOVF	STACK_5, W
$035E	$00FD			MOVWF	STACK_13
$035F	$0871			MOVF	STACK_1, W
$0360	$00F5			MOVWF	STACK_5
$0361	$087D			MOVF	STACK_13, W
$0362	$00F1			MOVWF	STACK_1
$0363	$0874			MOVF	STACK_4, W
$0364	$00FD			MOVWF	STACK_13
$0365	$0870			MOVF	STACK_0, W
$0366	$00F4			MOVWF	STACK_4
$0367	$087D			MOVF	STACK_13, W
$0368	$00F0			MOVWF	STACK_0
$0369	$	USEA32:
$0369	$0877			MOVF	STACK_7, W
$036A	$1903			BTFSC	STATUS, Z
$036B	$2BE4			GOTO	JMPEEE
$036C	$0872			MOVF	STACK_2, W
$036D	$00FA			MOVWF	STACK_10
$036E	$17F2			BSF	STACK_2, 7
$036F	$17F6			BSF	STACK_6, 7
$0370	$0877			MOVF	STACK_7, W
$0371	$0273			SUBWF	STACK_3, W
$0372	$00F7			MOVWF	STACK_7
$0373	$1903			BTFSC	STATUS, Z
$0374	$2B9C			GOTO	ALIGNED32
$0375	$3008			MOVLW	8
$0376	$0277			SUBWF	STACK_7, W
$0377	$1C03			BTFSS	STATUS, C
$0378	$2B92			GOTO	ALIGNB32
$0379	$00F7			MOVWF	STACK_7
$037A	$0874			MOVF	STACK_4, W
$037B	$00F9			MOVWF	STACK_9
$037C	$0875			MOVF	STACK_5, W
$037D	$00F4			MOVWF	STACK_4
$037E	$0876			MOVF	STACK_6, W
$037F	$00F5			MOVWF	STACK_5
$0380	$01F6			CLRF	STACK_6
$0381	$3008			MOVLW	8
$0382	$0277			SUBWF	STACK_7, W
$0383	$1C03			BTFSS	STATUS, C
$0384	$2B92			GOTO	ALIGNB32
$0385	$00F7			MOVWF	STACK_7
$0386	$0874			MOVF	STACK_4, W
$0387	$00F9			MOVWF	STACK_9
$0388	$0875			MOVF	STACK_5, W
$0389	$00F4			MOVWF	STACK_4
$038A	$01F5			CLRF	STACK_5
$038B	$3008			MOVLW	8
$038C	$0277			SUBWF	STACK_7, W
$038D	$1C03			BTFSS	STATUS, C
$038E	$2B92			GOTO	ALIGNB32
$038F	$087A			MOVF	STACK_10, W
$0390	$00F2			MOVWF	STACK_2
$0391	$2BE4			GOTO	JMPEEE
$0392	$	ALIGNB32:
$0392	$0877			MOVF	STACK_7, W
$0393	$1903			BTFSC	STATUS, Z
$0394	$2B9C			GOTO	ALIGNED32
$0395	$	ALOOPB32:
$0395	$1003			BCF	STATUS, C
$0396	$0CF6			RRF	STACK_6, F
$0397	$0CF5			RRF	STACK_5, F
$0398	$0CF4			RRF	STACK_4, F
$0399	$0CF9			RRF	STACK_9, F
$039A	$0BF7			DECFSZ	STACK_7, F
$039B	$2B95			GOTO	ALOOPB32
$039C	$	ALIGNED32:
$039C	$1FA0			BTFSS	__math_tempbD, 7
$039D	$2BA9			GOTO	AOK32
$039E	$09F9			COMF	STACK_9, F
$039F	$09F4			COMF	STACK_4, F
$03A0	$09F5			COMF	STACK_5, F
$03A1	$09F6			COMF	STACK_6, F
$03A2	$0AF9			INCF	STACK_9, F
$03A3	$1903			BTFSC	STATUS, Z
$03A4	$0AF4			INCF	STACK_4, F
$03A5	$1903			BTFSC	STATUS, Z
$03A6	$0AF5			INCF	STACK_5, F
$03A7	$1903			BTFSC	STATUS, Z
$03A8	$0AF6			INCF	STACK_6, F
$03A9	$	AOK32:
$03A9	$0879			MOVF	STACK_9, W
$03AA	$07F8			ADDWF	STACK_8, F
$03AB	$0874			MOVF	STACK_4, W
$03AC	$1803			BTFSC	STATUS, C
$03AD	$0F74			INCFSZ	STACK_4, W
$03AE	$07F0			ADDWF	STACK_0, F
$03AF	$0875			MOVF	STACK_5, W
$03B0	$1803			BTFSC	STATUS, C
$03B1	$0F75			INCFSZ	STACK_5, W
$03B2	$07F1			ADDWF	STACK_1, F
$03B3	$0876			MOVF	STACK_6, W
$03B4	$1803			BTFSC	STATUS, C
$03B5	$0F76			INCFSZ	STACK_6, W
$03B6	$07F2			ADDWF	STACK_2, F
$03B7	$1BA0			BTFSC	__math_tempbD, 7
$03B8	$2BC2			GOTO	ACOMP32
$03B9	$1C03			BTFSS	STATUS, C
$03BA	$2BD2			GOTO	JMPNRMRND4032
$03BB	$0CF2			RRF	STACK_2, F
$03BC	$0CF1			RRF	STACK_1, F
$03BD	$0CF0			RRF	STACK_0, F
$03BE	$0CF8			RRF	STACK_8, F
$03BF	$0FF3			INCFSZ	STACK_3, F
$03C0	$2BD2			GOTO	JMPNRMRND4032
$03C1	$2BDE			GOTO	ADD_JMPSETFOV32
$03C2	$	ACOMP32:
$03C2	$1803			BTFSC	STATUS, C
$03C3	$2BD6			GOTO	JMPNRM4032
$03C4	$09F8			COMF	STACK_8, F
$03C5	$09F0			COMF	STACK_0, F
$03C6	$09F1			COMF	STACK_1, F
$03C7	$09F2			COMF	STACK_2, F
$03C8	$0AF8			INCF	STACK_8, F
$03C9	$1903			BTFSC	STATUS, Z
$03CA	$0AF0			INCF	STACK_0, F
$03CB	$1903			BTFSC	STATUS, Z
$03CC	$0AF1			INCF	STACK_1, F
$03CD	$1903			BTFSC	STATUS, Z
$03CE	$0AF2			INCF	STACK_2, F
$03CF	$3080			MOVLW	0x80
$03D0	$06FA			XORWF	STACK_10, F
$03D1	$2BDA			GOTO	JMPNRM32
$03D2	$	JMPNRMRND4032:
$03D2	$3001			MOVLW	0x01
$03D3	$00FC			MOVWF	STACK_12
$03D4	$24F3			CALL	_NRM4032
$03D5	$2BE6			GOTO	ADD32EEE
$03D6	$	JMPNRM4032:
$03D6	$3002			MOVLW	0x02
$03D7	$00FC			MOVWF	STACK_12
$03D8	$24F3			CALL	_NRM4032
$03D9	$2BE6			GOTO	ADD32EEE
$03DA	$	JMPNRM32:
$03DA	$3004			MOVLW	0x04
$03DB	$00FC			MOVWF	STACK_12
$03DC	$26BA			CALL	_NRM3232
$03DD	$2BE6			GOTO	ADD32EEE
$03DE	$	ADD_JMPSETFOV32:
$03DE	$3008			MOVLW	0x08
$03DF	$00FC			MOVWF	STACK_12
$03E0	$158A			BSF	PCLATH, 3
$03E1	$20C2			CALL	_SETFOV32
$03E2	$118A			BCF	PCLATH, 3
$03E3	$2BE6			GOTO	ADD32EEE
$03E4	$	JMPEEE:
$03E4	$3000			MOVLW	0x00
$03E5	$00FC			MOVWF	STACK_12
$03E6	$	ADD32EEE:
$03E6	$0000			NOP
$03E7	$0008			RETURN
$08EF	$	_PWM1_Start:
$08EF	$1303			BCF	STATUS, RP1
$08F0	$1683			BSF	STATUS, RP0
$08F1	$1107			BCF	TRISC, 2
$08F2	$1283			BCF	STATUS, RP0
$08F3	$1512			BSF	T2CON, 2
$08F4	$300C			MOVLW	12
$08F5	$0497			IORWF	CCP1CON, 1
$08F6	$0008			RETURN
$08F7	$	_PWM2_Start:
$08F7	$1303			BCF	STATUS, RP1
$08F8	$1683			BSF	STATUS, RP0
$08F9	$1087			BCF	TRISC, 1
$08FA	$1283			BCF	STATUS, RP0
$08FB	$1512			BSF	T2CON, 2
$08FC	$300C			MOVLW	12
$08FD	$049D			IORWF	CCP2CON, 1
$08FE	$0008			RETURN
$090B	$	_PWM1_Init:
$090B	$1303			BCF	STATUS, RP1
$090C	$1283			BCF	STATUS, RP0
$090D	$0195			CLRF	CCPR1L, 1
$090E	$1217			BCF	CCP1CON, 4
$090F	$1297			BCF	CCP1CON, 5
$0910	$0008			RETURN
$08FF	$	_PWM2_Init:
$08FF	$1303			BCF	STATUS, RP1
$0900	$1283			BCF	STATUS, RP0
$0901	$019B			CLRF	CCPR2L, 1
$0902	$121D			BCF	CCP2CON, 4
$0903	$129D			BCF	CCP2CON, 5
$0904	$0008			RETURN
$0837	$	_Mul_16x16_U:
$0837	$1303			BCF	STATUS, RP1
$0838	$1283			BCF	STATUS, RP0
$0839	$01FB			CLRF	STACK_11
$083A	$01FA			CLRF	STACK_10
$083B	$01F9			CLRF	STACK_9
$083C	$3080			MOVLW	128
$083D	$00F8			MOVWF	STACK_8
$083E	$0CF1			RRF	STACK_1, F
$083F	$0CF0			RRF	STACK_0, F
$0840	$1C03			BTFSS	STATUS, C
$0841	$284B			GOTO	$+10
$0842	$0874			MOVF	STACK_4, W
$0843	$07F9			ADDWF	STACK_9, F
$0844	$0875			MOVF	STACK_5, W
$0845	$1803			BTFSC	STATUS, C
$0846	$0F75			INCFSZ	STACK_5, W
$0847	$07FA			ADDWF	STACK_10, F
$0848	$1803			BTFSC	STATUS, C
$0849	$0AFB			INCF	STACK_11, F
$084A	$1003			BCF	STATUS, C
$084B	$1FF0			BTFSS	STACK_0, 7
$084C	$2853			GOTO	$+7
$084D	$0874			MOVF	STACK_4, W
$084E	$07FA			ADDWF	STACK_10, F
$084F	$0875			MOVF	STACK_5, W
$0850	$1803			BTFSC	STATUS, C
$0851	$0F75			INCFSZ	STACK_5, W
$0852	$07FB			ADDWF	STACK_11, F
$0853	$0CFB			RRF	STACK_11, F
$0854	$0CFA			RRF	STACK_10, F
$0855	$0CF9			RRF	STACK_9, F
$0856	$0CF8			RRF	STACK_8, F
$0857	$1C03			BTFSS	STATUS, C
$0858	$283E			GOTO	$-26
$0859	$087B			MOVF	STACK_11, W
$085A	$00F3			MOVWF	STACK_3
$085B	$087A			MOVF	STACK_10, W
$085C	$00F2			MOVWF	STACK_2
$085D	$0879			MOVF	STACK_9, W
$085E	$00F1			MOVWF	STACK_1
$085F	$0878			MOVF	STACK_8, W
$0860	$00F0			MOVWF	STACK_0
$0861	$0008			RETURN
$0873	$	_Word2Double:
$0873	$1303			BCF	STATUS, RP1
$0874	$1283			BCF	STATUS, RP0
$0875	$0870			MOVF	STACK_0, W
$0876	$00F8			MOVWF	STACK_8
$0877	$0871			MOVF	STACK_1, W
$0878	$00F0			MOVWF	STACK_0
$0879	$01F1			CLRF	STACK_1
$087A	$01F2			CLRF	STACK_2
$087B	$01F3			CLRF	STACK_3
$087C	$	FLO16U32:
$087C	$01FB			CLRF	STACK_11
$087D	$01FC			CLRF	STACK_12
$087E	$3096			MOVLW	150
$087F	$00F3			MOVWF	STACK_3
$0880	$01FA			CLRF	STACK_10
$0881	$0870			MOVF	STACK_0, W
$0882	$00F1			MOVWF	STACK_1
$0883	$0878			MOVF	STACK_8, W
$0884	$00F0			MOVWF	STACK_0
$0885	$01F8			CLRF	STACK_8
$0886	$01F2			CLRF	STACK_2
$0887	$118A			BCF	PCLATH, 3
$0888	$26BA			CALL	_NRM3232
$0889	$158A			BSF	PCLATH, 3
$088A	$0008			RETURN
$03E8	$	_Div_32x32_FP:
$03E8	$1303			BCF	STATUS, RP1
$03E9	$1283			BCF	STATUS, RP0
$03EA	$	FPD32:
$03EA	$0877			MOVF	STACK_7, W
$03EB	$1903			BTFSC	STATUS, Z
$03EC	$2C77			GOTO	JPDSETFDZ32
$03ED	$0873			MOVF	STACK_3, W
$03EE	$1903			BTFSC	STATUS, Z
$03EF	$2C7C			GOTO	JPDRES032
$03F0	$	D32BNE0:
$03F0	$0872			MOVF	STACK_2, W
$03F1	$0676			XORWF	STACK_6, W
$03F2	$3980			ANDLW	128
$03F3	$00FA			MOVWF	STACK_10
$03F4	$17F2			BSF	STACK_2, 7
$03F5	$17F6			BSF	STACK_6, 7
$03F6	$	TALIGN32:
$03F6	$01A0			CLRF	__math_tempbD
$03F7	$0872			MOVF	STACK_2, W
$03F8	$00F8			MOVWF	STACK_8
$03F9	$0871			MOVF	STACK_1, W
$03FA	$00FC			MOVWF	STACK_12
$03FB	$0870			MOVF	STACK_0, W
$03FC	$00FD			MOVWF	STACK_13
$03FD	$0874			MOVF	STACK_4, W
$03FE	$02FD			SUBWF	STACK_13, F
$03FF	$0875			MOVF	STACK_5, W
$0400	$1C03			BTFSS	STATUS, C
$0401	$0F75			INCFSZ	STACK_5, W
$0402	$	TS1ALIGN32:
$0402	$02FC			SUBWF	STACK_12, F
$0403	$0876			MOVF	STACK_6, W
$0404	$1C03			BTFSS	STATUS, C
$0405	$0F76			INCFSZ	STACK_6, W
$0406	$	TS2ALIGN32:
$0406	$02F8			SUBWF	STACK_8, F
$0407	$01F8			CLRF	STACK_8
$0408	$01FC			CLRF	STACK_12
$0409	$01FD			CLRF	STACK_13
$040A	$1C03			BTFSS	STATUS, C
$040B	$2C13			GOTO	DALIGN32OK
$040C	$1003			BCF	STATUS, C
$040D	$0CF2			RRF	STACK_2, F
$040E	$0CF1			RRF	STACK_1, F
$040F	$0CF0			RRF	STACK_0, F
$0410	$0CF8			RRF	STACK_8, F
$0411	$3001			MOVLW	0x01
$0412	$00A0			MOVWF	__math_tempbD
$0413	$	DALIGN32OK:
$0413	$0877			MOVF	STACK_7, W
$0414	$02F3			SUBWF	STACK_3, F
$0415	$1C03			BTFSS	STATUS, C
$0416	$2C1D			GOTO	ALTB32
$0417	$	AGEB32:
$0417	$307E			MOVLW	126
$0418	$0720			ADDWF	__math_tempbD, W
$0419	$07F3			ADDWF	STACK_3, F
$041A	$1803			BTFSC	STATUS, C
$041B	$2C81			GOTO	JPDSETFOV32
$041C	$2C22			GOTO	DARGOK32
$041D	$	ALTB32:
$041D	$307E			MOVLW	126
$041E	$0720			ADDWF	__math_tempbD, W
$041F	$07F3			ADDWF	STACK_3, F
$0420	$1C03			BTFSS	STATUS, C
$0421	$2C86			GOTO	JPDSETFUN32
$0422	$	DARGOK32:
$0422	$3018			MOVLW	24
$0423	$07FA			ADDWF	STACK_10, F
$0424	$	DLOOP32:
$0424	$0DFD			RLF	STACK_13, F
$0425	$0DFC			RLF	STACK_12, F
$0426	$0DF8			RLF	STACK_8, F
$0427	$0DF0			RLF	STACK_0, F
$0428	$0DF1			RLF	STACK_1, F
$0429	$0DF2			RLF	STACK_2, F
$042A	$0DA0			RLF	__math_tempbD, F
$042B	$0874			MOVF	STACK_4, W
$042C	$02F0			SUBWF	STACK_0, F
$042D	$0875			MOVF	STACK_5, W
$042E	$1C03			BTFSS	STATUS, C
$042F	$0F75			INCFSZ	STACK_5, W
$0430	$	DS132:
$0430	$02F1			SUBWF	STACK_1, F
$0431	$0876			MOVF	STACK_6, W
$0432	$1C03			BTFSS	STATUS, C
$0433	$0F76			INCFSZ	STACK_6, W
$0434	$	DS232:
$0434	$02F2			SUBWF	STACK_2, F
$0435	$0D76			RLF	STACK_6, W
$0436	$04A0			IORWF	__math_tempbD, F
$0437	$1C20			BTFSS	__math_tempbD, 0
$0438	$2C3B			GOTO	DREST32
$0439	$147D			BSF	STACK_13, 0
$043A	$2C46			GOTO	DOK32
$043B	$	DREST32:
$043B	$0874			MOVF	STACK_4, W
$043C	$07F0			ADDWF	STACK_0, F
$043D	$0875			MOVF	STACK_5, W
$043E	$1803			BTFSC	STATUS, C
$043F	$0F75			INCFSZ	STACK_5, W
$0440	$	DAREST32:
$0440	$07F1			ADDWF	STACK_1, F
$0441	$0876			MOVF	STACK_6, W
$0442	$1803			BTFSC	STATUS, C
$0443	$0A76			INCF	STACK_6, W
$0444	$07F2			ADDWF	STACK_2, F
$0445	$107D			BCF	STACK_13, 0
$0446	$	DOK32:
$0446	$03FA			DECF	STACK_10, F
$0447	$301F			MOVLW	31
$0448	$057A			ANDWF	STACK_10, W
$0449	$1D03			BTFSS	STATUS, Z
$044A	$2C24			GOTO	DLOOP32
$044B	$	DROUND32:
$044B	$1B7B			BTFSC	STACK_11, 6
$044C	$1C7D			BTFSS	STACK_13, 0
$044D	$2C6D			GOTO	DIV32OK
$044E	$1003			BCF	STATUS, C
$044F	$0DF0			RLF	STACK_0, F
$0450	$0DF1			RLF	STACK_1, F
$0451	$0DF2			RLF	STACK_2, F
$0452	$0DA0			RLF	__math_tempbD, F
$0453	$0874			MOVF	STACK_4, W
$0454	$02F0			SUBWF	STACK_0, F
$0455	$0875			MOVF	STACK_5, W
$0456	$1C03			BTFSS	STATUS, C
$0457	$0F75			INCFSZ	STACK_5, W
$0458	$02F1			SUBWF	STACK_1, F
$0459	$0876			MOVF	STACK_6, W
$045A	$1C03			BTFSS	STATUS, C
$045B	$0F76			INCFSZ	STACK_6, W
$045C	$02F2			SUBWF	STACK_2, F
$045D	$0D76			RLF	STACK_6, W
$045E	$0420			IORWF	__math_tempbD, W
$045F	$3901			ANDLW	0x01
$0460	$07FD			ADDWF	STACK_13, F
$0461	$1803			BTFSC	STATUS, C
$0462	$0AFC			INCF	STACK_12, F
$0463	$1903			BTFSC	STATUS, Z
$0464	$0AF8			INCF	STACK_8, F
$0465	$1D03			BTFSS	STATUS, Z
$0466	$2C6D			GOTO	DIV32OK
$0467	$0CF8			RRF	STACK_8, F
$0468	$0CFC			RRF	STACK_12, F
$0469	$0CFD			RRF	STACK_13, F
$046A	$0AF3			INCF	STACK_3, F
$046B	$1903			BTFSC	STATUS, Z
$046C	$2C81			GOTO	JPDSETFOV32
$046D	$	DIV32OK:
$046D	$1FFA			BTFSS	STACK_10, 7
$046E	$13F8			BCF	STACK_8, 7
$046F	$0878			MOVF	STACK_8, W
$0470	$00F2			MOVWF	STACK_2
$0471	$087C			MOVF	STACK_12, W
$0472	$00F1			MOVWF	STACK_1
$0473	$087D			MOVF	STACK_13, W
$0474	$00F0			MOVWF	STACK_0
$0475	$3000			MOVLW	0x00
$0476	$2C8A			GOTO	DIV32EEE
$0477	$	JPDSETFDZ32:
$0477	$3001			MOVLW	0x01
$0478	$158A			BSF	PCLATH, 3
$0479	$2125			CALL	_SETFDZ32
$047A	$118A			BCF	PCLATH, 3
$047B	$2C8A			GOTO	DIV32EEE
$047C	$	JPDRES032:
$047C	$3002			MOVLW	0x02
$047D	$158A			BSF	PCLATH, 3
$047E	$20E6			CALL	_RES032
$047F	$118A			BCF	PCLATH, 3
$0480	$2C8A			GOTO	DIV32EEE
$0481	$	JPDSETFOV32:
$0481	$3004			MOVLW	0x04
$0482	$158A			BSF	PCLATH, 3
$0483	$20C2			CALL	_SETFOV32
$0484	$118A			BCF	PCLATH, 3
$0485	$2C8A			GOTO	DIV32EEE
$0486	$	JPDSETFUN32:
$0486	$3008			MOVLW	0x08
$0487	$158A			BSF	PCLATH, 3
$0488	$20D0			CALL	_SETFUN32
$0489	$118A			BCF	PCLATH, 3
$048A	$	DIV32EEE:
$048A	$0000			NOP
$048B	$0008			RETURN
$08DE	$	_Sub_32x32_FP:
$08DE	$1303			BCF	STATUS, RP1
$08DF	$1283			BCF	STATUS, RP0
$08E0	$3080			MOVLW	0x80
$08E1	$06F6			XORWF	STACK_6, F
$08E2	$118A			BCF	PCLATH, 3
$08E3	$2346			CALL	_Add_32x32_FP
$08E4	$158A			BSF	PCLATH, 3
$08E5	$0008			RETURN
$05F2	$	_Mul_16x16_S:
$05F2	$1303			BCF	STATUS, RP1
$05F3	$1283			BCF	STATUS, RP0
$05F4	$01FB			CLRF	STACK_11
$05F5	$01FA			CLRF	STACK_10
$05F6	$01F9			CLRF	STACK_9
$05F7	$3080			MOVLW	128
$05F8	$00F8			MOVWF	STACK_8
$05F9	$01FD			CLRF	STACK_13
$05FA	$1FF1			BTFSS	STACK_1, 7
$05FB	$2E02			GOTO	$+7
$05FC	$09F1			COMF	STACK_1, F
$05FD	$09F0			COMF	STACK_0, F
$05FE	$0AF0			INCF	STACK_0, F
$05FF	$1903			BTFSC	STATUS, Z
$0600	$0AF1			INCF	STACK_1, F
$0601	$0AFD			INCF	STACK_13, F
$0602	$1FF5			BTFSS	STACK_5, 7
$0603	$2E0A			GOTO	$+7
$0604	$09F5			COMF	STACK_5, F
$0605	$09F4			COMF	STACK_4, F
$0606	$0AF4			INCF	STACK_4, F
$0607	$1903			BTFSC	STATUS, Z
$0608	$0AF5			INCF	STACK_5, F
$0609	$0AFD			INCF	STACK_13, F
$060A	$0CF1			RRF	STACK_1, F
$060B	$0CF0			RRF	STACK_0, F
$060C	$1C03			BTFSS	STATUS, C
$060D	$2E17			GOTO	$+10
$060E	$0874			MOVF	STACK_4, W
$060F	$07F9			ADDWF	STACK_9, F
$0610	$0875			MOVF	STACK_5, W
$0611	$1803			BTFSC	STATUS, C
$0612	$0F75			INCFSZ	STACK_5, W
$0613	$07FA			ADDWF	STACK_10, F
$0614	$1803			BTFSC	STATUS, C
$0615	$0AFB			INCF	STACK_11, F
$0616	$1003			BCF	STATUS, C
$0617	$1FF0			BTFSS	STACK_0, 7
$0618	$2E1F			GOTO	$+7
$0619	$0874			MOVF	STACK_4, W
$061A	$07FA			ADDWF	STACK_10, F
$061B	$1803			BTFSC	STATUS, C
$061C	$0AFB			INCF	STACK_11, F
$061D	$0875			MOVF	STACK_5, W
$061E	$07FB			ADDWF	STACK_11, F
$061F	$0CFB			RRF	STACK_11, F
$0620	$0CFA			RRF	STACK_10, F
$0621	$0CF9			RRF	STACK_9, F
$0622	$0CF8			RRF	STACK_8, F
$0623	$1C03			BTFSS	STATUS, C
$0624	$2E0A			GOTO	$-26
$0625	$1C7D			BTFSS	STACK_13, 0
$0626	$2E32			GOTO	$+12
$0627	$09FB			COMF	STACK_11, F
$0628	$09FA			COMF	STACK_10, F
$0629	$09F9			COMF	STACK_9, F
$062A	$09F8			COMF	STACK_8, F
$062B	$0AF8			INCF	STACK_8, F
$062C	$1903			BTFSC	STATUS, Z
$062D	$0AF9			INCF	STACK_9, F
$062E	$1903			BTFSC	STATUS, Z
$062F	$0AFA			INCF	STACK_10, F
$0630	$1903			BTFSC	STATUS, Z
$0631	$0AFB			INCF	STACK_11, F
$0632	$087B			MOVF	STACK_11, W
$0633	$00F3			MOVWF	STACK_3
$0634	$087A			MOVF	STACK_10, W
$0635	$00F2			MOVWF	STACK_2
$0636	$0879			MOVF	STACK_9, W
$0637	$00F1			MOVWF	STACK_1
$0638	$0878			MOVF	STACK_8, W
$0639	$00F0			MOVWF	STACK_0
$063A	$0000			NOP
$063B	$0008			RETURN
$08B3	$	_SETIOV3224:
$08B3	$1303			BCF	STATUS, RP1
$08B4	$1283			BCF	STATUS, RP0
$08B5	$147B			BSF	STACK_11, 0
$08B6	$1FFB			BTFSS	STACK_11, 7
$08B7	$28C0			GOTO	SETIOV3224EEE
$08B8	$01F2			CLRF	STACK_2
$08B9	$1FFA			BTFSS	STACK_10, 7
$08BA	$30FF			MOVLW	0xFF
$08BB	$00F2			MOVWF	STACK_2
$08BC	$00F1			MOVWF	STACK_1
$08BD	$00F0			MOVWF	STACK_0
$08BE	$0DFA			RLF	STACK_10, F
$08BF	$0CF2			RRF	STACK_2, F
$08C0	$	SETIOV3224EEE:
$08C0	$30FF			MOVLW	0xFF
$08C1	$0008			RETURN
$072A	$	_initport:
;lfr_pid_runner_5sensor.c,14 :: 		void initport()
;lfr_pid_runner_5sensor.c,16 :: 		ADCON1 =0x06;          //TURN OFF ADC AND CONFIGURE A AND E AS DIG I/O
$072A	$3006			MOVLW	6
$072B	$1303			BCF	STATUS, RP1
$072C	$1683			BSF	STATUS, RP0
$072D	$009F			MOVWF	ADCON1
;lfr_pid_runner_5sensor.c,17 :: 		PORTA = 0;             //CLEAR PORTA
$072E	$1283			BCF	STATUS, RP0
$072F	$0185			CLRF	PORTA, 1
;lfr_pid_runner_5sensor.c,18 :: 		PORTE = 0;             //CLEAR PORTE
$0730	$0189			CLRF	PORTE, 1
;lfr_pid_runner_5sensor.c,19 :: 		TRISA = 0x3F;          //INITIALIZE PORTA AS INPUT
$0731	$303F			MOVLW	63
$0732	$1683			BSF	STATUS, RP0
$0733	$0085			MOVWF	TRISA
;lfr_pid_runner_5sensor.c,20 :: 		TRISE = 0x03;          //INITIALIZE PORTE AS INPUT
$0734	$3003			MOVLW	3
$0735	$0089			MOVWF	TRISE
;lfr_pid_runner_5sensor.c,21 :: 		TRISD = 0x00;          //INITIALIZE PORTD AS OUTPUT
$0736	$0188			CLRF	TRISD, 1
;lfr_pid_runner_5sensor.c,22 :: 		TRISC = 0b00000000;    //INITIALIZE PORTC AS OUTPUT
$0737	$0187			CLRF	TRISC, 1
;lfr_pid_runner_5sensor.c,23 :: 		TRISB = 0b11000000;    //INITIALIZE PORTB AS INPUT  FOR TSOP
$0738	$30C0			MOVLW	192
$0739	$0086			MOVWF	TRISB
;lfr_pid_runner_5sensor.c,24 :: 		}
$073A	$0008			RETURN
$0862	$	_initpwm:
;lfr_pid_runner_5sensor.c,26 :: 		void initpwm()
;lfr_pid_runner_5sensor.c,28 :: 		PWM1_Init(5000);
$0862	$1303			BCF	STATUS, RP1
$0863	$1283			BCF	STATUS, RP0
$0864	$1012			BCF	T2CON, T2CKPS0
$0865	$1092			BCF	T2CON, T2CKPS1
$0866	$30C7			MOVLW	199
$0867	$1683			BSF	STATUS, RP0
$0868	$0092			MOVWF	PR2
$0869	$210B			CALL	_PWM1_Init
;lfr_pid_runner_5sensor.c,29 :: 		PWM2_Init(5000);
$086A	$1012			BCF	T2CON, T2CKPS0
$086B	$1092			BCF	T2CON, T2CKPS1
$086C	$30C7			MOVLW	199
$086D	$1683			BSF	STATUS, RP0
$086E	$0092			MOVWF	PR2
$086F	$20FF			CALL	_PWM2_Init
;lfr_pid_runner_5sensor.c,30 :: 		Pwm1_Start();          //RIGHT MOTOR
$0870	$20EF			CALL	_PWM1_Start
;lfr_pid_runner_5sensor.c,31 :: 		Pwm2_Start();          //LEFT MOTOR
$0871	$20F7			CALL	_PWM2_Start
;lfr_pid_runner_5sensor.c,32 :: 		}
$0872	$0008			RETURN
$0800	$	_indicator:
;lfr_pid_runner_5sensor.c,57 :: 		void indicator()         //COPY THE SENSOR OUTPUT TO PORTD-INDICATOR
;lfr_pid_runner_5sensor.c,60 :: 		PORTD.F7 = 0;
$0800	$1303			BCF	STATUS, RP1
$0801	$1283			BCF	STATUS, RP0
$0802	$1388			BCF	PORTD, 7
;lfr_pid_runner_5sensor.c,61 :: 		PORTD.F6 = 0;
$0803	$1308			BCF	PORTD, 6
;lfr_pid_runner_5sensor.c,62 :: 		PORTD.F5 = PORTA.F2;
$0804	$3000			MOVLW	0
$0805	$1905			BTFSC	PORTA, 2
$0806	$3001			MOVLW	1
$0807	$00F1			MOVWF	STACK_1
$0808	$3000			MOVLW	0
$0809	$1871			BTFSC	STACK_1, 0
$080A	$3020			MOVLW	32
$080B	$0608			XORWF	PORTD, 0
$080C	$3920			ANDLW	32
$080D	$0688			XORWF	PORTD, 1
;lfr_pid_runner_5sensor.c,63 :: 		PORTD.F4 = PORTA.F3;
$080E	$3000			MOVLW	0
$080F	$1985			BTFSC	PORTA, 3
$0810	$3001			MOVLW	1
$0811	$00F1			MOVWF	STACK_1
$0812	$3000			MOVLW	0
$0813	$1871			BTFSC	STACK_1, 0
$0814	$3010			MOVLW	16
$0815	$0608			XORWF	PORTD, 0
$0816	$3910			ANDLW	16
$0817	$0688			XORWF	PORTD, 1
;lfr_pid_runner_5sensor.c,64 :: 		PORTD.F3 = PORTA.F4;
$0818	$3000			MOVLW	0
$0819	$1A05			BTFSC	PORTA, 4
$081A	$3001			MOVLW	1
$081B	$00F1			MOVWF	STACK_1
$081C	$3000			MOVLW	0
$081D	$1871			BTFSC	STACK_1, 0
$081E	$3008			MOVLW	8
$081F	$0608			XORWF	PORTD, 0
$0820	$3908			ANDLW	8
$0821	$0688			XORWF	PORTD, 1
;lfr_pid_runner_5sensor.c,65 :: 		PORTD.F2 = PORTA.F5;
$0822	$3000			MOVLW	0
$0823	$1A85			BTFSC	PORTA, 5
$0824	$3001			MOVLW	1
$0825	$00F1			MOVWF	STACK_1
$0826	$3000			MOVLW	0
$0827	$1871			BTFSC	STACK_1, 0
$0828	$3004			MOVLW	4
$0829	$0608			XORWF	PORTD, 0
$082A	$3904			ANDLW	4
$082B	$0688			XORWF	PORTD, 1
;lfr_pid_runner_5sensor.c,66 :: 		PORTD.F1 = PORTE.F0;
$082C	$3001			MOVLW	1
$082D	$0509			ANDWF	PORTE, 0
$082E	$00F0			MOVWF	STACK_0
$082F	$3000			MOVLW	0
$0830	$1870			BTFSC	STACK_0, 0
$0831	$3002			MOVLW	2
$0832	$0608			XORWF	PORTD, 0
$0833	$3902			ANDLW	2
$0834	$0688			XORWF	PORTD, 1
;lfr_pid_runner_5sensor.c,67 :: 		PORTD.F0 = 0;
$0835	$1008			BCF	PORTD, 0
;lfr_pid_runner_5sensor.c,68 :: 		}
$0836	$0008			RETURN
$0267	$	_CalcError:
;lfr_pid_runner_5sensor.c,69 :: 		void CalcError()				 //calculates the current error
;lfr_pid_runner_5sensor.c,71 :: 		s1 = 0;
$0267	$1303			BCF	STATUS, RP1
$0268	$1283			BCF	STATUS, RP0
$0269	$01A1			CLRF	_s1
$026A	$01A2			CLRF	_s1+1
;lfr_pid_runner_5sensor.c,72 :: 		s2 = 0;
$026B	$01A3			CLRF	_s2
$026C	$01A4			CLRF	_s2+1
;lfr_pid_runner_5sensor.c,73 :: 		s3 = 0;
$026D	$01A5			CLRF	_s3
$026E	$01A6			CLRF	_s3+1
;lfr_pid_runner_5sensor.c,74 :: 		s4 = 0;
$026F	$01A7			CLRF	_s4
$0270	$01A8			CLRF	_s4+1
;lfr_pid_runner_5sensor.c,75 :: 		s5 = 0;
$0271	$01A9			CLRF	_s5
$0272	$01AA			CLRF	_s5+1
;lfr_pid_runner_5sensor.c,77 :: 		if(PORTA.F2)
$0273	$1D05			BTFSS	PORTA, 2
$0274	$2A7B			GOTO	L_CalcError_0
;lfr_pid_runner_5sensor.c,79 :: 		lastreading='r';
$0275	$3072			MOVLW	114
$0276	$00AB			MOVWF	_lastreading
;lfr_pid_runner_5sensor.c,80 :: 		s1 = 1;
$0277	$3001			MOVLW	1
$0278	$00A1			MOVWF	_s1
$0279	$3000			MOVLW	0
$027A	$00A2			MOVWF	_s1+1
;lfr_pid_runner_5sensor.c,81 :: 		}
$027B	$	L_CalcError_0:
;lfr_pid_runner_5sensor.c,82 :: 		if(PORTA.F3)
$027B	$1D85			BTFSS	PORTA, 3
$027C	$2A81			GOTO	L_CalcError_1
;lfr_pid_runner_5sensor.c,84 :: 		s2 = 1;
$027D	$3001			MOVLW	1
$027E	$00A3			MOVWF	_s2
$027F	$3000			MOVLW	0
$0280	$00A4			MOVWF	_s2+1
;lfr_pid_runner_5sensor.c,85 :: 		}
$0281	$	L_CalcError_1:
;lfr_pid_runner_5sensor.c,86 :: 		if(PORTA.F4)
$0281	$1E05			BTFSS	PORTA, 4
$0282	$2A87			GOTO	L_CalcError_2
;lfr_pid_runner_5sensor.c,88 :: 		s3 = 1;
$0283	$3001			MOVLW	1
$0284	$00A5			MOVWF	_s3
$0285	$3000			MOVLW	0
$0286	$00A6			MOVWF	_s3+1
;lfr_pid_runner_5sensor.c,89 :: 		}
$0287	$	L_CalcError_2:
;lfr_pid_runner_5sensor.c,90 :: 		if(PORTA.F5)
$0287	$1E85			BTFSS	PORTA, 5
$0288	$2A8D			GOTO	L_CalcError_3
;lfr_pid_runner_5sensor.c,93 :: 		s4 = 1;
$0289	$3001			MOVLW	1
$028A	$00A7			MOVWF	_s4
$028B	$3000			MOVLW	0
$028C	$00A8			MOVWF	_s4+1
;lfr_pid_runner_5sensor.c,94 :: 		}
$028D	$	L_CalcError_3:
;lfr_pid_runner_5sensor.c,95 :: 		if(PORTE.F0)
$028D	$1C09			BTFSS	PORTE, 0
$028E	$2A95			GOTO	L_CalcError_4
;lfr_pid_runner_5sensor.c,97 :: 		lastreading='l';
$028F	$306C			MOVLW	108
$0290	$00AB			MOVWF	_lastreading
;lfr_pid_runner_5sensor.c,98 :: 		s5 = 1;
$0291	$3001			MOVLW	1
$0292	$00A9			MOVWF	_s5
$0293	$3000			MOVLW	0
$0294	$00AA			MOVWF	_s5+1
;lfr_pid_runner_5sensor.c,99 :: 		}
$0295	$	L_CalcError_4:
;lfr_pid_runner_5sensor.c,101 :: 		perror = error;
$0295	$0830			MOVF	_error, 0
$0296	$00AC			MOVWF	_perror
$0297	$0831			MOVF	_error+1, 0
$0298	$00AD			MOVWF	_perror+1
$0299	$0832			MOVF	_error+2, 0
$029A	$00AE			MOVWF	_perror+2
$029B	$0833			MOVF	_error+3, 0
$029C	$00AF			MOVWF	_perror+3
;lfr_pid_runner_5sensor.c,105 :: 		error = (s1 * 1) + (s2 * 2) + (s3 * 3) + (s4 * 4) + (s5 * 5) ;
$029D	$3001			MOVLW	1
$029E	$00F4			MOVWF	STACK_4
$029F	$0823			MOVF	_s2, 0
$02A0	$00F0			MOVWF	STACK_0
$02A1	$0824			MOVF	_s2+1, 0
$02A2	$00F1			MOVWF	STACK_0+1
$02A3	$0874			MOVF	STACK_4, 0
$02A4	$	L_CalcError_18:
$02A4	$1903			BTFSC	STATUS, Z
$02A5	$2AAB			GOTO	L_CalcError_19
$02A6	$0DF0			RLF	STACK_0, 1
$02A7	$0DF1			RLF	STACK_0+1, 1
$02A8	$1070			BCF	STACK_0, 0
$02A9	$3FFF			ADDLW	255
$02AA	$2AA4			GOTO	L_CalcError_18
$02AB	$	L_CalcError_19:
$02AB	$0870			MOVF	STACK_0, 0
$02AC	$0721			ADDWF	_s1, 0
$02AD	$00DC			MOVWF	FLOC_CalcError+0
$02AE	$0822			MOVF	_s1+1, 0
$02AF	$1803			BTFSC	STATUS, C
$02B0	$3F01			ADDLW	1
$02B1	$0771			ADDWF	STACK_0+1, 0
$02B2	$00DD			MOVWF	FLOC_CalcError+1
$02B3	$0825			MOVF	_s3, 0
$02B4	$00F0			MOVWF	STACK_0
$02B5	$0826			MOVF	_s3+1, 0
$02B6	$00F1			MOVWF	STACK_0+1
$02B7	$3003			MOVLW	3
$02B8	$00F4			MOVWF	STACK_4
$02B9	$3000			MOVLW	0
$02BA	$00F5			MOVWF	STACK_4+1
$02BB	$158A			BSF	PCLATH, 3
$02BC	$2037			CALL	_mul_16x16_u
$02BD	$118A			BCF	PCLATH, 3
$02BE	$0870			MOVF	STACK_0, 0
$02BF	$07DC			ADDWF	FLOC_CalcError+0, 1
$02C0	$0871			MOVF	STACK_0+1, 0
$02C1	$1803			BTFSC	STATUS, C
$02C2	$3F01			ADDLW	1
$02C3	$07DD			ADDWF	FLOC_CalcError+1, 1
$02C4	$3002			MOVLW	2
$02C5	$00F4			MOVWF	STACK_4
$02C6	$0827			MOVF	_s4, 0
$02C7	$00F0			MOVWF	STACK_0
$02C8	$0828			MOVF	_s4+1, 0
$02C9	$00F1			MOVWF	STACK_0+1
$02CA	$0874			MOVF	STACK_4, 0
$02CB	$	L_CalcError_20:
$02CB	$1903			BTFSC	STATUS, Z
$02CC	$2AD2			GOTO	L_CalcError_21
$02CD	$0DF0			RLF	STACK_0, 1
$02CE	$0DF1			RLF	STACK_0+1, 1
$02CF	$1070			BCF	STACK_0, 0
$02D0	$3FFF			ADDLW	255
$02D1	$2ACB			GOTO	L_CalcError_20
$02D2	$	L_CalcError_21:
$02D2	$0870			MOVF	STACK_0, 0
$02D3	$07DC			ADDWF	FLOC_CalcError+0, 1
$02D4	$0871			MOVF	STACK_0+1, 0
$02D5	$1803			BTFSC	STATUS, C
$02D6	$3F01			ADDLW	1
$02D7	$07DD			ADDWF	FLOC_CalcError+1, 1
$02D8	$0829			MOVF	_s5, 0
$02D9	$00F0			MOVWF	STACK_0
$02DA	$082A			MOVF	_s5+1, 0
$02DB	$00F1			MOVWF	STACK_0+1
$02DC	$3005			MOVLW	5
$02DD	$00F4			MOVWF	STACK_4
$02DE	$3000			MOVLW	0
$02DF	$00F5			MOVWF	STACK_4+1
$02E0	$158A			BSF	PCLATH, 3
$02E1	$2037			CALL	_mul_16x16_u
$02E2	$118A			BCF	PCLATH, 3
$02E3	$085C			MOVF	FLOC_CalcError+0, 0
$02E4	$07F0			ADDWF	STACK_0, 1
$02E5	$085D			MOVF	FLOC_CalcError+1, 0
$02E6	$1803			BTFSC	STATUS, C
$02E7	$3F01			ADDLW	1
$02E8	$07F1			ADDWF	STACK_0+1, 1
$02E9	$158A			BSF	PCLATH, 3
$02EA	$2073			CALL	_word2double
$02EB	$118A			BCF	PCLATH, 3
$02EC	$0870			MOVF	STACK_0, 0
$02ED	$00DC			MOVWF	FLOC_CalcError+0
$02EE	$0871			MOVF	STACK_0+1, 0
$02EF	$00DD			MOVWF	FLOC_CalcError+1
$02F0	$0872			MOVF	STACK_0+2, 0
$02F1	$00DE			MOVWF	FLOC_CalcError+2
$02F2	$0873			MOVF	STACK_0+3, 0
$02F3	$00DF			MOVWF	FLOC_CalcError+3
$02F4	$085C			MOVF	FLOC_CalcError+0, 0
$02F5	$00B0			MOVWF	_error
$02F6	$085D			MOVF	FLOC_CalcError+1, 0
$02F7	$00B1			MOVWF	_error+1
$02F8	$085E			MOVF	FLOC_CalcError+2, 0
$02F9	$00B2			MOVWF	_error+2
$02FA	$085F			MOVF	FLOC_CalcError+3, 0
$02FB	$00B3			MOVWF	_error+3
;lfr_pid_runner_5sensor.c,106 :: 		error = (error)/(s1+s2+s3+s4+s5);
$02FC	$0823			MOVF	_s2, 0
$02FD	$0721			ADDWF	_s1, 0
$02FE	$00F0			MOVWF	STACK_0
$02FF	$0822			MOVF	_s1+1, 0
$0300	$1803			BTFSC	STATUS, C
$0301	$3F01			ADDLW	1
$0302	$0724			ADDWF	_s2+1, 0
$0303	$00F1			MOVWF	STACK_0+1
$0304	$0825			MOVF	_s3, 0
$0305	$07F0			ADDWF	STACK_0, 1
$0306	$0826			MOVF	_s3+1, 0
$0307	$1803			BTFSC	STATUS, C
$0308	$3F01			ADDLW	1
$0309	$07F1			ADDWF	STACK_0+1, 1
$030A	$0827			MOVF	_s4, 0
$030B	$07F0			ADDWF	STACK_0, 1
$030C	$0828			MOVF	_s4+1, 0
$030D	$1803			BTFSC	STATUS, C
$030E	$3F01			ADDLW	1
$030F	$07F1			ADDWF	STACK_0+1, 1
$0310	$0829			MOVF	_s5, 0
$0311	$07F0			ADDWF	STACK_0, 1
$0312	$082A			MOVF	_s5+1, 0
$0313	$1803			BTFSC	STATUS, C
$0314	$3F01			ADDLW	1
$0315	$07F1			ADDWF	STACK_0+1, 1
$0316	$158A			BSF	PCLATH, 3
$0317	$2073			CALL	_word2double
$0318	$118A			BCF	PCLATH, 3
$0319	$0870			MOVF	STACK_0, 0
$031A	$00F4			MOVWF	STACK_4
$031B	$0871			MOVF	STACK_0+1, 0
$031C	$00F5			MOVWF	STACK_4+1
$031D	$0872			MOVF	STACK_0+2, 0
$031E	$00F6			MOVWF	STACK_4+2
$031F	$0873			MOVF	STACK_0+3, 0
$0320	$00F7			MOVWF	STACK_4+3
$0321	$085C			MOVF	FLOC_CalcError+0, 0
$0322	$00F0			MOVWF	STACK_0
$0323	$085D			MOVF	FLOC_CalcError+1, 0
$0324	$00F1			MOVWF	STACK_0+1
$0325	$085E			MOVF	FLOC_CalcError+2, 0
$0326	$00F2			MOVWF	STACK_0+2
$0327	$085F			MOVF	FLOC_CalcError+3, 0
$0328	$00F3			MOVWF	STACK_0+3
$0329	$23E8			CALL	_div_32x32_fp
$032A	$0870			MOVF	STACK_0, 0
$032B	$00B0			MOVWF	_error
$032C	$0871			MOVF	STACK_0+1, 0
$032D	$00B1			MOVWF	_error+1
$032E	$0872			MOVF	STACK_0+2, 0
$032F	$00B2			MOVWF	_error+2
$0330	$0873			MOVF	STACK_0+3, 0
$0331	$00B3			MOVWF	_error+3
;lfr_pid_runner_5sensor.c,107 :: 		error = error - 3;
$0332	$3000			MOVLW	0
$0333	$00F4			MOVWF	STACK_4
$0334	$3000			MOVLW	0
$0335	$00F5			MOVWF	STACK_4+1
$0336	$3040			MOVLW	64
$0337	$00F6			MOVWF	STACK_4+2
$0338	$3080			MOVLW	128
$0339	$00F7			MOVWF	STACK_4+3
$033A	$158A			BSF	PCLATH, 3
$033B	$20DE			CALL	_sub_32x32_fp
$033C	$118A			BCF	PCLATH, 3
$033D	$0870			MOVF	STACK_0, 0
$033E	$00B0			MOVWF	_error
$033F	$0871			MOVF	STACK_0+1, 0
$0340	$00B1			MOVWF	_error+1
$0341	$0872			MOVF	STACK_0+2, 0
$0342	$00B2			MOVWF	_error+2
$0343	$0873			MOVF	STACK_0+3, 0
$0344	$00B3			MOVWF	_error+3
;lfr_pid_runner_5sensor.c,108 :: 		}
$0345	$0008			RETURN
$091B	$	_motor_LB:
;lfr_pid_runner_5sensor.c,52 :: 		void motor_LB()          //LEFT MOTOR REV DIR
;lfr_pid_runner_5sensor.c,54 :: 		PORTC.F5 = 0;
$091B	$1303			BCF	STATUS, RP1
$091C	$1283			BCF	STATUS, RP0
$091D	$1287			BCF	PORTC, 5
;lfr_pid_runner_5sensor.c,55 :: 		PORTC.F4 = 1;
$091E	$1607			BSF	PORTC, 4
;lfr_pid_runner_5sensor.c,56 :: 		}
$091F	$0008			RETURN
$0916	$	_motor_RB:
;lfr_pid_runner_5sensor.c,40 :: 		void motor_RB()          //RIGHT MOTOR REV DIR
;lfr_pid_runner_5sensor.c,42 :: 		PORTC.F7 = 0;
$0916	$1303			BCF	STATUS, RP1
$0917	$1283			BCF	STATUS, RP0
$0918	$1387			BCF	PORTC, 7
;lfr_pid_runner_5sensor.c,43 :: 		PORTC.F6 = 1;
$0919	$1707			BSF	PORTC, 6
;lfr_pid_runner_5sensor.c,44 :: 		}
$091A	$0008			RETURN
$0681	$	_PWM1_Change_Duty:
$0681	$1303			BCF	STATUS, RP1
$0682	$1683			BSF	STATUS, RP0
$0683	$0812			MOVF	PR2, 0
$0684	$3F01			ADDLW	1
$0685	$00F0			MOVWF	STACK_0
$0686	$01F1			CLRF	STACK_0+1
$0687	$1803			BTFSC	STATUS, C
$0688	$0AF1			INCF	STACK_0+1, 1
$0689	$1283			BCF	STATUS, RP0
$068A	$085C			MOVF	FARG_PWM1_Change_Duty+0, 0
$068B	$00F4			MOVWF	STACK_4
$068C	$01F5			CLRF	STACK_4+1
$068D	$25F2			CALL	_mul_16x16_s
$068E	$3006			MOVLW	6
$068F	$00F2			MOVWF	STACK_2
$0690	$0870			MOVF	STACK_0, 0
$0691	$00F4			MOVWF	STACK_4
$0692	$0871			MOVF	STACK_0+1, 0
$0693	$00F5			MOVWF	STACK_4+1
$0694	$0872			MOVF	STACK_2, 0
$0695	$	L_PWM1_Change_Duty_2:
$0695	$1903			BTFSC	STATUS, Z
$0696	$2E9C			GOTO	L_PWM1_Change_Duty_3
$0697	$0CF5			RRF	STACK_4+1, 1
$0698	$0CF4			RRF	STACK_4, 1
$0699	$13F5			BCF	STACK_4+1, 7
$069A	$3FFF			ADDLW	255
$069B	$2E95			GOTO	L_PWM1_Change_Duty_2
$069C	$	L_PWM1_Change_Duty_3:
$069C	$0874			MOVF	STACK_4, 0
$069D	$00F0			MOVWF	STACK_0
$069E	$0DF0			RLF	STACK_0, 1
$069F	$1070			BCF	STACK_0, 0
$06A0	$0DF0			RLF	STACK_0, 1
$06A1	$1070			BCF	STACK_0, 0
$06A2	$0DF0			RLF	STACK_0, 1
$06A3	$1070			BCF	STACK_0, 0
$06A4	$0DF0			RLF	STACK_0, 1
$06A5	$1070			BCF	STACK_0, 0
$06A6	$3030			MOVLW	48
$06A7	$0570			ANDWF	STACK_0, 0
$06A8	$00F3			MOVWF	STACK_3
$06A9	$0874			MOVF	STACK_4, 0
$06AA	$00F0			MOVWF	STACK_0
$06AB	$0875			MOVF	STACK_4+1, 0
$06AC	$00F1			MOVWF	STACK_0+1
$06AD	$0CF1			RRF	STACK_0+1, 1
$06AE	$0CF0			RRF	STACK_0, 1
$06AF	$13F1			BCF	STACK_0+1, 7
$06B0	$0CF1			RRF	STACK_0+1, 1
$06B1	$0CF0			RRF	STACK_0, 1
$06B2	$13F1			BCF	STACK_0+1, 7
$06B3	$0870			MOVF	STACK_0, 0
$06B4	$0095			MOVWF	CCPR1L
$06B5	$300F			MOVLW	15
$06B6	$0597			ANDWF	CCP1CON, 1
$06B7	$0873			MOVF	STACK_3, 0
$06B8	$0497			IORWF	CCP1CON, 1
$06B9	$0008			RETURN
$06F1	$	_PWM2_Change_Duty:
$06F1	$1303			BCF	STATUS, RP1
$06F2	$1683			BSF	STATUS, RP0
$06F3	$0812			MOVF	PR2, 0
$06F4	$3F01			ADDLW	1
$06F5	$00F0			MOVWF	STACK_0
$06F6	$01F1			CLRF	STACK_0+1
$06F7	$1803			BTFSC	STATUS, C
$06F8	$0AF1			INCF	STACK_0+1, 1
$06F9	$1283			BCF	STATUS, RP0
$06FA	$085C			MOVF	FARG_PWM2_Change_Duty+0, 0
$06FB	$00F4			MOVWF	STACK_4
$06FC	$01F5			CLRF	STACK_4+1
$06FD	$25F2			CALL	_mul_16x16_s
$06FE	$3006			MOVLW	6
$06FF	$00F2			MOVWF	STACK_2
$0700	$0870			MOVF	STACK_0, 0
$0701	$00F4			MOVWF	STACK_4
$0702	$0871			MOVF	STACK_0+1, 0
$0703	$00F5			MOVWF	STACK_4+1
$0704	$0872			MOVF	STACK_2, 0
$0705	$	L_PWM2_Change_Duty_0:
$0705	$1903			BTFSC	STATUS, Z
$0706	$2F0C			GOTO	L_PWM2_Change_Duty_1
$0707	$0CF5			RRF	STACK_4+1, 1
$0708	$0CF4			RRF	STACK_4, 1
$0709	$13F5			BCF	STACK_4+1, 7
$070A	$3FFF			ADDLW	255
$070B	$2F05			GOTO	L_PWM2_Change_Duty_0
$070C	$	L_PWM2_Change_Duty_1:
$070C	$0874			MOVF	STACK_4, 0
$070D	$00F0			MOVWF	STACK_0
$070E	$0DF0			RLF	STACK_0, 1
$070F	$1070			BCF	STACK_0, 0
$0710	$0DF0			RLF	STACK_0, 1
$0711	$1070			BCF	STACK_0, 0
$0712	$0DF0			RLF	STACK_0, 1
$0713	$1070			BCF	STACK_0, 0
$0714	$0DF0			RLF	STACK_0, 1
$0715	$1070			BCF	STACK_0, 0
$0716	$3030			MOVLW	48
$0717	$0570			ANDWF	STACK_0, 0
$0718	$00F3			MOVWF	STACK_3
$0719	$0874			MOVF	STACK_4, 0
$071A	$00F0			MOVWF	STACK_0
$071B	$0875			MOVF	STACK_4+1, 0
$071C	$00F1			MOVWF	STACK_0+1
$071D	$0CF1			RRF	STACK_0+1, 1
$071E	$0CF0			RRF	STACK_0, 1
$071F	$13F1			BCF	STACK_0+1, 7
$0720	$0CF1			RRF	STACK_0+1, 1
$0721	$0CF0			RRF	STACK_0, 1
$0722	$13F1			BCF	STACK_0+1, 7
$0723	$0870			MOVF	STACK_0, 0
$0724	$009B			MOVWF	CCPR2L
$0725	$300F			MOVLW	15
$0726	$059D			ANDWF	CCP2CON, 1
$0727	$0873			MOVF	STACK_3, 0
$0728	$049D			IORWF	CCP2CON, 1
$0729	$0008			RETURN
$0920	$	_motor_RF:
;lfr_pid_runner_5sensor.c,34 :: 		void motor_RF()          //RIGHT MOTOR FWD DIR
;lfr_pid_runner_5sensor.c,36 :: 		PORTC.F7 = 1;
$0920	$1303			BCF	STATUS, RP1
$0921	$1283			BCF	STATUS, RP0
$0922	$1787			BSF	PORTC, 7
;lfr_pid_runner_5sensor.c,37 :: 		PORTC.F6 = 0;
$0923	$1307			BCF	PORTC, 6
;lfr_pid_runner_5sensor.c,38 :: 		}
$0924	$0008			RETURN
$0911	$	_motor_LF:
;lfr_pid_runner_5sensor.c,46 :: 		void motor_LF()          //LEFT MOTOR FWD DIR
;lfr_pid_runner_5sensor.c,48 :: 		PORTC.F5 = 1;
$0911	$1303			BCF	STATUS, RP1
$0912	$1283			BCF	STATUS, RP0
$0913	$1687			BSF	PORTC, 5
;lfr_pid_runner_5sensor.c,49 :: 		PORTC.F4 = 0;
$0914	$1207			BCF	PORTC, 4
;lfr_pid_runner_5sensor.c,50 :: 		}
$0915	$0008			RETURN
$05A7	$	GlobalInilfr_pid_runner_5sensor:
$05A7	$30BE			MOVLW	190
$05A8	$1303			BCF	STATUS, RP1
$05A9	$1283			BCF	STATUS, RP0
$05AA	$00B4			MOVWF	_basespeed+0
$05AB	$3014			MOVLW	20
$05AC	$00B5			MOVWF	_Kp+0
$05AD	$3005			MOVLW	5
$05AE	$00B6			MOVWF	_Ki+0
$05AF	$3014			MOVLW	20
$05B0	$00B7			MOVWF	_Kd+0
$05B1	$3000			MOVLW	0
$05B2	$00B8			MOVWF	_rightpulse+0
$05B3	$3000			MOVLW	0
$05B4	$00B9			MOVWF	_rightpulse+1
$05B5	$3000			MOVLW	0
$05B6	$00BA			MOVWF	_rightpulse+2
$05B7	$3000			MOVLW	0
$05B8	$00BB			MOVWF	_rightpulse+3
$05B9	$3000			MOVLW	0
$05BA	$00BC			MOVWF	_leftpulse+0
$05BB	$3000			MOVLW	0
$05BC	$00BD			MOVWF	_leftpulse+1
$05BD	$3000			MOVLW	0
$05BE	$00BE			MOVWF	_leftpulse+2
$05BF	$3000			MOVLW	0
$05C0	$00BF			MOVWF	_leftpulse+3
$05C1	$3000			MOVLW	0
$05C2	$00AC			MOVWF	_perror+0
$05C3	$3000			MOVLW	0
$05C4	$00AD			MOVWF	_perror+1
$05C5	$3000			MOVLW	0
$05C6	$00AE			MOVWF	_perror+2
$05C7	$3000			MOVLW	0
$05C8	$00AF			MOVWF	_perror+3
$05C9	$3000			MOVLW	0
$05CA	$00B0			MOVWF	_error+0
$05CB	$3000			MOVLW	0
$05CC	$00B1			MOVWF	_error+1
$05CD	$3000			MOVLW	0
$05CE	$00B2			MOVWF	_error+2
$05CF	$3000			MOVLW	0
$05D0	$00B3			MOVWF	_error+3
$05D1	$3000			MOVLW	0
$05D2	$00C0			MOVWF	_PROPORTIONAL+0
$05D3	$3000			MOVLW	0
$05D4	$00C1			MOVWF	_PROPORTIONAL+1
$05D5	$3000			MOVLW	0
$05D6	$00C2			MOVWF	_PROPORTIONAL+2
$05D7	$3000			MOVLW	0
$05D8	$00C3			MOVWF	_PROPORTIONAL+3
$05D9	$3000			MOVLW	0
$05DA	$00C4			MOVWF	_INTEGRAL+0
$05DB	$3000			MOVLW	0
$05DC	$00C5			MOVWF	_INTEGRAL+1
$05DD	$3000			MOVLW	0
$05DE	$00C6			MOVWF	_INTEGRAL+2
$05DF	$3000			MOVLW	0
$05E0	$00C7			MOVWF	_INTEGRAL+3
$05E1	$3000			MOVLW	0
$05E2	$00C8			MOVWF	_DERIVATIVE+0
$05E3	$3000			MOVLW	0
$05E4	$00C9			MOVWF	_DERIVATIVE+1
$05E5	$3000			MOVLW	0
$05E6	$00CA			MOVWF	_DERIVATIVE+2
$05E7	$3000			MOVLW	0
$05E8	$00CB			MOVWF	_DERIVATIVE+3
$05E9	$3000			MOVLW	0
$05EA	$00CC			MOVWF	_correction+0
$05EB	$3000			MOVLW	0
$05EC	$00CD			MOVWF	_correction+1
$05ED	$3000			MOVLW	0
$05EE	$00CE			MOVWF	_correction+2
$05EF	$3000			MOVLW	0
$05F0	$00CF			MOVWF	_correction+3
$05F1	$0008			RETURN
$088B	$	_Equals_Double:
$088B	$1303			BCF	STATUS, RP1
$088C	$1283			BCF	STATUS, RP0
$088D	$0873			MOVF	STACK_3, W
$088E	$0677			XORWF	STACK_7, W
$088F	$1D03			BTFSS	STATUS, Z
$0890	$289E			GOTO	EQU_FALSE
$0891	$0872			MOVF	STACK_2, W
$0892	$0676			XORWF	STACK_6, W
$0893	$1D03			BTFSS	STATUS, Z
$0894	$289E			GOTO	EQU_FALSE
$0895	$0871			MOVF	STACK_1, W
$0896	$0675			XORWF	STACK_5, W
$0897	$1D03			BTFSS	STATUS, Z
$0898	$289E			GOTO	EQU_FALSE
$0899	$0870			MOVF	STACK_0, W
$089A	$0674			XORWF	STACK_4, W
$089B	$1903			BTFSC	STATUS, Z
$089C	$1503			BSF	STATUS, Z
$089D	$0008			RETURN
$089E	$	EQU_FALSE:
$089E	$1103			BCF	STATUS, Z
$089F	$0008			RETURN
$08A0	$0008			RETURN
$08A1	$	_Byte2Double:
$08A1	$1303			BCF	STATUS, RP1
$08A2	$1283			BCF	STATUS, RP0
$08A3	$	FLO08U32:
$08A3	$0870			MOVF	STACK_0, W
$08A4	$00F8			MOVWF	STACK_8
$08A5	$01FB			CLRF	STACK_11
$08A6	$01FC			CLRF	STACK_12
$08A7	$309E			MOVLW	0x9E
$08A8	$00F3			MOVWF	STACK_3
$08A9	$01FA			CLRF	STACK_10
$08AA	$01F2			CLRF	STACK_2
$08AB	$01F1			CLRF	STACK_1
$08AC	$01F0			CLRF	STACK_0
$08AD	$3002			MOVLW	0x02
$08AE	$00FC			MOVWF	STACK_12
$08AF	$118A			BCF	PCLATH, 3
$08B0	$24F3			CALL	_NRM4032
$08B1	$158A			BSF	PCLATH, 3
$08B2	$0008			RETURN
$048C	$	_Mul_32x32_FP:
$048C	$1303			BCF	STATUS, RP1
$048D	$1283			BCF	STATUS, RP0
$048E	$	FPM32:
$048E	$01FB			CLRF	STACK_11
$048F	$0873			MOVF	STACK_3, W
$0490	$1D03			BTFSS	STATUS, Z
$0491	$0877			MOVF	STACK_7, W
$0492	$1903			BTFSC	STATUS, Z
$0493	$2CE3			GOTO	JPMRES032
$0494	$	M32BNE0:
$0494	$0872			MOVF	STACK_2, W
$0495	$0676			XORWF	STACK_6, W
$0496	$00FA			MOVWF	STACK_10
$0497	$0877			MOVF	STACK_7, W
$0498	$07F3			ADDWF	STACK_3, F
$0499	$307E			MOVLW	126
$049A	$1C03			BTFSS	STATUS, C
$049B	$2CA0			GOTO	MTUN32
$049C	$02F3			SUBWF	STACK_3, F
$049D	$1803			BTFSC	STATUS, C
$049E	$2CE8			GOTO	JPMSETFOV32
$049F	$2CA3			GOTO	MOK32
$04A0	$	MTUN32:
$04A0	$02F3			SUBWF	STACK_3, F
$04A1	$1C03			BTFSS	STATUS, C
$04A2	$2CED			GOTO	JPMSETFUN32
$04A3	$	MOK32:
$04A3	$0872			MOVF	STACK_2, W
$04A4	$00F8			MOVWF	STACK_8
$04A5	$0871			MOVF	STACK_1, W
$04A6	$00FC			MOVWF	STACK_12
$04A7	$0870			MOVF	STACK_0, W
$04A8	$00FD			MOVWF	STACK_13
$04A9	$17F8			BSF	STACK_8, 7
$04AA	$17F6			BSF	STACK_6, 7
$04AB	$1003			BCF	STATUS, C
$04AC	$01F2			CLRF	STACK_2
$04AD	$01F1			CLRF	STACK_1
$04AE	$01F0			CLRF	STACK_0
$04AF	$3018			MOVLW	24
$04B0	$00A0			MOVWF	__math_tempbD
$04B1	$	MLOOP32:
$04B1	$1C7D			BTFSS	STACK_13, 0
$04B2	$2CBD			GOTO	MNOADD32
$04B3	$	MADD32:
$04B3	$0874			MOVF	STACK_4, W
$04B4	$07F0			ADDWF	STACK_0, F
$04B5	$0875			MOVF	STACK_5, W
$04B6	$1803			BTFSC	STATUS, C
$04B7	$0F75			INCFSZ	STACK_5, W
$04B8	$07F1			ADDWF	STACK_1, F
$04B9	$0876			MOVF	STACK_6, W
$04BA	$1803			BTFSC	STATUS, C
$04BB	$0F76			INCFSZ	STACK_6, W
$04BC	$07F2			ADDWF	STACK_2, F
$04BD	$	MNOADD32:
$04BD	$0CF2			RRF	STACK_2, F
$04BE	$0CF1			RRF	STACK_1, F
$04BF	$0CF0			RRF	STACK_0, F
$04C0	$0CF8			RRF	STACK_8, F
$04C1	$0CFC			RRF	STACK_12, F
$04C2	$0CFD			RRF	STACK_13, F
$04C3	$1003			BCF	STATUS, C
$04C4	$0BA0			DECFSZ	__math_tempbD, F
$04C5	$2CB1			GOTO	MLOOP32
$04C6	$1BF2			BTFSC	STACK_2, 7
$04C7	$2CCD			GOTO	MROUND32
$04C8	$0DF8			RLF	STACK_8, F
$04C9	$0DF0			RLF	STACK_0, F
$04CA	$0DF1			RLF	STACK_1, F
$04CB	$0DF2			RLF	STACK_2, F
$04CC	$03F3			DECF	STACK_3, F
$04CD	$	MROUND32:
$04CD	$1B7B			BTFSC	STACK_11, 6
$04CE	$1C70			BTFSS	STACK_0, 0
$04CF	$2CDF			GOTO	MUL32OK
$04D0	$1FF8			BTFSS	STACK_8, 7
$04D1	$2CDF			GOTO	MUL32OK
$04D2	$0AF0			INCF	STACK_0, F
$04D3	$1903			BTFSC	STATUS, Z
$04D4	$0AF1			INCF	STACK_1, F
$04D5	$1903			BTFSC	STATUS, Z
$04D6	$0AF2			INCF	STACK_2, F
$04D7	$1D03			BTFSS	STATUS, Z
$04D8	$2CDF			GOTO	MUL32OK
$04D9	$0CF2			RRF	STACK_2, F
$04DA	$0CF1			RRF	STACK_1, F
$04DB	$0CF0			RRF	STACK_0, F
$04DC	$0AF3			INCF	STACK_3, F
$04DD	$1903			BTFSC	STATUS, Z
$04DE	$2CE8			GOTO	JPMSETFOV32
$04DF	$	MUL32OK:
$04DF	$1FFA			BTFSS	STACK_10, 7
$04E0	$13F2			BCF	STACK_2, 7
$04E1	$3000			MOVLW	0x00
$04E2	$2CF1			GOTO	MUL32EEE
$04E3	$	JPMRES032:
$04E3	$3001			MOVLW	0x01
$04E4	$158A			BSF	PCLATH, 3
$04E5	$20E6			CALL	_RES032
$04E6	$118A			BCF	PCLATH, 3
$04E7	$2CF1			GOTO	MUL32EEE
$04E8	$	JPMSETFOV32:
$04E8	$3002			MOVLW	0x02
$04E9	$158A			BSF	PCLATH, 3
$04EA	$20C2			CALL	_SETFOV32
$04EB	$118A			BCF	PCLATH, 3
$04EC	$2CF1			GOTO	MUL32EEE
$04ED	$	JPMSETFUN32:
$04ED	$3004			MOVLW	0x04
$04EE	$158A			BSF	PCLATH, 3
$04EF	$20D0			CALL	_SETFUN32
$04F0	$118A			BCF	PCLATH, 3
$04F1	$	MUL32EEE:
$04F1	$0000			NOP
$04F2	$0008			RETURN
$0557	$	_Compare_Double:
$0557	$1303			BCF	STATUS, RP1
$0558	$1283			BCF	STATUS, RP0
$0559	$01FA			CLRF	STACK_10
$055A	$0873			MOVF	STACK_3, W
$055B	$1D03			BTFSS	STATUS, Z
$055C	$147A			BSF	STACK_10, 0
$055D	$0877			MOVF	STACK_7, W
$055E	$1D03			BTFSS	STATUS, Z
$055F	$14FA			BSF	STACK_10, 1
$0560	$087A			MOVF	STACK_10, W
$0561	$1903			BTFSC	STATUS, Z
$0562	$2DA3			GOTO	COMPARE_EQU
$0563	$3A03			XORLW	0x03
$0564	$1903			BTFSC	STATUS, Z
$0565	$2D6E			GOTO	COMPARE_NOTZERO
$0566	$187A			BTFSC	STACK_10, 0
$0567	$2D6B			GOTO	COMPARE_XNOTZERO
$0568	$	COMPARE_YNOTZERO:
$0568	$1FF6			BTFSS	STACK_6, 7
$0569	$2DA1			GOTO	COMPARE_LT
$056A	$2D9F			GOTO	COMPARE_GT
$056B	$	COMPARE_XNOTZERO:
$056B	$1FF2			BTFSS	STACK_2, 7
$056C	$2D9F			GOTO	COMPARE_GT
$056D	$2DA1			GOTO	COMPARE_LT
$056E	$	COMPARE_NOTZERO:
$056E	$0872			MOVF	STACK_2, W
$056F	$3980			ANDLW	0x80
$0570	$00FA			MOVWF	STACK_10
$0571	$13F2			BCF	STACK_2, 7
$0572	$0876			MOVF	STACK_6, W
$0573	$3980			ANDLW	0x80
$0574	$13F6			BCF	STACK_6, 7
$0575	$067A			XORWF	STACK_10, W
$0576	$1903			BTFSC	STATUS, Z
$0577	$2D7C			GOTO	COMPARE_TESTALL
$0578	$087A			MOVF	STACK_10, W
$0579	$1903			BTFSC	STATUS, Z
$057A	$2D9F			GOTO	COMPARE_GT
$057B	$2DA1			GOTO	COMPARE_LT
$057C	$	COMPARE_TESTALL:
$057C	$0877			MOVF	STACK_7, W
$057D	$0273			SUBWF	STACK_3, W
$057E	$1903			BTFSC	STATUS, Z
$057F	$2D83			GOTO	COMPARE_C1
$0580	$1C03			BTFSS	STATUS, C
$0581	$2D97			GOTO	GT_FALSE
$0582	$2D9B			GOTO	GT_TRUE
$0583	$	COMPARE_C1:
$0583	$0876			MOVF	STACK_6, W
$0584	$0272			SUBWF	STACK_2, W
$0585	$1903			BTFSC	STATUS, Z
$0586	$2D8A			GOTO	COMPARE_C2
$0587	$1C03			BTFSS	STATUS, C
$0588	$2D97			GOTO	GT_FALSE
$0589	$2D9B			GOTO	GT_TRUE
$058A	$	COMPARE_C2:
$058A	$0875			MOVF	STACK_5, W
$058B	$0271			SUBWF	STACK_1, W
$058C	$1903			BTFSC	STATUS, Z
$058D	$2D91			GOTO	COMPARE_C3
$058E	$1C03			BTFSS	STATUS, C
$058F	$2D97			GOTO	GT_FALSE
$0590	$2D9B			GOTO	GT_TRUE
$0591	$	COMPARE_C3:
$0591	$0874			MOVF	STACK_4, W
$0592	$0270			SUBWF	STACK_0, W
$0593	$1903			BTFSC	STATUS, Z
$0594	$2DA3			GOTO	COMPARE_EQU
$0595	$1803			BTFSC	STATUS, C
$0596	$2D9B			GOTO	GT_TRUE
$0597	$	GT_FALSE:
$0597	$08FA			MOVF	STACK_10, F
$0598	$1903			BTFSC	STATUS, Z
$0599	$2DA1			GOTO	COMPARE_LT
$059A	$2D9F			GOTO	COMPARE_GT
$059B	$	GT_TRUE:
$059B	$08FA			MOVF	STACK_10, F
$059C	$1903			BTFSC	STATUS, Z
$059D	$2D9F			GOTO	COMPARE_GT
$059E	$2DA1			GOTO	COMPARE_LT
$059F	$	COMPARE_GT:
$059F	$1403			BSF	STATUS, C
$05A0	$0008			RETURN
$05A1	$	COMPARE_LT:
$05A1	$1003			BCF	STATUS, C
$05A2	$0008			RETURN
$05A3	$	COMPARE_EQU:
$05A3	$1403			BSF	STATUS, C
$05A4	$1503			BSF	STATUS, Z
$05A5	$0008			RETURN
$05A6	$0008			RETURN
$063C	$	_Double2Byte:
$063C	$1303			BCF	STATUS, RP1
$063D	$1283			BCF	STATUS, RP0
$063E	$	INT32U08:
$063E	$01FB			CLRF	STACK_11
$063F	$01FC			CLRF	STACK_12
$0640	$01FA			CLRF	STACK_10
$0641	$0873			MOVF	STACK_3, W
$0642	$1903			BTFSC	STATUS, Z
$0643	$2E69			GOTO	IRES008
$0644	$13FA			BCF	STACK_10, 7
$0645	$17F2			BSF	STACK_2, 7
$0646	$3086			MOVLW	134
$0647	$02F3			SUBWF	STACK_3, F
$0648	$1BF3			BTFSC	STACK_3, 7
$0649	$2E4D			GOTO	SETEXP08
$064A	$1903			BTFSC	STATUS, Z
$064B	$2E4D			GOTO	SETEXP08
$064C	$2E6B			GOTO	SETIOV08
$064D	$	SETEXP08:
$064D	$09F3			COMF	STACK_3, F
$064E	$0AF3			INCF	STACK_3, F
$064F	$3008			MOVLW	8
$0650	$0273			SUBWF	STACK_3, W
$0651	$1C03			BTFSS	STATUS, C
$0652	$2E5A			GOTO	TSHIFT3208
$0653	$00F3			MOVWF	STACK_3
$0654	$0DF2			RLF	STACK_2, F
$0655	$01F2			CLRF	STACK_2
$0656	$0873			MOVF	STACK_3, W
$0657	$1D03			BTFSS	STATUS, Z
$0658	$1003			BCF	STATUS, C
$0659	$2E61			GOTO	SHIFT3208OK
$065A	$	TSHIFT3208:
$065A	$0873			MOVF	STACK_3, W
$065B	$1903			BTFSC	STATUS, Z
$065C	$2E61			GOTO	SHIFT3208OK
$065D	$	SHIFT3208:
$065D	$1003			BCF	STATUS, C
$065E	$0CF2			RRF	STACK_2, F
$065F	$0BF3			DECFSZ	STACK_3, F
$0660	$2E5D			GOTO	SHIFT3208
$0661	$	SHIFT3208OK:
$0661	$1B7B			BTFSC	STACK_11, 6
$0662	$1C72			BTFSS	STACK_2, 0
$0663	$2E69			GOTO	INT3208OK
$0664	$1C03			BTFSS	STATUS, C
$0665	$2E69			GOTO	INT3208OK
$0666	$0AF2			INCF	STACK_2, F
$0667	$1903			BTFSC	STATUS, Z
$0668	$2E70			GOTO	D2B_JPKSETIOV3224
$0669	$	INT3208OK:
$0669	$	IRES008:
$0669	$01F1			CLRF	STACK_1
$066A	$2E73			GOTO	INT3208EOK
$066B	$	SETIOV08:
$066B	$147B			BSF	STACK_11, 0
$066C	$1FFB			BTFSS	STACK_11, 7
$066D	$2E76			GOTO	INT3208EER
$066E	$01F1			CLRF	STACK_1
$066F	$2E76			GOTO	INT3208EER
$0670	$	D2B_JPKSETIOV3224:
$0670	$3001			MOVLW	0x01
$0671	$00FC			MOVWF	STACK_12
$0672	$2E78			GOTO	INT3208EEE
$0673	$	INT3208EOK:
$0673	$3000			MOVLW	0x00
$0674	$00FC			MOVWF	STACK_12
$0675	$2E78			GOTO	INT3208EEE
$0676	$	INT3208EER:
$0676	$30FF			MOVLW	0xFF
$0677	$00FC			MOVWF	STACK_12
$0678	$	INT3208EEE:
$0678	$08FC			MOVF	STACK_12, F
$0679	$1903			BTFSC	STATUS, Z
$067A	$2E7E			GOTO	L_Double2Byte_0
$067B	$158A			BSF	PCLATH, 3
$067C	$20B3			CALL	_SETIOV3224
$067D	$118A			BCF	PCLATH, 3
$067E	$	L_Double2Byte_0:
$067E	$0872			MOVF	STACK_2, W
$067F	$00F0			MOVWF	STACK_0
$0680	$0008			RETURN
$0004	$	_main:
;lfr_pid_runner_5sensor.c,109 :: 		void main()
;lfr_pid_runner_5sensor.c,112 :: 		initport();
$0004	$25A7			CALL	GlobalInilfr_pid_runner_5sensor
$0005	$272A			CALL	_initport
;lfr_pid_runner_5sensor.c,113 :: 		initpwm();
$0006	$158A			BSF	PCLATH, 3
$0007	$2062			CALL	_initpwm
$0008	$118A			BCF	PCLATH, 3
;lfr_pid_runner_5sensor.c,114 :: 		while(1)
$0009	$	L_main_5:
;lfr_pid_runner_5sensor.c,116 :: 		indicator();
$0009	$158A			BSF	PCLATH, 3
$000A	$2000			CALL	_indicator
$000B	$118A			BCF	PCLATH, 3
;lfr_pid_runner_5sensor.c,117 :: 		CalcError();
$000C	$2267			CALL	_CalcError
;lfr_pid_runner_5sensor.c,118 :: 		if((error == 0) && (s3==1) && ((s1+s2+s4+s5)==0))
$000D	$01F4			CLRF	STACK_4
$000E	$01F5			CLRF	STACK_4+1
$000F	$01F6			CLRF	STACK_4+2
$0010	$01F7			CLRF	STACK_4+3
$0011	$0830			MOVF	_error, 0
$0012	$00F0			MOVWF	STACK_0
$0013	$0831			MOVF	_error+1, 0
$0014	$00F1			MOVWF	STACK_0+1
$0015	$0832			MOVF	_error+2, 0
$0016	$00F2			MOVWF	STACK_0+2
$0017	$0833			MOVF	_error+3, 0
$0018	$00F3			MOVWF	STACK_0+3
$0019	$158A			BSF	PCLATH, 3
$001A	$208B			CALL	_equals_double
$001B	$118A			BCF	PCLATH, 3
$001C	$3001			MOVLW	1
$001D	$1D03			BTFSS	STATUS, Z
$001E	$3000			MOVLW	0
$001F	$00F0			MOVWF	STACK_0
$0020	$0870			MOVF	STACK_0, 0
$0021	$1903			BTFSC	STATUS, Z
$0022	$2864			GOTO	L_main_9
$0023	$3000			MOVLW	0
$0024	$0626			XORWF	_s3+1, 0
$0025	$1D03			BTFSS	STATUS, Z
$0026	$2829			GOTO	L_main_22
$0027	$3001			MOVLW	1
$0028	$0625			XORWF	_s3, 0
$0029	$	L_main_22:
$0029	$1D03			BTFSS	STATUS, Z
$002A	$2864			GOTO	L_main_9
$002B	$0823			MOVF	_s2, 0
$002C	$0721			ADDWF	_s1, 0
$002D	$00F0			MOVWF	STACK_0
$002E	$0822			MOVF	_s1+1, 0
$002F	$1803			BTFSC	STATUS, C
$0030	$3F01			ADDLW	1
$0031	$0724			ADDWF	_s2+1, 0
$0032	$00F1			MOVWF	STACK_0+1
$0033	$0827			MOVF	_s4, 0
$0034	$07F0			ADDWF	STACK_0, 1
$0035	$0828			MOVF	_s4+1, 0
$0036	$1803			BTFSC	STATUS, C
$0037	$3F01			ADDLW	1
$0038	$07F1			ADDWF	STACK_0+1, 1
$0039	$0829			MOVF	_s5, 0
$003A	$0770			ADDWF	STACK_0, 0
$003B	$00F4			MOVWF	STACK_4
$003C	$0871			MOVF	STACK_0+1, 0
$003D	$1803			BTFSC	STATUS, C
$003E	$3F01			ADDLW	1
$003F	$072A			ADDWF	_s5+1, 0
$0040	$00F5			MOVWF	STACK_4+1
$0041	$3000			MOVLW	0
$0042	$0675			XORWF	STACK_4+1, 0
$0043	$1D03			BTFSS	STATUS, Z
$0044	$2847			GOTO	L_main_23
$0045	$3000			MOVLW	0
$0046	$0674			XORWF	STACK_4, 0
$0047	$	L_main_23:
$0047	$1D03			BTFSS	STATUS, Z
$0048	$2864			GOTO	L_main_9
$0049	$	L129_ex_L_main_9:
;lfr_pid_runner_5sensor.c,120 :: 		motor_LB();					        	      //FWD AT FULL SPEED
$0049	$158A			BSF	PCLATH, 3
$004A	$211B			CALL	_motor_LB
$004B	$118A			BCF	PCLATH, 3
;lfr_pid_runner_5sensor.c,121 :: 		motor_RB();
$004C	$158A			BSF	PCLATH, 3
$004D	$2116			CALL	_motor_RB
$004E	$118A			BCF	PCLATH, 3
;lfr_pid_runner_5sensor.c,122 :: 		PWM1_CHANGE_DUTY(255);
$004F	$30FF			MOVLW	255
$0050	$00DC			MOVWF	FARG_PWM1_Change_Duty+0
$0051	$2681			CALL	_PWM1_Change_Duty
;lfr_pid_runner_5sensor.c,123 :: 		PWM2_CHANGE_DUTY(255);
$0052	$30FF			MOVLW	255
$0053	$00DC			MOVWF	FARG_PWM2_Change_Duty+0
$0054	$26F1			CALL	_PWM2_Change_Duty
;lfr_pid_runner_5sensor.c,124 :: 		delay_ms(10);
$0055	$300D			MOVLW	13
$0056	$00FB			MOVWF	STACK_11
$0057	$30FF			MOVLW	255
$0058	$00FA			MOVWF	STACK_10
$0059	$0BFB			DECFSZ	STACK_11, F
$005A	$285C			GOTO	$+2
$005B	$285F			GOTO	$+4
$005C	$0BFA			DECFSZ	STACK_10, F
$005D	$285C			GOTO	$-1
$005E	$2859			GOTO	$-5
$005F	$30F3			MOVLW	243
$0060	$00FA			MOVWF	STACK_10
$0061	$0BFA			DECFSZ	STACK_10, F
$0062	$2861			GOTO	$-1
$0063	$0000			NOP
;lfr_pid_runner_5sensor.c,125 :: 		}
$0064	$	L_main_9:
;lfr_pid_runner_5sensor.c,126 :: 		if((s1+s2+s3+s4+s5) == 0)		          //ROBOT HAS OVERSHOOT
$0064	$0823			MOVF	_s2, 0
$0065	$0721			ADDWF	_s1, 0
$0066	$00F0			MOVWF	STACK_0
$0067	$0822			MOVF	_s1+1, 0
$0068	$1803			BTFSC	STATUS, C
$0069	$3F01			ADDLW	1
$006A	$0724			ADDWF	_s2+1, 0
$006B	$00F1			MOVWF	STACK_0+1
$006C	$0825			MOVF	_s3, 0
$006D	$07F0			ADDWF	STACK_0, 1
$006E	$0826			MOVF	_s3+1, 0
$006F	$1803			BTFSC	STATUS, C
$0070	$3F01			ADDLW	1
$0071	$07F1			ADDWF	STACK_0+1, 1
$0072	$0827			MOVF	_s4, 0
$0073	$07F0			ADDWF	STACK_0, 1
$0074	$0828			MOVF	_s4+1, 0
$0075	$1803			BTFSC	STATUS, C
$0076	$3F01			ADDLW	1
$0077	$07F1			ADDWF	STACK_0+1, 1
$0078	$0829			MOVF	_s5, 0
$0079	$0770			ADDWF	STACK_0, 0
$007A	$00F4			MOVWF	STACK_4
$007B	$0871			MOVF	STACK_0+1, 0
$007C	$1803			BTFSC	STATUS, C
$007D	$3F01			ADDLW	1
$007E	$072A			ADDWF	_s5+1, 0
$007F	$00F5			MOVWF	STACK_4+1
$0080	$3000			MOVLW	0
$0081	$0675			XORWF	STACK_4+1, 0
$0082	$1D03			BTFSS	STATUS, Z
$0083	$2886			GOTO	L_main_24
$0084	$3000			MOVLW	0
$0085	$0674			XORWF	STACK_4, 0
$0086	$	L_main_24:
$0086	$1D03			BTFSS	STATUS, Z
$0087	$28C7			GOTO	L_main_10
;lfr_pid_runner_5sensor.c,128 :: 		if(lastreading == 'r')				      //CHECKS IF THE LAST SENSOR ACTIVATED WAS RIGHT
$0088	$082B			MOVF	_lastreading, 0
$0089	$3A72			XORLW	114
$008A	$1D03			BTFSS	STATUS, Z
$008B	$28A7			GOTO	L_main_11
;lfr_pid_runner_5sensor.c,130 :: 		motor_RF();						          //TURN RIGHT AT FULL SPEED
$008C	$158A			BSF	PCLATH, 3
$008D	$2120			CALL	_motor_RF
$008E	$118A			BCF	PCLATH, 3
;lfr_pid_runner_5sensor.c,131 :: 		motor_LB();
$008F	$158A			BSF	PCLATH, 3
$0090	$211B			CALL	_motor_LB
$0091	$118A			BCF	PCLATH, 3
;lfr_pid_runner_5sensor.c,132 :: 		PWM1_CHANGE_DUTY(255);
$0092	$30FF			MOVLW	255
$0093	$00DC			MOVWF	FARG_PWM1_Change_Duty+0
$0094	$2681			CALL	_PWM1_Change_Duty
;lfr_pid_runner_5sensor.c,133 :: 		PWM2_CHANGE_DUTY(255);
$0095	$30FF			MOVLW	255
$0096	$00DC			MOVWF	FARG_PWM2_Change_Duty+0
$0097	$26F1			CALL	_PWM2_Change_Duty
;lfr_pid_runner_5sensor.c,134 :: 		delay_ms(10);
$0098	$300D			MOVLW	13
$0099	$00FB			MOVWF	STACK_11
$009A	$30FF			MOVLW	255
$009B	$00FA			MOVWF	STACK_10
$009C	$0BFB			DECFSZ	STACK_11, F
$009D	$289F			GOTO	$+2
$009E	$28A2			GOTO	$+4
$009F	$0BFA			DECFSZ	STACK_10, F
$00A0	$289F			GOTO	$-1
$00A1	$289C			GOTO	$-5
$00A2	$30F3			MOVLW	243
$00A3	$00FA			MOVWF	STACK_10
$00A4	$0BFA			DECFSZ	STACK_10, F
$00A5	$28A4			GOTO	$-1
$00A6	$0000			NOP
;lfr_pid_runner_5sensor.c,135 :: 		}
$00A7	$	L_main_11:
;lfr_pid_runner_5sensor.c,136 :: 		if(lastreading == 'l')			        //CHECKS IF THE LAST SENSOR ACTIVATED WAS LEFT
$00A7	$082B			MOVF	_lastreading, 0
$00A8	$3A6C			XORLW	108
$00A9	$1D03			BTFSS	STATUS, Z
$00AA	$28C6			GOTO	L_main_12
;lfr_pid_runner_5sensor.c,138 :: 		motor_LF();					        	  //TURN LEFT AT FULL SPEED
$00AB	$158A			BSF	PCLATH, 3
$00AC	$2111			CALL	_motor_LF
$00AD	$118A			BCF	PCLATH, 3
;lfr_pid_runner_5sensor.c,139 :: 		motor_RB();
$00AE	$158A			BSF	PCLATH, 3
$00AF	$2116			CALL	_motor_RB
$00B0	$118A			BCF	PCLATH, 3
;lfr_pid_runner_5sensor.c,140 :: 		PWM1_CHANGE_DUTY(255);
$00B1	$30FF			MOVLW	255
$00B2	$00DC			MOVWF	FARG_PWM1_Change_Duty+0
$00B3	$2681			CALL	_PWM1_Change_Duty
;lfr_pid_runner_5sensor.c,141 :: 		PWM2_CHANGE_DUTY(255);
$00B4	$30FF			MOVLW	255
$00B5	$00DC			MOVWF	FARG_PWM2_Change_Duty+0
$00B6	$26F1			CALL	_PWM2_Change_Duty
;lfr_pid_runner_5sensor.c,142 :: 		delay_ms(10);
$00B7	$300D			MOVLW	13
$00B8	$00FB			MOVWF	STACK_11
$00B9	$30FF			MOVLW	255
$00BA	$00FA			MOVWF	STACK_10
$00BB	$0BFB			DECFSZ	STACK_11, F
$00BC	$28BE			GOTO	$+2
$00BD	$28C1			GOTO	$+4
$00BE	$0BFA			DECFSZ	STACK_10, F
$00BF	$28BE			GOTO	$-1
$00C0	$28BB			GOTO	$-5
$00C1	$30F3			MOVLW	243
$00C2	$00FA			MOVWF	STACK_10
$00C3	$0BFA			DECFSZ	STACK_10, F
$00C4	$28C3			GOTO	$-1
$00C5	$0000			NOP
;lfr_pid_runner_5sensor.c,143 :: 		}
$00C6	$	L_main_12:
;lfr_pid_runner_5sensor.c,144 :: 		}
$00C6	$2A56			GOTO	L_main_13
$00C7	$	L_main_10:
;lfr_pid_runner_5sensor.c,147 :: 		PROPORTIONAL = error * kp;
$00C7	$0835			MOVF	_Kp, 0
$00C8	$00F0			MOVWF	STACK_0
$00C9	$158A			BSF	PCLATH, 3
$00CA	$20A1			CALL	_byte2double
$00CB	$118A			BCF	PCLATH, 3
$00CC	$0830			MOVF	_error, 0
$00CD	$00F4			MOVWF	STACK_4
$00CE	$0831			MOVF	_error+1, 0
$00CF	$00F5			MOVWF	STACK_4+1
$00D0	$0832			MOVF	_error+2, 0
$00D1	$00F6			MOVWF	STACK_4+2
$00D2	$0833			MOVF	_error+3, 0
$00D3	$00F7			MOVWF	STACK_4+3
$00D4	$248C			CALL	_mul_32x32_fp
$00D5	$0870			MOVF	STACK_0, 0
$00D6	$00D8			MOVWF	FLOC_main+8
$00D7	$0871			MOVF	STACK_0+1, 0
$00D8	$00D9			MOVWF	FLOC_main+9
$00D9	$0872			MOVF	STACK_0+2, 0
$00DA	$00DA			MOVWF	FLOC_main+10
$00DB	$0873			MOVF	STACK_0+3, 0
$00DC	$00DB			MOVWF	FLOC_main+11
$00DD	$0858			MOVF	FLOC_main+8, 0
$00DE	$00C0			MOVWF	_PROPORTIONAL
$00DF	$0859			MOVF	FLOC_main+9, 0
$00E0	$00C1			MOVWF	_PROPORTIONAL+1
$00E1	$085A			MOVF	FLOC_main+10, 0
$00E2	$00C2			MOVWF	_PROPORTIONAL+2
$00E3	$085B			MOVF	FLOC_main+11, 0
$00E4	$00C3			MOVWF	_PROPORTIONAL+3
;lfr_pid_runner_5sensor.c,148 :: 		INTEGRAL  += error ;
$00E5	$0844			MOVF	_INTEGRAL, 0
$00E6	$00F0			MOVWF	STACK_0
$00E7	$0845			MOVF	_INTEGRAL+1, 0
$00E8	$00F1			MOVWF	STACK_0+1
$00E9	$0846			MOVF	_INTEGRAL+2, 0
$00EA	$00F2			MOVWF	STACK_0+2
$00EB	$0847			MOVF	_INTEGRAL+3, 0
$00EC	$00F3			MOVWF	STACK_0+3
$00ED	$0830			MOVF	_error, 0
$00EE	$00F4			MOVWF	STACK_4
$00EF	$0831			MOVF	_error+1, 0
$00F0	$00F5			MOVWF	STACK_4+1
$00F1	$0832			MOVF	_error+2, 0
$00F2	$00F6			MOVWF	STACK_4+2
$00F3	$0833			MOVF	_error+3, 0
$00F4	$00F7			MOVWF	STACK_4+3
$00F5	$2346			CALL	_add_32x32_fp
$00F6	$0870			MOVF	STACK_0, 0
$00F7	$00D0			MOVWF	FLOC_main+0
$00F8	$0871			MOVF	STACK_0+1, 0
$00F9	$00D1			MOVWF	FLOC_main+1
$00FA	$0872			MOVF	STACK_0+2, 0
$00FB	$00D2			MOVWF	FLOC_main+2
$00FC	$0873			MOVF	STACK_0+3, 0
$00FD	$00D3			MOVWF	FLOC_main+3
$00FE	$0850			MOVF	FLOC_main+0, 0
$00FF	$00C4			MOVWF	_INTEGRAL
$0100	$0851			MOVF	FLOC_main+1, 0
$0101	$00C5			MOVWF	_INTEGRAL+1
$0102	$0852			MOVF	FLOC_main+2, 0
$0103	$00C6			MOVWF	_INTEGRAL+2
$0104	$0853			MOVF	FLOC_main+3, 0
$0105	$00C7			MOVWF	_INTEGRAL+3
;lfr_pid_runner_5sensor.c,149 :: 		INTEGRAL  *= ki;
$0106	$0836			MOVF	_Ki, 0
$0107	$00F0			MOVWF	STACK_0
$0108	$158A			BSF	PCLATH, 3
$0109	$20A1			CALL	_byte2double
$010A	$118A			BCF	PCLATH, 3
$010B	$0850			MOVF	FLOC_main+0, 0
$010C	$00F4			MOVWF	STACK_4
$010D	$0851			MOVF	FLOC_main+1, 0
$010E	$00F5			MOVWF	STACK_4+1
$010F	$0852			MOVF	FLOC_main+2, 0
$0110	$00F6			MOVWF	STACK_4+2
$0111	$0853			MOVF	FLOC_main+3, 0
$0112	$00F7			MOVWF	STACK_4+3
$0113	$248C			CALL	_mul_32x32_fp
$0114	$0870			MOVF	STACK_0, 0
$0115	$00D0			MOVWF	FLOC_main+0
$0116	$0871			MOVF	STACK_0+1, 0
$0117	$00D1			MOVWF	FLOC_main+1
$0118	$0872			MOVF	STACK_0+2, 0
$0119	$00D2			MOVWF	FLOC_main+2
$011A	$0873			MOVF	STACK_0+3, 0
$011B	$00D3			MOVWF	FLOC_main+3
$011C	$0850			MOVF	FLOC_main+0, 0
$011D	$00C4			MOVWF	_INTEGRAL
$011E	$0851			MOVF	FLOC_main+1, 0
$011F	$00C5			MOVWF	_INTEGRAL+1
$0120	$0852			MOVF	FLOC_main+2, 0
$0121	$00C6			MOVWF	_INTEGRAL+2
$0122	$0853			MOVF	FLOC_main+3, 0
$0123	$00C7			MOVWF	_INTEGRAL+3
;lfr_pid_runner_5sensor.c,150 :: 		DERIVATIVE = (error - perror);
$0124	$082C			MOVF	_perror, 0
$0125	$00F4			MOVWF	STACK_4
$0126	$082D			MOVF	_perror+1, 0
$0127	$00F5			MOVWF	STACK_4+1
$0128	$082E			MOVF	_perror+2, 0
$0129	$00F6			MOVWF	STACK_4+2
$012A	$082F			MOVF	_perror+3, 0
$012B	$00F7			MOVWF	STACK_4+3
$012C	$0830			MOVF	_error, 0
$012D	$00F0			MOVWF	STACK_0
$012E	$0831			MOVF	_error+1, 0
$012F	$00F1			MOVWF	STACK_0+1
$0130	$0832			MOVF	_error+2, 0
$0131	$00F2			MOVWF	STACK_0+2
$0132	$0833			MOVF	_error+3, 0
$0133	$00F3			MOVWF	STACK_0+3
$0134	$158A			BSF	PCLATH, 3
$0135	$20DE			CALL	_sub_32x32_fp
$0136	$118A			BCF	PCLATH, 3
$0137	$0870			MOVF	STACK_0, 0
$0138	$00D4			MOVWF	FLOC_main+4
$0139	$0871			MOVF	STACK_0+1, 0
$013A	$00D5			MOVWF	FLOC_main+5
$013B	$0872			MOVF	STACK_0+2, 0
$013C	$00D6			MOVWF	FLOC_main+6
$013D	$0873			MOVF	STACK_0+3, 0
$013E	$00D7			MOVWF	FLOC_main+7
$013F	$0854			MOVF	FLOC_main+4, 0
$0140	$00C8			MOVWF	_DERIVATIVE
$0141	$0855			MOVF	FLOC_main+5, 0
$0142	$00C9			MOVWF	_DERIVATIVE+1
$0143	$0856			MOVF	FLOC_main+6, 0
$0144	$00CA			MOVWF	_DERIVATIVE+2
$0145	$0857			MOVF	FLOC_main+7, 0
$0146	$00CB			MOVWF	_DERIVATIVE+3
;lfr_pid_runner_5sensor.c,151 :: 		correction = ( (PROPORTIONAL) + (INTEGRAL) + (DERIVATIVE*kd));
$0147	$0858			MOVF	FLOC_main+8, 0
$0148	$00F0			MOVWF	STACK_0
$0149	$0859			MOVF	FLOC_main+9, 0
$014A	$00F1			MOVWF	STACK_0+1
$014B	$085A			MOVF	FLOC_main+10, 0
$014C	$00F2			MOVWF	STACK_0+2
$014D	$085B			MOVF	FLOC_main+11, 0
$014E	$00F3			MOVWF	STACK_0+3
$014F	$0850			MOVF	FLOC_main+0, 0
$0150	$00F4			MOVWF	STACK_4
$0151	$0851			MOVF	FLOC_main+1, 0
$0152	$00F5			MOVWF	STACK_4+1
$0153	$0852			MOVF	FLOC_main+2, 0
$0154	$00F6			MOVWF	STACK_4+2
$0155	$0853			MOVF	FLOC_main+3, 0
$0156	$00F7			MOVWF	STACK_4+3
$0157	$2346			CALL	_add_32x32_fp
$0158	$0870			MOVF	STACK_0, 0
$0159	$00D0			MOVWF	FLOC_main+0
$015A	$0871			MOVF	STACK_0+1, 0
$015B	$00D1			MOVWF	FLOC_main+1
$015C	$0872			MOVF	STACK_0+2, 0
$015D	$00D2			MOVWF	FLOC_main+2
$015E	$0873			MOVF	STACK_0+3, 0
$015F	$00D3			MOVWF	FLOC_main+3
$0160	$0837			MOVF	_Kd, 0
$0161	$00F0			MOVWF	STACK_0
$0162	$158A			BSF	PCLATH, 3
$0163	$20A1			CALL	_byte2double
$0164	$118A			BCF	PCLATH, 3
$0165	$0854			MOVF	FLOC_main+4, 0
$0166	$00F4			MOVWF	STACK_4
$0167	$0855			MOVF	FLOC_main+5, 0
$0168	$00F5			MOVWF	STACK_4+1
$0169	$0856			MOVF	FLOC_main+6, 0
$016A	$00F6			MOVWF	STACK_4+2
$016B	$0857			MOVF	FLOC_main+7, 0
$016C	$00F7			MOVWF	STACK_4+3
$016D	$248C			CALL	_mul_32x32_fp
$016E	$0850			MOVF	FLOC_main+0, 0
$016F	$00F4			MOVWF	STACK_4
$0170	$0851			MOVF	FLOC_main+1, 0
$0171	$00F5			MOVWF	STACK_4+1
$0172	$0852			MOVF	FLOC_main+2, 0
$0173	$00F6			MOVWF	STACK_4+2
$0174	$0853			MOVF	FLOC_main+3, 0
$0175	$00F7			MOVWF	STACK_4+3
$0176	$2346			CALL	_add_32x32_fp
$0177	$0870			MOVF	STACK_0, 0
$0178	$00D4			MOVWF	FLOC_main+4
$0179	$0871			MOVF	STACK_0+1, 0
$017A	$00D5			MOVWF	FLOC_main+5
$017B	$0872			MOVF	STACK_0+2, 0
$017C	$00D6			MOVWF	FLOC_main+6
$017D	$0873			MOVF	STACK_0+3, 0
$017E	$00D7			MOVWF	FLOC_main+7
$017F	$0854			MOVF	FLOC_main+4, 0
$0180	$00CC			MOVWF	_correction
$0181	$0855			MOVF	FLOC_main+5, 0
$0182	$00CD			MOVWF	_correction+1
$0183	$0856			MOVF	FLOC_main+6, 0
$0184	$00CE			MOVWF	_correction+2
$0185	$0857			MOVF	FLOC_main+7, 0
$0186	$00CF			MOVWF	_correction+3
;lfr_pid_runner_5sensor.c,152 :: 		rightpulse =  basespeed + correction;
$0187	$0834			MOVF	_basespeed, 0
$0188	$00F0			MOVWF	STACK_0
$0189	$158A			BSF	PCLATH, 3
$018A	$20A1			CALL	_byte2double
$018B	$118A			BCF	PCLATH, 3
$018C	$0870			MOVF	STACK_0, 0
$018D	$00D0			MOVWF	FLOC_main+0
$018E	$0871			MOVF	STACK_0+1, 0
$018F	$00D1			MOVWF	FLOC_main+1
$0190	$0872			MOVF	STACK_0+2, 0
$0191	$00D2			MOVWF	FLOC_main+2
$0192	$0873			MOVF	STACK_0+3, 0
$0193	$00D3			MOVWF	FLOC_main+3
$0194	$0850			MOVF	FLOC_main+0, 0
$0195	$00F0			MOVWF	STACK_0
$0196	$0851			MOVF	FLOC_main+1, 0
$0197	$00F1			MOVWF	STACK_0+1
$0198	$0852			MOVF	FLOC_main+2, 0
$0199	$00F2			MOVWF	STACK_0+2
$019A	$0853			MOVF	FLOC_main+3, 0
$019B	$00F3			MOVWF	STACK_0+3
$019C	$0854			MOVF	FLOC_main+4, 0
$019D	$00F4			MOVWF	STACK_4
$019E	$0855			MOVF	FLOC_main+5, 0
$019F	$00F5			MOVWF	STACK_4+1
$01A0	$0856			MOVF	FLOC_main+6, 0
$01A1	$00F6			MOVWF	STACK_4+2
$01A2	$0857			MOVF	FLOC_main+7, 0
$01A3	$00F7			MOVWF	STACK_4+3
$01A4	$2346			CALL	_add_32x32_fp
$01A5	$0870			MOVF	STACK_0, 0
$01A6	$00B8			MOVWF	_rightpulse
$01A7	$0871			MOVF	STACK_0+1, 0
$01A8	$00B9			MOVWF	_rightpulse+1
$01A9	$0872			MOVF	STACK_0+2, 0
$01AA	$00BA			MOVWF	_rightpulse+2
$01AB	$0873			MOVF	STACK_0+3, 0
$01AC	$00BB			MOVWF	_rightpulse+3
;lfr_pid_runner_5sensor.c,153 :: 		leftpulse = basespeed - correction;
$01AD	$0854			MOVF	FLOC_main+4, 0
$01AE	$00F4			MOVWF	STACK_4
$01AF	$0855			MOVF	FLOC_main+5, 0
$01B0	$00F5			MOVWF	STACK_4+1
$01B1	$0856			MOVF	FLOC_main+6, 0
$01B2	$00F6			MOVWF	STACK_4+2
$01B3	$0857			MOVF	FLOC_main+7, 0
$01B4	$00F7			MOVWF	STACK_4+3
$01B5	$0850			MOVF	FLOC_main+0, 0
$01B6	$00F0			MOVWF	STACK_0
$01B7	$0851			MOVF	FLOC_main+1, 0
$01B8	$00F1			MOVWF	STACK_0+1
$01B9	$0852			MOVF	FLOC_main+2, 0
$01BA	$00F2			MOVWF	STACK_0+2
$01BB	$0853			MOVF	FLOC_main+3, 0
$01BC	$00F3			MOVWF	STACK_0+3
$01BD	$158A			BSF	PCLATH, 3
$01BE	$20DE			CALL	_sub_32x32_fp
$01BF	$118A			BCF	PCLATH, 3
$01C0	$0870			MOVF	STACK_0, 0
$01C1	$00BC			MOVWF	_leftpulse
$01C2	$0871			MOVF	STACK_0+1, 0
$01C3	$00BD			MOVWF	_leftpulse+1
$01C4	$0872			MOVF	STACK_0+2, 0
$01C5	$00BE			MOVWF	_leftpulse+2
$01C6	$0873			MOVF	STACK_0+3, 0
$01C7	$00BF			MOVWF	_leftpulse+3
;lfr_pid_runner_5sensor.c,154 :: 		motor_RF();
$01C8	$158A			BSF	PCLATH, 3
$01C9	$2120			CALL	_motor_RF
$01CA	$118A			BCF	PCLATH, 3
;lfr_pid_runner_5sensor.c,155 :: 		motor_LF();
$01CB	$158A			BSF	PCLATH, 3
$01CC	$2111			CALL	_motor_LF
$01CD	$118A			BCF	PCLATH, 3
;lfr_pid_runner_5sensor.c,157 :: 		if(leftpulse > 255)                 //LEFT CORRECTION EXCEED
$01CE	$083C			MOVF	_leftpulse, 0
$01CF	$00F4			MOVWF	STACK_4
$01D0	$083D			MOVF	_leftpulse+1, 0
$01D1	$00F5			MOVWF	STACK_4+1
$01D2	$083E			MOVF	_leftpulse+2, 0
$01D3	$00F6			MOVWF	STACK_4+2
$01D4	$083F			MOVF	_leftpulse+3, 0
$01D5	$00F7			MOVWF	STACK_4+3
$01D6	$3000			MOVLW	0
$01D7	$00F0			MOVWF	STACK_0
$01D8	$3000			MOVLW	0
$01D9	$00F1			MOVWF	STACK_0+1
$01DA	$307F			MOVLW	127
$01DB	$00F2			MOVWF	STACK_0+2
$01DC	$3086			MOVLW	134
$01DD	$00F3			MOVWF	STACK_0+3
$01DE	$2557			CALL	_compare_double
$01DF	$3001			MOVLW	1
$01E0	$1803			BTFSC	STATUS, C
$01E1	$3000			MOVLW	0
$01E2	$00F0			MOVWF	STACK_0
$01E3	$0870			MOVF	STACK_0, 0
$01E4	$1903			BTFSC	STATUS, Z
$01E5	$29EE			GOTO	L_main_14
;lfr_pid_runner_5sensor.c,158 :: 		leftpulse = 255;
$01E6	$3000			MOVLW	0
$01E7	$00BC			MOVWF	_leftpulse
$01E8	$3000			MOVLW	0
$01E9	$00BD			MOVWF	_leftpulse+1
$01EA	$307F			MOVLW	127
$01EB	$00BE			MOVWF	_leftpulse+2
$01EC	$3086			MOVLW	134
$01ED	$00BF			MOVWF	_leftpulse+3
$01EE	$	L_main_14:
;lfr_pid_runner_5sensor.c,160 :: 		if(rightpulse > 255)                //RIGHT CORRECTION EXCEED
$01EE	$0838			MOVF	_rightpulse, 0
$01EF	$00F4			MOVWF	STACK_4
$01F0	$0839			MOVF	_rightpulse+1, 0
$01F1	$00F5			MOVWF	STACK_4+1
$01F2	$083A			MOVF	_rightpulse+2, 0
$01F3	$00F6			MOVWF	STACK_4+2
$01F4	$083B			MOVF	_rightpulse+3, 0
$01F5	$00F7			MOVWF	STACK_4+3
$01F6	$3000			MOVLW	0
$01F7	$00F0			MOVWF	STACK_0
$01F8	$3000			MOVLW	0
$01F9	$00F1			MOVWF	STACK_0+1
$01FA	$307F			MOVLW	127
$01FB	$00F2			MOVWF	STACK_0+2
$01FC	$3086			MOVLW	134
$01FD	$00F3			MOVWF	STACK_0+3
$01FE	$2557			CALL	_compare_double
$01FF	$3001			MOVLW	1
$0200	$1803			BTFSC	STATUS, C
$0201	$3000			MOVLW	0
$0202	$00F0			MOVWF	STACK_0
$0203	$0870			MOVF	STACK_0, 0
$0204	$1903			BTFSC	STATUS, Z
$0205	$2A0E			GOTO	L_main_15
;lfr_pid_runner_5sensor.c,161 :: 		rightpulse = 255;
$0206	$3000			MOVLW	0
$0207	$00B8			MOVWF	_rightpulse
$0208	$3000			MOVLW	0
$0209	$00B9			MOVWF	_rightpulse+1
$020A	$307F			MOVLW	127
$020B	$00BA			MOVWF	_rightpulse+2
$020C	$3086			MOVLW	134
$020D	$00BB			MOVWF	_rightpulse+3
$020E	$	L_main_15:
;lfr_pid_runner_5sensor.c,163 :: 		if(leftpulse < 0)                   //LEFT CORRECTION EXCEED
$020E	$01F4			CLRF	STACK_4
$020F	$01F5			CLRF	STACK_4+1
$0210	$01F6			CLRF	STACK_4+2
$0211	$01F7			CLRF	STACK_4+3
$0212	$083C			MOVF	_leftpulse, 0
$0213	$00F0			MOVWF	STACK_0
$0214	$083D			MOVF	_leftpulse+1, 0
$0215	$00F1			MOVWF	STACK_0+1
$0216	$083E			MOVF	_leftpulse+2, 0
$0217	$00F2			MOVWF	STACK_0+2
$0218	$083F			MOVF	_leftpulse+3, 0
$0219	$00F3			MOVWF	STACK_0+3
$021A	$2557			CALL	_compare_double
$021B	$3001			MOVLW	1
$021C	$1803			BTFSC	STATUS, C
$021D	$3000			MOVLW	0
$021E	$00F0			MOVWF	STACK_0
$021F	$0870			MOVF	STACK_0, 0
$0220	$1903			BTFSC	STATUS, Z
$0221	$2A26			GOTO	L_main_16
;lfr_pid_runner_5sensor.c,164 :: 		leftpulse = 0;
$0222	$01BC			CLRF	_leftpulse
$0223	$01BD			CLRF	_leftpulse+1
$0224	$01BE			CLRF	_leftpulse+2
$0225	$01BF			CLRF	_leftpulse+3
$0226	$	L_main_16:
;lfr_pid_runner_5sensor.c,166 :: 		if(rightpulse < 0)                  //RIGHT CORRECTION EXCEED
$0226	$01F4			CLRF	STACK_4
$0227	$01F5			CLRF	STACK_4+1
$0228	$01F6			CLRF	STACK_4+2
$0229	$01F7			CLRF	STACK_4+3
$022A	$0838			MOVF	_rightpulse, 0
$022B	$00F0			MOVWF	STACK_0
$022C	$0839			MOVF	_rightpulse+1, 0
$022D	$00F1			MOVWF	STACK_0+1
$022E	$083A			MOVF	_rightpulse+2, 0
$022F	$00F2			MOVWF	STACK_0+2
$0230	$083B			MOVF	_rightpulse+3, 0
$0231	$00F3			MOVWF	STACK_0+3
$0232	$2557			CALL	_compare_double
$0233	$3001			MOVLW	1
$0234	$1803			BTFSC	STATUS, C
$0235	$3000			MOVLW	0
$0236	$00F0			MOVWF	STACK_0
$0237	$0870			MOVF	STACK_0, 0
$0238	$1903			BTFSC	STATUS, Z
$0239	$2A3E			GOTO	L_main_17
;lfr_pid_runner_5sensor.c,167 :: 		rightpulse = 0;
$023A	$01B8			CLRF	_rightpulse
$023B	$01B9			CLRF	_rightpulse+1
$023C	$01BA			CLRF	_rightpulse+2
$023D	$01BB			CLRF	_rightpulse+3
$023E	$	L_main_17:
;lfr_pid_runner_5sensor.c,169 :: 		PWM1_CHANGE_DUTY(leftpulse);
$023E	$083C			MOVF	_leftpulse, 0
$023F	$00F0			MOVWF	STACK_0
$0240	$083D			MOVF	_leftpulse+1, 0
$0241	$00F1			MOVWF	STACK_0+1
$0242	$083E			MOVF	_leftpulse+2, 0
$0243	$00F2			MOVWF	STACK_0+2
$0244	$083F			MOVF	_leftpulse+3, 0
$0245	$00F3			MOVWF	STACK_0+3
$0246	$263C			CALL	_double2byte
$0247	$0870			MOVF	STACK_0, 0
$0248	$00DC			MOVWF	FARG_PWM1_Change_Duty+0
$0249	$2681			CALL	_PWM1_Change_Duty
;lfr_pid_runner_5sensor.c,170 :: 		PWM2_CHANGE_DUTY(rightpulse);
$024A	$0838			MOVF	_rightpulse, 0
$024B	$00F0			MOVWF	STACK_0
$024C	$0839			MOVF	_rightpulse+1, 0
$024D	$00F1			MOVWF	STACK_0+1
$024E	$083A			MOVF	_rightpulse+2, 0
$024F	$00F2			MOVWF	STACK_0+2
$0250	$083B			MOVF	_rightpulse+3, 0
$0251	$00F3			MOVWF	STACK_0+3
$0252	$263C			CALL	_double2byte
$0253	$0870			MOVF	STACK_0, 0
$0254	$00DC			MOVWF	FARG_PWM2_Change_Duty+0
$0255	$26F1			CALL	_PWM2_Change_Duty
;lfr_pid_runner_5sensor.c,171 :: 		}
$0256	$	L_main_13:
;lfr_pid_runner_5sensor.c,172 :: 		delay_ms(10);
$0256	$300D			MOVLW	13
$0257	$00FB			MOVWF	STACK_11
$0258	$30FF			MOVLW	255
$0259	$00FA			MOVWF	STACK_10
$025A	$0BFB			DECFSZ	STACK_11, F
$025B	$2A5D			GOTO	$+2
$025C	$2A60			GOTO	$+4
$025D	$0BFA			DECFSZ	STACK_10, F
$025E	$2A5D			GOTO	$-1
$025F	$2A5A			GOTO	$-5
$0260	$30F3			MOVLW	243
$0261	$00FA			MOVWF	STACK_10
$0262	$0BFA			DECFSZ	STACK_10, F
$0263	$2A62			GOTO	$-1
$0264	$0000			NOP
;lfr_pid_runner_5sensor.c,173 :: 		}
$0265	$2809			GOTO	L_main_5
;lfr_pid_runner_5sensor.c,174 :: 		}
$0266	$2A66			GOTO	$
