;  ASM code generated by mikroVirtualMachine for PIC - V. 8.2.0.0
;  Date/Time: 3/26/2011 6:12:26 AM
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$2804			GOTO	_main
$09A9	$	_RES032:
$09A9	$1303			BCF	STATUS, RP1
$09AA	$1283			BCF	STATUS, RP0
$09AB	$01F2			CLRF	STACK_2
$09AC	$01F1			CLRF	STACK_1
$09AD	$01F0			CLRF	STACK_0
$09AE	$01F8			CLRF	STACK_8
$09AF	$01F3			CLRF	STACK_3
$09B0	$3000			MOVLW	0
$09B1	$0008			RETURN
$0993	$	_SETFUN32:
$0993	$1303			BCF	STATUS, RP1
$0994	$1283			BCF	STATUS, RP0
$0995	$157B			BSF	STACK_11, 2
$0996	$1FFB			BTFSS	STACK_11, 7
$0997	$299F			GOTO	SETFUN32EEE
$0998	$3001			MOVLW	0x01
$0999	$00F3			MOVWF	STACK_3
$099A	$01F2			CLRF	STACK_2
$099B	$01F1			CLRF	STACK_1
$099C	$01F0			CLRF	STACK_0
$099D	$0DFA			RLF	STACK_10, F
$099E	$0CF2			RRF	STACK_2, F
$099F	$	SETFUN32EEE:
$099F	$30FF			MOVLW	0xFF
$09A0	$0008			RETURN
$09C2	$	_FIXSIGN32:
$09C2	$1303			BCF	STATUS, RP1
$09C3	$1283			BCF	STATUS, RP0
$09C4	$1FFA			BTFSS	STACK_10, 7
$09C5	$13F2			BCF	STACK_2, 7
$09C6	$3000			MOVLW	0
$09C7	$0008			RETURN
$0985	$	_SETFOV32:
$0985	$1303			BCF	STATUS, RP1
$0986	$1283			BCF	STATUS, RP0
$0987	$14FB			BSF	STACK_11, 1
$0988	$1FFB			BTFSS	STACK_11, 7
$0989	$2991			GOTO	SETFOV32EEE
$098A	$30FF			MOVLW	0xFF
$098B	$00F3			MOVWF	STACK_3
$098C	$00F2			MOVWF	STACK_2
$098D	$00F1			MOVWF	STACK_1
$098E	$00F0			MOVWF	STACK_0
$098F	$0DFA			RLF	STACK_10, F
$0990	$0CF2			RRF	STACK_2, F
$0991	$	SETFOV32EEE:
$0991	$30FF			MOVLW	0xFF
$0992	$0008			RETURN
$05C0	$	_NRM4032:
$05C0	$1303			BCF	STATUS, RP1
$05C1	$1283			BCF	STATUS, RP0
$05C2	$187C			BTFSC	STACK_12, 0
$05C3	$2DF8			GOTO	NRMRND4032
$05C4	$18FC			BTFSC	STACK_12, 1
$05C5	$2DC9			GOTO	NRM4032
$05C6	$197C			BTFSC	STACK_12, 2
$05C7	$2E1D			GOTO	JMPSETFOV32
$05C8	$2DC2			GOTO	$-6
$05C9	$	NRM4032:
$05C9	$01A0			CLRF	__math_tempbD
$05CA	$0872			MOVF	STACK_2, W
$05CB	$1D03			BTFSS	STATUS, Z
$05CC	$2DE9			GOTO	NORM4032
$05CD	$0871			MOVF	STACK_1, W
$05CE	$00F2			MOVWF	STACK_2
$05CF	$0870			MOVF	STACK_0, W
$05D0	$00F1			MOVWF	STACK_1
$05D1	$0878			MOVF	STACK_8, W
$05D2	$00F0			MOVWF	STACK_0
$05D3	$01F8			CLRF	STACK_8
$05D4	$15A0			BSF	__math_tempbD, 3
$05D5	$0872			MOVF	STACK_2, W
$05D6	$1D03			BTFSS	STATUS, Z
$05D7	$2DE9			GOTO	NORM4032
$05D8	$0871			MOVF	STACK_1, W
$05D9	$00F2			MOVWF	STACK_2
$05DA	$0870			MOVF	STACK_0, W
$05DB	$00F1			MOVWF	STACK_1
$05DC	$01F0			CLRF	STACK_0
$05DD	$11A0			BCF	__math_tempbD, 3
$05DE	$1620			BSF	__math_tempbD, 4
$05DF	$0872			MOVF	STACK_2, W
$05E0	$1D03			BTFSS	STATUS, Z
$05E1	$2DE9			GOTO	NORM4032
$05E2	$0871			MOVF	STACK_1, W
$05E3	$00F2			MOVWF	STACK_2
$05E4	$01F1			CLRF	STACK_1
$05E5	$15A0			BSF	__math_tempbD, 3
$05E6	$0872			MOVF	STACK_2, W
$05E7	$1903			BTFSC	STATUS, Z
$05E8	$2E0B			GOTO	JMPRES032
$05E9	$	NORM4032:
$05E9	$0820			MOVF	__math_tempbD, W
$05EA	$02F3			SUBWF	STACK_3, F
$05EB	$1D03			BTFSS	STATUS, Z
$05EC	$1C03			BTFSS	STATUS, C
$05ED	$2E11			GOTO	JMPSETFUN32
$05EE	$1003			BCF	STATUS, C
$05EF	$	NORM4032A:
$05EF	$1BF2			BTFSC	STACK_2, 7
$05F0	$2DF8			GOTO	NRMRND4032
$05F1	$0DF8			RLF	STACK_8, F
$05F2	$0DF0			RLF	STACK_0, F
$05F3	$0DF1			RLF	STACK_1, F
$05F4	$0DF2			RLF	STACK_2, F
$05F5	$0BF3			DECFSZ	STACK_3, F
$05F6	$2DEF			GOTO	NORM4032A
$05F7	$2E11			GOTO	JMPSETFUN32
$05F8	$	NRMRND4032:
$05F8	$1B7B			BTFSC	STACK_11, 6
$05F9	$1C70			BTFSS	STACK_0, 0
$05FA	$2E17			GOTO	JMPFIXSIGN32
$05FB	$1FF8			BTFSS	STACK_8, 7
$05FC	$2E17			GOTO	JMPFIXSIGN32
$05FD	$0AF0			INCF	STACK_0, F
$05FE	$1903			BTFSC	STATUS, Z
$05FF	$0AF1			INCF	STACK_1, F
$0600	$1903			BTFSC	STATUS, Z
$0601	$0AF2			INCF	STACK_2, F
$0602	$1D03			BTFSS	STATUS, Z
$0603	$2E17			GOTO	JMPFIXSIGN32
$0604	$0CF2			RRF	STACK_2, F
$0605	$0CF1			RRF	STACK_1, F
$0606	$0CF0			RRF	STACK_0, F
$0607	$0AF3			INCF	STACK_3, F
$0608	$1903			BTFSC	STATUS, Z
$0609	$2E1D			GOTO	JMPSETFOV32
$060A	$2E17			GOTO	JMPFIXSIGN32
$060B	$	JMPRES032:
$060B	$3001			MOVLW	0x01
$060C	$00FC			MOVWF	STACK_12
$060D	$158A			BSF	PCLATH, 3
$060E	$21A9			CALL	_RES032
$060F	$118A			BCF	PCLATH, 3
$0610	$2E22			GOTO	NRM4032EEE
$0611	$	JMPSETFUN32:
$0611	$3002			MOVLW	0x02
$0612	$00FC			MOVWF	STACK_12
$0613	$158A			BSF	PCLATH, 3
$0614	$2193			CALL	_SETFUN32
$0615	$118A			BCF	PCLATH, 3
$0616	$2E22			GOTO	NRM4032EEE
$0617	$	JMPFIXSIGN32:
$0617	$3004			MOVLW	0x04
$0618	$00FC			MOVWF	STACK_12
$0619	$158A			BSF	PCLATH, 3
$061A	$21C2			CALL	_FIXSIGN32
$061B	$118A			BCF	PCLATH, 3
$061C	$2E22			GOTO	NRM4032EEE
$061D	$	JMPSETFOV32:
$061D	$3008			MOVLW	0x08
$061E	$00FC			MOVWF	STACK_12
$061F	$158A			BSF	PCLATH, 3
$0620	$2185			CALL	_SETFOV32
$0621	$118A			BCF	PCLATH, 3
$0622	$	NRM4032EEE:
$0622	$0000			NOP
$0623	$0008			RETURN
$0883	$	_NRM3232:
$0883	$1303			BCF	STATUS, RP1
$0884	$1283			BCF	STATUS, RP0
$0885	$01A0			CLRF	__math_tempbD
$0886	$0872			MOVF	STACK_2, W
$0887	$1D03			BTFSS	STATUS, Z
$0888	$289A			GOTO	NORM3232
$0889	$0871			MOVF	STACK_1, W
$088A	$00F2			MOVWF	STACK_2
$088B	$0870			MOVF	STACK_0, W
$088C	$00F1			MOVWF	STACK_1
$088D	$01F0			CLRF	STACK_0
$088E	$15A0			BSF	__math_tempbD, 3
$088F	$0872			MOVF	STACK_2, W
$0890	$1D03			BTFSS	STATUS, Z
$0891	$289A			GOTO	NORM3232
$0892	$0871			MOVF	STACK_1, W
$0893	$00F2			MOVWF	STACK_2
$0894	$01F1			CLRF	STACK_1
$0895	$11A0			BCF	__math_tempbD, 3
$0896	$1620			BSF	__math_tempbD, 4
$0897	$0872			MOVF	STACK_2, W
$0898	$1903			BTFSC	STATUS, Z
$0899	$28A8			GOTO	JPNRES032
$089A	$	NORM3232:
$089A	$0820			MOVF	__math_tempbD, W
$089B	$02F3			SUBWF	STACK_3, F
$089C	$1D03			BTFSS	STATUS, Z
$089D	$1C03			BTFSS	STATUS, C
$089E	$28AC			GOTO	JPNSETFUN32
$089F	$1003			BCF	STATUS, C
$08A0	$	NORM3232A:
$08A0	$1BF2			BTFSC	STACK_2, 7
$08A1	$28B0			GOTO	JMPNFIXSIGN32
$08A2	$0DF0			RLF	STACK_0, F
$08A3	$0DF1			RLF	STACK_1, F
$08A4	$0DF2			RLF	STACK_2, F
$08A5	$0BF3			DECFSZ	STACK_3, F
$08A6	$28A0			GOTO	NORM3232A
$08A7	$28AC			GOTO	JPNSETFUN32
$08A8	$	JPNRES032:
$08A8	$3001			MOVLW	0x01
$08A9	$00FC			MOVWF	STACK_12
$08AA	$21A9			CALL	_RES032
$08AB	$28B3			GOTO	NORM32EEE
$08AC	$	JPNSETFUN32:
$08AC	$3002			MOVLW	0x02
$08AD	$00FC			MOVWF	STACK_12
$08AE	$2193			CALL	_SETFUN32
$08AF	$28B3			GOTO	NORM32EEE
$08B0	$	JMPNFIXSIGN32:
$08B0	$3004			MOVLW	0x04
$08B1	$00FC			MOVWF	STACK_12
$08B2	$21C2			CALL	_FIXSIGN32
$08B3	$	NORM32EEE:
$08B3	$0008			RETURN
$09E8	$	_SETFDZ32:
$09E8	$1303			BCF	STATUS, RP1
$09E9	$1283			BCF	STATUS, RP0
$09EA	$15FB			BSF	STACK_11, 3
$09EB	$30FF			MOVLW	0xFF
$09EC	$0008			RETURN
$0411	$	_Add_32x32_FP:
$0411	$1303			BCF	STATUS, RP1
$0412	$1283			BCF	STATUS, RP0
$0413	$0872			MOVF	STACK_2, W
$0414	$0676			XORWF	STACK_6, W
$0415	$00A0			MOVWF	__math_tempbD
$0416	$01F8			CLRF	STACK_8
$0417	$01F9			CLRF	STACK_9
$0418	$0873			MOVF	STACK_3, W
$0419	$0277			SUBWF	STACK_7, W
$041A	$1C03			BTFSS	STATUS, C
$041B	$2C34			GOTO	USEA32
$041C	$0877			MOVF	STACK_7, W
$041D	$00FD			MOVWF	STACK_13
$041E	$0873			MOVF	STACK_3, W
$041F	$00F7			MOVWF	STACK_7
$0420	$087D			MOVF	STACK_13, W
$0421	$00F3			MOVWF	STACK_3
$0422	$0876			MOVF	STACK_6, W
$0423	$00FD			MOVWF	STACK_13
$0424	$0872			MOVF	STACK_2, W
$0425	$00F6			MOVWF	STACK_6
$0426	$087D			MOVF	STACK_13, W
$0427	$00F2			MOVWF	STACK_2
$0428	$0875			MOVF	STACK_5, W
$0429	$00FD			MOVWF	STACK_13
$042A	$0871			MOVF	STACK_1, W
$042B	$00F5			MOVWF	STACK_5
$042C	$087D			MOVF	STACK_13, W
$042D	$00F1			MOVWF	STACK_1
$042E	$0874			MOVF	STACK_4, W
$042F	$00FD			MOVWF	STACK_13
$0430	$0870			MOVF	STACK_0, W
$0431	$00F4			MOVWF	STACK_4
$0432	$087D			MOVF	STACK_13, W
$0433	$00F0			MOVWF	STACK_0
$0434	$	USEA32:
$0434	$0877			MOVF	STACK_7, W
$0435	$1903			BTFSC	STATUS, Z
$0436	$2CB1			GOTO	JMPEEE
$0437	$0872			MOVF	STACK_2, W
$0438	$00FA			MOVWF	STACK_10
$0439	$17F2			BSF	STACK_2, 7
$043A	$17F6			BSF	STACK_6, 7
$043B	$0877			MOVF	STACK_7, W
$043C	$0273			SUBWF	STACK_3, W
$043D	$00F7			MOVWF	STACK_7
$043E	$1903			BTFSC	STATUS, Z
$043F	$2C67			GOTO	ALIGNED32
$0440	$3008			MOVLW	8
$0441	$0277			SUBWF	STACK_7, W
$0442	$1C03			BTFSS	STATUS, C
$0443	$2C5D			GOTO	ALIGNB32
$0444	$00F7			MOVWF	STACK_7
$0445	$0874			MOVF	STACK_4, W
$0446	$00F9			MOVWF	STACK_9
$0447	$0875			MOVF	STACK_5, W
$0448	$00F4			MOVWF	STACK_4
$0449	$0876			MOVF	STACK_6, W
$044A	$00F5			MOVWF	STACK_5
$044B	$01F6			CLRF	STACK_6
$044C	$3008			MOVLW	8
$044D	$0277			SUBWF	STACK_7, W
$044E	$1C03			BTFSS	STATUS, C
$044F	$2C5D			GOTO	ALIGNB32
$0450	$00F7			MOVWF	STACK_7
$0451	$0874			MOVF	STACK_4, W
$0452	$00F9			MOVWF	STACK_9
$0453	$0875			MOVF	STACK_5, W
$0454	$00F4			MOVWF	STACK_4
$0455	$01F5			CLRF	STACK_5
$0456	$3008			MOVLW	8
$0457	$0277			SUBWF	STACK_7, W
$0458	$1C03			BTFSS	STATUS, C
$0459	$2C5D			GOTO	ALIGNB32
$045A	$087A			MOVF	STACK_10, W
$045B	$00F2			MOVWF	STACK_2
$045C	$2CB1			GOTO	JMPEEE
$045D	$	ALIGNB32:
$045D	$0877			MOVF	STACK_7, W
$045E	$1903			BTFSC	STATUS, Z
$045F	$2C67			GOTO	ALIGNED32
$0460	$	ALOOPB32:
$0460	$1003			BCF	STATUS, C
$0461	$0CF6			RRF	STACK_6, F
$0462	$0CF5			RRF	STACK_5, F
$0463	$0CF4			RRF	STACK_4, F
$0464	$0CF9			RRF	STACK_9, F
$0465	$0BF7			DECFSZ	STACK_7, F
$0466	$2C60			GOTO	ALOOPB32
$0467	$	ALIGNED32:
$0467	$1FA0			BTFSS	__math_tempbD, 7
$0468	$2C74			GOTO	AOK32
$0469	$09F9			COMF	STACK_9, F
$046A	$09F4			COMF	STACK_4, F
$046B	$09F5			COMF	STACK_5, F
$046C	$09F6			COMF	STACK_6, F
$046D	$0AF9			INCF	STACK_9, F
$046E	$1903			BTFSC	STATUS, Z
$046F	$0AF4			INCF	STACK_4, F
$0470	$1903			BTFSC	STATUS, Z
$0471	$0AF5			INCF	STACK_5, F
$0472	$1903			BTFSC	STATUS, Z
$0473	$0AF6			INCF	STACK_6, F
$0474	$	AOK32:
$0474	$0879			MOVF	STACK_9, W
$0475	$07F8			ADDWF	STACK_8, F
$0476	$0874			MOVF	STACK_4, W
$0477	$1803			BTFSC	STATUS, C
$0478	$0F74			INCFSZ	STACK_4, W
$0479	$07F0			ADDWF	STACK_0, F
$047A	$0875			MOVF	STACK_5, W
$047B	$1803			BTFSC	STATUS, C
$047C	$0F75			INCFSZ	STACK_5, W
$047D	$07F1			ADDWF	STACK_1, F
$047E	$0876			MOVF	STACK_6, W
$047F	$1803			BTFSC	STATUS, C
$0480	$0F76			INCFSZ	STACK_6, W
$0481	$07F2			ADDWF	STACK_2, F
$0482	$1BA0			BTFSC	__math_tempbD, 7
$0483	$2C8D			GOTO	ACOMP32
$0484	$1C03			BTFSS	STATUS, C
$0485	$2C9D			GOTO	JMPNRMRND4032
$0486	$0CF2			RRF	STACK_2, F
$0487	$0CF1			RRF	STACK_1, F
$0488	$0CF0			RRF	STACK_0, F
$0489	$0CF8			RRF	STACK_8, F
$048A	$0FF3			INCFSZ	STACK_3, F
$048B	$2C9D			GOTO	JMPNRMRND4032
$048C	$2CAB			GOTO	ADD_JMPSETFOV32
$048D	$	ACOMP32:
$048D	$1803			BTFSC	STATUS, C
$048E	$2CA1			GOTO	JMPNRM4032
$048F	$09F8			COMF	STACK_8, F
$0490	$09F0			COMF	STACK_0, F
$0491	$09F1			COMF	STACK_1, F
$0492	$09F2			COMF	STACK_2, F
$0493	$0AF8			INCF	STACK_8, F
$0494	$1903			BTFSC	STATUS, Z
$0495	$0AF0			INCF	STACK_0, F
$0496	$1903			BTFSC	STATUS, Z
$0497	$0AF1			INCF	STACK_1, F
$0498	$1903			BTFSC	STATUS, Z
$0499	$0AF2			INCF	STACK_2, F
$049A	$3080			MOVLW	0x80
$049B	$06FA			XORWF	STACK_10, F
$049C	$2CA5			GOTO	JMPNRM32
$049D	$	JMPNRMRND4032:
$049D	$3001			MOVLW	0x01
$049E	$00FC			MOVWF	STACK_12
$049F	$25C0			CALL	_NRM4032
$04A0	$2CB3			GOTO	ADD32EEE
$04A1	$	JMPNRM4032:
$04A1	$3002			MOVLW	0x02
$04A2	$00FC			MOVWF	STACK_12
$04A3	$25C0			CALL	_NRM4032
$04A4	$2CB3			GOTO	ADD32EEE
$04A5	$	JMPNRM32:
$04A5	$3004			MOVLW	0x04
$04A6	$00FC			MOVWF	STACK_12
$04A7	$158A			BSF	PCLATH, 3
$04A8	$2083			CALL	_NRM3232
$04A9	$118A			BCF	PCLATH, 3
$04AA	$2CB3			GOTO	ADD32EEE
$04AB	$	ADD_JMPSETFOV32:
$04AB	$3008			MOVLW	0x08
$04AC	$00FC			MOVWF	STACK_12
$04AD	$158A			BSF	PCLATH, 3
$04AE	$2185			CALL	_SETFOV32
$04AF	$118A			BCF	PCLATH, 3
$04B0	$2CB3			GOTO	ADD32EEE
$04B1	$	JMPEEE:
$04B1	$3000			MOVLW	0x00
$04B2	$00FC			MOVWF	STACK_12
$04B3	$	ADD32EEE:
$04B3	$0000			NOP
$04B4	$0008			RETURN
$09B2	$	_PWM1_Start:
$09B2	$1303			BCF	STATUS, RP1
$09B3	$1683			BSF	STATUS, RP0
$09B4	$1107			BCF	TRISC, 2
$09B5	$1283			BCF	STATUS, RP0
$09B6	$1512			BSF	T2CON, 2
$09B7	$300C			MOVLW	12
$09B8	$0497			IORWF	CCP1CON, 1
$09B9	$0008			RETURN
$09BA	$	_PWM2_Start:
$09BA	$1303			BCF	STATUS, RP1
$09BB	$1683			BSF	STATUS, RP0
$09BC	$1087			BCF	TRISC, 1
$09BD	$1283			BCF	STATUS, RP0
$09BE	$1512			BSF	T2CON, 2
$09BF	$300C			MOVLW	12
$09C0	$049D			IORWF	CCP2CON, 1
$09C1	$0008			RETURN
$09CE	$	_PWM1_Init:
$09CE	$1303			BCF	STATUS, RP1
$09CF	$1283			BCF	STATUS, RP0
$09D0	$0195			CLRF	CCPR1L, 1
$09D1	$1217			BCF	CCP1CON, 4
$09D2	$1297			BCF	CCP1CON, 5
$09D3	$0008			RETURN
$09C8	$	_PWM2_Init:
$09C8	$1303			BCF	STATUS, RP1
$09C9	$1283			BCF	STATUS, RP0
$09CA	$019B			CLRF	CCPR2L, 1
$09CB	$121D			BCF	CCP2CON, 4
$09CC	$129D			BCF	CCP2CON, 5
$09CD	$0008			RETURN
$08ED	$	_Mul_16x16_U:
$08ED	$1303			BCF	STATUS, RP1
$08EE	$1283			BCF	STATUS, RP0
$08EF	$01FB			CLRF	STACK_11
$08F0	$01FA			CLRF	STACK_10
$08F1	$01F9			CLRF	STACK_9
$08F2	$3080			MOVLW	128
$08F3	$00F8			MOVWF	STACK_8
$08F4	$0CF1			RRF	STACK_1, F
$08F5	$0CF0			RRF	STACK_0, F
$08F6	$1C03			BTFSS	STATUS, C
$08F7	$2901			GOTO	$+10
$08F8	$0874			MOVF	STACK_4, W
$08F9	$07F9			ADDWF	STACK_9, F
$08FA	$0875			MOVF	STACK_5, W
$08FB	$1803			BTFSC	STATUS, C
$08FC	$0F75			INCFSZ	STACK_5, W
$08FD	$07FA			ADDWF	STACK_10, F
$08FE	$1803			BTFSC	STATUS, C
$08FF	$0AFB			INCF	STACK_11, F
$0900	$1003			BCF	STATUS, C
$0901	$1FF0			BTFSS	STACK_0, 7
$0902	$2909			GOTO	$+7
$0903	$0874			MOVF	STACK_4, W
$0904	$07FA			ADDWF	STACK_10, F
$0905	$0875			MOVF	STACK_5, W
$0906	$1803			BTFSC	STATUS, C
$0907	$0F75			INCFSZ	STACK_5, W
$0908	$07FB			ADDWF	STACK_11, F
$0909	$0CFB			RRF	STACK_11, F
$090A	$0CFA			RRF	STACK_10, F
$090B	$0CF9			RRF	STACK_9, F
$090C	$0CF8			RRF	STACK_8, F
$090D	$1C03			BTFSS	STATUS, C
$090E	$28F4			GOTO	$-26
$090F	$087B			MOVF	STACK_11, W
$0910	$00F3			MOVWF	STACK_3
$0911	$087A			MOVF	STACK_10, W
$0912	$00F2			MOVWF	STACK_2
$0913	$0879			MOVF	STACK_9, W
$0914	$00F1			MOVWF	STACK_1
$0915	$0878			MOVF	STACK_8, W
$0916	$00F0			MOVWF	STACK_0
$0917	$0008			RETURN
$0929	$	_Word2Double:
$0929	$1303			BCF	STATUS, RP1
$092A	$1283			BCF	STATUS, RP0
$092B	$0870			MOVF	STACK_0, W
$092C	$00F8			MOVWF	STACK_8
$092D	$0871			MOVF	STACK_1, W
$092E	$00F0			MOVWF	STACK_0
$092F	$01F1			CLRF	STACK_1
$0930	$01F2			CLRF	STACK_2
$0931	$01F3			CLRF	STACK_3
$0932	$	FLO16U32:
$0932	$01FB			CLRF	STACK_11
$0933	$01FC			CLRF	STACK_12
$0934	$3096			MOVLW	150
$0935	$00F3			MOVWF	STACK_3
$0936	$01FA			CLRF	STACK_10
$0937	$0870			MOVF	STACK_0, W
$0938	$00F1			MOVWF	STACK_1
$0939	$0878			MOVF	STACK_8, W
$093A	$00F0			MOVWF	STACK_0
$093B	$01F8			CLRF	STACK_8
$093C	$01F2			CLRF	STACK_2
$093D	$2083			CALL	_NRM3232
$093E	$0008			RETURN
$04B5	$	_Div_32x32_FP:
$04B5	$1303			BCF	STATUS, RP1
$04B6	$1283			BCF	STATUS, RP0
$04B7	$	FPD32:
$04B7	$0877			MOVF	STACK_7, W
$04B8	$1903			BTFSC	STATUS, Z
$04B9	$2D44			GOTO	JPDSETFDZ32
$04BA	$0873			MOVF	STACK_3, W
$04BB	$1903			BTFSC	STATUS, Z
$04BC	$2D49			GOTO	JPDRES032
$04BD	$	D32BNE0:
$04BD	$0872			MOVF	STACK_2, W
$04BE	$0676			XORWF	STACK_6, W
$04BF	$3980			ANDLW	128
$04C0	$00FA			MOVWF	STACK_10
$04C1	$17F2			BSF	STACK_2, 7
$04C2	$17F6			BSF	STACK_6, 7
$04C3	$	TALIGN32:
$04C3	$01A0			CLRF	__math_tempbD
$04C4	$0872			MOVF	STACK_2, W
$04C5	$00F8			MOVWF	STACK_8
$04C6	$0871			MOVF	STACK_1, W
$04C7	$00FC			MOVWF	STACK_12
$04C8	$0870			MOVF	STACK_0, W
$04C9	$00FD			MOVWF	STACK_13
$04CA	$0874			MOVF	STACK_4, W
$04CB	$02FD			SUBWF	STACK_13, F
$04CC	$0875			MOVF	STACK_5, W
$04CD	$1C03			BTFSS	STATUS, C
$04CE	$0F75			INCFSZ	STACK_5, W
$04CF	$	TS1ALIGN32:
$04CF	$02FC			SUBWF	STACK_12, F
$04D0	$0876			MOVF	STACK_6, W
$04D1	$1C03			BTFSS	STATUS, C
$04D2	$0F76			INCFSZ	STACK_6, W
$04D3	$	TS2ALIGN32:
$04D3	$02F8			SUBWF	STACK_8, F
$04D4	$01F8			CLRF	STACK_8
$04D5	$01FC			CLRF	STACK_12
$04D6	$01FD			CLRF	STACK_13
$04D7	$1C03			BTFSS	STATUS, C
$04D8	$2CE0			GOTO	DALIGN32OK
$04D9	$1003			BCF	STATUS, C
$04DA	$0CF2			RRF	STACK_2, F
$04DB	$0CF1			RRF	STACK_1, F
$04DC	$0CF0			RRF	STACK_0, F
$04DD	$0CF8			RRF	STACK_8, F
$04DE	$3001			MOVLW	0x01
$04DF	$00A0			MOVWF	__math_tempbD
$04E0	$	DALIGN32OK:
$04E0	$0877			MOVF	STACK_7, W
$04E1	$02F3			SUBWF	STACK_3, F
$04E2	$1C03			BTFSS	STATUS, C
$04E3	$2CEA			GOTO	ALTB32
$04E4	$	AGEB32:
$04E4	$307E			MOVLW	126
$04E5	$0720			ADDWF	__math_tempbD, W
$04E6	$07F3			ADDWF	STACK_3, F
$04E7	$1803			BTFSC	STATUS, C
$04E8	$2D4E			GOTO	JPDSETFOV32
$04E9	$2CEF			GOTO	DARGOK32
$04EA	$	ALTB32:
$04EA	$307E			MOVLW	126
$04EB	$0720			ADDWF	__math_tempbD, W
$04EC	$07F3			ADDWF	STACK_3, F
$04ED	$1C03			BTFSS	STATUS, C
$04EE	$2D53			GOTO	JPDSETFUN32
$04EF	$	DARGOK32:
$04EF	$3018			MOVLW	24
$04F0	$07FA			ADDWF	STACK_10, F
$04F1	$	DLOOP32:
$04F1	$0DFD			RLF	STACK_13, F
$04F2	$0DFC			RLF	STACK_12, F
$04F3	$0DF8			RLF	STACK_8, F
$04F4	$0DF0			RLF	STACK_0, F
$04F5	$0DF1			RLF	STACK_1, F
$04F6	$0DF2			RLF	STACK_2, F
$04F7	$0DA0			RLF	__math_tempbD, F
$04F8	$0874			MOVF	STACK_4, W
$04F9	$02F0			SUBWF	STACK_0, F
$04FA	$0875			MOVF	STACK_5, W
$04FB	$1C03			BTFSS	STATUS, C
$04FC	$0F75			INCFSZ	STACK_5, W
$04FD	$	DS132:
$04FD	$02F1			SUBWF	STACK_1, F
$04FE	$0876			MOVF	STACK_6, W
$04FF	$1C03			BTFSS	STATUS, C
$0500	$0F76			INCFSZ	STACK_6, W
$0501	$	DS232:
$0501	$02F2			SUBWF	STACK_2, F
$0502	$0D76			RLF	STACK_6, W
$0503	$04A0			IORWF	__math_tempbD, F
$0504	$1C20			BTFSS	__math_tempbD, 0
$0505	$2D08			GOTO	DREST32
$0506	$147D			BSF	STACK_13, 0
$0507	$2D13			GOTO	DOK32
$0508	$	DREST32:
$0508	$0874			MOVF	STACK_4, W
$0509	$07F0			ADDWF	STACK_0, F
$050A	$0875			MOVF	STACK_5, W
$050B	$1803			BTFSC	STATUS, C
$050C	$0F75			INCFSZ	STACK_5, W
$050D	$	DAREST32:
$050D	$07F1			ADDWF	STACK_1, F
$050E	$0876			MOVF	STACK_6, W
$050F	$1803			BTFSC	STATUS, C
$0510	$0A76			INCF	STACK_6, W
$0511	$07F2			ADDWF	STACK_2, F
$0512	$107D			BCF	STACK_13, 0
$0513	$	DOK32:
$0513	$03FA			DECF	STACK_10, F
$0514	$301F			MOVLW	31
$0515	$057A			ANDWF	STACK_10, W
$0516	$1D03			BTFSS	STATUS, Z
$0517	$2CF1			GOTO	DLOOP32
$0518	$	DROUND32:
$0518	$1B7B			BTFSC	STACK_11, 6
$0519	$1C7D			BTFSS	STACK_13, 0
$051A	$2D3A			GOTO	DIV32OK
$051B	$1003			BCF	STATUS, C
$051C	$0DF0			RLF	STACK_0, F
$051D	$0DF1			RLF	STACK_1, F
$051E	$0DF2			RLF	STACK_2, F
$051F	$0DA0			RLF	__math_tempbD, F
$0520	$0874			MOVF	STACK_4, W
$0521	$02F0			SUBWF	STACK_0, F
$0522	$0875			MOVF	STACK_5, W
$0523	$1C03			BTFSS	STATUS, C
$0524	$0F75			INCFSZ	STACK_5, W
$0525	$02F1			SUBWF	STACK_1, F
$0526	$0876			MOVF	STACK_6, W
$0527	$1C03			BTFSS	STATUS, C
$0528	$0F76			INCFSZ	STACK_6, W
$0529	$02F2			SUBWF	STACK_2, F
$052A	$0D76			RLF	STACK_6, W
$052B	$0420			IORWF	__math_tempbD, W
$052C	$3901			ANDLW	0x01
$052D	$07FD			ADDWF	STACK_13, F
$052E	$1803			BTFSC	STATUS, C
$052F	$0AFC			INCF	STACK_12, F
$0530	$1903			BTFSC	STATUS, Z
$0531	$0AF8			INCF	STACK_8, F
$0532	$1D03			BTFSS	STATUS, Z
$0533	$2D3A			GOTO	DIV32OK
$0534	$0CF8			RRF	STACK_8, F
$0535	$0CFC			RRF	STACK_12, F
$0536	$0CFD			RRF	STACK_13, F
$0537	$0AF3			INCF	STACK_3, F
$0538	$1903			BTFSC	STATUS, Z
$0539	$2D4E			GOTO	JPDSETFOV32
$053A	$	DIV32OK:
$053A	$1FFA			BTFSS	STACK_10, 7
$053B	$13F8			BCF	STACK_8, 7
$053C	$0878			MOVF	STACK_8, W
$053D	$00F2			MOVWF	STACK_2
$053E	$087C			MOVF	STACK_12, W
$053F	$00F1			MOVWF	STACK_1
$0540	$087D			MOVF	STACK_13, W
$0541	$00F0			MOVWF	STACK_0
$0542	$3000			MOVLW	0x00
$0543	$2D57			GOTO	DIV32EEE
$0544	$	JPDSETFDZ32:
$0544	$3001			MOVLW	0x01
$0545	$158A			BSF	PCLATH, 3
$0546	$21E8			CALL	_SETFDZ32
$0547	$118A			BCF	PCLATH, 3
$0548	$2D57			GOTO	DIV32EEE
$0549	$	JPDRES032:
$0549	$3002			MOVLW	0x02
$054A	$158A			BSF	PCLATH, 3
$054B	$21A9			CALL	_RES032
$054C	$118A			BCF	PCLATH, 3
$054D	$2D57			GOTO	DIV32EEE
$054E	$	JPDSETFOV32:
$054E	$3004			MOVLW	0x04
$054F	$158A			BSF	PCLATH, 3
$0550	$2185			CALL	_SETFOV32
$0551	$118A			BCF	PCLATH, 3
$0552	$2D57			GOTO	DIV32EEE
$0553	$	JPDSETFUN32:
$0553	$3008			MOVLW	0x08
$0554	$158A			BSF	PCLATH, 3
$0555	$2193			CALL	_SETFUN32
$0556	$118A			BCF	PCLATH, 3
$0557	$	DIV32EEE:
$0557	$0000			NOP
$0558	$0008			RETURN
$09A1	$	_Sub_32x32_FP:
$09A1	$1303			BCF	STATUS, RP1
$09A2	$1283			BCF	STATUS, RP0
$09A3	$3080			MOVLW	0x80
$09A4	$06F6			XORWF	STACK_6, F
$09A5	$118A			BCF	PCLATH, 3
$09A6	$2411			CALL	_Add_32x32_FP
$09A7	$158A			BSF	PCLATH, 3
$09A8	$0008			RETURN
$0800	$	_Mul_16x16_S:
$0800	$1303			BCF	STATUS, RP1
$0801	$1283			BCF	STATUS, RP0
$0802	$01FB			CLRF	STACK_11
$0803	$01FA			CLRF	STACK_10
$0804	$01F9			CLRF	STACK_9
$0805	$3080			MOVLW	128
$0806	$00F8			MOVWF	STACK_8
$0807	$01FD			CLRF	STACK_13
$0808	$1FF1			BTFSS	STACK_1, 7
$0809	$2810			GOTO	$+7
$080A	$09F1			COMF	STACK_1, F
$080B	$09F0			COMF	STACK_0, F
$080C	$0AF0			INCF	STACK_0, F
$080D	$1903			BTFSC	STATUS, Z
$080E	$0AF1			INCF	STACK_1, F
$080F	$0AFD			INCF	STACK_13, F
$0810	$1FF5			BTFSS	STACK_5, 7
$0811	$2818			GOTO	$+7
$0812	$09F5			COMF	STACK_5, F
$0813	$09F4			COMF	STACK_4, F
$0814	$0AF4			INCF	STACK_4, F
$0815	$1903			BTFSC	STATUS, Z
$0816	$0AF5			INCF	STACK_5, F
$0817	$0AFD			INCF	STACK_13, F
$0818	$0CF1			RRF	STACK_1, F
$0819	$0CF0			RRF	STACK_0, F
$081A	$1C03			BTFSS	STATUS, C
$081B	$2825			GOTO	$+10
$081C	$0874			MOVF	STACK_4, W
$081D	$07F9			ADDWF	STACK_9, F
$081E	$0875			MOVF	STACK_5, W
$081F	$1803			BTFSC	STATUS, C
$0820	$0F75			INCFSZ	STACK_5, W
$0821	$07FA			ADDWF	STACK_10, F
$0822	$1803			BTFSC	STATUS, C
$0823	$0AFB			INCF	STACK_11, F
$0824	$1003			BCF	STATUS, C
$0825	$1FF0			BTFSS	STACK_0, 7
$0826	$282D			GOTO	$+7
$0827	$0874			MOVF	STACK_4, W
$0828	$07FA			ADDWF	STACK_10, F
$0829	$1803			BTFSC	STATUS, C
$082A	$0AFB			INCF	STACK_11, F
$082B	$0875			MOVF	STACK_5, W
$082C	$07FB			ADDWF	STACK_11, F
$082D	$0CFB			RRF	STACK_11, F
$082E	$0CFA			RRF	STACK_10, F
$082F	$0CF9			RRF	STACK_9, F
$0830	$0CF8			RRF	STACK_8, F
$0831	$1C03			BTFSS	STATUS, C
$0832	$2818			GOTO	$-26
$0833	$1C7D			BTFSS	STACK_13, 0
$0834	$2840			GOTO	$+12
$0835	$09FB			COMF	STACK_11, F
$0836	$09FA			COMF	STACK_10, F
$0837	$09F9			COMF	STACK_9, F
$0838	$09F8			COMF	STACK_8, F
$0839	$0AF8			INCF	STACK_8, F
$083A	$1903			BTFSC	STATUS, Z
$083B	$0AF9			INCF	STACK_9, F
$083C	$1903			BTFSC	STATUS, Z
$083D	$0AFA			INCF	STACK_10, F
$083E	$1903			BTFSC	STATUS, Z
$083F	$0AFB			INCF	STACK_11, F
$0840	$087B			MOVF	STACK_11, W
$0841	$00F3			MOVWF	STACK_3
$0842	$087A			MOVF	STACK_10, W
$0843	$00F2			MOVWF	STACK_2
$0844	$0879			MOVF	STACK_9, W
$0845	$00F1			MOVWF	STACK_1
$0846	$0878			MOVF	STACK_8, W
$0847	$00F0			MOVWF	STACK_0
$0848	$0000			NOP
$0849	$0008			RETURN
$0976	$	_SETIOV3224:
$0976	$1303			BCF	STATUS, RP1
$0977	$1283			BCF	STATUS, RP0
$0978	$147B			BSF	STACK_11, 0
$0979	$1FFB			BTFSS	STACK_11, 7
$097A	$2983			GOTO	SETIOV3224EEE
$097B	$01F2			CLRF	STACK_2
$097C	$1FFA			BTFSS	STACK_10, 7
$097D	$30FF			MOVLW	0xFF
$097E	$00F2			MOVWF	STACK_2
$097F	$00F1			MOVWF	STACK_1
$0980	$00F0			MOVWF	STACK_0
$0981	$0DFA			RLF	STACK_10, F
$0982	$0CF2			RRF	STACK_2, F
$0983	$	SETIOV3224EEE:
$0983	$30FF			MOVLW	0xFF
$0984	$0008			RETURN
$0967	$	_initport:
;lfr_pid_1.c,15 :: 		void initport()
;lfr_pid_1.c,17 :: 		ADCON1 =0x06;          //TURN OFF ADC AND CONFIGURE A AND E AS DIG I/O
$0967	$3006			MOVLW	6
$0968	$1303			BCF	STATUS, RP1
$0969	$1683			BSF	STATUS, RP0
$096A	$009F			MOVWF	ADCON1
;lfr_pid_1.c,18 :: 		PORTA = 0;             //CLEAR PORTA
$096B	$1283			BCF	STATUS, RP0
$096C	$0185			CLRF	PORTA, 1
;lfr_pid_1.c,19 :: 		PORTE = 0;             //CLEAR PORTE
$096D	$0189			CLRF	PORTE, 1
;lfr_pid_1.c,20 :: 		TRISA = 0x3F;          //INITIALIZE PORTA AS INPUT
$096E	$303F			MOVLW	63
$096F	$1683			BSF	STATUS, RP0
$0970	$0085			MOVWF	TRISA
;lfr_pid_1.c,21 :: 		TRISE = 0x03;          //INITIALIZE PORTE AS INPUT
$0971	$3003			MOVLW	3
$0972	$0089			MOVWF	TRISE
;lfr_pid_1.c,22 :: 		TRISD = 0x00;          //INITIALIZE PORTD AS OUTPUT
$0973	$0188			CLRF	TRISD, 1
;lfr_pid_1.c,23 :: 		TRISC = 0b00000000;    //INITIALIZE PORTC AS OUTPUT
$0974	$0187			CLRF	TRISC, 1
;lfr_pid_1.c,24 :: 		}
$0975	$0008			RETURN
$0918	$	_initpwm:
;lfr_pid_1.c,26 :: 		void initpwm()
;lfr_pid_1.c,28 :: 		PWM1_Init(5000);
$0918	$1303			BCF	STATUS, RP1
$0919	$1283			BCF	STATUS, RP0
$091A	$1012			BCF	T2CON, T2CKPS0
$091B	$1092			BCF	T2CON, T2CKPS1
$091C	$30C7			MOVLW	199
$091D	$1683			BSF	STATUS, RP0
$091E	$0092			MOVWF	PR2
$091F	$21CE			CALL	_PWM1_Init
;lfr_pid_1.c,29 :: 		PWM2_Init(5000);
$0920	$1012			BCF	T2CON, T2CKPS0
$0921	$1092			BCF	T2CON, T2CKPS1
$0922	$30C7			MOVLW	199
$0923	$1683			BSF	STATUS, RP0
$0924	$0092			MOVWF	PR2
$0925	$21C8			CALL	_PWM2_Init
;lfr_pid_1.c,30 :: 		Pwm1_Start();          //RIGHT MOTOR
$0926	$21B2			CALL	_PWM1_Start
;lfr_pid_1.c,31 :: 		Pwm2_Start();          //LEFT MOTOR
$0927	$21BA			CALL	_PWM2_Start
;lfr_pid_1.c,32 :: 		}
$0928	$0008			RETURN
$0624	$	_indicator:
;lfr_pid_1.c,59 :: 		void indicator()        //COPY THE SENSOR OUTPUT TO PORTD-INDICATOR
;lfr_pid_1.c,61 :: 		PORTD.F7 = PORTA.F0;
$0624	$3001			MOVLW	1
$0625	$1303			BCF	STATUS, RP1
$0626	$1283			BCF	STATUS, RP0
$0627	$0505			ANDWF	PORTA, 0
$0628	$00F0			MOVWF	STACK_0
$0629	$3000			MOVLW	0
$062A	$1870			BTFSC	STACK_0, 0
$062B	$3080			MOVLW	128
$062C	$0608			XORWF	PORTD, 0
$062D	$3980			ANDLW	128
$062E	$0688			XORWF	PORTD, 1
;lfr_pid_1.c,62 :: 		PORTD.F6 = PORTA.F1;
$062F	$3000			MOVLW	0
$0630	$1885			BTFSC	PORTA, 1
$0631	$3001			MOVLW	1
$0632	$00F1			MOVWF	STACK_1
$0633	$3000			MOVLW	0
$0634	$1871			BTFSC	STACK_1, 0
$0635	$3040			MOVLW	64
$0636	$0608			XORWF	PORTD, 0
$0637	$3940			ANDLW	64
$0638	$0688			XORWF	PORTD, 1
;lfr_pid_1.c,63 :: 		PORTD.F5 = PORTA.F2;
$0639	$3000			MOVLW	0
$063A	$1905			BTFSC	PORTA, 2
$063B	$3001			MOVLW	1
$063C	$00F1			MOVWF	STACK_1
$063D	$3000			MOVLW	0
$063E	$1871			BTFSC	STACK_1, 0
$063F	$3020			MOVLW	32
$0640	$0608			XORWF	PORTD, 0
$0641	$3920			ANDLW	32
$0642	$0688			XORWF	PORTD, 1
;lfr_pid_1.c,64 :: 		PORTD.F4 = PORTA.F3;
$0643	$3000			MOVLW	0
$0644	$1985			BTFSC	PORTA, 3
$0645	$3001			MOVLW	1
$0646	$00F1			MOVWF	STACK_1
$0647	$3000			MOVLW	0
$0648	$1871			BTFSC	STACK_1, 0
$0649	$3010			MOVLW	16
$064A	$0608			XORWF	PORTD, 0
$064B	$3910			ANDLW	16
$064C	$0688			XORWF	PORTD, 1
;lfr_pid_1.c,65 :: 		PORTD.F3 = PORTA.F4;
$064D	$3000			MOVLW	0
$064E	$1A05			BTFSC	PORTA, 4
$064F	$3001			MOVLW	1
$0650	$00F1			MOVWF	STACK_1
$0651	$3000			MOVLW	0
$0652	$1871			BTFSC	STACK_1, 0
$0653	$3008			MOVLW	8
$0654	$0608			XORWF	PORTD, 0
$0655	$3908			ANDLW	8
$0656	$0688			XORWF	PORTD, 1
;lfr_pid_1.c,66 :: 		PORTD.F2 = PORTA.F5;
$0657	$3000			MOVLW	0
$0658	$1A85			BTFSC	PORTA, 5
$0659	$3001			MOVLW	1
$065A	$00F1			MOVWF	STACK_1
$065B	$3000			MOVLW	0
$065C	$1871			BTFSC	STACK_1, 0
$065D	$3004			MOVLW	4
$065E	$0608			XORWF	PORTD, 0
$065F	$3904			ANDLW	4
$0660	$0688			XORWF	PORTD, 1
;lfr_pid_1.c,67 :: 		PORTD.F1 = PORTE.F0;
$0661	$3001			MOVLW	1
$0662	$0509			ANDWF	PORTE, 0
$0663	$00F0			MOVWF	STACK_0
$0664	$3000			MOVLW	0
$0665	$1870			BTFSC	STACK_0, 0
$0666	$3002			MOVLW	2
$0667	$0608			XORWF	PORTD, 0
$0668	$3902			ANDLW	2
$0669	$0688			XORWF	PORTD, 1
;lfr_pid_1.c,68 :: 		PORTD.F0 = PORTE.F1;
$066A	$3000			MOVLW	0
$066B	$1889			BTFSC	PORTE, 1
$066C	$3001			MOVLW	1
$066D	$00F1			MOVWF	STACK_1
$066E	$3000			MOVLW	0
$066F	$1871			BTFSC	STACK_1, 0
$0670	$3001			MOVLW	1
$0671	$0608			XORWF	PORTD, 0
$0672	$3901			ANDLW	1
$0673	$0688			XORWF	PORTD, 1
;lfr_pid_1.c,69 :: 		}
$0674	$0008			RETURN
$0290	$	_CalcError:
;lfr_pid_1.c,70 :: 		void CalcError()		   //calculates the current error
;lfr_pid_1.c,72 :: 		s1 = 0;
$0290	$1303			BCF	STATUS, RP1
$0291	$1283			BCF	STATUS, RP0
$0292	$01A1			CLRF	_s1
$0293	$01A2			CLRF	_s1+1
;lfr_pid_1.c,73 :: 		s2 = 0;
$0294	$01A3			CLRF	_s2
$0295	$01A4			CLRF	_s2+1
;lfr_pid_1.c,74 :: 		s3 = 0;
$0296	$01A5			CLRF	_s3
$0297	$01A6			CLRF	_s3+1
;lfr_pid_1.c,75 :: 		s4 = 0;
$0298	$01A7			CLRF	_s4
$0299	$01A8			CLRF	_s4+1
;lfr_pid_1.c,76 :: 		s5 = 0;
$029A	$01A9			CLRF	_s5
$029B	$01AA			CLRF	_s5+1
;lfr_pid_1.c,77 :: 		s6 = 0;
$029C	$01AB			CLRF	_s6
$029D	$01AC			CLRF	_s6+1
;lfr_pid_1.c,78 :: 		s7 = 0;
$029E	$01AD			CLRF	_s7
$029F	$01AE			CLRF	_s7+1
;lfr_pid_1.c,79 :: 		s8 = 0;
$02A0	$01AF			CLRF	_s8
$02A1	$01B0			CLRF	_s8+1
;lfr_pid_1.c,81 :: 		if(PORTA.F0)
$02A2	$1C05			BTFSS	PORTA, 0
$02A3	$2AAA			GOTO	L_CalcError_0
;lfr_pid_1.c,83 :: 		lastreading='r';
$02A4	$3072			MOVLW	114
$02A5	$00B1			MOVWF	_lastreading
;lfr_pid_1.c,84 :: 		s1 = 1;
$02A6	$3001			MOVLW	1
$02A7	$00A1			MOVWF	_s1
$02A8	$3000			MOVLW	0
$02A9	$00A2			MOVWF	_s1+1
;lfr_pid_1.c,85 :: 		}
$02AA	$	L_CalcError_0:
;lfr_pid_1.c,86 :: 		if(PORTA.F1)
$02AA	$1C85			BTFSS	PORTA, 1
$02AB	$2AB0			GOTO	L_CalcError_1
;lfr_pid_1.c,89 :: 		s2 = 1;
$02AC	$3001			MOVLW	1
$02AD	$00A3			MOVWF	_s2
$02AE	$3000			MOVLW	0
$02AF	$00A4			MOVWF	_s2+1
;lfr_pid_1.c,90 :: 		}
$02B0	$	L_CalcError_1:
;lfr_pid_1.c,91 :: 		if(PORTA.F2)
$02B0	$1D05			BTFSS	PORTA, 2
$02B1	$2AB6			GOTO	L_CalcError_2
;lfr_pid_1.c,93 :: 		s3 = 1;
$02B2	$3001			MOVLW	1
$02B3	$00A5			MOVWF	_s3
$02B4	$3000			MOVLW	0
$02B5	$00A6			MOVWF	_s3+1
;lfr_pid_1.c,94 :: 		}
$02B6	$	L_CalcError_2:
;lfr_pid_1.c,95 :: 		if(PORTA.F3)
$02B6	$1D85			BTFSS	PORTA, 3
$02B7	$2ABC			GOTO	L_CalcError_3
;lfr_pid_1.c,98 :: 		s4 = 1;
$02B8	$3001			MOVLW	1
$02B9	$00A7			MOVWF	_s4
$02BA	$3000			MOVLW	0
$02BB	$00A8			MOVWF	_s4+1
;lfr_pid_1.c,99 :: 		}
$02BC	$	L_CalcError_3:
;lfr_pid_1.c,100 :: 		if(PORTA.F4)
$02BC	$1E05			BTFSS	PORTA, 4
$02BD	$2AC2			GOTO	L_CalcError_4
;lfr_pid_1.c,102 :: 		s5 = 1;
$02BE	$3001			MOVLW	1
$02BF	$00A9			MOVWF	_s5
$02C0	$3000			MOVLW	0
$02C1	$00AA			MOVWF	_s5+1
;lfr_pid_1.c,103 :: 		}
$02C2	$	L_CalcError_4:
;lfr_pid_1.c,104 :: 		if(PORTA.F5)
$02C2	$1E85			BTFSS	PORTA, 5
$02C3	$2AC8			GOTO	L_CalcError_5
;lfr_pid_1.c,106 :: 		s6 = 1;
$02C4	$3001			MOVLW	1
$02C5	$00AB			MOVWF	_s6
$02C6	$3000			MOVLW	0
$02C7	$00AC			MOVWF	_s6+1
$02C8	$	L_CalcError_5:
;lfr_pid_1.c,107 :: 		if(PORTE.F0)
$02C8	$1C09			BTFSS	PORTE, 0
$02C9	$2ACE			GOTO	L_CalcError_6
;lfr_pid_1.c,110 :: 		s7 = 1;
$02CA	$3001			MOVLW	1
$02CB	$00AD			MOVWF	_s7
$02CC	$3000			MOVLW	0
$02CD	$00AE			MOVWF	_s7+1
;lfr_pid_1.c,111 :: 		}
$02CE	$	L_CalcError_6:
;lfr_pid_1.c,112 :: 		if(PORTE.F1)
$02CE	$1C89			BTFSS	PORTE, 1
$02CF	$2AD6			GOTO	L_CalcError_7
;lfr_pid_1.c,114 :: 		lastreading='l';
$02D0	$306C			MOVLW	108
$02D1	$00B1			MOVWF	_lastreading
;lfr_pid_1.c,115 :: 		s8 = 1;
$02D2	$3001			MOVLW	1
$02D3	$00AF			MOVWF	_s8
$02D4	$3000			MOVLW	0
$02D5	$00B0			MOVWF	_s8+1
;lfr_pid_1.c,116 :: 		}
$02D6	$	L_CalcError_7:
;lfr_pid_1.c,117 :: 		if(( ((s4+s5) == 2 || (s3+s4)==2 ||(s5+s6)== 2) )&& (s1+s8)==0)
$02D6	$0829			MOVF	_s5, 0
$02D7	$0727			ADDWF	_s4, 0
$02D8	$00F4			MOVWF	STACK_4
$02D9	$0828			MOVF	_s4+1, 0
$02DA	$1803			BTFSC	STATUS, C
$02DB	$3F01			ADDLW	1
$02DC	$072A			ADDWF	_s5+1, 0
$02DD	$00F5			MOVWF	STACK_4+1
$02DE	$3000			MOVLW	0
$02DF	$0675			XORWF	STACK_4+1, 0
$02E0	$1D03			BTFSS	STATUS, Z
$02E1	$2AE4			GOTO	L_CalcError_27
$02E2	$3002			MOVLW	2
$02E3	$0674			XORWF	STACK_4, 0
$02E4	$	L_CalcError_27:
$02E4	$1903			BTFSC	STATUS, Z
$02E5	$2B06			GOTO	L118_ex_L_CalcError_12
$02E6	$0827			MOVF	_s4, 0
$02E7	$0725			ADDWF	_s3, 0
$02E8	$00F4			MOVWF	STACK_4
$02E9	$0826			MOVF	_s3+1, 0
$02EA	$1803			BTFSC	STATUS, C
$02EB	$3F01			ADDLW	1
$02EC	$0728			ADDWF	_s4+1, 0
$02ED	$00F5			MOVWF	STACK_4+1
$02EE	$3000			MOVLW	0
$02EF	$0675			XORWF	STACK_4+1, 0
$02F0	$1D03			BTFSS	STATUS, Z
$02F1	$2AF4			GOTO	L_CalcError_28
$02F2	$3002			MOVLW	2
$02F3	$0674			XORWF	STACK_4, 0
$02F4	$	L_CalcError_28:
$02F4	$1903			BTFSC	STATUS, Z
$02F5	$2B06			GOTO	L118_ex_L_CalcError_12
$02F6	$082B			MOVF	_s6, 0
$02F7	$0729			ADDWF	_s5, 0
$02F8	$00F4			MOVWF	STACK_4
$02F9	$082A			MOVF	_s5+1, 0
$02FA	$1803			BTFSC	STATUS, C
$02FB	$3F01			ADDLW	1
$02FC	$072C			ADDWF	_s6+1, 0
$02FD	$00F5			MOVWF	STACK_4+1
$02FE	$3000			MOVLW	0
$02FF	$0675			XORWF	STACK_4+1, 0
$0300	$1D03			BTFSS	STATUS, Z
$0301	$2B04			GOTO	L_CalcError_29
$0302	$3002			MOVLW	2
$0303	$0674			XORWF	STACK_4, 0
$0304	$	L_CalcError_29:
$0304	$1D03			BTFSS	STATUS, Z
$0305	$2B18			GOTO	L_CalcError_12
$0306	$	L118_ex_L_CalcError_12:
$0306	$082F			MOVF	_s8, 0
$0307	$0721			ADDWF	_s1, 0
$0308	$00F4			MOVWF	STACK_4
$0309	$0822			MOVF	_s1+1, 0
$030A	$1803			BTFSC	STATUS, C
$030B	$3F01			ADDLW	1
$030C	$0730			ADDWF	_s8+1, 0
$030D	$00F5			MOVWF	STACK_4+1
$030E	$3000			MOVLW	0
$030F	$0675			XORWF	STACK_4+1, 0
$0310	$1D03			BTFSS	STATUS, Z
$0311	$2B14			GOTO	L_CalcError_30
$0312	$3000			MOVLW	0
$0313	$0674			XORWF	STACK_4, 0
$0314	$	L_CalcError_30:
$0314	$1D03			BTFSS	STATUS, Z
$0315	$2B18			GOTO	L_CalcError_12
$0316	$	L128_ex_L_CalcError_12:
;lfr_pid_1.c,119 :: 		lastreading='u';
$0316	$3075			MOVLW	117
$0317	$00B1			MOVWF	_lastreading
;lfr_pid_1.c,120 :: 		}
$0318	$	L_CalcError_12:
;lfr_pid_1.c,121 :: 		perror = error;
$0318	$0836			MOVF	_error, 0
$0319	$00B2			MOVWF	_perror
$031A	$0837			MOVF	_error+1, 0
$031B	$00B3			MOVWF	_perror+1
$031C	$0838			MOVF	_error+2, 0
$031D	$00B4			MOVWF	_perror+2
$031E	$0839			MOVF	_error+3, 0
$031F	$00B5			MOVWF	_perror+3
;lfr_pid_1.c,123 :: 		error = (s1 * 1) + (s2 * 2) + (s3 * 3) + (s4 * 4) + (s5 * 5) + (s6 * 6) +(s7 * 7) + (s8*8);
$0320	$3001			MOVLW	1
$0321	$00F4			MOVWF	STACK_4
$0322	$0823			MOVF	_s2, 0
$0323	$00F0			MOVWF	STACK_0
$0324	$0824			MOVF	_s2+1, 0
$0325	$00F1			MOVWF	STACK_0+1
$0326	$0874			MOVF	STACK_4, 0
$0327	$	L_CalcError_31:
$0327	$1903			BTFSC	STATUS, Z
$0328	$2B2E			GOTO	L_CalcError_32
$0329	$0DF0			RLF	STACK_0, 1
$032A	$0DF1			RLF	STACK_0+1, 1
$032B	$1070			BCF	STACK_0, 0
$032C	$3FFF			ADDLW	255
$032D	$2B27			GOTO	L_CalcError_31
$032E	$	L_CalcError_32:
$032E	$0870			MOVF	STACK_0, 0
$032F	$0721			ADDWF	_s1, 0
$0330	$00E2			MOVWF	FLOC_CalcError+0
$0331	$0822			MOVF	_s1+1, 0
$0332	$1803			BTFSC	STATUS, C
$0333	$3F01			ADDLW	1
$0334	$0771			ADDWF	STACK_0+1, 0
$0335	$00E3			MOVWF	FLOC_CalcError+1
$0336	$0825			MOVF	_s3, 0
$0337	$00F0			MOVWF	STACK_0
$0338	$0826			MOVF	_s3+1, 0
$0339	$00F1			MOVWF	STACK_0+1
$033A	$3003			MOVLW	3
$033B	$00F4			MOVWF	STACK_4
$033C	$3000			MOVLW	0
$033D	$00F5			MOVWF	STACK_4+1
$033E	$158A			BSF	PCLATH, 3
$033F	$20ED			CALL	_mul_16x16_u
$0340	$118A			BCF	PCLATH, 3
$0341	$0870			MOVF	STACK_0, 0
$0342	$07E2			ADDWF	FLOC_CalcError+0, 1
$0343	$0871			MOVF	STACK_0+1, 0
$0344	$1803			BTFSC	STATUS, C
$0345	$3F01			ADDLW	1
$0346	$07E3			ADDWF	FLOC_CalcError+1, 1
$0347	$3002			MOVLW	2
$0348	$00F4			MOVWF	STACK_4
$0349	$0827			MOVF	_s4, 0
$034A	$00F0			MOVWF	STACK_0
$034B	$0828			MOVF	_s4+1, 0
$034C	$00F1			MOVWF	STACK_0+1
$034D	$0874			MOVF	STACK_4, 0
$034E	$	L_CalcError_33:
$034E	$1903			BTFSC	STATUS, Z
$034F	$2B55			GOTO	L_CalcError_34
$0350	$0DF0			RLF	STACK_0, 1
$0351	$0DF1			RLF	STACK_0+1, 1
$0352	$1070			BCF	STACK_0, 0
$0353	$3FFF			ADDLW	255
$0354	$2B4E			GOTO	L_CalcError_33
$0355	$	L_CalcError_34:
$0355	$0870			MOVF	STACK_0, 0
$0356	$07E2			ADDWF	FLOC_CalcError+0, 1
$0357	$0871			MOVF	STACK_0+1, 0
$0358	$1803			BTFSC	STATUS, C
$0359	$3F01			ADDLW	1
$035A	$07E3			ADDWF	FLOC_CalcError+1, 1
$035B	$0829			MOVF	_s5, 0
$035C	$00F0			MOVWF	STACK_0
$035D	$082A			MOVF	_s5+1, 0
$035E	$00F1			MOVWF	STACK_0+1
$035F	$3005			MOVLW	5
$0360	$00F4			MOVWF	STACK_4
$0361	$3000			MOVLW	0
$0362	$00F5			MOVWF	STACK_4+1
$0363	$158A			BSF	PCLATH, 3
$0364	$20ED			CALL	_mul_16x16_u
$0365	$118A			BCF	PCLATH, 3
$0366	$0870			MOVF	STACK_0, 0
$0367	$07E2			ADDWF	FLOC_CalcError+0, 1
$0368	$0871			MOVF	STACK_0+1, 0
$0369	$1803			BTFSC	STATUS, C
$036A	$3F01			ADDLW	1
$036B	$07E3			ADDWF	FLOC_CalcError+1, 1
$036C	$082B			MOVF	_s6, 0
$036D	$00F0			MOVWF	STACK_0
$036E	$082C			MOVF	_s6+1, 0
$036F	$00F1			MOVWF	STACK_0+1
$0370	$3006			MOVLW	6
$0371	$00F4			MOVWF	STACK_4
$0372	$3000			MOVLW	0
$0373	$00F5			MOVWF	STACK_4+1
$0374	$158A			BSF	PCLATH, 3
$0375	$20ED			CALL	_mul_16x16_u
$0376	$118A			BCF	PCLATH, 3
$0377	$0870			MOVF	STACK_0, 0
$0378	$07E2			ADDWF	FLOC_CalcError+0, 1
$0379	$0871			MOVF	STACK_0+1, 0
$037A	$1803			BTFSC	STATUS, C
$037B	$3F01			ADDLW	1
$037C	$07E3			ADDWF	FLOC_CalcError+1, 1
$037D	$082D			MOVF	_s7, 0
$037E	$00F0			MOVWF	STACK_0
$037F	$082E			MOVF	_s7+1, 0
$0380	$00F1			MOVWF	STACK_0+1
$0381	$3007			MOVLW	7
$0382	$00F4			MOVWF	STACK_4
$0383	$3000			MOVLW	0
$0384	$00F5			MOVWF	STACK_4+1
$0385	$158A			BSF	PCLATH, 3
$0386	$20ED			CALL	_mul_16x16_u
$0387	$118A			BCF	PCLATH, 3
$0388	$0870			MOVF	STACK_0, 0
$0389	$07E2			ADDWF	FLOC_CalcError+0, 1
$038A	$0871			MOVF	STACK_0+1, 0
$038B	$1803			BTFSC	STATUS, C
$038C	$3F01			ADDLW	1
$038D	$07E3			ADDWF	FLOC_CalcError+1, 1
$038E	$3003			MOVLW	3
$038F	$00F4			MOVWF	STACK_4
$0390	$082F			MOVF	_s8, 0
$0391	$00F0			MOVWF	STACK_0
$0392	$0830			MOVF	_s8+1, 0
$0393	$00F1			MOVWF	STACK_0+1
$0394	$0874			MOVF	STACK_4, 0
$0395	$	L_CalcError_35:
$0395	$1903			BTFSC	STATUS, Z
$0396	$2B9C			GOTO	L_CalcError_36
$0397	$0DF0			RLF	STACK_0, 1
$0398	$0DF1			RLF	STACK_0+1, 1
$0399	$1070			BCF	STACK_0, 0
$039A	$3FFF			ADDLW	255
$039B	$2B95			GOTO	L_CalcError_35
$039C	$	L_CalcError_36:
$039C	$0862			MOVF	FLOC_CalcError+0, 0
$039D	$07F0			ADDWF	STACK_0, 1
$039E	$0863			MOVF	FLOC_CalcError+1, 0
$039F	$1803			BTFSC	STATUS, C
$03A0	$3F01			ADDLW	1
$03A1	$07F1			ADDWF	STACK_0+1, 1
$03A2	$158A			BSF	PCLATH, 3
$03A3	$2129			CALL	_word2double
$03A4	$118A			BCF	PCLATH, 3
$03A5	$0870			MOVF	STACK_0, 0
$03A6	$00E2			MOVWF	FLOC_CalcError+0
$03A7	$0871			MOVF	STACK_0+1, 0
$03A8	$00E3			MOVWF	FLOC_CalcError+1
$03A9	$0872			MOVF	STACK_0+2, 0
$03AA	$00E4			MOVWF	FLOC_CalcError+2
$03AB	$0873			MOVF	STACK_0+3, 0
$03AC	$00E5			MOVWF	FLOC_CalcError+3
$03AD	$0862			MOVF	FLOC_CalcError+0, 0
$03AE	$00B6			MOVWF	_error
$03AF	$0863			MOVF	FLOC_CalcError+1, 0
$03B0	$00B7			MOVWF	_error+1
$03B1	$0864			MOVF	FLOC_CalcError+2, 0
$03B2	$00B8			MOVWF	_error+2
$03B3	$0865			MOVF	FLOC_CalcError+3, 0
$03B4	$00B9			MOVWF	_error+3
;lfr_pid_1.c,124 :: 		error = (error)/(s1+s2+s3+s4+s5+s6+s7+s8);
$03B5	$0823			MOVF	_s2, 0
$03B6	$0721			ADDWF	_s1, 0
$03B7	$00F0			MOVWF	STACK_0
$03B8	$0822			MOVF	_s1+1, 0
$03B9	$1803			BTFSC	STATUS, C
$03BA	$3F01			ADDLW	1
$03BB	$0724			ADDWF	_s2+1, 0
$03BC	$00F1			MOVWF	STACK_0+1
$03BD	$0825			MOVF	_s3, 0
$03BE	$07F0			ADDWF	STACK_0, 1
$03BF	$0826			MOVF	_s3+1, 0
$03C0	$1803			BTFSC	STATUS, C
$03C1	$3F01			ADDLW	1
$03C2	$07F1			ADDWF	STACK_0+1, 1
$03C3	$0827			MOVF	_s4, 0
$03C4	$07F0			ADDWF	STACK_0, 1
$03C5	$0828			MOVF	_s4+1, 0
$03C6	$1803			BTFSC	STATUS, C
$03C7	$3F01			ADDLW	1
$03C8	$07F1			ADDWF	STACK_0+1, 1
$03C9	$0829			MOVF	_s5, 0
$03CA	$07F0			ADDWF	STACK_0, 1
$03CB	$082A			MOVF	_s5+1, 0
$03CC	$1803			BTFSC	STATUS, C
$03CD	$3F01			ADDLW	1
$03CE	$07F1			ADDWF	STACK_0+1, 1
$03CF	$082B			MOVF	_s6, 0
$03D0	$07F0			ADDWF	STACK_0, 1
$03D1	$082C			MOVF	_s6+1, 0
$03D2	$1803			BTFSC	STATUS, C
$03D3	$3F01			ADDLW	1
$03D4	$07F1			ADDWF	STACK_0+1, 1
$03D5	$082D			MOVF	_s7, 0
$03D6	$07F0			ADDWF	STACK_0, 1
$03D7	$082E			MOVF	_s7+1, 0
$03D8	$1803			BTFSC	STATUS, C
$03D9	$3F01			ADDLW	1
$03DA	$07F1			ADDWF	STACK_0+1, 1
$03DB	$082F			MOVF	_s8, 0
$03DC	$07F0			ADDWF	STACK_0, 1
$03DD	$0830			MOVF	_s8+1, 0
$03DE	$1803			BTFSC	STATUS, C
$03DF	$3F01			ADDLW	1
$03E0	$07F1			ADDWF	STACK_0+1, 1
$03E1	$158A			BSF	PCLATH, 3
$03E2	$2129			CALL	_word2double
$03E3	$118A			BCF	PCLATH, 3
$03E4	$0870			MOVF	STACK_0, 0
$03E5	$00F4			MOVWF	STACK_4
$03E6	$0871			MOVF	STACK_0+1, 0
$03E7	$00F5			MOVWF	STACK_4+1
$03E8	$0872			MOVF	STACK_0+2, 0
$03E9	$00F6			MOVWF	STACK_4+2
$03EA	$0873			MOVF	STACK_0+3, 0
$03EB	$00F7			MOVWF	STACK_4+3
$03EC	$0862			MOVF	FLOC_CalcError+0, 0
$03ED	$00F0			MOVWF	STACK_0
$03EE	$0863			MOVF	FLOC_CalcError+1, 0
$03EF	$00F1			MOVWF	STACK_0+1
$03F0	$0864			MOVF	FLOC_CalcError+2, 0
$03F1	$00F2			MOVWF	STACK_0+2
$03F2	$0865			MOVF	FLOC_CalcError+3, 0
$03F3	$00F3			MOVWF	STACK_0+3
$03F4	$24B5			CALL	_div_32x32_fp
$03F5	$0870			MOVF	STACK_0, 0
$03F6	$00B6			MOVWF	_error
$03F7	$0871			MOVF	STACK_0+1, 0
$03F8	$00B7			MOVWF	_error+1
$03F9	$0872			MOVF	STACK_0+2, 0
$03FA	$00B8			MOVWF	_error+2
$03FB	$0873			MOVF	STACK_0+3, 0
$03FC	$00B9			MOVWF	_error+3
;lfr_pid_1.c,125 :: 		error = error - 4.5;
$03FD	$3000			MOVLW	0
$03FE	$00F4			MOVWF	STACK_4
$03FF	$3000			MOVLW	0
$0400	$00F5			MOVWF	STACK_4+1
$0401	$3010			MOVLW	16
$0402	$00F6			MOVWF	STACK_4+2
$0403	$3081			MOVLW	129
$0404	$00F7			MOVWF	STACK_4+3
$0405	$158A			BSF	PCLATH, 3
$0406	$21A1			CALL	_sub_32x32_fp
$0407	$118A			BCF	PCLATH, 3
$0408	$0870			MOVF	STACK_0, 0
$0409	$00B6			MOVWF	_error
$040A	$0871			MOVF	STACK_0+1, 0
$040B	$00B7			MOVWF	_error+1
$040C	$0872			MOVF	STACK_0+2, 0
$040D	$00B8			MOVWF	_error+2
$040E	$0873			MOVF	STACK_0+3, 0
$040F	$00B9			MOVWF	_error+3
;lfr_pid_1.c,126 :: 		}
$0410	$0008			RETURN
$09DE	$	_motor_LF:
;lfr_pid_1.c,46 :: 		void motor_LF()         //LEFT MOTOR FWD DIR
;lfr_pid_1.c,48 :: 		PORTC.F5 = 1;
$09DE	$1303			BCF	STATUS, RP1
$09DF	$1283			BCF	STATUS, RP0
$09E0	$1687			BSF	PORTC, 5
;lfr_pid_1.c,49 :: 		PORTC.F4 = 0;
$09E1	$1207			BCF	PORTC, 4
;lfr_pid_1.c,50 :: 		}
$09E2	$0008			RETURN
$09D9	$	_motor_RF:
;lfr_pid_1.c,34 :: 		void motor_RF()         //RIGHT MOTOR FWD DIR
;lfr_pid_1.c,36 :: 		PORTC.F7 = 1;
$09D9	$1303			BCF	STATUS, RP1
$09DA	$1283			BCF	STATUS, RP0
$09DB	$1787			BSF	PORTC, 7
;lfr_pid_1.c,37 :: 		PORTC.F6 = 0;
$09DC	$1307			BCF	PORTC, 6
;lfr_pid_1.c,38 :: 		}
$09DD	$0008			RETURN
$08B4	$	_PWM1_Change_Duty:
$08B4	$1303			BCF	STATUS, RP1
$08B5	$1683			BSF	STATUS, RP0
$08B6	$0812			MOVF	PR2, 0
$08B7	$3F01			ADDLW	1
$08B8	$00F0			MOVWF	STACK_0
$08B9	$01F1			CLRF	STACK_0+1
$08BA	$1803			BTFSC	STATUS, C
$08BB	$0AF1			INCF	STACK_0+1, 1
$08BC	$1283			BCF	STATUS, RP0
$08BD	$0862			MOVF	FARG_PWM1_Change_Duty+0, 0
$08BE	$00F4			MOVWF	STACK_4
$08BF	$01F5			CLRF	STACK_4+1
$08C0	$2000			CALL	_mul_16x16_s
$08C1	$3006			MOVLW	6
$08C2	$00F2			MOVWF	STACK_2
$08C3	$0870			MOVF	STACK_0, 0
$08C4	$00F4			MOVWF	STACK_4
$08C5	$0871			MOVF	STACK_0+1, 0
$08C6	$00F5			MOVWF	STACK_4+1
$08C7	$0872			MOVF	STACK_2, 0
$08C8	$	L_PWM1_Change_Duty_2:
$08C8	$1903			BTFSC	STATUS, Z
$08C9	$28CF			GOTO	L_PWM1_Change_Duty_3
$08CA	$0CF5			RRF	STACK_4+1, 1
$08CB	$0CF4			RRF	STACK_4, 1
$08CC	$13F5			BCF	STACK_4+1, 7
$08CD	$3FFF			ADDLW	255
$08CE	$28C8			GOTO	L_PWM1_Change_Duty_2
$08CF	$	L_PWM1_Change_Duty_3:
$08CF	$0874			MOVF	STACK_4, 0
$08D0	$00F0			MOVWF	STACK_0
$08D1	$0DF0			RLF	STACK_0, 1
$08D2	$1070			BCF	STACK_0, 0
$08D3	$0DF0			RLF	STACK_0, 1
$08D4	$1070			BCF	STACK_0, 0
$08D5	$0DF0			RLF	STACK_0, 1
$08D6	$1070			BCF	STACK_0, 0
$08D7	$0DF0			RLF	STACK_0, 1
$08D8	$1070			BCF	STACK_0, 0
$08D9	$3030			MOVLW	48
$08DA	$0570			ANDWF	STACK_0, 0
$08DB	$00F3			MOVWF	STACK_3
$08DC	$0874			MOVF	STACK_4, 0
$08DD	$00F0			MOVWF	STACK_0
$08DE	$0875			MOVF	STACK_4+1, 0
$08DF	$00F1			MOVWF	STACK_0+1
$08E0	$0CF1			RRF	STACK_0+1, 1
$08E1	$0CF0			RRF	STACK_0, 1
$08E2	$13F1			BCF	STACK_0+1, 7
$08E3	$0CF1			RRF	STACK_0+1, 1
$08E4	$0CF0			RRF	STACK_0, 1
$08E5	$13F1			BCF	STACK_0+1, 7
$08E6	$0870			MOVF	STACK_0, 0
$08E7	$0095			MOVWF	CCPR1L
$08E8	$300F			MOVLW	15
$08E9	$0597			ANDWF	CCP1CON, 1
$08EA	$0873			MOVF	STACK_3, 0
$08EB	$0497			IORWF	CCP1CON, 1
$08EC	$0008			RETURN
$084A	$	_PWM2_Change_Duty:
$084A	$1303			BCF	STATUS, RP1
$084B	$1683			BSF	STATUS, RP0
$084C	$0812			MOVF	PR2, 0
$084D	$3F01			ADDLW	1
$084E	$00F0			MOVWF	STACK_0
$084F	$01F1			CLRF	STACK_0+1
$0850	$1803			BTFSC	STATUS, C
$0851	$0AF1			INCF	STACK_0+1, 1
$0852	$1283			BCF	STATUS, RP0
$0853	$0862			MOVF	FARG_PWM2_Change_Duty+0, 0
$0854	$00F4			MOVWF	STACK_4
$0855	$01F5			CLRF	STACK_4+1
$0856	$2000			CALL	_mul_16x16_s
$0857	$3006			MOVLW	6
$0858	$00F2			MOVWF	STACK_2
$0859	$0870			MOVF	STACK_0, 0
$085A	$00F4			MOVWF	STACK_4
$085B	$0871			MOVF	STACK_0+1, 0
$085C	$00F5			MOVWF	STACK_4+1
$085D	$0872			MOVF	STACK_2, 0
$085E	$	L_PWM2_Change_Duty_0:
$085E	$1903			BTFSC	STATUS, Z
$085F	$2865			GOTO	L_PWM2_Change_Duty_1
$0860	$0CF5			RRF	STACK_4+1, 1
$0861	$0CF4			RRF	STACK_4, 1
$0862	$13F5			BCF	STACK_4+1, 7
$0863	$3FFF			ADDLW	255
$0864	$285E			GOTO	L_PWM2_Change_Duty_0
$0865	$	L_PWM2_Change_Duty_1:
$0865	$0874			MOVF	STACK_4, 0
$0866	$00F0			MOVWF	STACK_0
$0867	$0DF0			RLF	STACK_0, 1
$0868	$1070			BCF	STACK_0, 0
$0869	$0DF0			RLF	STACK_0, 1
$086A	$1070			BCF	STACK_0, 0
$086B	$0DF0			RLF	STACK_0, 1
$086C	$1070			BCF	STACK_0, 0
$086D	$0DF0			RLF	STACK_0, 1
$086E	$1070			BCF	STACK_0, 0
$086F	$3030			MOVLW	48
$0870	$0570			ANDWF	STACK_0, 0
$0871	$00F3			MOVWF	STACK_3
$0872	$0874			MOVF	STACK_4, 0
$0873	$00F0			MOVWF	STACK_0
$0874	$0875			MOVF	STACK_4+1, 0
$0875	$00F1			MOVWF	STACK_0+1
$0876	$0CF1			RRF	STACK_0+1, 1
$0877	$0CF0			RRF	STACK_0, 1
$0878	$13F1			BCF	STACK_0+1, 7
$0879	$0CF1			RRF	STACK_0+1, 1
$087A	$0CF0			RRF	STACK_0, 1
$087B	$13F1			BCF	STACK_0+1, 7
$087C	$0870			MOVF	STACK_0, 0
$087D	$009B			MOVWF	CCPR2L
$087E	$300F			MOVLW	15
$087F	$059D			ANDWF	CCP2CON, 1
$0880	$0873			MOVF	STACK_3, 0
$0881	$049D			IORWF	CCP2CON, 1
$0882	$0008			RETURN
$09E3	$	_motor_RB:
;lfr_pid_1.c,40 :: 		void motor_RB()         //RIGHT MOTOR REV DIR
;lfr_pid_1.c,42 :: 		PORTC.F7 = 0;
$09E3	$1303			BCF	STATUS, RP1
$09E4	$1283			BCF	STATUS, RP0
$09E5	$1387			BCF	PORTC, 7
;lfr_pid_1.c,43 :: 		PORTC.F6 = 1;
$09E6	$1707			BSF	PORTC, 6
;lfr_pid_1.c,44 :: 		}
$09E7	$0008			RETURN
$09D4	$	_motor_LB:
;lfr_pid_1.c,52 :: 		void motor_LB()         //LEFT MOTOR REV DIR
;lfr_pid_1.c,54 :: 		PORTC.F5 = 0;
$09D4	$1303			BCF	STATUS, RP1
$09D5	$1283			BCF	STATUS, RP0
$09D6	$1287			BCF	PORTC, 5
;lfr_pid_1.c,55 :: 		PORTC.F4 = 1;
$09D7	$1607			BSF	PORTC, 4
;lfr_pid_1.c,56 :: 		}
$09D8	$0008			RETURN
$06C5	$	GlobalInilfr_pid_1:
$06C5	$3078			MOVLW	120
$06C6	$1303			BCF	STATUS, RP1
$06C7	$1283			BCF	STATUS, RP0
$06C8	$00BA			MOVWF	_basespeed+0
$06C9	$3050			MOVLW	80
$06CA	$00BB			MOVWF	_Kp+0
$06CB	$3014			MOVLW	20
$06CC	$00BC			MOVWF	_Ki+0
$06CD	$300A			MOVLW	10
$06CE	$00BD			MOVWF	_Kd+0
$06CF	$3000			MOVLW	0
$06D0	$00BE			MOVWF	_rightpulse+0
$06D1	$3000			MOVLW	0
$06D2	$00BF			MOVWF	_rightpulse+1
$06D3	$3000			MOVLW	0
$06D4	$00C0			MOVWF	_rightpulse+2
$06D5	$3000			MOVLW	0
$06D6	$00C1			MOVWF	_rightpulse+3
$06D7	$3000			MOVLW	0
$06D8	$00C2			MOVWF	_leftpulse+0
$06D9	$3000			MOVLW	0
$06DA	$00C3			MOVWF	_leftpulse+1
$06DB	$3000			MOVLW	0
$06DC	$00C4			MOVWF	_leftpulse+2
$06DD	$3000			MOVLW	0
$06DE	$00C5			MOVWF	_leftpulse+3
$06DF	$3000			MOVLW	0
$06E0	$00B2			MOVWF	_perror+0
$06E1	$3000			MOVLW	0
$06E2	$00B3			MOVWF	_perror+1
$06E3	$3000			MOVLW	0
$06E4	$00B4			MOVWF	_perror+2
$06E5	$3000			MOVLW	0
$06E6	$00B5			MOVWF	_perror+3
$06E7	$3000			MOVLW	0
$06E8	$00B6			MOVWF	_error+0
$06E9	$3000			MOVLW	0
$06EA	$00B7			MOVWF	_error+1
$06EB	$3000			MOVLW	0
$06EC	$00B8			MOVWF	_error+2
$06ED	$3000			MOVLW	0
$06EE	$00B9			MOVWF	_error+3
$06EF	$3000			MOVLW	0
$06F0	$00C6			MOVWF	_PROPORTIONAL+0
$06F1	$3000			MOVLW	0
$06F2	$00C7			MOVWF	_PROPORTIONAL+1
$06F3	$3000			MOVLW	0
$06F4	$00C8			MOVWF	_PROPORTIONAL+2
$06F5	$3000			MOVLW	0
$06F6	$00C9			MOVWF	_PROPORTIONAL+3
$06F7	$3000			MOVLW	0
$06F8	$00CA			MOVWF	_INTEGRAL+0
$06F9	$3000			MOVLW	0
$06FA	$00CB			MOVWF	_INTEGRAL+1
$06FB	$3000			MOVLW	0
$06FC	$00CC			MOVWF	_INTEGRAL+2
$06FD	$3000			MOVLW	0
$06FE	$00CD			MOVWF	_INTEGRAL+3
$06FF	$3000			MOVLW	0
$0700	$00CE			MOVWF	_DERIVATIVE+0
$0701	$3000			MOVLW	0
$0702	$00CF			MOVWF	_DERIVATIVE+1
$0703	$3000			MOVLW	0
$0704	$00D0			MOVWF	_DERIVATIVE+2
$0705	$3000			MOVLW	0
$0706	$00D1			MOVWF	_DERIVATIVE+3
$0707	$3000			MOVLW	0
$0708	$00D2			MOVWF	_correction+0
$0709	$3000			MOVLW	0
$070A	$00D3			MOVWF	_correction+1
$070B	$3000			MOVLW	0
$070C	$00D4			MOVWF	_correction+2
$070D	$3000			MOVLW	0
$070E	$00D5			MOVWF	_correction+3
$070F	$0008			RETURN
$093F	$	_Equals_Double:
$093F	$1303			BCF	STATUS, RP1
$0940	$1283			BCF	STATUS, RP0
$0941	$0873			MOVF	STACK_3, W
$0942	$0677			XORWF	STACK_7, W
$0943	$1D03			BTFSS	STATUS, Z
$0944	$2952			GOTO	EQU_FALSE
$0945	$0872			MOVF	STACK_2, W
$0946	$0676			XORWF	STACK_6, W
$0947	$1D03			BTFSS	STATUS, Z
$0948	$2952			GOTO	EQU_FALSE
$0949	$0871			MOVF	STACK_1, W
$094A	$0675			XORWF	STACK_5, W
$094B	$1D03			BTFSS	STATUS, Z
$094C	$2952			GOTO	EQU_FALSE
$094D	$0870			MOVF	STACK_0, W
$094E	$0674			XORWF	STACK_4, W
$094F	$1903			BTFSC	STATUS, Z
$0950	$1503			BSF	STATUS, Z
$0951	$0008			RETURN
$0952	$	EQU_FALSE:
$0952	$1103			BCF	STATUS, Z
$0953	$0008			RETURN
$0954	$0008			RETURN
$0955	$	_Byte2Double:
$0955	$1303			BCF	STATUS, RP1
$0956	$1283			BCF	STATUS, RP0
$0957	$	FLO08U32:
$0957	$0870			MOVF	STACK_0, W
$0958	$00F8			MOVWF	STACK_8
$0959	$01FB			CLRF	STACK_11
$095A	$01FC			CLRF	STACK_12
$095B	$309E			MOVLW	0x9E
$095C	$00F3			MOVWF	STACK_3
$095D	$01FA			CLRF	STACK_10
$095E	$01F2			CLRF	STACK_2
$095F	$01F1			CLRF	STACK_1
$0960	$01F0			CLRF	STACK_0
$0961	$3002			MOVLW	0x02
$0962	$00FC			MOVWF	STACK_12
$0963	$118A			BCF	PCLATH, 3
$0964	$25C0			CALL	_NRM4032
$0965	$158A			BSF	PCLATH, 3
$0966	$0008			RETURN
$0559	$	_Mul_32x32_FP:
$0559	$1303			BCF	STATUS, RP1
$055A	$1283			BCF	STATUS, RP0
$055B	$	FPM32:
$055B	$01FB			CLRF	STACK_11
$055C	$0873			MOVF	STACK_3, W
$055D	$1D03			BTFSS	STATUS, Z
$055E	$0877			MOVF	STACK_7, W
$055F	$1903			BTFSC	STATUS, Z
$0560	$2DB0			GOTO	JPMRES032
$0561	$	M32BNE0:
$0561	$0872			MOVF	STACK_2, W
$0562	$0676			XORWF	STACK_6, W
$0563	$00FA			MOVWF	STACK_10
$0564	$0877			MOVF	STACK_7, W
$0565	$07F3			ADDWF	STACK_3, F
$0566	$307E			MOVLW	126
$0567	$1C03			BTFSS	STATUS, C
$0568	$2D6D			GOTO	MTUN32
$0569	$02F3			SUBWF	STACK_3, F
$056A	$1803			BTFSC	STATUS, C
$056B	$2DB5			GOTO	JPMSETFOV32
$056C	$2D70			GOTO	MOK32
$056D	$	MTUN32:
$056D	$02F3			SUBWF	STACK_3, F
$056E	$1C03			BTFSS	STATUS, C
$056F	$2DBA			GOTO	JPMSETFUN32
$0570	$	MOK32:
$0570	$0872			MOVF	STACK_2, W
$0571	$00F8			MOVWF	STACK_8
$0572	$0871			MOVF	STACK_1, W
$0573	$00FC			MOVWF	STACK_12
$0574	$0870			MOVF	STACK_0, W
$0575	$00FD			MOVWF	STACK_13
$0576	$17F8			BSF	STACK_8, 7
$0577	$17F6			BSF	STACK_6, 7
$0578	$1003			BCF	STATUS, C
$0579	$01F2			CLRF	STACK_2
$057A	$01F1			CLRF	STACK_1
$057B	$01F0			CLRF	STACK_0
$057C	$3018			MOVLW	24
$057D	$00A0			MOVWF	__math_tempbD
$057E	$	MLOOP32:
$057E	$1C7D			BTFSS	STACK_13, 0
$057F	$2D8A			GOTO	MNOADD32
$0580	$	MADD32:
$0580	$0874			MOVF	STACK_4, W
$0581	$07F0			ADDWF	STACK_0, F
$0582	$0875			MOVF	STACK_5, W
$0583	$1803			BTFSC	STATUS, C
$0584	$0F75			INCFSZ	STACK_5, W
$0585	$07F1			ADDWF	STACK_1, F
$0586	$0876			MOVF	STACK_6, W
$0587	$1803			BTFSC	STATUS, C
$0588	$0F76			INCFSZ	STACK_6, W
$0589	$07F2			ADDWF	STACK_2, F
$058A	$	MNOADD32:
$058A	$0CF2			RRF	STACK_2, F
$058B	$0CF1			RRF	STACK_1, F
$058C	$0CF0			RRF	STACK_0, F
$058D	$0CF8			RRF	STACK_8, F
$058E	$0CFC			RRF	STACK_12, F
$058F	$0CFD			RRF	STACK_13, F
$0590	$1003			BCF	STATUS, C
$0591	$0BA0			DECFSZ	__math_tempbD, F
$0592	$2D7E			GOTO	MLOOP32
$0593	$1BF2			BTFSC	STACK_2, 7
$0594	$2D9A			GOTO	MROUND32
$0595	$0DF8			RLF	STACK_8, F
$0596	$0DF0			RLF	STACK_0, F
$0597	$0DF1			RLF	STACK_1, F
$0598	$0DF2			RLF	STACK_2, F
$0599	$03F3			DECF	STACK_3, F
$059A	$	MROUND32:
$059A	$1B7B			BTFSC	STACK_11, 6
$059B	$1C70			BTFSS	STACK_0, 0
$059C	$2DAC			GOTO	MUL32OK
$059D	$1FF8			BTFSS	STACK_8, 7
$059E	$2DAC			GOTO	MUL32OK
$059F	$0AF0			INCF	STACK_0, F
$05A0	$1903			BTFSC	STATUS, Z
$05A1	$0AF1			INCF	STACK_1, F
$05A2	$1903			BTFSC	STATUS, Z
$05A3	$0AF2			INCF	STACK_2, F
$05A4	$1D03			BTFSS	STATUS, Z
$05A5	$2DAC			GOTO	MUL32OK
$05A6	$0CF2			RRF	STACK_2, F
$05A7	$0CF1			RRF	STACK_1, F
$05A8	$0CF0			RRF	STACK_0, F
$05A9	$0AF3			INCF	STACK_3, F
$05AA	$1903			BTFSC	STATUS, Z
$05AB	$2DB5			GOTO	JPMSETFOV32
$05AC	$	MUL32OK:
$05AC	$1FFA			BTFSS	STACK_10, 7
$05AD	$13F2			BCF	STACK_2, 7
$05AE	$3000			MOVLW	0x00
$05AF	$2DBE			GOTO	MUL32EEE
$05B0	$	JPMRES032:
$05B0	$3001			MOVLW	0x01
$05B1	$158A			BSF	PCLATH, 3
$05B2	$21A9			CALL	_RES032
$05B3	$118A			BCF	PCLATH, 3
$05B4	$2DBE			GOTO	MUL32EEE
$05B5	$	JPMSETFOV32:
$05B5	$3002			MOVLW	0x02
$05B6	$158A			BSF	PCLATH, 3
$05B7	$2185			CALL	_SETFOV32
$05B8	$118A			BCF	PCLATH, 3
$05B9	$2DBE			GOTO	MUL32EEE
$05BA	$	JPMSETFUN32:
$05BA	$3004			MOVLW	0x04
$05BB	$158A			BSF	PCLATH, 3
$05BC	$2193			CALL	_SETFUN32
$05BD	$118A			BCF	PCLATH, 3
$05BE	$	MUL32EEE:
$05BE	$0000			NOP
$05BF	$0008			RETURN
$0675	$	_Compare_Double:
$0675	$1303			BCF	STATUS, RP1
$0676	$1283			BCF	STATUS, RP0
$0677	$01FA			CLRF	STACK_10
$0678	$0873			MOVF	STACK_3, W
$0679	$1D03			BTFSS	STATUS, Z
$067A	$147A			BSF	STACK_10, 0
$067B	$0877			MOVF	STACK_7, W
$067C	$1D03			BTFSS	STATUS, Z
$067D	$14FA			BSF	STACK_10, 1
$067E	$087A			MOVF	STACK_10, W
$067F	$1903			BTFSC	STATUS, Z
$0680	$2EC1			GOTO	COMPARE_EQU
$0681	$3A03			XORLW	0x03
$0682	$1903			BTFSC	STATUS, Z
$0683	$2E8C			GOTO	COMPARE_NOTZERO
$0684	$187A			BTFSC	STACK_10, 0
$0685	$2E89			GOTO	COMPARE_XNOTZERO
$0686	$	COMPARE_YNOTZERO:
$0686	$1FF6			BTFSS	STACK_6, 7
$0687	$2EBF			GOTO	COMPARE_LT
$0688	$2EBD			GOTO	COMPARE_GT
$0689	$	COMPARE_XNOTZERO:
$0689	$1FF2			BTFSS	STACK_2, 7
$068A	$2EBD			GOTO	COMPARE_GT
$068B	$2EBF			GOTO	COMPARE_LT
$068C	$	COMPARE_NOTZERO:
$068C	$0872			MOVF	STACK_2, W
$068D	$3980			ANDLW	0x80
$068E	$00FA			MOVWF	STACK_10
$068F	$13F2			BCF	STACK_2, 7
$0690	$0876			MOVF	STACK_6, W
$0691	$3980			ANDLW	0x80
$0692	$13F6			BCF	STACK_6, 7
$0693	$067A			XORWF	STACK_10, W
$0694	$1903			BTFSC	STATUS, Z
$0695	$2E9A			GOTO	COMPARE_TESTALL
$0696	$087A			MOVF	STACK_10, W
$0697	$1903			BTFSC	STATUS, Z
$0698	$2EBD			GOTO	COMPARE_GT
$0699	$2EBF			GOTO	COMPARE_LT
$069A	$	COMPARE_TESTALL:
$069A	$0877			MOVF	STACK_7, W
$069B	$0273			SUBWF	STACK_3, W
$069C	$1903			BTFSC	STATUS, Z
$069D	$2EA1			GOTO	COMPARE_C1
$069E	$1C03			BTFSS	STATUS, C
$069F	$2EB5			GOTO	GT_FALSE
$06A0	$2EB9			GOTO	GT_TRUE
$06A1	$	COMPARE_C1:
$06A1	$0876			MOVF	STACK_6, W
$06A2	$0272			SUBWF	STACK_2, W
$06A3	$1903			BTFSC	STATUS, Z
$06A4	$2EA8			GOTO	COMPARE_C2
$06A5	$1C03			BTFSS	STATUS, C
$06A6	$2EB5			GOTO	GT_FALSE
$06A7	$2EB9			GOTO	GT_TRUE
$06A8	$	COMPARE_C2:
$06A8	$0875			MOVF	STACK_5, W
$06A9	$0271			SUBWF	STACK_1, W
$06AA	$1903			BTFSC	STATUS, Z
$06AB	$2EAF			GOTO	COMPARE_C3
$06AC	$1C03			BTFSS	STATUS, C
$06AD	$2EB5			GOTO	GT_FALSE
$06AE	$2EB9			GOTO	GT_TRUE
$06AF	$	COMPARE_C3:
$06AF	$0874			MOVF	STACK_4, W
$06B0	$0270			SUBWF	STACK_0, W
$06B1	$1903			BTFSC	STATUS, Z
$06B2	$2EC1			GOTO	COMPARE_EQU
$06B3	$1803			BTFSC	STATUS, C
$06B4	$2EB9			GOTO	GT_TRUE
$06B5	$	GT_FALSE:
$06B5	$08FA			MOVF	STACK_10, F
$06B6	$1903			BTFSC	STATUS, Z
$06B7	$2EBF			GOTO	COMPARE_LT
$06B8	$2EBD			GOTO	COMPARE_GT
$06B9	$	GT_TRUE:
$06B9	$08FA			MOVF	STACK_10, F
$06BA	$1903			BTFSC	STATUS, Z
$06BB	$2EBD			GOTO	COMPARE_GT
$06BC	$2EBF			GOTO	COMPARE_LT
$06BD	$	COMPARE_GT:
$06BD	$1403			BSF	STATUS, C
$06BE	$0008			RETURN
$06BF	$	COMPARE_LT:
$06BF	$1003			BCF	STATUS, C
$06C0	$0008			RETURN
$06C1	$	COMPARE_EQU:
$06C1	$1403			BSF	STATUS, C
$06C2	$1503			BSF	STATUS, Z
$06C3	$0008			RETURN
$06C4	$0008			RETURN
$0710	$	_Double2Byte:
$0710	$1303			BCF	STATUS, RP1
$0711	$1283			BCF	STATUS, RP0
$0712	$	INT32U08:
$0712	$01FB			CLRF	STACK_11
$0713	$01FC			CLRF	STACK_12
$0714	$01FA			CLRF	STACK_10
$0715	$0873			MOVF	STACK_3, W
$0716	$1903			BTFSC	STATUS, Z
$0717	$2F3D			GOTO	IRES008
$0718	$13FA			BCF	STACK_10, 7
$0719	$17F2			BSF	STACK_2, 7
$071A	$3086			MOVLW	134
$071B	$02F3			SUBWF	STACK_3, F
$071C	$1BF3			BTFSC	STACK_3, 7
$071D	$2F21			GOTO	SETEXP08
$071E	$1903			BTFSC	STATUS, Z
$071F	$2F21			GOTO	SETEXP08
$0720	$2F3F			GOTO	SETIOV08
$0721	$	SETEXP08:
$0721	$09F3			COMF	STACK_3, F
$0722	$0AF3			INCF	STACK_3, F
$0723	$3008			MOVLW	8
$0724	$0273			SUBWF	STACK_3, W
$0725	$1C03			BTFSS	STATUS, C
$0726	$2F2E			GOTO	TSHIFT3208
$0727	$00F3			MOVWF	STACK_3
$0728	$0DF2			RLF	STACK_2, F
$0729	$01F2			CLRF	STACK_2
$072A	$0873			MOVF	STACK_3, W
$072B	$1D03			BTFSS	STATUS, Z
$072C	$1003			BCF	STATUS, C
$072D	$2F35			GOTO	SHIFT3208OK
$072E	$	TSHIFT3208:
$072E	$0873			MOVF	STACK_3, W
$072F	$1903			BTFSC	STATUS, Z
$0730	$2F35			GOTO	SHIFT3208OK
$0731	$	SHIFT3208:
$0731	$1003			BCF	STATUS, C
$0732	$0CF2			RRF	STACK_2, F
$0733	$0BF3			DECFSZ	STACK_3, F
$0734	$2F31			GOTO	SHIFT3208
$0735	$	SHIFT3208OK:
$0735	$1B7B			BTFSC	STACK_11, 6
$0736	$1C72			BTFSS	STACK_2, 0
$0737	$2F3D			GOTO	INT3208OK
$0738	$1C03			BTFSS	STATUS, C
$0739	$2F3D			GOTO	INT3208OK
$073A	$0AF2			INCF	STACK_2, F
$073B	$1903			BTFSC	STATUS, Z
$073C	$2F44			GOTO	D2B_JPKSETIOV3224
$073D	$	INT3208OK:
$073D	$	IRES008:
$073D	$01F1			CLRF	STACK_1
$073E	$2F47			GOTO	INT3208EOK
$073F	$	SETIOV08:
$073F	$147B			BSF	STACK_11, 0
$0740	$1FFB			BTFSS	STACK_11, 7
$0741	$2F4A			GOTO	INT3208EER
$0742	$01F1			CLRF	STACK_1
$0743	$2F4A			GOTO	INT3208EER
$0744	$	D2B_JPKSETIOV3224:
$0744	$3001			MOVLW	0x01
$0745	$00FC			MOVWF	STACK_12
$0746	$2F4C			GOTO	INT3208EEE
$0747	$	INT3208EOK:
$0747	$3000			MOVLW	0x00
$0748	$00FC			MOVWF	STACK_12
$0749	$2F4C			GOTO	INT3208EEE
$074A	$	INT3208EER:
$074A	$30FF			MOVLW	0xFF
$074B	$00FC			MOVWF	STACK_12
$074C	$	INT3208EEE:
$074C	$08FC			MOVF	STACK_12, F
$074D	$1903			BTFSC	STATUS, Z
$074E	$2F52			GOTO	L_Double2Byte_0
$074F	$158A			BSF	PCLATH, 3
$0750	$2176			CALL	_SETIOV3224
$0751	$118A			BCF	PCLATH, 3
$0752	$	L_Double2Byte_0:
$0752	$0872			MOVF	STACK_2, W
$0753	$00F0			MOVWF	STACK_0
$0754	$0008			RETURN
$0004	$	_main:
;lfr_pid_1.c,127 :: 		void main()
;lfr_pid_1.c,130 :: 		initport();
$0004	$26C5			CALL	GlobalInilfr_pid_1
$0005	$158A			BSF	PCLATH, 3
$0006	$2167			CALL	_initport
$0007	$118A			BCF	PCLATH, 3
;lfr_pid_1.c,131 :: 		initpwm();
$0008	$158A			BSF	PCLATH, 3
$0009	$2118			CALL	_initpwm
$000A	$118A			BCF	PCLATH, 3
;lfr_pid_1.c,132 :: 		while(1)
$000B	$	L_main_13:
;lfr_pid_1.c,135 :: 		indicator();
$000B	$2624			CALL	_indicator
;lfr_pid_1.c,136 :: 		CalcError();
$000C	$2290			CALL	_CalcError
;lfr_pid_1.c,137 :: 		if((error == 0) && (s4+s5==2) && ((s1+s2+s3+s6+s7+s8)==0))
$000D	$01F4			CLRF	STACK_4
$000E	$01F5			CLRF	STACK_4+1
$000F	$01F6			CLRF	STACK_4+2
$0010	$01F7			CLRF	STACK_4+3
$0011	$0836			MOVF	_error, 0
$0012	$00F0			MOVWF	STACK_0
$0013	$0837			MOVF	_error+1, 0
$0014	$00F1			MOVWF	STACK_0+1
$0015	$0838			MOVF	_error+2, 0
$0016	$00F2			MOVWF	STACK_0+2
$0017	$0839			MOVF	_error+3, 0
$0018	$00F3			MOVWF	STACK_0+3
$0019	$158A			BSF	PCLATH, 3
$001A	$213F			CALL	_equals_double
$001B	$118A			BCF	PCLATH, 3
$001C	$3001			MOVLW	1
$001D	$1D03			BTFSS	STATUS, Z
$001E	$3000			MOVLW	0
$001F	$00F0			MOVWF	STACK_0
$0020	$0870			MOVF	STACK_0, 0
$0021	$1903			BTFSC	STATUS, Z
$0022	$287C			GOTO	L_main_17
$0023	$0829			MOVF	_s5, 0
$0024	$0727			ADDWF	_s4, 0
$0025	$00F4			MOVWF	STACK_4
$0026	$0828			MOVF	_s4+1, 0
$0027	$1803			BTFSC	STATUS, C
$0028	$3F01			ADDLW	1
$0029	$072A			ADDWF	_s5+1, 0
$002A	$00F5			MOVWF	STACK_4+1
$002B	$3000			MOVLW	0
$002C	$0675			XORWF	STACK_4+1, 0
$002D	$1D03			BTFSS	STATUS, Z
$002E	$2831			GOTO	L_main_37
$002F	$3002			MOVLW	2
$0030	$0674			XORWF	STACK_4, 0
$0031	$	L_main_37:
$0031	$1D03			BTFSS	STATUS, Z
$0032	$287C			GOTO	L_main_17
$0033	$0823			MOVF	_s2, 0
$0034	$0721			ADDWF	_s1, 0
$0035	$00F0			MOVWF	STACK_0
$0036	$0822			MOVF	_s1+1, 0
$0037	$1803			BTFSC	STATUS, C
$0038	$3F01			ADDLW	1
$0039	$0724			ADDWF	_s2+1, 0
$003A	$00F1			MOVWF	STACK_0+1
$003B	$0825			MOVF	_s3, 0
$003C	$07F0			ADDWF	STACK_0, 1
$003D	$0826			MOVF	_s3+1, 0
$003E	$1803			BTFSC	STATUS, C
$003F	$3F01			ADDLW	1
$0040	$07F1			ADDWF	STACK_0+1, 1
$0041	$082B			MOVF	_s6, 0
$0042	$07F0			ADDWF	STACK_0, 1
$0043	$082C			MOVF	_s6+1, 0
$0044	$1803			BTFSC	STATUS, C
$0045	$3F01			ADDLW	1
$0046	$07F1			ADDWF	STACK_0+1, 1
$0047	$082D			MOVF	_s7, 0
$0048	$07F0			ADDWF	STACK_0, 1
$0049	$082E			MOVF	_s7+1, 0
$004A	$1803			BTFSC	STATUS, C
$004B	$3F01			ADDLW	1
$004C	$07F1			ADDWF	STACK_0+1, 1
$004D	$082F			MOVF	_s8, 0
$004E	$0770			ADDWF	STACK_0, 0
$004F	$00F4			MOVWF	STACK_4
$0050	$0871			MOVF	STACK_0+1, 0
$0051	$1803			BTFSC	STATUS, C
$0052	$3F01			ADDLW	1
$0053	$0730			ADDWF	_s8+1, 0
$0054	$00F5			MOVWF	STACK_4+1
$0055	$3000			MOVLW	0
$0056	$0675			XORWF	STACK_4+1, 0
$0057	$1D03			BTFSS	STATUS, Z
$0058	$285B			GOTO	L_main_38
$0059	$3000			MOVLW	0
$005A	$0674			XORWF	STACK_4, 0
$005B	$	L_main_38:
$005B	$1D03			BTFSS	STATUS, Z
$005C	$287C			GOTO	L_main_17
$005D	$	L172_ex_L_main_17:
;lfr_pid_1.c,139 :: 		motor_LF();					        	    //FWD AT FULL SPEED
$005D	$158A			BSF	PCLATH, 3
$005E	$21DE			CALL	_motor_LF
$005F	$118A			BCF	PCLATH, 3
;lfr_pid_1.c,140 :: 		motor_RF();
$0060	$158A			BSF	PCLATH, 3
$0061	$21D9			CALL	_motor_RF
$0062	$118A			BCF	PCLATH, 3
;lfr_pid_1.c,141 :: 		PWM1_CHANGE_DUTY(255);
$0063	$30FF			MOVLW	255
$0064	$00E2			MOVWF	FARG_PWM1_Change_Duty+0
$0065	$158A			BSF	PCLATH, 3
$0066	$20B4			CALL	_PWM1_Change_Duty
$0067	$118A			BCF	PCLATH, 3
;lfr_pid_1.c,142 :: 		PWM2_CHANGE_DUTY(255);
$0068	$30FF			MOVLW	255
$0069	$00E2			MOVWF	FARG_PWM2_Change_Duty+0
$006A	$158A			BSF	PCLATH, 3
$006B	$204A			CALL	_PWM2_Change_Duty
$006C	$118A			BCF	PCLATH, 3
;lfr_pid_1.c,143 :: 		delay_ms(10);
$006D	$300D			MOVLW	13
$006E	$00FB			MOVWF	STACK_11
$006F	$30FF			MOVLW	255
$0070	$00FA			MOVWF	STACK_10
$0071	$0BFB			DECFSZ	STACK_11, F
$0072	$2874			GOTO	$+2
$0073	$2877			GOTO	$+4
$0074	$0BFA			DECFSZ	STACK_10, F
$0075	$2874			GOTO	$-1
$0076	$2871			GOTO	$-5
$0077	$30F3			MOVLW	243
$0078	$00FA			MOVWF	STACK_10
$0079	$0BFA			DECFSZ	STACK_10, F
$007A	$2879			GOTO	$-1
$007B	$0000			NOP
;lfr_pid_1.c,144 :: 		}
$007C	$	L_main_17:
;lfr_pid_1.c,145 :: 		if((s1+s2+s3+s4+s5+s6+s7+s8) == 0)		//ROBOT HAS OVERSHOOT
$007C	$0823			MOVF	_s2, 0
$007D	$0721			ADDWF	_s1, 0
$007E	$00F0			MOVWF	STACK_0
$007F	$0822			MOVF	_s1+1, 0
$0080	$1803			BTFSC	STATUS, C
$0081	$3F01			ADDLW	1
$0082	$0724			ADDWF	_s2+1, 0
$0083	$00F1			MOVWF	STACK_0+1
$0084	$0825			MOVF	_s3, 0
$0085	$07F0			ADDWF	STACK_0, 1
$0086	$0826			MOVF	_s3+1, 0
$0087	$1803			BTFSC	STATUS, C
$0088	$3F01			ADDLW	1
$0089	$07F1			ADDWF	STACK_0+1, 1
$008A	$0827			MOVF	_s4, 0
$008B	$07F0			ADDWF	STACK_0, 1
$008C	$0828			MOVF	_s4+1, 0
$008D	$1803			BTFSC	STATUS, C
$008E	$3F01			ADDLW	1
$008F	$07F1			ADDWF	STACK_0+1, 1
$0090	$0829			MOVF	_s5, 0
$0091	$07F0			ADDWF	STACK_0, 1
$0092	$082A			MOVF	_s5+1, 0
$0093	$1803			BTFSC	STATUS, C
$0094	$3F01			ADDLW	1
$0095	$07F1			ADDWF	STACK_0+1, 1
$0096	$082B			MOVF	_s6, 0
$0097	$07F0			ADDWF	STACK_0, 1
$0098	$082C			MOVF	_s6+1, 0
$0099	$1803			BTFSC	STATUS, C
$009A	$3F01			ADDLW	1
$009B	$07F1			ADDWF	STACK_0+1, 1
$009C	$082D			MOVF	_s7, 0
$009D	$07F0			ADDWF	STACK_0, 1
$009E	$082E			MOVF	_s7+1, 0
$009F	$1803			BTFSC	STATUS, C
$00A0	$3F01			ADDLW	1
$00A1	$07F1			ADDWF	STACK_0+1, 1
$00A2	$082F			MOVF	_s8, 0
$00A3	$0770			ADDWF	STACK_0, 0
$00A4	$00F4			MOVWF	STACK_4
$00A5	$0871			MOVF	STACK_0+1, 0
$00A6	$1803			BTFSC	STATUS, C
$00A7	$3F01			ADDLW	1
$00A8	$0730			ADDWF	_s8+1, 0
$00A9	$00F5			MOVWF	STACK_4+1
$00AA	$3000			MOVLW	0
$00AB	$0675			XORWF	STACK_4+1, 0
$00AC	$1D03			BTFSS	STATUS, Z
$00AD	$28B0			GOTO	L_main_39
$00AE	$3000			MOVLW	0
$00AF	$0674			XORWF	STACK_4, 0
$00B0	$	L_main_39:
$00B0	$1D03			BTFSS	STATUS, Z
$00B1	$291C			GOTO	L_main_18
;lfr_pid_1.c,148 :: 		if(lastreading == 'r')				  //CHECKS IF THE LAST SENSOR ACTIVATED WAS RIGHT
$00B2	$0831			MOVF	_lastreading, 0
$00B3	$3A72			XORLW	114
$00B4	$1D03			BTFSS	STATUS, Z
$00B5	$28D6			GOTO	L_main_19
;lfr_pid_1.c,150 :: 		motor_RB();						        //TURN RIGHT AT FULL SPEED
$00B6	$158A			BSF	PCLATH, 3
$00B7	$21E3			CALL	_motor_RB
$00B8	$118A			BCF	PCLATH, 3
;lfr_pid_1.c,151 :: 		motor_LF();
$00B9	$158A			BSF	PCLATH, 3
$00BA	$21DE			CALL	_motor_LF
$00BB	$118A			BCF	PCLATH, 3
;lfr_pid_1.c,152 :: 		PWM1_CHANGE_DUTY(255);
$00BC	$30FF			MOVLW	255
$00BD	$00E2			MOVWF	FARG_PWM1_Change_Duty+0
$00BE	$158A			BSF	PCLATH, 3
$00BF	$20B4			CALL	_PWM1_Change_Duty
$00C0	$118A			BCF	PCLATH, 3
;lfr_pid_1.c,153 :: 		PWM2_CHANGE_DUTY(255);
$00C1	$30FF			MOVLW	255
$00C2	$00E2			MOVWF	FARG_PWM2_Change_Duty+0
$00C3	$158A			BSF	PCLATH, 3
$00C4	$204A			CALL	_PWM2_Change_Duty
$00C5	$118A			BCF	PCLATH, 3
;lfr_pid_1.c,154 :: 		delay_ms(10);
$00C6	$300D			MOVLW	13
$00C7	$00FB			MOVWF	STACK_11
$00C8	$30FF			MOVLW	255
$00C9	$00FA			MOVWF	STACK_10
$00CA	$0BFB			DECFSZ	STACK_11, F
$00CB	$28CD			GOTO	$+2
$00CC	$28D0			GOTO	$+4
$00CD	$0BFA			DECFSZ	STACK_10, F
$00CE	$28CD			GOTO	$-1
$00CF	$28CA			GOTO	$-5
$00D0	$30F3			MOVLW	243
$00D1	$00FA			MOVWF	STACK_10
$00D2	$0BFA			DECFSZ	STACK_10, F
$00D3	$28D2			GOTO	$-1
$00D4	$0000			NOP
;lfr_pid_1.c,155 :: 		}
$00D5	$291B			GOTO	L_main_20
$00D6	$	L_main_19:
;lfr_pid_1.c,156 :: 		else if(lastreading == 'l')			  //CHECKS IF THE LAST SENSOR ACTIVATED WAS LEFT
$00D6	$0831			MOVF	_lastreading, 0
$00D7	$3A6C			XORLW	108
$00D8	$1D03			BTFSS	STATUS, Z
$00D9	$28FA			GOTO	L_main_21
;lfr_pid_1.c,158 :: 		motor_LB();					        	//TURN LEFT AT FULL SPEED
$00DA	$158A			BSF	PCLATH, 3
$00DB	$21D4			CALL	_motor_LB
$00DC	$118A			BCF	PCLATH, 3
;lfr_pid_1.c,159 :: 		motor_RF();
$00DD	$158A			BSF	PCLATH, 3
$00DE	$21D9			CALL	_motor_RF
$00DF	$118A			BCF	PCLATH, 3
;lfr_pid_1.c,160 :: 		PWM1_CHANGE_DUTY(255);
$00E0	$30FF			MOVLW	255
$00E1	$00E2			MOVWF	FARG_PWM1_Change_Duty+0
$00E2	$158A			BSF	PCLATH, 3
$00E3	$20B4			CALL	_PWM1_Change_Duty
$00E4	$118A			BCF	PCLATH, 3
;lfr_pid_1.c,161 :: 		PWM2_CHANGE_DUTY(255);
$00E5	$30FF			MOVLW	255
$00E6	$00E2			MOVWF	FARG_PWM2_Change_Duty+0
$00E7	$158A			BSF	PCLATH, 3
$00E8	$204A			CALL	_PWM2_Change_Duty
$00E9	$118A			BCF	PCLATH, 3
;lfr_pid_1.c,162 :: 		delay_ms(10);
$00EA	$300D			MOVLW	13
$00EB	$00FB			MOVWF	STACK_11
$00EC	$30FF			MOVLW	255
$00ED	$00FA			MOVWF	STACK_10
$00EE	$0BFB			DECFSZ	STACK_11, F
$00EF	$28F1			GOTO	$+2
$00F0	$28F4			GOTO	$+4
$00F1	$0BFA			DECFSZ	STACK_10, F
$00F2	$28F1			GOTO	$-1
$00F3	$28EE			GOTO	$-5
$00F4	$30F3			MOVLW	243
$00F5	$00FA			MOVWF	STACK_10
$00F6	$0BFA			DECFSZ	STACK_10, F
$00F7	$28F6			GOTO	$-1
$00F8	$0000			NOP
;lfr_pid_1.c,163 :: 		}
$00F9	$291B			GOTO	L_main_22
$00FA	$	L_main_21:
;lfr_pid_1.c,164 :: 		else if(lastreading='u')
$00FA	$3075			MOVLW	117
$00FB	$00B1			MOVWF	_lastreading
;lfr_pid_1.c,166 :: 		motor_RF();
$00FC	$158A			BSF	PCLATH, 3
$00FD	$21D9			CALL	_motor_RF
$00FE	$118A			BCF	PCLATH, 3
;lfr_pid_1.c,167 :: 		motor_LF();
$00FF	$158A			BSF	PCLATH, 3
$0100	$21DE			CALL	_motor_LF
$0101	$118A			BCF	PCLATH, 3
;lfr_pid_1.c,168 :: 		PWM1_CHANGE_DUTY(255);
$0102	$30FF			MOVLW	255
$0103	$00E2			MOVWF	FARG_PWM1_Change_Duty+0
$0104	$158A			BSF	PCLATH, 3
$0105	$20B4			CALL	_PWM1_Change_Duty
$0106	$118A			BCF	PCLATH, 3
;lfr_pid_1.c,169 :: 		PWM2_CHANGE_DUTY(255);
$0107	$30FF			MOVLW	255
$0108	$00E2			MOVWF	FARG_PWM2_Change_Duty+0
$0109	$158A			BSF	PCLATH, 3
$010A	$204A			CALL	_PWM2_Change_Duty
$010B	$118A			BCF	PCLATH, 3
;lfr_pid_1.c,170 :: 		delay_ms(10);
$010C	$300D			MOVLW	13
$010D	$00FB			MOVWF	STACK_11
$010E	$30FF			MOVLW	255
$010F	$00FA			MOVWF	STACK_10
$0110	$0BFB			DECFSZ	STACK_11, F
$0111	$2913			GOTO	$+2
$0112	$2916			GOTO	$+4
$0113	$0BFA			DECFSZ	STACK_10, F
$0114	$2913			GOTO	$-1
$0115	$2910			GOTO	$-5
$0116	$30F3			MOVLW	243
$0117	$00FA			MOVWF	STACK_10
$0118	$0BFA			DECFSZ	STACK_10, F
$0119	$2918			GOTO	$-1
$011A	$0000			NOP
;lfr_pid_1.c,171 :: 		}
$011B	$	L_main_23:
$011B	$	L_main_22:
$011B	$	L_main_20:
;lfr_pid_1.c,172 :: 		}
$011B	$2A7F			GOTO	L_main_24
$011C	$	L_main_18:
;lfr_pid_1.c,175 :: 		PROPORTIONAL = error * kp;
$011C	$083B			MOVF	_Kp, 0
$011D	$00F0			MOVWF	STACK_0
$011E	$158A			BSF	PCLATH, 3
$011F	$2155			CALL	_byte2double
$0120	$118A			BCF	PCLATH, 3
$0121	$0836			MOVF	_error, 0
$0122	$00F4			MOVWF	STACK_4
$0123	$0837			MOVF	_error+1, 0
$0124	$00F5			MOVWF	STACK_4+1
$0125	$0838			MOVF	_error+2, 0
$0126	$00F6			MOVWF	STACK_4+2
$0127	$0839			MOVF	_error+3, 0
$0128	$00F7			MOVWF	STACK_4+3
$0129	$2559			CALL	_mul_32x32_fp
$012A	$0870			MOVF	STACK_0, 0
$012B	$00DE			MOVWF	FLOC_main+8
$012C	$0871			MOVF	STACK_0+1, 0
$012D	$00DF			MOVWF	FLOC_main+9
$012E	$0872			MOVF	STACK_0+2, 0
$012F	$00E0			MOVWF	FLOC_main+10
$0130	$0873			MOVF	STACK_0+3, 0
$0131	$00E1			MOVWF	FLOC_main+11
$0132	$085E			MOVF	FLOC_main+8, 0
$0133	$00C6			MOVWF	_PROPORTIONAL
$0134	$085F			MOVF	FLOC_main+9, 0
$0135	$00C7			MOVWF	_PROPORTIONAL+1
$0136	$0860			MOVF	FLOC_main+10, 0
$0137	$00C8			MOVWF	_PROPORTIONAL+2
$0138	$0861			MOVF	FLOC_main+11, 0
$0139	$00C9			MOVWF	_PROPORTIONAL+3
;lfr_pid_1.c,176 :: 		INTEGRAL += error ;
$013A	$084A			MOVF	_INTEGRAL, 0
$013B	$00F0			MOVWF	STACK_0
$013C	$084B			MOVF	_INTEGRAL+1, 0
$013D	$00F1			MOVWF	STACK_0+1
$013E	$084C			MOVF	_INTEGRAL+2, 0
$013F	$00F2			MOVWF	STACK_0+2
$0140	$084D			MOVF	_INTEGRAL+3, 0
$0141	$00F3			MOVWF	STACK_0+3
$0142	$0836			MOVF	_error, 0
$0143	$00F4			MOVWF	STACK_4
$0144	$0837			MOVF	_error+1, 0
$0145	$00F5			MOVWF	STACK_4+1
$0146	$0838			MOVF	_error+2, 0
$0147	$00F6			MOVWF	STACK_4+2
$0148	$0839			MOVF	_error+3, 0
$0149	$00F7			MOVWF	STACK_4+3
$014A	$2411			CALL	_add_32x32_fp
$014B	$0870			MOVF	STACK_0, 0
$014C	$00D6			MOVWF	FLOC_main+0
$014D	$0871			MOVF	STACK_0+1, 0
$014E	$00D7			MOVWF	FLOC_main+1
$014F	$0872			MOVF	STACK_0+2, 0
$0150	$00D8			MOVWF	FLOC_main+2
$0151	$0873			MOVF	STACK_0+3, 0
$0152	$00D9			MOVWF	FLOC_main+3
$0153	$0856			MOVF	FLOC_main+0, 0
$0154	$00CA			MOVWF	_INTEGRAL
$0155	$0857			MOVF	FLOC_main+1, 0
$0156	$00CB			MOVWF	_INTEGRAL+1
$0157	$0858			MOVF	FLOC_main+2, 0
$0158	$00CC			MOVWF	_INTEGRAL+2
$0159	$0859			MOVF	FLOC_main+3, 0
$015A	$00CD			MOVWF	_INTEGRAL+3
;lfr_pid_1.c,177 :: 		INTEGRAL *= ki;
$015B	$083C			MOVF	_Ki, 0
$015C	$00F0			MOVWF	STACK_0
$015D	$158A			BSF	PCLATH, 3
$015E	$2155			CALL	_byte2double
$015F	$118A			BCF	PCLATH, 3
$0160	$0856			MOVF	FLOC_main+0, 0
$0161	$00F4			MOVWF	STACK_4
$0162	$0857			MOVF	FLOC_main+1, 0
$0163	$00F5			MOVWF	STACK_4+1
$0164	$0858			MOVF	FLOC_main+2, 0
$0165	$00F6			MOVWF	STACK_4+2
$0166	$0859			MOVF	FLOC_main+3, 0
$0167	$00F7			MOVWF	STACK_4+3
$0168	$2559			CALL	_mul_32x32_fp
$0169	$0870			MOVF	STACK_0, 0
$016A	$00D6			MOVWF	FLOC_main+0
$016B	$0871			MOVF	STACK_0+1, 0
$016C	$00D7			MOVWF	FLOC_main+1
$016D	$0872			MOVF	STACK_0+2, 0
$016E	$00D8			MOVWF	FLOC_main+2
$016F	$0873			MOVF	STACK_0+3, 0
$0170	$00D9			MOVWF	FLOC_main+3
$0171	$0856			MOVF	FLOC_main+0, 0
$0172	$00CA			MOVWF	_INTEGRAL
$0173	$0857			MOVF	FLOC_main+1, 0
$0174	$00CB			MOVWF	_INTEGRAL+1
$0175	$0858			MOVF	FLOC_main+2, 0
$0176	$00CC			MOVWF	_INTEGRAL+2
$0177	$0859			MOVF	FLOC_main+3, 0
$0178	$00CD			MOVWF	_INTEGRAL+3
;lfr_pid_1.c,178 :: 		DERIVATIVE = (error - perror);
$0179	$0832			MOVF	_perror, 0
$017A	$00F4			MOVWF	STACK_4
$017B	$0833			MOVF	_perror+1, 0
$017C	$00F5			MOVWF	STACK_4+1
$017D	$0834			MOVF	_perror+2, 0
$017E	$00F6			MOVWF	STACK_4+2
$017F	$0835			MOVF	_perror+3, 0
$0180	$00F7			MOVWF	STACK_4+3
$0181	$0836			MOVF	_error, 0
$0182	$00F0			MOVWF	STACK_0
$0183	$0837			MOVF	_error+1, 0
$0184	$00F1			MOVWF	STACK_0+1
$0185	$0838			MOVF	_error+2, 0
$0186	$00F2			MOVWF	STACK_0+2
$0187	$0839			MOVF	_error+3, 0
$0188	$00F3			MOVWF	STACK_0+3
$0189	$158A			BSF	PCLATH, 3
$018A	$21A1			CALL	_sub_32x32_fp
$018B	$118A			BCF	PCLATH, 3
$018C	$0870			MOVF	STACK_0, 0
$018D	$00DA			MOVWF	FLOC_main+4
$018E	$0871			MOVF	STACK_0+1, 0
$018F	$00DB			MOVWF	FLOC_main+5
$0190	$0872			MOVF	STACK_0+2, 0
$0191	$00DC			MOVWF	FLOC_main+6
$0192	$0873			MOVF	STACK_0+3, 0
$0193	$00DD			MOVWF	FLOC_main+7
$0194	$085A			MOVF	FLOC_main+4, 0
$0195	$00CE			MOVWF	_DERIVATIVE
$0196	$085B			MOVF	FLOC_main+5, 0
$0197	$00CF			MOVWF	_DERIVATIVE+1
$0198	$085C			MOVF	FLOC_main+6, 0
$0199	$00D0			MOVWF	_DERIVATIVE+2
$019A	$085D			MOVF	FLOC_main+7, 0
$019B	$00D1			MOVWF	_DERIVATIVE+3
;lfr_pid_1.c,179 :: 		correction = ( (PROPORTIONAL) + (INTEGRAL) + (DERIVATIVE*kd));
$019C	$085E			MOVF	FLOC_main+8, 0
$019D	$00F0			MOVWF	STACK_0
$019E	$085F			MOVF	FLOC_main+9, 0
$019F	$00F1			MOVWF	STACK_0+1
$01A0	$0860			MOVF	FLOC_main+10, 0
$01A1	$00F2			MOVWF	STACK_0+2
$01A2	$0861			MOVF	FLOC_main+11, 0
$01A3	$00F3			MOVWF	STACK_0+3
$01A4	$0856			MOVF	FLOC_main+0, 0
$01A5	$00F4			MOVWF	STACK_4
$01A6	$0857			MOVF	FLOC_main+1, 0
$01A7	$00F5			MOVWF	STACK_4+1
$01A8	$0858			MOVF	FLOC_main+2, 0
$01A9	$00F6			MOVWF	STACK_4+2
$01AA	$0859			MOVF	FLOC_main+3, 0
$01AB	$00F7			MOVWF	STACK_4+3
$01AC	$2411			CALL	_add_32x32_fp
$01AD	$0870			MOVF	STACK_0, 0
$01AE	$00D6			MOVWF	FLOC_main+0
$01AF	$0871			MOVF	STACK_0+1, 0
$01B0	$00D7			MOVWF	FLOC_main+1
$01B1	$0872			MOVF	STACK_0+2, 0
$01B2	$00D8			MOVWF	FLOC_main+2
$01B3	$0873			MOVF	STACK_0+3, 0
$01B4	$00D9			MOVWF	FLOC_main+3
$01B5	$083D			MOVF	_Kd, 0
$01B6	$00F0			MOVWF	STACK_0
$01B7	$158A			BSF	PCLATH, 3
$01B8	$2155			CALL	_byte2double
$01B9	$118A			BCF	PCLATH, 3
$01BA	$085A			MOVF	FLOC_main+4, 0
$01BB	$00F4			MOVWF	STACK_4
$01BC	$085B			MOVF	FLOC_main+5, 0
$01BD	$00F5			MOVWF	STACK_4+1
$01BE	$085C			MOVF	FLOC_main+6, 0
$01BF	$00F6			MOVWF	STACK_4+2
$01C0	$085D			MOVF	FLOC_main+7, 0
$01C1	$00F7			MOVWF	STACK_4+3
$01C2	$2559			CALL	_mul_32x32_fp
$01C3	$0856			MOVF	FLOC_main+0, 0
$01C4	$00F4			MOVWF	STACK_4
$01C5	$0857			MOVF	FLOC_main+1, 0
$01C6	$00F5			MOVWF	STACK_4+1
$01C7	$0858			MOVF	FLOC_main+2, 0
$01C8	$00F6			MOVWF	STACK_4+2
$01C9	$0859			MOVF	FLOC_main+3, 0
$01CA	$00F7			MOVWF	STACK_4+3
$01CB	$2411			CALL	_add_32x32_fp
$01CC	$0870			MOVF	STACK_0, 0
$01CD	$00DA			MOVWF	FLOC_main+4
$01CE	$0871			MOVF	STACK_0+1, 0
$01CF	$00DB			MOVWF	FLOC_main+5
$01D0	$0872			MOVF	STACK_0+2, 0
$01D1	$00DC			MOVWF	FLOC_main+6
$01D2	$0873			MOVF	STACK_0+3, 0
$01D3	$00DD			MOVWF	FLOC_main+7
$01D4	$085A			MOVF	FLOC_main+4, 0
$01D5	$00D2			MOVWF	_correction
$01D6	$085B			MOVF	FLOC_main+5, 0
$01D7	$00D3			MOVWF	_correction+1
$01D8	$085C			MOVF	FLOC_main+6, 0
$01D9	$00D4			MOVWF	_correction+2
$01DA	$085D			MOVF	FLOC_main+7, 0
$01DB	$00D5			MOVWF	_correction+3
;lfr_pid_1.c,180 :: 		rightpulse =  basespeed + correction;
$01DC	$083A			MOVF	_basespeed, 0
$01DD	$00F0			MOVWF	STACK_0
$01DE	$158A			BSF	PCLATH, 3
$01DF	$2155			CALL	_byte2double
$01E0	$118A			BCF	PCLATH, 3
$01E1	$0870			MOVF	STACK_0, 0
$01E2	$00D6			MOVWF	FLOC_main+0
$01E3	$0871			MOVF	STACK_0+1, 0
$01E4	$00D7			MOVWF	FLOC_main+1
$01E5	$0872			MOVF	STACK_0+2, 0
$01E6	$00D8			MOVWF	FLOC_main+2
$01E7	$0873			MOVF	STACK_0+3, 0
$01E8	$00D9			MOVWF	FLOC_main+3
$01E9	$0856			MOVF	FLOC_main+0, 0
$01EA	$00F0			MOVWF	STACK_0
$01EB	$0857			MOVF	FLOC_main+1, 0
$01EC	$00F1			MOVWF	STACK_0+1
$01ED	$0858			MOVF	FLOC_main+2, 0
$01EE	$00F2			MOVWF	STACK_0+2
$01EF	$0859			MOVF	FLOC_main+3, 0
$01F0	$00F3			MOVWF	STACK_0+3
$01F1	$085A			MOVF	FLOC_main+4, 0
$01F2	$00F4			MOVWF	STACK_4
$01F3	$085B			MOVF	FLOC_main+5, 0
$01F4	$00F5			MOVWF	STACK_4+1
$01F5	$085C			MOVF	FLOC_main+6, 0
$01F6	$00F6			MOVWF	STACK_4+2
$01F7	$085D			MOVF	FLOC_main+7, 0
$01F8	$00F7			MOVWF	STACK_4+3
$01F9	$2411			CALL	_add_32x32_fp
$01FA	$0870			MOVF	STACK_0, 0
$01FB	$00BE			MOVWF	_rightpulse
$01FC	$0871			MOVF	STACK_0+1, 0
$01FD	$00BF			MOVWF	_rightpulse+1
$01FE	$0872			MOVF	STACK_0+2, 0
$01FF	$00C0			MOVWF	_rightpulse+2
$0200	$0873			MOVF	STACK_0+3, 0
$0201	$00C1			MOVWF	_rightpulse+3
;lfr_pid_1.c,181 :: 		leftpulse = basespeed - correction;
$0202	$085A			MOVF	FLOC_main+4, 0
$0203	$00F4			MOVWF	STACK_4
$0204	$085B			MOVF	FLOC_main+5, 0
$0205	$00F5			MOVWF	STACK_4+1
$0206	$085C			MOVF	FLOC_main+6, 0
$0207	$00F6			MOVWF	STACK_4+2
$0208	$085D			MOVF	FLOC_main+7, 0
$0209	$00F7			MOVWF	STACK_4+3
$020A	$0856			MOVF	FLOC_main+0, 0
$020B	$00F0			MOVWF	STACK_0
$020C	$0857			MOVF	FLOC_main+1, 0
$020D	$00F1			MOVWF	STACK_0+1
$020E	$0858			MOVF	FLOC_main+2, 0
$020F	$00F2			MOVWF	STACK_0+2
$0210	$0859			MOVF	FLOC_main+3, 0
$0211	$00F3			MOVWF	STACK_0+3
$0212	$158A			BSF	PCLATH, 3
$0213	$21A1			CALL	_sub_32x32_fp
$0214	$118A			BCF	PCLATH, 3
$0215	$0870			MOVF	STACK_0, 0
$0216	$00C2			MOVWF	_leftpulse
$0217	$0871			MOVF	STACK_0+1, 0
$0218	$00C3			MOVWF	_leftpulse+1
$0219	$0872			MOVF	STACK_0+2, 0
$021A	$00C4			MOVWF	_leftpulse+2
$021B	$0873			MOVF	STACK_0+3, 0
$021C	$00C5			MOVWF	_leftpulse+3
;lfr_pid_1.c,182 :: 		motor_RF();
$021D	$158A			BSF	PCLATH, 3
$021E	$21D9			CALL	_motor_RF
$021F	$118A			BCF	PCLATH, 3
;lfr_pid_1.c,183 :: 		motor_LF();
$0220	$158A			BSF	PCLATH, 3
$0221	$21DE			CALL	_motor_LF
$0222	$118A			BCF	PCLATH, 3
;lfr_pid_1.c,185 :: 		if(leftpulse > 255)                  //LEFT CORRECTION EXCEED
$0223	$0842			MOVF	_leftpulse, 0
$0224	$00F4			MOVWF	STACK_4
$0225	$0843			MOVF	_leftpulse+1, 0
$0226	$00F5			MOVWF	STACK_4+1
$0227	$0844			MOVF	_leftpulse+2, 0
$0228	$00F6			MOVWF	STACK_4+2
$0229	$0845			MOVF	_leftpulse+3, 0
$022A	$00F7			MOVWF	STACK_4+3
$022B	$3000			MOVLW	0
$022C	$00F0			MOVWF	STACK_0
$022D	$3000			MOVLW	0
$022E	$00F1			MOVWF	STACK_0+1
$022F	$307F			MOVLW	127
$0230	$00F2			MOVWF	STACK_0+2
$0231	$3086			MOVLW	134
$0232	$00F3			MOVWF	STACK_0+3
$0233	$2675			CALL	_compare_double
$0234	$3001			MOVLW	1
$0235	$1803			BTFSC	STATUS, C
$0236	$3000			MOVLW	0
$0237	$00F0			MOVWF	STACK_0
$0238	$0870			MOVF	STACK_0, 0
$0239	$1903			BTFSC	STATUS, Z
$023A	$2A43			GOTO	L_main_25
;lfr_pid_1.c,186 :: 		leftpulse = 255;
$023B	$3000			MOVLW	0
$023C	$00C2			MOVWF	_leftpulse
$023D	$3000			MOVLW	0
$023E	$00C3			MOVWF	_leftpulse+1
$023F	$307F			MOVLW	127
$0240	$00C4			MOVWF	_leftpulse+2
$0241	$3086			MOVLW	134
$0242	$00C5			MOVWF	_leftpulse+3
$0243	$	L_main_25:
;lfr_pid_1.c,188 :: 		if(rightpulse > 255)                 //RIGHT CORRECTION EXCEED
$0243	$083E			MOVF	_rightpulse, 0
$0244	$00F4			MOVWF	STACK_4
$0245	$083F			MOVF	_rightpulse+1, 0
$0246	$00F5			MOVWF	STACK_4+1
$0247	$0840			MOVF	_rightpulse+2, 0
$0248	$00F6			MOVWF	STACK_4+2
$0249	$0841			MOVF	_rightpulse+3, 0
$024A	$00F7			MOVWF	STACK_4+3
$024B	$3000			MOVLW	0
$024C	$00F0			MOVWF	STACK_0
$024D	$3000			MOVLW	0
$024E	$00F1			MOVWF	STACK_0+1
$024F	$307F			MOVLW	127
$0250	$00F2			MOVWF	STACK_0+2
$0251	$3086			MOVLW	134
$0252	$00F3			MOVWF	STACK_0+3
$0253	$2675			CALL	_compare_double
$0254	$3001			MOVLW	1
$0255	$1803			BTFSC	STATUS, C
$0256	$3000			MOVLW	0
$0257	$00F0			MOVWF	STACK_0
$0258	$0870			MOVF	STACK_0, 0
$0259	$1903			BTFSC	STATUS, Z
$025A	$2A63			GOTO	L_main_26
;lfr_pid_1.c,189 :: 		rightpulse = 255;
$025B	$3000			MOVLW	0
$025C	$00BE			MOVWF	_rightpulse
$025D	$3000			MOVLW	0
$025E	$00BF			MOVWF	_rightpulse+1
$025F	$307F			MOVLW	127
$0260	$00C0			MOVWF	_rightpulse+2
$0261	$3086			MOVLW	134
$0262	$00C1			MOVWF	_rightpulse+3
$0263	$	L_main_26:
;lfr_pid_1.c,194 :: 		PWM1_CHANGE_DUTY(rightpulse);
$0263	$083E			MOVF	_rightpulse, 0
$0264	$00F0			MOVWF	STACK_0
$0265	$083F			MOVF	_rightpulse+1, 0
$0266	$00F1			MOVWF	STACK_0+1
$0267	$0840			MOVF	_rightpulse+2, 0
$0268	$00F2			MOVWF	STACK_0+2
$0269	$0841			MOVF	_rightpulse+3, 0
$026A	$00F3			MOVWF	STACK_0+3
$026B	$2710			CALL	_double2byte
$026C	$0870			MOVF	STACK_0, 0
$026D	$00E2			MOVWF	FARG_PWM1_Change_Duty+0
$026E	$158A			BSF	PCLATH, 3
$026F	$20B4			CALL	_PWM1_Change_Duty
$0270	$118A			BCF	PCLATH, 3
;lfr_pid_1.c,195 :: 		PWM2_CHANGE_DUTY(leftpulse);
$0271	$0842			MOVF	_leftpulse, 0
$0272	$00F0			MOVWF	STACK_0
$0273	$0843			MOVF	_leftpulse+1, 0
$0274	$00F1			MOVWF	STACK_0+1
$0275	$0844			MOVF	_leftpulse+2, 0
$0276	$00F2			MOVWF	STACK_0+2
$0277	$0845			MOVF	_leftpulse+3, 0
$0278	$00F3			MOVWF	STACK_0+3
$0279	$2710			CALL	_double2byte
$027A	$0870			MOVF	STACK_0, 0
$027B	$00E2			MOVWF	FARG_PWM2_Change_Duty+0
$027C	$158A			BSF	PCLATH, 3
$027D	$204A			CALL	_PWM2_Change_Duty
$027E	$118A			BCF	PCLATH, 3
;lfr_pid_1.c,196 :: 		}
$027F	$	L_main_24:
;lfr_pid_1.c,197 :: 		delay_ms(10);
$027F	$300D			MOVLW	13
$0280	$00FB			MOVWF	STACK_11
$0281	$30FF			MOVLW	255
$0282	$00FA			MOVWF	STACK_10
$0283	$0BFB			DECFSZ	STACK_11, F
$0284	$2A86			GOTO	$+2
$0285	$2A89			GOTO	$+4
$0286	$0BFA			DECFSZ	STACK_10, F
$0287	$2A86			GOTO	$-1
$0288	$2A83			GOTO	$-5
$0289	$30F3			MOVLW	243
$028A	$00FA			MOVWF	STACK_10
$028B	$0BFA			DECFSZ	STACK_10, F
$028C	$2A8B			GOTO	$-1
$028D	$0000			NOP
;lfr_pid_1.c,198 :: 		}
$028E	$280B			GOTO	L_main_13
;lfr_pid_1.c,199 :: 		}
$028F	$2A8F			GOTO	$
