;  ASM code generated by mikroVirtualMachine for PIC - V. 8.2.0.0
;  Date/Time: 3/23/2011 6:47:21 AM
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$2804			GOTO	_main
$0A3D	$	_RES032:
$0A3D	$1303			BCF	STATUS, RP1
$0A3E	$1283			BCF	STATUS, RP0
$0A3F	$01F2			CLRF	STACK_2
$0A40	$01F1			CLRF	STACK_1
$0A41	$01F0			CLRF	STACK_0
$0A42	$01F8			CLRF	STACK_8
$0A43	$01F3			CLRF	STACK_3
$0A44	$3000			MOVLW	0
$0A45	$0008			RETURN
$0A2F	$	_SETFUN32:
$0A2F	$1303			BCF	STATUS, RP1
$0A30	$1283			BCF	STATUS, RP0
$0A31	$157B			BSF	STACK_11, 2
$0A32	$1FFB			BTFSS	STACK_11, 7
$0A33	$2A3B			GOTO	SETFUN32EEE
$0A34	$3001			MOVLW	0x01
$0A35	$00F3			MOVWF	STACK_3
$0A36	$01F2			CLRF	STACK_2
$0A37	$01F1			CLRF	STACK_1
$0A38	$01F0			CLRF	STACK_0
$0A39	$0DFA			RLF	STACK_10, F
$0A3A	$0CF2			RRF	STACK_2, F
$0A3B	$	SETFUN32EEE:
$0A3B	$30FF			MOVLW	0xFF
$0A3C	$0008			RETURN
$0A5C	$	_FIXSIGN32:
$0A5C	$1303			BCF	STATUS, RP1
$0A5D	$1283			BCF	STATUS, RP0
$0A5E	$1FFA			BTFSS	STACK_10, 7
$0A5F	$13F2			BCF	STACK_2, 7
$0A60	$3000			MOVLW	0
$0A61	$0008			RETURN
$0A21	$	_SETFOV32:
$0A21	$1303			BCF	STATUS, RP1
$0A22	$1283			BCF	STATUS, RP0
$0A23	$14FB			BSF	STACK_11, 1
$0A24	$1FFB			BTFSS	STACK_11, 7
$0A25	$2A2D			GOTO	SETFOV32EEE
$0A26	$30FF			MOVLW	0xFF
$0A27	$00F3			MOVWF	STACK_3
$0A28	$00F2			MOVWF	STACK_2
$0A29	$00F1			MOVWF	STACK_1
$0A2A	$00F0			MOVWF	STACK_0
$0A2B	$0DFA			RLF	STACK_10, F
$0A2C	$0CF2			RRF	STACK_2, F
$0A2D	$	SETFOV32EEE:
$0A2D	$30FF			MOVLW	0xFF
$0A2E	$0008			RETURN
$0649	$	_NRM4032:
$0649	$1303			BCF	STATUS, RP1
$064A	$1283			BCF	STATUS, RP0
$064B	$187C			BTFSC	STACK_12, 0
$064C	$2E81			GOTO	NRMRND4032
$064D	$18FC			BTFSC	STACK_12, 1
$064E	$2E52			GOTO	NRM4032
$064F	$197C			BTFSC	STACK_12, 2
$0650	$2EA6			GOTO	JMPSETFOV32
$0651	$2E4B			GOTO	$-6
$0652	$	NRM4032:
$0652	$01A0			CLRF	__math_tempbD
$0653	$0872			MOVF	STACK_2, W
$0654	$1D03			BTFSS	STATUS, Z
$0655	$2E72			GOTO	NORM4032
$0656	$0871			MOVF	STACK_1, W
$0657	$00F2			MOVWF	STACK_2
$0658	$0870			MOVF	STACK_0, W
$0659	$00F1			MOVWF	STACK_1
$065A	$0878			MOVF	STACK_8, W
$065B	$00F0			MOVWF	STACK_0
$065C	$01F8			CLRF	STACK_8
$065D	$15A0			BSF	__math_tempbD, 3
$065E	$0872			MOVF	STACK_2, W
$065F	$1D03			BTFSS	STATUS, Z
$0660	$2E72			GOTO	NORM4032
$0661	$0871			MOVF	STACK_1, W
$0662	$00F2			MOVWF	STACK_2
$0663	$0870			MOVF	STACK_0, W
$0664	$00F1			MOVWF	STACK_1
$0665	$01F0			CLRF	STACK_0
$0666	$11A0			BCF	__math_tempbD, 3
$0667	$1620			BSF	__math_tempbD, 4
$0668	$0872			MOVF	STACK_2, W
$0669	$1D03			BTFSS	STATUS, Z
$066A	$2E72			GOTO	NORM4032
$066B	$0871			MOVF	STACK_1, W
$066C	$00F2			MOVWF	STACK_2
$066D	$01F1			CLRF	STACK_1
$066E	$15A0			BSF	__math_tempbD, 3
$066F	$0872			MOVF	STACK_2, W
$0670	$1903			BTFSC	STATUS, Z
$0671	$2E94			GOTO	JMPRES032
$0672	$	NORM4032:
$0672	$0820			MOVF	__math_tempbD, W
$0673	$02F3			SUBWF	STACK_3, F
$0674	$1D03			BTFSS	STATUS, Z
$0675	$1C03			BTFSS	STATUS, C
$0676	$2E9A			GOTO	JMPSETFUN32
$0677	$1003			BCF	STATUS, C
$0678	$	NORM4032A:
$0678	$1BF2			BTFSC	STACK_2, 7
$0679	$2E81			GOTO	NRMRND4032
$067A	$0DF8			RLF	STACK_8, F
$067B	$0DF0			RLF	STACK_0, F
$067C	$0DF1			RLF	STACK_1, F
$067D	$0DF2			RLF	STACK_2, F
$067E	$0BF3			DECFSZ	STACK_3, F
$067F	$2E78			GOTO	NORM4032A
$0680	$2E9A			GOTO	JMPSETFUN32
$0681	$	NRMRND4032:
$0681	$1B7B			BTFSC	STACK_11, 6
$0682	$1C70			BTFSS	STACK_0, 0
$0683	$2EA0			GOTO	JMPFIXSIGN32
$0684	$1FF8			BTFSS	STACK_8, 7
$0685	$2EA0			GOTO	JMPFIXSIGN32
$0686	$0AF0			INCF	STACK_0, F
$0687	$1903			BTFSC	STATUS, Z
$0688	$0AF1			INCF	STACK_1, F
$0689	$1903			BTFSC	STATUS, Z
$068A	$0AF2			INCF	STACK_2, F
$068B	$1D03			BTFSS	STATUS, Z
$068C	$2EA0			GOTO	JMPFIXSIGN32
$068D	$0CF2			RRF	STACK_2, F
$068E	$0CF1			RRF	STACK_1, F
$068F	$0CF0			RRF	STACK_0, F
$0690	$0AF3			INCF	STACK_3, F
$0691	$1903			BTFSC	STATUS, Z
$0692	$2EA6			GOTO	JMPSETFOV32
$0693	$2EA0			GOTO	JMPFIXSIGN32
$0694	$	JMPRES032:
$0694	$3001			MOVLW	0x01
$0695	$00FC			MOVWF	STACK_12
$0696	$158A			BSF	PCLATH, 3
$0697	$223D			CALL	_RES032
$0698	$118A			BCF	PCLATH, 3
$0699	$2EAB			GOTO	NRM4032EEE
$069A	$	JMPSETFUN32:
$069A	$3002			MOVLW	0x02
$069B	$00FC			MOVWF	STACK_12
$069C	$158A			BSF	PCLATH, 3
$069D	$222F			CALL	_SETFUN32
$069E	$118A			BCF	PCLATH, 3
$069F	$2EAB			GOTO	NRM4032EEE
$06A0	$	JMPFIXSIGN32:
$06A0	$3004			MOVLW	0x04
$06A1	$00FC			MOVWF	STACK_12
$06A2	$158A			BSF	PCLATH, 3
$06A3	$225C			CALL	_FIXSIGN32
$06A4	$118A			BCF	PCLATH, 3
$06A5	$2EAB			GOTO	NRM4032EEE
$06A6	$	JMPSETFOV32:
$06A6	$3008			MOVLW	0x08
$06A7	$00FC			MOVWF	STACK_12
$06A8	$158A			BSF	PCLATH, 3
$06A9	$2221			CALL	_SETFOV32
$06AA	$118A			BCF	PCLATH, 3
$06AB	$	NRM4032EEE:
$06AB	$0000			NOP
$06AC	$0008			RETURN
$0911	$	_NRM3232:
$0911	$1303			BCF	STATUS, RP1
$0912	$1283			BCF	STATUS, RP0
$0913	$01A0			CLRF	__math_tempbD
$0914	$0872			MOVF	STACK_2, W
$0915	$1D03			BTFSS	STATUS, Z
$0916	$2928			GOTO	NORM3232
$0917	$0871			MOVF	STACK_1, W
$0918	$00F2			MOVWF	STACK_2
$0919	$0870			MOVF	STACK_0, W
$091A	$00F1			MOVWF	STACK_1
$091B	$01F0			CLRF	STACK_0
$091C	$15A0			BSF	__math_tempbD, 3
$091D	$0872			MOVF	STACK_2, W
$091E	$1D03			BTFSS	STATUS, Z
$091F	$2928			GOTO	NORM3232
$0920	$0871			MOVF	STACK_1, W
$0921	$00F2			MOVWF	STACK_2
$0922	$01F1			CLRF	STACK_1
$0923	$11A0			BCF	__math_tempbD, 3
$0924	$1620			BSF	__math_tempbD, 4
$0925	$0872			MOVF	STACK_2, W
$0926	$1903			BTFSC	STATUS, Z
$0927	$2936			GOTO	JPNRES032
$0928	$	NORM3232:
$0928	$0820			MOVF	__math_tempbD, W
$0929	$02F3			SUBWF	STACK_3, F
$092A	$1D03			BTFSS	STATUS, Z
$092B	$1C03			BTFSS	STATUS, C
$092C	$293A			GOTO	JPNSETFUN32
$092D	$1003			BCF	STATUS, C
$092E	$	NORM3232A:
$092E	$1BF2			BTFSC	STACK_2, 7
$092F	$293E			GOTO	JMPNFIXSIGN32
$0930	$0DF0			RLF	STACK_0, F
$0931	$0DF1			RLF	STACK_1, F
$0932	$0DF2			RLF	STACK_2, F
$0933	$0BF3			DECFSZ	STACK_3, F
$0934	$292E			GOTO	NORM3232A
$0935	$293A			GOTO	JPNSETFUN32
$0936	$	JPNRES032:
$0936	$3001			MOVLW	0x01
$0937	$00FC			MOVWF	STACK_12
$0938	$223D			CALL	_RES032
$0939	$2941			GOTO	NORM32EEE
$093A	$	JPNSETFUN32:
$093A	$3002			MOVLW	0x02
$093B	$00FC			MOVWF	STACK_12
$093C	$222F			CALL	_SETFUN32
$093D	$2941			GOTO	NORM32EEE
$093E	$	JMPNFIXSIGN32:
$093E	$3004			MOVLW	0x04
$093F	$00FC			MOVWF	STACK_12
$0940	$225C			CALL	_FIXSIGN32
$0941	$	NORM32EEE:
$0941	$0008			RETURN
$0A7C	$	_SETFDZ32:
$0A7C	$1303			BCF	STATUS, RP1
$0A7D	$1283			BCF	STATUS, RP0
$0A7E	$15FB			BSF	STACK_11, 3
$0A7F	$30FF			MOVLW	0xFF
$0A80	$0008			RETURN
$049A	$	_Add_32x32_FP:
$049A	$1303			BCF	STATUS, RP1
$049B	$1283			BCF	STATUS, RP0
$049C	$0872			MOVF	STACK_2, W
$049D	$0676			XORWF	STACK_6, W
$049E	$00A0			MOVWF	__math_tempbD
$049F	$01F8			CLRF	STACK_8
$04A0	$01F9			CLRF	STACK_9
$04A1	$0873			MOVF	STACK_3, W
$04A2	$0277			SUBWF	STACK_7, W
$04A3	$1C03			BTFSS	STATUS, C
$04A4	$2CBD			GOTO	USEA32
$04A5	$0877			MOVF	STACK_7, W
$04A6	$00FD			MOVWF	STACK_13
$04A7	$0873			MOVF	STACK_3, W
$04A8	$00F7			MOVWF	STACK_7
$04A9	$087D			MOVF	STACK_13, W
$04AA	$00F3			MOVWF	STACK_3
$04AB	$0876			MOVF	STACK_6, W
$04AC	$00FD			MOVWF	STACK_13
$04AD	$0872			MOVF	STACK_2, W
$04AE	$00F6			MOVWF	STACK_6
$04AF	$087D			MOVF	STACK_13, W
$04B0	$00F2			MOVWF	STACK_2
$04B1	$0875			MOVF	STACK_5, W
$04B2	$00FD			MOVWF	STACK_13
$04B3	$0871			MOVF	STACK_1, W
$04B4	$00F5			MOVWF	STACK_5
$04B5	$087D			MOVF	STACK_13, W
$04B6	$00F1			MOVWF	STACK_1
$04B7	$0874			MOVF	STACK_4, W
$04B8	$00FD			MOVWF	STACK_13
$04B9	$0870			MOVF	STACK_0, W
$04BA	$00F4			MOVWF	STACK_4
$04BB	$087D			MOVF	STACK_13, W
$04BC	$00F0			MOVWF	STACK_0
$04BD	$	USEA32:
$04BD	$0877			MOVF	STACK_7, W
$04BE	$1903			BTFSC	STATUS, Z
$04BF	$2D3A			GOTO	JMPEEE
$04C0	$0872			MOVF	STACK_2, W
$04C1	$00FA			MOVWF	STACK_10
$04C2	$17F2			BSF	STACK_2, 7
$04C3	$17F6			BSF	STACK_6, 7
$04C4	$0877			MOVF	STACK_7, W
$04C5	$0273			SUBWF	STACK_3, W
$04C6	$00F7			MOVWF	STACK_7
$04C7	$1903			BTFSC	STATUS, Z
$04C8	$2CF0			GOTO	ALIGNED32
$04C9	$3008			MOVLW	8
$04CA	$0277			SUBWF	STACK_7, W
$04CB	$1C03			BTFSS	STATUS, C
$04CC	$2CE6			GOTO	ALIGNB32
$04CD	$00F7			MOVWF	STACK_7
$04CE	$0874			MOVF	STACK_4, W
$04CF	$00F9			MOVWF	STACK_9
$04D0	$0875			MOVF	STACK_5, W
$04D1	$00F4			MOVWF	STACK_4
$04D2	$0876			MOVF	STACK_6, W
$04D3	$00F5			MOVWF	STACK_5
$04D4	$01F6			CLRF	STACK_6
$04D5	$3008			MOVLW	8
$04D6	$0277			SUBWF	STACK_7, W
$04D7	$1C03			BTFSS	STATUS, C
$04D8	$2CE6			GOTO	ALIGNB32
$04D9	$00F7			MOVWF	STACK_7
$04DA	$0874			MOVF	STACK_4, W
$04DB	$00F9			MOVWF	STACK_9
$04DC	$0875			MOVF	STACK_5, W
$04DD	$00F4			MOVWF	STACK_4
$04DE	$01F5			CLRF	STACK_5
$04DF	$3008			MOVLW	8
$04E0	$0277			SUBWF	STACK_7, W
$04E1	$1C03			BTFSS	STATUS, C
$04E2	$2CE6			GOTO	ALIGNB32
$04E3	$087A			MOVF	STACK_10, W
$04E4	$00F2			MOVWF	STACK_2
$04E5	$2D3A			GOTO	JMPEEE
$04E6	$	ALIGNB32:
$04E6	$0877			MOVF	STACK_7, W
$04E7	$1903			BTFSC	STATUS, Z
$04E8	$2CF0			GOTO	ALIGNED32
$04E9	$	ALOOPB32:
$04E9	$1003			BCF	STATUS, C
$04EA	$0CF6			RRF	STACK_6, F
$04EB	$0CF5			RRF	STACK_5, F
$04EC	$0CF4			RRF	STACK_4, F
$04ED	$0CF9			RRF	STACK_9, F
$04EE	$0BF7			DECFSZ	STACK_7, F
$04EF	$2CE9			GOTO	ALOOPB32
$04F0	$	ALIGNED32:
$04F0	$1FA0			BTFSS	__math_tempbD, 7
$04F1	$2CFD			GOTO	AOK32
$04F2	$09F9			COMF	STACK_9, F
$04F3	$09F4			COMF	STACK_4, F
$04F4	$09F5			COMF	STACK_5, F
$04F5	$09F6			COMF	STACK_6, F
$04F6	$0AF9			INCF	STACK_9, F
$04F7	$1903			BTFSC	STATUS, Z
$04F8	$0AF4			INCF	STACK_4, F
$04F9	$1903			BTFSC	STATUS, Z
$04FA	$0AF5			INCF	STACK_5, F
$04FB	$1903			BTFSC	STATUS, Z
$04FC	$0AF6			INCF	STACK_6, F
$04FD	$	AOK32:
$04FD	$0879			MOVF	STACK_9, W
$04FE	$07F8			ADDWF	STACK_8, F
$04FF	$0874			MOVF	STACK_4, W
$0500	$1803			BTFSC	STATUS, C
$0501	$0F74			INCFSZ	STACK_4, W
$0502	$07F0			ADDWF	STACK_0, F
$0503	$0875			MOVF	STACK_5, W
$0504	$1803			BTFSC	STATUS, C
$0505	$0F75			INCFSZ	STACK_5, W
$0506	$07F1			ADDWF	STACK_1, F
$0507	$0876			MOVF	STACK_6, W
$0508	$1803			BTFSC	STATUS, C
$0509	$0F76			INCFSZ	STACK_6, W
$050A	$07F2			ADDWF	STACK_2, F
$050B	$1BA0			BTFSC	__math_tempbD, 7
$050C	$2D16			GOTO	ACOMP32
$050D	$1C03			BTFSS	STATUS, C
$050E	$2D26			GOTO	JMPNRMRND4032
$050F	$0CF2			RRF	STACK_2, F
$0510	$0CF1			RRF	STACK_1, F
$0511	$0CF0			RRF	STACK_0, F
$0512	$0CF8			RRF	STACK_8, F
$0513	$0FF3			INCFSZ	STACK_3, F
$0514	$2D26			GOTO	JMPNRMRND4032
$0515	$2D34			GOTO	ADD_JMPSETFOV32
$0516	$	ACOMP32:
$0516	$1803			BTFSC	STATUS, C
$0517	$2D2A			GOTO	JMPNRM4032
$0518	$09F8			COMF	STACK_8, F
$0519	$09F0			COMF	STACK_0, F
$051A	$09F1			COMF	STACK_1, F
$051B	$09F2			COMF	STACK_2, F
$051C	$0AF8			INCF	STACK_8, F
$051D	$1903			BTFSC	STATUS, Z
$051E	$0AF0			INCF	STACK_0, F
$051F	$1903			BTFSC	STATUS, Z
$0520	$0AF1			INCF	STACK_1, F
$0521	$1903			BTFSC	STATUS, Z
$0522	$0AF2			INCF	STACK_2, F
$0523	$3080			MOVLW	0x80
$0524	$06FA			XORWF	STACK_10, F
$0525	$2D2E			GOTO	JMPNRM32
$0526	$	JMPNRMRND4032:
$0526	$3001			MOVLW	0x01
$0527	$00FC			MOVWF	STACK_12
$0528	$2649			CALL	_NRM4032
$0529	$2D3C			GOTO	ADD32EEE
$052A	$	JMPNRM4032:
$052A	$3002			MOVLW	0x02
$052B	$00FC			MOVWF	STACK_12
$052C	$2649			CALL	_NRM4032
$052D	$2D3C			GOTO	ADD32EEE
$052E	$	JMPNRM32:
$052E	$3004			MOVLW	0x04
$052F	$00FC			MOVWF	STACK_12
$0530	$158A			BSF	PCLATH, 3
$0531	$2111			CALL	_NRM3232
$0532	$118A			BCF	PCLATH, 3
$0533	$2D3C			GOTO	ADD32EEE
$0534	$	ADD_JMPSETFOV32:
$0534	$3008			MOVLW	0x08
$0535	$00FC			MOVWF	STACK_12
$0536	$158A			BSF	PCLATH, 3
$0537	$2221			CALL	_SETFOV32
$0538	$118A			BCF	PCLATH, 3
$0539	$2D3C			GOTO	ADD32EEE
$053A	$	JMPEEE:
$053A	$3000			MOVLW	0x00
$053B	$00FC			MOVWF	STACK_12
$053C	$	ADD32EEE:
$053C	$0000			NOP
$053D	$0008			RETURN
$0A46	$	_PWM1_Start:
$0A46	$1303			BCF	STATUS, RP1
$0A47	$1683			BSF	STATUS, RP0
$0A48	$1107			BCF	TRISC, 2
$0A49	$1283			BCF	STATUS, RP0
$0A4A	$1512			BSF	T2CON, 2
$0A4B	$300C			MOVLW	12
$0A4C	$0497			IORWF	CCP1CON, 1
$0A4D	$0008			RETURN
$0A4E	$	_PWM2_Start:
$0A4E	$1303			BCF	STATUS, RP1
$0A4F	$1683			BSF	STATUS, RP0
$0A50	$1087			BCF	TRISC, 1
$0A51	$1283			BCF	STATUS, RP0
$0A52	$1512			BSF	T2CON, 2
$0A53	$300C			MOVLW	12
$0A54	$049D			IORWF	CCP2CON, 1
$0A55	$0008			RETURN
$0A62	$	_PWM1_Init:
$0A62	$1303			BCF	STATUS, RP1
$0A63	$1283			BCF	STATUS, RP0
$0A64	$0195			CLRF	CCPR1L, 1
$0A65	$1217			BCF	CCP1CON, 4
$0A66	$1297			BCF	CCP1CON, 5
$0A67	$0008			RETURN
$0A56	$	_PWM2_Init:
$0A56	$1303			BCF	STATUS, RP1
$0A57	$1283			BCF	STATUS, RP0
$0A58	$019B			CLRF	CCPR2L, 1
$0A59	$121D			BCF	CCP2CON, 4
$0A5A	$129D			BCF	CCP2CON, 5
$0A5B	$0008			RETURN
$06FD	$	_Mul_16x16_U:
$06FD	$1303			BCF	STATUS, RP1
$06FE	$1283			BCF	STATUS, RP0
$06FF	$01FB			CLRF	STACK_11
$0700	$01FA			CLRF	STACK_10
$0701	$01F9			CLRF	STACK_9
$0702	$3080			MOVLW	128
$0703	$00F8			MOVWF	STACK_8
$0704	$0CF1			RRF	STACK_1, F
$0705	$0CF0			RRF	STACK_0, F
$0706	$1C03			BTFSS	STATUS, C
$0707	$2F11			GOTO	$+10
$0708	$0874			MOVF	STACK_4, W
$0709	$07F9			ADDWF	STACK_9, F
$070A	$0875			MOVF	STACK_5, W
$070B	$1803			BTFSC	STATUS, C
$070C	$0F75			INCFSZ	STACK_5, W
$070D	$07FA			ADDWF	STACK_10, F
$070E	$1803			BTFSC	STATUS, C
$070F	$0AFB			INCF	STACK_11, F
$0710	$1003			BCF	STATUS, C
$0711	$1FF0			BTFSS	STACK_0, 7
$0712	$2F19			GOTO	$+7
$0713	$0874			MOVF	STACK_4, W
$0714	$07FA			ADDWF	STACK_10, F
$0715	$0875			MOVF	STACK_5, W
$0716	$1803			BTFSC	STATUS, C
$0717	$0F75			INCFSZ	STACK_5, W
$0718	$07FB			ADDWF	STACK_11, F
$0719	$0CFB			RRF	STACK_11, F
$071A	$0CFA			RRF	STACK_10, F
$071B	$0CF9			RRF	STACK_9, F
$071C	$0CF8			RRF	STACK_8, F
$071D	$1C03			BTFSS	STATUS, C
$071E	$2F04			GOTO	$-26
$071F	$087B			MOVF	STACK_11, W
$0720	$00F3			MOVWF	STACK_3
$0721	$087A			MOVF	STACK_10, W
$0722	$00F2			MOVWF	STACK_2
$0723	$0879			MOVF	STACK_9, W
$0724	$00F1			MOVWF	STACK_1
$0725	$0878			MOVF	STACK_8, W
$0726	$00F0			MOVWF	STACK_0
$0727	$0008			RETURN
$09C3	$	_Word2Double:
$09C3	$1303			BCF	STATUS, RP1
$09C4	$1283			BCF	STATUS, RP0
$09C5	$0870			MOVF	STACK_0, W
$09C6	$00F8			MOVWF	STACK_8
$09C7	$0871			MOVF	STACK_1, W
$09C8	$00F0			MOVWF	STACK_0
$09C9	$01F1			CLRF	STACK_1
$09CA	$01F2			CLRF	STACK_2
$09CB	$01F3			CLRF	STACK_3
$09CC	$	FLO16U32:
$09CC	$01FB			CLRF	STACK_11
$09CD	$01FC			CLRF	STACK_12
$09CE	$3096			MOVLW	150
$09CF	$00F3			MOVWF	STACK_3
$09D0	$01FA			CLRF	STACK_10
$09D1	$0870			MOVF	STACK_0, W
$09D2	$00F1			MOVWF	STACK_1
$09D3	$0878			MOVF	STACK_8, W
$09D4	$00F0			MOVWF	STACK_0
$09D5	$01F8			CLRF	STACK_8
$09D6	$01F2			CLRF	STACK_2
$09D7	$2111			CALL	_NRM3232
$09D8	$0008			RETURN
$053E	$	_Div_32x32_FP:
$053E	$1303			BCF	STATUS, RP1
$053F	$1283			BCF	STATUS, RP0
$0540	$	FPD32:
$0540	$0877			MOVF	STACK_7, W
$0541	$1903			BTFSC	STATUS, Z
$0542	$2DCD			GOTO	JPDSETFDZ32
$0543	$0873			MOVF	STACK_3, W
$0544	$1903			BTFSC	STATUS, Z
$0545	$2DD2			GOTO	JPDRES032
$0546	$	D32BNE0:
$0546	$0872			MOVF	STACK_2, W
$0547	$0676			XORWF	STACK_6, W
$0548	$3980			ANDLW	128
$0549	$00FA			MOVWF	STACK_10
$054A	$17F2			BSF	STACK_2, 7
$054B	$17F6			BSF	STACK_6, 7
$054C	$	TALIGN32:
$054C	$01A0			CLRF	__math_tempbD
$054D	$0872			MOVF	STACK_2, W
$054E	$00F8			MOVWF	STACK_8
$054F	$0871			MOVF	STACK_1, W
$0550	$00FC			MOVWF	STACK_12
$0551	$0870			MOVF	STACK_0, W
$0552	$00FD			MOVWF	STACK_13
$0553	$0874			MOVF	STACK_4, W
$0554	$02FD			SUBWF	STACK_13, F
$0555	$0875			MOVF	STACK_5, W
$0556	$1C03			BTFSS	STATUS, C
$0557	$0F75			INCFSZ	STACK_5, W
$0558	$	TS1ALIGN32:
$0558	$02FC			SUBWF	STACK_12, F
$0559	$0876			MOVF	STACK_6, W
$055A	$1C03			BTFSS	STATUS, C
$055B	$0F76			INCFSZ	STACK_6, W
$055C	$	TS2ALIGN32:
$055C	$02F8			SUBWF	STACK_8, F
$055D	$01F8			CLRF	STACK_8
$055E	$01FC			CLRF	STACK_12
$055F	$01FD			CLRF	STACK_13
$0560	$1C03			BTFSS	STATUS, C
$0561	$2D69			GOTO	DALIGN32OK
$0562	$1003			BCF	STATUS, C
$0563	$0CF2			RRF	STACK_2, F
$0564	$0CF1			RRF	STACK_1, F
$0565	$0CF0			RRF	STACK_0, F
$0566	$0CF8			RRF	STACK_8, F
$0567	$3001			MOVLW	0x01
$0568	$00A0			MOVWF	__math_tempbD
$0569	$	DALIGN32OK:
$0569	$0877			MOVF	STACK_7, W
$056A	$02F3			SUBWF	STACK_3, F
$056B	$1C03			BTFSS	STATUS, C
$056C	$2D73			GOTO	ALTB32
$056D	$	AGEB32:
$056D	$307E			MOVLW	126
$056E	$0720			ADDWF	__math_tempbD, W
$056F	$07F3			ADDWF	STACK_3, F
$0570	$1803			BTFSC	STATUS, C
$0571	$2DD7			GOTO	JPDSETFOV32
$0572	$2D78			GOTO	DARGOK32
$0573	$	ALTB32:
$0573	$307E			MOVLW	126
$0574	$0720			ADDWF	__math_tempbD, W
$0575	$07F3			ADDWF	STACK_3, F
$0576	$1C03			BTFSS	STATUS, C
$0577	$2DDC			GOTO	JPDSETFUN32
$0578	$	DARGOK32:
$0578	$3018			MOVLW	24
$0579	$07FA			ADDWF	STACK_10, F
$057A	$	DLOOP32:
$057A	$0DFD			RLF	STACK_13, F
$057B	$0DFC			RLF	STACK_12, F
$057C	$0DF8			RLF	STACK_8, F
$057D	$0DF0			RLF	STACK_0, F
$057E	$0DF1			RLF	STACK_1, F
$057F	$0DF2			RLF	STACK_2, F
$0580	$0DA0			RLF	__math_tempbD, F
$0581	$0874			MOVF	STACK_4, W
$0582	$02F0			SUBWF	STACK_0, F
$0583	$0875			MOVF	STACK_5, W
$0584	$1C03			BTFSS	STATUS, C
$0585	$0F75			INCFSZ	STACK_5, W
$0586	$	DS132:
$0586	$02F1			SUBWF	STACK_1, F
$0587	$0876			MOVF	STACK_6, W
$0588	$1C03			BTFSS	STATUS, C
$0589	$0F76			INCFSZ	STACK_6, W
$058A	$	DS232:
$058A	$02F2			SUBWF	STACK_2, F
$058B	$0D76			RLF	STACK_6, W
$058C	$04A0			IORWF	__math_tempbD, F
$058D	$1C20			BTFSS	__math_tempbD, 0
$058E	$2D91			GOTO	DREST32
$058F	$147D			BSF	STACK_13, 0
$0590	$2D9C			GOTO	DOK32
$0591	$	DREST32:
$0591	$0874			MOVF	STACK_4, W
$0592	$07F0			ADDWF	STACK_0, F
$0593	$0875			MOVF	STACK_5, W
$0594	$1803			BTFSC	STATUS, C
$0595	$0F75			INCFSZ	STACK_5, W
$0596	$	DAREST32:
$0596	$07F1			ADDWF	STACK_1, F
$0597	$0876			MOVF	STACK_6, W
$0598	$1803			BTFSC	STATUS, C
$0599	$0A76			INCF	STACK_6, W
$059A	$07F2			ADDWF	STACK_2, F
$059B	$107D			BCF	STACK_13, 0
$059C	$	DOK32:
$059C	$03FA			DECF	STACK_10, F
$059D	$301F			MOVLW	31
$059E	$057A			ANDWF	STACK_10, W
$059F	$1D03			BTFSS	STATUS, Z
$05A0	$2D7A			GOTO	DLOOP32
$05A1	$	DROUND32:
$05A1	$1B7B			BTFSC	STACK_11, 6
$05A2	$1C7D			BTFSS	STACK_13, 0
$05A3	$2DC3			GOTO	DIV32OK
$05A4	$1003			BCF	STATUS, C
$05A5	$0DF0			RLF	STACK_0, F
$05A6	$0DF1			RLF	STACK_1, F
$05A7	$0DF2			RLF	STACK_2, F
$05A8	$0DA0			RLF	__math_tempbD, F
$05A9	$0874			MOVF	STACK_4, W
$05AA	$02F0			SUBWF	STACK_0, F
$05AB	$0875			MOVF	STACK_5, W
$05AC	$1C03			BTFSS	STATUS, C
$05AD	$0F75			INCFSZ	STACK_5, W
$05AE	$02F1			SUBWF	STACK_1, F
$05AF	$0876			MOVF	STACK_6, W
$05B0	$1C03			BTFSS	STATUS, C
$05B1	$0F76			INCFSZ	STACK_6, W
$05B2	$02F2			SUBWF	STACK_2, F
$05B3	$0D76			RLF	STACK_6, W
$05B4	$0420			IORWF	__math_tempbD, W
$05B5	$3901			ANDLW	0x01
$05B6	$07FD			ADDWF	STACK_13, F
$05B7	$1803			BTFSC	STATUS, C
$05B8	$0AFC			INCF	STACK_12, F
$05B9	$1903			BTFSC	STATUS, Z
$05BA	$0AF8			INCF	STACK_8, F
$05BB	$1D03			BTFSS	STATUS, Z
$05BC	$2DC3			GOTO	DIV32OK
$05BD	$0CF8			RRF	STACK_8, F
$05BE	$0CFC			RRF	STACK_12, F
$05BF	$0CFD			RRF	STACK_13, F
$05C0	$0AF3			INCF	STACK_3, F
$05C1	$1903			BTFSC	STATUS, Z
$05C2	$2DD7			GOTO	JPDSETFOV32
$05C3	$	DIV32OK:
$05C3	$1FFA			BTFSS	STACK_10, 7
$05C4	$13F8			BCF	STACK_8, 7
$05C5	$0878			MOVF	STACK_8, W
$05C6	$00F2			MOVWF	STACK_2
$05C7	$087C			MOVF	STACK_12, W
$05C8	$00F1			MOVWF	STACK_1
$05C9	$087D			MOVF	STACK_13, W
$05CA	$00F0			MOVWF	STACK_0
$05CB	$3000			MOVLW	0x00
$05CC	$2DE0			GOTO	DIV32EEE
$05CD	$	JPDSETFDZ32:
$05CD	$3001			MOVLW	0x01
$05CE	$158A			BSF	PCLATH, 3
$05CF	$227C			CALL	_SETFDZ32
$05D0	$118A			BCF	PCLATH, 3
$05D1	$2DE0			GOTO	DIV32EEE
$05D2	$	JPDRES032:
$05D2	$3002			MOVLW	0x02
$05D3	$158A			BSF	PCLATH, 3
$05D4	$223D			CALL	_RES032
$05D5	$118A			BCF	PCLATH, 3
$05D6	$2DE0			GOTO	DIV32EEE
$05D7	$	JPDSETFOV32:
$05D7	$3004			MOVLW	0x04
$05D8	$158A			BSF	PCLATH, 3
$05D9	$2221			CALL	_SETFOV32
$05DA	$118A			BCF	PCLATH, 3
$05DB	$2DE0			GOTO	DIV32EEE
$05DC	$	JPDSETFUN32:
$05DC	$3008			MOVLW	0x08
$05DD	$158A			BSF	PCLATH, 3
$05DE	$222F			CALL	_SETFUN32
$05DF	$118A			BCF	PCLATH, 3
$05E0	$	DIV32EEE:
$05E0	$0000			NOP
$05E1	$0008			RETURN
$0728	$	_Sub_32x32_FP:
$0728	$1303			BCF	STATUS, RP1
$0729	$1283			BCF	STATUS, RP0
$072A	$3080			MOVLW	0x80
$072B	$06F6			XORWF	STACK_6, F
$072C	$249A			CALL	_Add_32x32_FP
$072D	$0008			RETURN
$084B	$	_Mul_16x16_S:
$084B	$1303			BCF	STATUS, RP1
$084C	$1283			BCF	STATUS, RP0
$084D	$01FB			CLRF	STACK_11
$084E	$01FA			CLRF	STACK_10
$084F	$01F9			CLRF	STACK_9
$0850	$3080			MOVLW	128
$0851	$00F8			MOVWF	STACK_8
$0852	$01FD			CLRF	STACK_13
$0853	$1FF1			BTFSS	STACK_1, 7
$0854	$285B			GOTO	$+7
$0855	$09F1			COMF	STACK_1, F
$0856	$09F0			COMF	STACK_0, F
$0857	$0AF0			INCF	STACK_0, F
$0858	$1903			BTFSC	STATUS, Z
$0859	$0AF1			INCF	STACK_1, F
$085A	$0AFD			INCF	STACK_13, F
$085B	$1FF5			BTFSS	STACK_5, 7
$085C	$2863			GOTO	$+7
$085D	$09F5			COMF	STACK_5, F
$085E	$09F4			COMF	STACK_4, F
$085F	$0AF4			INCF	STACK_4, F
$0860	$1903			BTFSC	STATUS, Z
$0861	$0AF5			INCF	STACK_5, F
$0862	$0AFD			INCF	STACK_13, F
$0863	$0CF1			RRF	STACK_1, F
$0864	$0CF0			RRF	STACK_0, F
$0865	$1C03			BTFSS	STATUS, C
$0866	$2870			GOTO	$+10
$0867	$0874			MOVF	STACK_4, W
$0868	$07F9			ADDWF	STACK_9, F
$0869	$0875			MOVF	STACK_5, W
$086A	$1803			BTFSC	STATUS, C
$086B	$0F75			INCFSZ	STACK_5, W
$086C	$07FA			ADDWF	STACK_10, F
$086D	$1803			BTFSC	STATUS, C
$086E	$0AFB			INCF	STACK_11, F
$086F	$1003			BCF	STATUS, C
$0870	$1FF0			BTFSS	STACK_0, 7
$0871	$2878			GOTO	$+7
$0872	$0874			MOVF	STACK_4, W
$0873	$07FA			ADDWF	STACK_10, F
$0874	$1803			BTFSC	STATUS, C
$0875	$0AFB			INCF	STACK_11, F
$0876	$0875			MOVF	STACK_5, W
$0877	$07FB			ADDWF	STACK_11, F
$0878	$0CFB			RRF	STACK_11, F
$0879	$0CFA			RRF	STACK_10, F
$087A	$0CF9			RRF	STACK_9, F
$087B	$0CF8			RRF	STACK_8, F
$087C	$1C03			BTFSS	STATUS, C
$087D	$2863			GOTO	$-26
$087E	$1C7D			BTFSS	STACK_13, 0
$087F	$288B			GOTO	$+12
$0880	$09FB			COMF	STACK_11, F
$0881	$09FA			COMF	STACK_10, F
$0882	$09F9			COMF	STACK_9, F
$0883	$09F8			COMF	STACK_8, F
$0884	$0AF8			INCF	STACK_8, F
$0885	$1903			BTFSC	STATUS, Z
$0886	$0AF9			INCF	STACK_9, F
$0887	$1903			BTFSC	STATUS, Z
$0888	$0AFA			INCF	STACK_10, F
$0889	$1903			BTFSC	STATUS, Z
$088A	$0AFB			INCF	STACK_11, F
$088B	$087B			MOVF	STACK_11, W
$088C	$00F3			MOVWF	STACK_3
$088D	$087A			MOVF	STACK_10, W
$088E	$00F2			MOVWF	STACK_2
$088F	$0879			MOVF	STACK_9, W
$0890	$00F1			MOVWF	STACK_1
$0891	$0878			MOVF	STACK_8, W
$0892	$00F0			MOVWF	STACK_0
$0893	$0000			NOP
$0894	$0008			RETURN
$0A12	$	_SETIOV3224:
$0A12	$1303			BCF	STATUS, RP1
$0A13	$1283			BCF	STATUS, RP0
$0A14	$147B			BSF	STACK_11, 0
$0A15	$1FFB			BTFSS	STACK_11, 7
$0A16	$2A1F			GOTO	SETIOV3224EEE
$0A17	$01F2			CLRF	STACK_2
$0A18	$1FFA			BTFSS	STACK_10, 7
$0A19	$30FF			MOVLW	0xFF
$0A1A	$00F2			MOVWF	STACK_2
$0A1B	$00F1			MOVWF	STACK_1
$0A1C	$00F0			MOVWF	STACK_0
$0A1D	$0DFA			RLF	STACK_10, F
$0A1E	$0CF2			RRF	STACK_2, F
$0A1F	$	SETIOV3224EEE:
$0A1F	$30FF			MOVLW	0xFF
$0A20	$0008			RETURN
$0A01	$	_initport:
;lfr_runner_5sen_tsop_1.c,14 :: 		void initport()
;lfr_runner_5sen_tsop_1.c,16 :: 		ADCON1 =0x06;          //TURN OFF ADC AND CONFIGURE A AND E AS DIG I/O
$0A01	$3006			MOVLW	6
$0A02	$1303			BCF	STATUS, RP1
$0A03	$1683			BSF	STATUS, RP0
$0A04	$009F			MOVWF	ADCON1
;lfr_runner_5sen_tsop_1.c,17 :: 		PORTA = 0;             //CLEAR PORTA
$0A05	$1283			BCF	STATUS, RP0
$0A06	$0185			CLRF	PORTA, 1
;lfr_runner_5sen_tsop_1.c,18 :: 		PORTE = 0;             //CLEAR PORTE
$0A07	$0189			CLRF	PORTE, 1
;lfr_runner_5sen_tsop_1.c,19 :: 		TRISA = 0x3F;          //INITIALIZE PORTA AS INPUT
$0A08	$303F			MOVLW	63
$0A09	$1683			BSF	STATUS, RP0
$0A0A	$0085			MOVWF	TRISA
;lfr_runner_5sen_tsop_1.c,20 :: 		TRISE = 0x03;          //INITIALIZE PORTE AS INPUT
$0A0B	$3003			MOVLW	3
$0A0C	$0089			MOVWF	TRISE
;lfr_runner_5sen_tsop_1.c,21 :: 		TRISD = 0x00;          //INITIALIZE PORTD AS OUTPUT
$0A0D	$0188			CLRF	TRISD, 1
;lfr_runner_5sen_tsop_1.c,22 :: 		TRISC = 0b00000000;    //INITIALIZE PORTC AS OUTPUT
$0A0E	$0187			CLRF	TRISC, 1
;lfr_runner_5sen_tsop_1.c,23 :: 		TRISB = 0b11000000;    //INITIALIZE PORTB AS INPUT  FOR TSOP
$0A0F	$30C0			MOVLW	192
$0A10	$0086			MOVWF	TRISB
;lfr_runner_5sen_tsop_1.c,24 :: 		}
$0A11	$0008			RETURN
$09B2	$	_initpwm:
;lfr_runner_5sen_tsop_1.c,26 :: 		void initpwm()
;lfr_runner_5sen_tsop_1.c,28 :: 		PWM1_Init(5000);
$09B2	$1303			BCF	STATUS, RP1
$09B3	$1283			BCF	STATUS, RP0
$09B4	$1012			BCF	T2CON, T2CKPS0
$09B5	$1092			BCF	T2CON, T2CKPS1
$09B6	$30C7			MOVLW	199
$09B7	$1683			BSF	STATUS, RP0
$09B8	$0092			MOVWF	PR2
$09B9	$2262			CALL	_PWM1_Init
;lfr_runner_5sen_tsop_1.c,29 :: 		PWM2_Init(5000);
$09BA	$1012			BCF	T2CON, T2CKPS0
$09BB	$1092			BCF	T2CON, T2CKPS1
$09BC	$30C7			MOVLW	199
$09BD	$1683			BSF	STATUS, RP0
$09BE	$0092			MOVWF	PR2
$09BF	$2256			CALL	_PWM2_Init
;lfr_runner_5sen_tsop_1.c,30 :: 		Pwm1_Start();          //RIGHT MOTOR
$09C0	$2246			CALL	_PWM1_Start
;lfr_runner_5sen_tsop_1.c,31 :: 		Pwm2_Start();          //LEFT MOTOR
$09C1	$224E			CALL	_PWM2_Start
;lfr_runner_5sen_tsop_1.c,32 :: 		}
$09C2	$0008			RETURN
$097B	$	_indicator:
;lfr_runner_5sen_tsop_1.c,57 :: 		void indicator()         //COPY THE SENSOR OUTPUT TO PORTD-INDICATOR
;lfr_runner_5sen_tsop_1.c,60 :: 		PORTD.F7 = 0;
$097B	$1303			BCF	STATUS, RP1
$097C	$1283			BCF	STATUS, RP0
$097D	$1388			BCF	PORTD, 7
;lfr_runner_5sen_tsop_1.c,61 :: 		PORTD.F6 = 0;
$097E	$1308			BCF	PORTD, 6
;lfr_runner_5sen_tsop_1.c,62 :: 		PORTD.F5 = PORTA.F2;
$097F	$3000			MOVLW	0
$0980	$1905			BTFSC	PORTA, 2
$0981	$3001			MOVLW	1
$0982	$00F1			MOVWF	STACK_1
$0983	$3000			MOVLW	0
$0984	$1871			BTFSC	STACK_1, 0
$0985	$3020			MOVLW	32
$0986	$0608			XORWF	PORTD, 0
$0987	$3920			ANDLW	32
$0988	$0688			XORWF	PORTD, 1
;lfr_runner_5sen_tsop_1.c,63 :: 		PORTD.F4 = PORTA.F3;
$0989	$3000			MOVLW	0
$098A	$1985			BTFSC	PORTA, 3
$098B	$3001			MOVLW	1
$098C	$00F1			MOVWF	STACK_1
$098D	$3000			MOVLW	0
$098E	$1871			BTFSC	STACK_1, 0
$098F	$3010			MOVLW	16
$0990	$0608			XORWF	PORTD, 0
$0991	$3910			ANDLW	16
$0992	$0688			XORWF	PORTD, 1
;lfr_runner_5sen_tsop_1.c,64 :: 		PORTD.F3 = PORTA.F4;
$0993	$3000			MOVLW	0
$0994	$1A05			BTFSC	PORTA, 4
$0995	$3001			MOVLW	1
$0996	$00F1			MOVWF	STACK_1
$0997	$3000			MOVLW	0
$0998	$1871			BTFSC	STACK_1, 0
$0999	$3008			MOVLW	8
$099A	$0608			XORWF	PORTD, 0
$099B	$3908			ANDLW	8
$099C	$0688			XORWF	PORTD, 1
;lfr_runner_5sen_tsop_1.c,65 :: 		PORTD.F2 = PORTA.F5;
$099D	$3000			MOVLW	0
$099E	$1A85			BTFSC	PORTA, 5
$099F	$3001			MOVLW	1
$09A0	$00F1			MOVWF	STACK_1
$09A1	$3000			MOVLW	0
$09A2	$1871			BTFSC	STACK_1, 0
$09A3	$3004			MOVLW	4
$09A4	$0608			XORWF	PORTD, 0
$09A5	$3904			ANDLW	4
$09A6	$0688			XORWF	PORTD, 1
;lfr_runner_5sen_tsop_1.c,66 :: 		PORTD.F1 = PORTE.F0;
$09A7	$3001			MOVLW	1
$09A8	$0509			ANDWF	PORTE, 0
$09A9	$00F0			MOVWF	STACK_0
$09AA	$3000			MOVLW	0
$09AB	$1870			BTFSC	STACK_0, 0
$09AC	$3002			MOVLW	2
$09AD	$0608			XORWF	PORTD, 0
$09AE	$3902			ANDLW	2
$09AF	$0688			XORWF	PORTD, 1
;lfr_runner_5sen_tsop_1.c,67 :: 		PORTD.F0 = 0;
$09B0	$1008			BCF	PORTD, 0
;lfr_runner_5sen_tsop_1.c,68 :: 		}
$09B1	$0008			RETURN
$03C1	$	_CalcError:
;lfr_runner_5sen_tsop_1.c,69 :: 		void CalcError()				 //calculates the current error
;lfr_runner_5sen_tsop_1.c,71 :: 		s1 = 0;
$03C1	$1303			BCF	STATUS, RP1
$03C2	$1283			BCF	STATUS, RP0
$03C3	$01A1			CLRF	_s1
$03C4	$01A2			CLRF	_s1+1
;lfr_runner_5sen_tsop_1.c,72 :: 		s2 = 0;
$03C5	$01A3			CLRF	_s2
$03C6	$01A4			CLRF	_s2+1
;lfr_runner_5sen_tsop_1.c,73 :: 		s3 = 0;
$03C7	$01A5			CLRF	_s3
$03C8	$01A6			CLRF	_s3+1
;lfr_runner_5sen_tsop_1.c,74 :: 		s4 = 0;
$03C9	$01A7			CLRF	_s4
$03CA	$01A8			CLRF	_s4+1
;lfr_runner_5sen_tsop_1.c,75 :: 		s5 = 0;
$03CB	$01A9			CLRF	_s5
$03CC	$01AA			CLRF	_s5+1
;lfr_runner_5sen_tsop_1.c,77 :: 		if(PORTA.F2)
$03CD	$1D05			BTFSS	PORTA, 2
$03CE	$2BD5			GOTO	L_CalcError_0
;lfr_runner_5sen_tsop_1.c,79 :: 		lastreading='r';
$03CF	$3072			MOVLW	114
$03D0	$00AB			MOVWF	_lastreading
;lfr_runner_5sen_tsop_1.c,80 :: 		s1 = 1;
$03D1	$3001			MOVLW	1
$03D2	$00A1			MOVWF	_s1
$03D3	$3000			MOVLW	0
$03D4	$00A2			MOVWF	_s1+1
;lfr_runner_5sen_tsop_1.c,81 :: 		}
$03D5	$	L_CalcError_0:
;lfr_runner_5sen_tsop_1.c,82 :: 		if(PORTA.F3)
$03D5	$1D85			BTFSS	PORTA, 3
$03D6	$2BDB			GOTO	L_CalcError_1
;lfr_runner_5sen_tsop_1.c,84 :: 		s2 = 1;
$03D7	$3001			MOVLW	1
$03D8	$00A3			MOVWF	_s2
$03D9	$3000			MOVLW	0
$03DA	$00A4			MOVWF	_s2+1
;lfr_runner_5sen_tsop_1.c,85 :: 		}
$03DB	$	L_CalcError_1:
;lfr_runner_5sen_tsop_1.c,86 :: 		if(PORTA.F4)
$03DB	$1E05			BTFSS	PORTA, 4
$03DC	$2BE1			GOTO	L_CalcError_2
;lfr_runner_5sen_tsop_1.c,88 :: 		s3 = 1;
$03DD	$3001			MOVLW	1
$03DE	$00A5			MOVWF	_s3
$03DF	$3000			MOVLW	0
$03E0	$00A6			MOVWF	_s3+1
;lfr_runner_5sen_tsop_1.c,89 :: 		}
$03E1	$	L_CalcError_2:
;lfr_runner_5sen_tsop_1.c,90 :: 		if(PORTA.F5)
$03E1	$1E85			BTFSS	PORTA, 5
$03E2	$2BE7			GOTO	L_CalcError_3
;lfr_runner_5sen_tsop_1.c,93 :: 		s4 = 1;
$03E3	$3001			MOVLW	1
$03E4	$00A7			MOVWF	_s4
$03E5	$3000			MOVLW	0
$03E6	$00A8			MOVWF	_s4+1
;lfr_runner_5sen_tsop_1.c,94 :: 		}
$03E7	$	L_CalcError_3:
;lfr_runner_5sen_tsop_1.c,95 :: 		if(PORTE.F0)
$03E7	$1C09			BTFSS	PORTE, 0
$03E8	$2BEF			GOTO	L_CalcError_4
;lfr_runner_5sen_tsop_1.c,97 :: 		lastreading='l';
$03E9	$306C			MOVLW	108
$03EA	$00AB			MOVWF	_lastreading
;lfr_runner_5sen_tsop_1.c,98 :: 		s5 = 1;
$03EB	$3001			MOVLW	1
$03EC	$00A9			MOVWF	_s5
$03ED	$3000			MOVLW	0
$03EE	$00AA			MOVWF	_s5+1
;lfr_runner_5sen_tsop_1.c,99 :: 		}
$03EF	$	L_CalcError_4:
;lfr_runner_5sen_tsop_1.c,101 :: 		perror = error;
$03EF	$0830			MOVF	_error, 0
$03F0	$00AC			MOVWF	_perror
$03F1	$0831			MOVF	_error+1, 0
$03F2	$00AD			MOVWF	_perror+1
$03F3	$0832			MOVF	_error+2, 0
$03F4	$00AE			MOVWF	_perror+2
$03F5	$0833			MOVF	_error+3, 0
$03F6	$00AF			MOVWF	_perror+3
;lfr_runner_5sen_tsop_1.c,105 :: 		error = (s1 * 1) + (s2 * 2) + (s3 * 3) + (s4 * 4) + (s5 * 5) ;
$03F7	$3001			MOVLW	1
$03F8	$00F4			MOVWF	STACK_4
$03F9	$0823			MOVF	_s2, 0
$03FA	$00F0			MOVWF	STACK_0
$03FB	$0824			MOVF	_s2+1, 0
$03FC	$00F1			MOVWF	STACK_0+1
$03FD	$0874			MOVF	STACK_4, 0
$03FE	$	L_CalcError_43:
$03FE	$1903			BTFSC	STATUS, Z
$03FF	$2C05			GOTO	L_CalcError_44
$0400	$0DF0			RLF	STACK_0, 1
$0401	$0DF1			RLF	STACK_0+1, 1
$0402	$1070			BCF	STACK_0, 0
$0403	$3FFF			ADDLW	255
$0404	$2BFE			GOTO	L_CalcError_43
$0405	$	L_CalcError_44:
$0405	$0870			MOVF	STACK_0, 0
$0406	$0721			ADDWF	_s1, 0
$0407	$00DE			MOVWF	FLOC_CalcError+0
$0408	$0822			MOVF	_s1+1, 0
$0409	$1803			BTFSC	STATUS, C
$040A	$3F01			ADDLW	1
$040B	$0771			ADDWF	STACK_0+1, 0
$040C	$00DF			MOVWF	FLOC_CalcError+1
$040D	$0825			MOVF	_s3, 0
$040E	$00F0			MOVWF	STACK_0
$040F	$0826			MOVF	_s3+1, 0
$0410	$00F1			MOVWF	STACK_0+1
$0411	$3003			MOVLW	3
$0412	$00F4			MOVWF	STACK_4
$0413	$3000			MOVLW	0
$0414	$00F5			MOVWF	STACK_4+1
$0415	$26FD			CALL	_mul_16x16_u
$0416	$0870			MOVF	STACK_0, 0
$0417	$07DE			ADDWF	FLOC_CalcError+0, 1
$0418	$0871			MOVF	STACK_0+1, 0
$0419	$1803			BTFSC	STATUS, C
$041A	$3F01			ADDLW	1
$041B	$07DF			ADDWF	FLOC_CalcError+1, 1
$041C	$3002			MOVLW	2
$041D	$00F4			MOVWF	STACK_4
$041E	$0827			MOVF	_s4, 0
$041F	$00F0			MOVWF	STACK_0
$0420	$0828			MOVF	_s4+1, 0
$0421	$00F1			MOVWF	STACK_0+1
$0422	$0874			MOVF	STACK_4, 0
$0423	$	L_CalcError_45:
$0423	$1903			BTFSC	STATUS, Z
$0424	$2C2A			GOTO	L_CalcError_46
$0425	$0DF0			RLF	STACK_0, 1
$0426	$0DF1			RLF	STACK_0+1, 1
$0427	$1070			BCF	STACK_0, 0
$0428	$3FFF			ADDLW	255
$0429	$2C23			GOTO	L_CalcError_45
$042A	$	L_CalcError_46:
$042A	$0870			MOVF	STACK_0, 0
$042B	$07DE			ADDWF	FLOC_CalcError+0, 1
$042C	$0871			MOVF	STACK_0+1, 0
$042D	$1803			BTFSC	STATUS, C
$042E	$3F01			ADDLW	1
$042F	$07DF			ADDWF	FLOC_CalcError+1, 1
$0430	$0829			MOVF	_s5, 0
$0431	$00F0			MOVWF	STACK_0
$0432	$082A			MOVF	_s5+1, 0
$0433	$00F1			MOVWF	STACK_0+1
$0434	$3005			MOVLW	5
$0435	$00F4			MOVWF	STACK_4
$0436	$3000			MOVLW	0
$0437	$00F5			MOVWF	STACK_4+1
$0438	$26FD			CALL	_mul_16x16_u
$0439	$085E			MOVF	FLOC_CalcError+0, 0
$043A	$07F0			ADDWF	STACK_0, 1
$043B	$085F			MOVF	FLOC_CalcError+1, 0
$043C	$1803			BTFSC	STATUS, C
$043D	$3F01			ADDLW	1
$043E	$07F1			ADDWF	STACK_0+1, 1
$043F	$158A			BSF	PCLATH, 3
$0440	$21C3			CALL	_word2double
$0441	$118A			BCF	PCLATH, 3
$0442	$0870			MOVF	STACK_0, 0
$0443	$00DE			MOVWF	FLOC_CalcError+0
$0444	$0871			MOVF	STACK_0+1, 0
$0445	$00DF			MOVWF	FLOC_CalcError+1
$0446	$0872			MOVF	STACK_0+2, 0
$0447	$00E0			MOVWF	FLOC_CalcError+2
$0448	$0873			MOVF	STACK_0+3, 0
$0449	$00E1			MOVWF	FLOC_CalcError+3
$044A	$085E			MOVF	FLOC_CalcError+0, 0
$044B	$00B0			MOVWF	_error
$044C	$085F			MOVF	FLOC_CalcError+1, 0
$044D	$00B1			MOVWF	_error+1
$044E	$0860			MOVF	FLOC_CalcError+2, 0
$044F	$00B2			MOVWF	_error+2
$0450	$0861			MOVF	FLOC_CalcError+3, 0
$0451	$00B3			MOVWF	_error+3
;lfr_runner_5sen_tsop_1.c,106 :: 		error = (error)/(s1+s2+s3+s4+s5);
$0452	$0823			MOVF	_s2, 0
$0453	$0721			ADDWF	_s1, 0
$0454	$00F0			MOVWF	STACK_0
$0455	$0822			MOVF	_s1+1, 0
$0456	$1803			BTFSC	STATUS, C
$0457	$3F01			ADDLW	1
$0458	$0724			ADDWF	_s2+1, 0
$0459	$00F1			MOVWF	STACK_0+1
$045A	$0825			MOVF	_s3, 0
$045B	$07F0			ADDWF	STACK_0, 1
$045C	$0826			MOVF	_s3+1, 0
$045D	$1803			BTFSC	STATUS, C
$045E	$3F01			ADDLW	1
$045F	$07F1			ADDWF	STACK_0+1, 1
$0460	$0827			MOVF	_s4, 0
$0461	$07F0			ADDWF	STACK_0, 1
$0462	$0828			MOVF	_s4+1, 0
$0463	$1803			BTFSC	STATUS, C
$0464	$3F01			ADDLW	1
$0465	$07F1			ADDWF	STACK_0+1, 1
$0466	$0829			MOVF	_s5, 0
$0467	$07F0			ADDWF	STACK_0, 1
$0468	$082A			MOVF	_s5+1, 0
$0469	$1803			BTFSC	STATUS, C
$046A	$3F01			ADDLW	1
$046B	$07F1			ADDWF	STACK_0+1, 1
$046C	$158A			BSF	PCLATH, 3
$046D	$21C3			CALL	_word2double
$046E	$118A			BCF	PCLATH, 3
$046F	$0870			MOVF	STACK_0, 0
$0470	$00F4			MOVWF	STACK_4
$0471	$0871			MOVF	STACK_0+1, 0
$0472	$00F5			MOVWF	STACK_4+1
$0473	$0872			MOVF	STACK_0+2, 0
$0474	$00F6			MOVWF	STACK_4+2
$0475	$0873			MOVF	STACK_0+3, 0
$0476	$00F7			MOVWF	STACK_4+3
$0477	$085E			MOVF	FLOC_CalcError+0, 0
$0478	$00F0			MOVWF	STACK_0
$0479	$085F			MOVF	FLOC_CalcError+1, 0
$047A	$00F1			MOVWF	STACK_0+1
$047B	$0860			MOVF	FLOC_CalcError+2, 0
$047C	$00F2			MOVWF	STACK_0+2
$047D	$0861			MOVF	FLOC_CalcError+3, 0
$047E	$00F3			MOVWF	STACK_0+3
$047F	$253E			CALL	_div_32x32_fp
$0480	$0870			MOVF	STACK_0, 0
$0481	$00B0			MOVWF	_error
$0482	$0871			MOVF	STACK_0+1, 0
$0483	$00B1			MOVWF	_error+1
$0484	$0872			MOVF	STACK_0+2, 0
$0485	$00B2			MOVWF	_error+2
$0486	$0873			MOVF	STACK_0+3, 0
$0487	$00B3			MOVWF	_error+3
;lfr_runner_5sen_tsop_1.c,107 :: 		error = error - 3;
$0488	$3000			MOVLW	0
$0489	$00F4			MOVWF	STACK_4
$048A	$3000			MOVLW	0
$048B	$00F5			MOVWF	STACK_4+1
$048C	$3040			MOVLW	64
$048D	$00F6			MOVWF	STACK_4+2
$048E	$3080			MOVLW	128
$048F	$00F7			MOVWF	STACK_4+3
$0490	$2728			CALL	_sub_32x32_fp
$0491	$0870			MOVF	STACK_0, 0
$0492	$00B0			MOVWF	_error
$0493	$0871			MOVF	STACK_0+1, 0
$0494	$00B1			MOVWF	_error+1
$0495	$0872			MOVF	STACK_0+2, 0
$0496	$00B2			MOVWF	_error+2
$0497	$0873			MOVF	STACK_0+3, 0
$0498	$00B3			MOVWF	_error+3
;lfr_runner_5sen_tsop_1.c,108 :: 		}
$0499	$0008			RETURN
$0A72	$	_motor_RB:
;lfr_runner_5sen_tsop_1.c,40 :: 		void motor_RB()          //RIGHT MOTOR REV DIR
;lfr_runner_5sen_tsop_1.c,42 :: 		PORTC.F7 = 0;
$0A72	$1303			BCF	STATUS, RP1
$0A73	$1283			BCF	STATUS, RP0
$0A74	$1387			BCF	PORTC, 7
;lfr_runner_5sen_tsop_1.c,43 :: 		PORTC.F6 = 1;
$0A75	$1707			BSF	PORTC, 6
;lfr_runner_5sen_tsop_1.c,44 :: 		}
$0A76	$0008			RETURN
$0A6D	$	_motor_LF:
;lfr_runner_5sen_tsop_1.c,46 :: 		void motor_LF()          //LEFT MOTOR FWD DIR
;lfr_runner_5sen_tsop_1.c,48 :: 		PORTC.F5 = 1;
$0A6D	$1303			BCF	STATUS, RP1
$0A6E	$1283			BCF	STATUS, RP0
$0A6F	$1687			BSF	PORTC, 5
;lfr_runner_5sen_tsop_1.c,49 :: 		PORTC.F4 = 0;
$0A70	$1207			BCF	PORTC, 4
;lfr_runner_5sen_tsop_1.c,50 :: 		}
$0A71	$0008			RETURN
$08D8	$	_PWM1_Change_Duty:
$08D8	$1303			BCF	STATUS, RP1
$08D9	$1683			BSF	STATUS, RP0
$08DA	$0812			MOVF	PR2, 0
$08DB	$3F01			ADDLW	1
$08DC	$00F0			MOVWF	STACK_0
$08DD	$01F1			CLRF	STACK_0+1
$08DE	$1803			BTFSC	STATUS, C
$08DF	$0AF1			INCF	STACK_0+1, 1
$08E0	$1283			BCF	STATUS, RP0
$08E1	$085E			MOVF	FARG_PWM1_Change_Duty+0, 0
$08E2	$00F4			MOVWF	STACK_4
$08E3	$01F5			CLRF	STACK_4+1
$08E4	$204B			CALL	_mul_16x16_s
$08E5	$3006			MOVLW	6
$08E6	$00F2			MOVWF	STACK_2
$08E7	$0870			MOVF	STACK_0, 0
$08E8	$00F4			MOVWF	STACK_4
$08E9	$0871			MOVF	STACK_0+1, 0
$08EA	$00F5			MOVWF	STACK_4+1
$08EB	$0872			MOVF	STACK_2, 0
$08EC	$	L_PWM1_Change_Duty_2:
$08EC	$1903			BTFSC	STATUS, Z
$08ED	$28F3			GOTO	L_PWM1_Change_Duty_3
$08EE	$0CF5			RRF	STACK_4+1, 1
$08EF	$0CF4			RRF	STACK_4, 1
$08F0	$13F5			BCF	STACK_4+1, 7
$08F1	$3FFF			ADDLW	255
$08F2	$28EC			GOTO	L_PWM1_Change_Duty_2
$08F3	$	L_PWM1_Change_Duty_3:
$08F3	$0874			MOVF	STACK_4, 0
$08F4	$00F0			MOVWF	STACK_0
$08F5	$0DF0			RLF	STACK_0, 1
$08F6	$1070			BCF	STACK_0, 0
$08F7	$0DF0			RLF	STACK_0, 1
$08F8	$1070			BCF	STACK_0, 0
$08F9	$0DF0			RLF	STACK_0, 1
$08FA	$1070			BCF	STACK_0, 0
$08FB	$0DF0			RLF	STACK_0, 1
$08FC	$1070			BCF	STACK_0, 0
$08FD	$3030			MOVLW	48
$08FE	$0570			ANDWF	STACK_0, 0
$08FF	$00F3			MOVWF	STACK_3
$0900	$0874			MOVF	STACK_4, 0
$0901	$00F0			MOVWF	STACK_0
$0902	$0875			MOVF	STACK_4+1, 0
$0903	$00F1			MOVWF	STACK_0+1
$0904	$0CF1			RRF	STACK_0+1, 1
$0905	$0CF0			RRF	STACK_0, 1
$0906	$13F1			BCF	STACK_0+1, 7
$0907	$0CF1			RRF	STACK_0+1, 1
$0908	$0CF0			RRF	STACK_0, 1
$0909	$13F1			BCF	STACK_0+1, 7
$090A	$0870			MOVF	STACK_0, 0
$090B	$0095			MOVWF	CCPR1L
$090C	$300F			MOVLW	15
$090D	$0597			ANDWF	CCP1CON, 1
$090E	$0873			MOVF	STACK_3, 0
$090F	$0497			IORWF	CCP1CON, 1
$0910	$0008			RETURN
$0942	$	_PWM2_Change_Duty:
$0942	$1303			BCF	STATUS, RP1
$0943	$1683			BSF	STATUS, RP0
$0944	$0812			MOVF	PR2, 0
$0945	$3F01			ADDLW	1
$0946	$00F0			MOVWF	STACK_0
$0947	$01F1			CLRF	STACK_0+1
$0948	$1803			BTFSC	STATUS, C
$0949	$0AF1			INCF	STACK_0+1, 1
$094A	$1283			BCF	STATUS, RP0
$094B	$085E			MOVF	FARG_PWM2_Change_Duty+0, 0
$094C	$00F4			MOVWF	STACK_4
$094D	$01F5			CLRF	STACK_4+1
$094E	$204B			CALL	_mul_16x16_s
$094F	$3006			MOVLW	6
$0950	$00F2			MOVWF	STACK_2
$0951	$0870			MOVF	STACK_0, 0
$0952	$00F4			MOVWF	STACK_4
$0953	$0871			MOVF	STACK_0+1, 0
$0954	$00F5			MOVWF	STACK_4+1
$0955	$0872			MOVF	STACK_2, 0
$0956	$	L_PWM2_Change_Duty_0:
$0956	$1903			BTFSC	STATUS, Z
$0957	$295D			GOTO	L_PWM2_Change_Duty_1
$0958	$0CF5			RRF	STACK_4+1, 1
$0959	$0CF4			RRF	STACK_4, 1
$095A	$13F5			BCF	STACK_4+1, 7
$095B	$3FFF			ADDLW	255
$095C	$2956			GOTO	L_PWM2_Change_Duty_0
$095D	$	L_PWM2_Change_Duty_1:
$095D	$0874			MOVF	STACK_4, 0
$095E	$00F0			MOVWF	STACK_0
$095F	$0DF0			RLF	STACK_0, 1
$0960	$1070			BCF	STACK_0, 0
$0961	$0DF0			RLF	STACK_0, 1
$0962	$1070			BCF	STACK_0, 0
$0963	$0DF0			RLF	STACK_0, 1
$0964	$1070			BCF	STACK_0, 0
$0965	$0DF0			RLF	STACK_0, 1
$0966	$1070			BCF	STACK_0, 0
$0967	$3030			MOVLW	48
$0968	$0570			ANDWF	STACK_0, 0
$0969	$00F3			MOVWF	STACK_3
$096A	$0874			MOVF	STACK_4, 0
$096B	$00F0			MOVWF	STACK_0
$096C	$0875			MOVF	STACK_4+1, 0
$096D	$00F1			MOVWF	STACK_0+1
$096E	$0CF1			RRF	STACK_0+1, 1
$096F	$0CF0			RRF	STACK_0, 1
$0970	$13F1			BCF	STACK_0+1, 7
$0971	$0CF1			RRF	STACK_0+1, 1
$0972	$0CF0			RRF	STACK_0, 1
$0973	$13F1			BCF	STACK_0+1, 7
$0974	$0870			MOVF	STACK_0, 0
$0975	$009B			MOVWF	CCPR2L
$0976	$300F			MOVLW	15
$0977	$059D			ANDWF	CCP2CON, 1
$0978	$0873			MOVF	STACK_3, 0
$0979	$049D			IORWF	CCP2CON, 1
$097A	$0008			RETURN
$0A77	$	_motor_LB:
;lfr_runner_5sen_tsop_1.c,52 :: 		void motor_LB()          //LEFT MOTOR REV DIR
;lfr_runner_5sen_tsop_1.c,54 :: 		PORTC.F5 = 0;
$0A77	$1303			BCF	STATUS, RP1
$0A78	$1283			BCF	STATUS, RP0
$0A79	$1287			BCF	PORTC, 5
;lfr_runner_5sen_tsop_1.c,55 :: 		PORTC.F4 = 1;
$0A7A	$1607			BSF	PORTC, 4
;lfr_runner_5sen_tsop_1.c,56 :: 		}
$0A7B	$0008			RETURN
$0A68	$	_motor_RF:
;lfr_runner_5sen_tsop_1.c,34 :: 		void motor_RF()          //RIGHT MOTOR FWD DIR
;lfr_runner_5sen_tsop_1.c,36 :: 		PORTC.F7 = 1;
$0A68	$1303			BCF	STATUS, RP1
$0A69	$1283			BCF	STATUS, RP0
$0A6A	$1787			BSF	PORTC, 7
;lfr_runner_5sen_tsop_1.c,37 :: 		PORTC.F6 = 0;
$0A6B	$1307			BCF	PORTC, 6
;lfr_runner_5sen_tsop_1.c,38 :: 		}
$0A6C	$0008			RETURN
$0800	$	GlobalInilfr_runner_5sen_tsop_1:
$0800	$30BE			MOVLW	190
$0801	$1303			BCF	STATUS, RP1
$0802	$1283			BCF	STATUS, RP0
$0803	$00B4			MOVWF	_basespeed+0
$0804	$3005			MOVLW	5
$0805	$00B5			MOVWF	_Kp+0
$0806	$3008			MOVLW	8
$0807	$00B6			MOVWF	_Ki+0
$0808	$3004			MOVLW	4
$0809	$00B7			MOVWF	_Kd+0
$080A	$3000			MOVLW	0
$080B	$00B8			MOVWF	_rightpulse+0
$080C	$3000			MOVLW	0
$080D	$00B9			MOVWF	_rightpulse+1
$080E	$3000			MOVLW	0
$080F	$00BA			MOVWF	_rightpulse+2
$0810	$3000			MOVLW	0
$0811	$00BB			MOVWF	_rightpulse+3
$0812	$3000			MOVLW	0
$0813	$00BC			MOVWF	_leftpulse+0
$0814	$3000			MOVLW	0
$0815	$00BD			MOVWF	_leftpulse+1
$0816	$3000			MOVLW	0
$0817	$00BE			MOVWF	_leftpulse+2
$0818	$3000			MOVLW	0
$0819	$00BF			MOVWF	_leftpulse+3
$081A	$3000			MOVLW	0
$081B	$00AC			MOVWF	_perror+0
$081C	$3000			MOVLW	0
$081D	$00AD			MOVWF	_perror+1
$081E	$3000			MOVLW	0
$081F	$00AE			MOVWF	_perror+2
$0820	$3000			MOVLW	0
$0821	$00AF			MOVWF	_perror+3
$0822	$3000			MOVLW	0
$0823	$00B0			MOVWF	_error+0
$0824	$3000			MOVLW	0
$0825	$00B1			MOVWF	_error+1
$0826	$3000			MOVLW	0
$0827	$00B2			MOVWF	_error+2
$0828	$3000			MOVLW	0
$0829	$00B3			MOVWF	_error+3
$082A	$3000			MOVLW	0
$082B	$00C0			MOVWF	_PROPORTIONAL+0
$082C	$3000			MOVLW	0
$082D	$00C1			MOVWF	_PROPORTIONAL+1
$082E	$3000			MOVLW	0
$082F	$00C2			MOVWF	_PROPORTIONAL+2
$0830	$3000			MOVLW	0
$0831	$00C3			MOVWF	_PROPORTIONAL+3
$0832	$3000			MOVLW	0
$0833	$00C4			MOVWF	_INTEGRAL+0
$0834	$3000			MOVLW	0
$0835	$00C5			MOVWF	_INTEGRAL+1
$0836	$3000			MOVLW	0
$0837	$00C6			MOVWF	_INTEGRAL+2
$0838	$3000			MOVLW	0
$0839	$00C7			MOVWF	_INTEGRAL+3
$083A	$3000			MOVLW	0
$083B	$00C8			MOVWF	_DERIVATIVE+0
$083C	$3000			MOVLW	0
$083D	$00C9			MOVWF	_DERIVATIVE+1
$083E	$3000			MOVLW	0
$083F	$00CA			MOVWF	_DERIVATIVE+2
$0840	$3000			MOVLW	0
$0841	$00CB			MOVWF	_DERIVATIVE+3
$0842	$3000			MOVLW	0
$0843	$00CC			MOVWF	_correction+0
$0844	$3000			MOVLW	0
$0845	$00CD			MOVWF	_correction+1
$0846	$3000			MOVLW	0
$0847	$00CE			MOVWF	_correction+2
$0848	$3000			MOVLW	0
$0849	$00CF			MOVWF	_correction+3
$084A	$0008			RETURN
$09D9	$	_Equals_Double:
$09D9	$1303			BCF	STATUS, RP1
$09DA	$1283			BCF	STATUS, RP0
$09DB	$0873			MOVF	STACK_3, W
$09DC	$0677			XORWF	STACK_7, W
$09DD	$1D03			BTFSS	STATUS, Z
$09DE	$29EC			GOTO	EQU_FALSE
$09DF	$0872			MOVF	STACK_2, W
$09E0	$0676			XORWF	STACK_6, W
$09E1	$1D03			BTFSS	STATUS, Z
$09E2	$29EC			GOTO	EQU_FALSE
$09E3	$0871			MOVF	STACK_1, W
$09E4	$0675			XORWF	STACK_5, W
$09E5	$1D03			BTFSS	STATUS, Z
$09E6	$29EC			GOTO	EQU_FALSE
$09E7	$0870			MOVF	STACK_0, W
$09E8	$0674			XORWF	STACK_4, W
$09E9	$1903			BTFSC	STATUS, Z
$09EA	$1503			BSF	STATUS, Z
$09EB	$0008			RETURN
$09EC	$	EQU_FALSE:
$09EC	$1103			BCF	STATUS, Z
$09ED	$0008			RETURN
$09EE	$0008			RETURN
$09EF	$	_Byte2Double:
$09EF	$1303			BCF	STATUS, RP1
$09F0	$1283			BCF	STATUS, RP0
$09F1	$	FLO08U32:
$09F1	$0870			MOVF	STACK_0, W
$09F2	$00F8			MOVWF	STACK_8
$09F3	$01FB			CLRF	STACK_11
$09F4	$01FC			CLRF	STACK_12
$09F5	$309E			MOVLW	0x9E
$09F6	$00F3			MOVWF	STACK_3
$09F7	$01FA			CLRF	STACK_10
$09F8	$01F2			CLRF	STACK_2
$09F9	$01F1			CLRF	STACK_1
$09FA	$01F0			CLRF	STACK_0
$09FB	$3002			MOVLW	0x02
$09FC	$00FC			MOVWF	STACK_12
$09FD	$118A			BCF	PCLATH, 3
$09FE	$2649			CALL	_NRM4032
$09FF	$158A			BSF	PCLATH, 3
$0A00	$0008			RETURN
$05E2	$	_Mul_32x32_FP:
$05E2	$1303			BCF	STATUS, RP1
$05E3	$1283			BCF	STATUS, RP0
$05E4	$	FPM32:
$05E4	$01FB			CLRF	STACK_11
$05E5	$0873			MOVF	STACK_3, W
$05E6	$1D03			BTFSS	STATUS, Z
$05E7	$0877			MOVF	STACK_7, W
$05E8	$1903			BTFSC	STATUS, Z
$05E9	$2E39			GOTO	JPMRES032
$05EA	$	M32BNE0:
$05EA	$0872			MOVF	STACK_2, W
$05EB	$0676			XORWF	STACK_6, W
$05EC	$00FA			MOVWF	STACK_10
$05ED	$0877			MOVF	STACK_7, W
$05EE	$07F3			ADDWF	STACK_3, F
$05EF	$307E			MOVLW	126
$05F0	$1C03			BTFSS	STATUS, C
$05F1	$2DF6			GOTO	MTUN32
$05F2	$02F3			SUBWF	STACK_3, F
$05F3	$1803			BTFSC	STATUS, C
$05F4	$2E3E			GOTO	JPMSETFOV32
$05F5	$2DF9			GOTO	MOK32
$05F6	$	MTUN32:
$05F6	$02F3			SUBWF	STACK_3, F
$05F7	$1C03			BTFSS	STATUS, C
$05F8	$2E43			GOTO	JPMSETFUN32
$05F9	$	MOK32:
$05F9	$0872			MOVF	STACK_2, W
$05FA	$00F8			MOVWF	STACK_8
$05FB	$0871			MOVF	STACK_1, W
$05FC	$00FC			MOVWF	STACK_12
$05FD	$0870			MOVF	STACK_0, W
$05FE	$00FD			MOVWF	STACK_13
$05FF	$17F8			BSF	STACK_8, 7
$0600	$17F6			BSF	STACK_6, 7
$0601	$1003			BCF	STATUS, C
$0602	$01F2			CLRF	STACK_2
$0603	$01F1			CLRF	STACK_1
$0604	$01F0			CLRF	STACK_0
$0605	$3018			MOVLW	24
$0606	$00A0			MOVWF	__math_tempbD
$0607	$	MLOOP32:
$0607	$1C7D			BTFSS	STACK_13, 0
$0608	$2E13			GOTO	MNOADD32
$0609	$	MADD32:
$0609	$0874			MOVF	STACK_4, W
$060A	$07F0			ADDWF	STACK_0, F
$060B	$0875			MOVF	STACK_5, W
$060C	$1803			BTFSC	STATUS, C
$060D	$0F75			INCFSZ	STACK_5, W
$060E	$07F1			ADDWF	STACK_1, F
$060F	$0876			MOVF	STACK_6, W
$0610	$1803			BTFSC	STATUS, C
$0611	$0F76			INCFSZ	STACK_6, W
$0612	$07F2			ADDWF	STACK_2, F
$0613	$	MNOADD32:
$0613	$0CF2			RRF	STACK_2, F
$0614	$0CF1			RRF	STACK_1, F
$0615	$0CF0			RRF	STACK_0, F
$0616	$0CF8			RRF	STACK_8, F
$0617	$0CFC			RRF	STACK_12, F
$0618	$0CFD			RRF	STACK_13, F
$0619	$1003			BCF	STATUS, C
$061A	$0BA0			DECFSZ	__math_tempbD, F
$061B	$2E07			GOTO	MLOOP32
$061C	$1BF2			BTFSC	STACK_2, 7
$061D	$2E23			GOTO	MROUND32
$061E	$0DF8			RLF	STACK_8, F
$061F	$0DF0			RLF	STACK_0, F
$0620	$0DF1			RLF	STACK_1, F
$0621	$0DF2			RLF	STACK_2, F
$0622	$03F3			DECF	STACK_3, F
$0623	$	MROUND32:
$0623	$1B7B			BTFSC	STACK_11, 6
$0624	$1C70			BTFSS	STACK_0, 0
$0625	$2E35			GOTO	MUL32OK
$0626	$1FF8			BTFSS	STACK_8, 7
$0627	$2E35			GOTO	MUL32OK
$0628	$0AF0			INCF	STACK_0, F
$0629	$1903			BTFSC	STATUS, Z
$062A	$0AF1			INCF	STACK_1, F
$062B	$1903			BTFSC	STATUS, Z
$062C	$0AF2			INCF	STACK_2, F
$062D	$1D03			BTFSS	STATUS, Z
$062E	$2E35			GOTO	MUL32OK
$062F	$0CF2			RRF	STACK_2, F
$0630	$0CF1			RRF	STACK_1, F
$0631	$0CF0			RRF	STACK_0, F
$0632	$0AF3			INCF	STACK_3, F
$0633	$1903			BTFSC	STATUS, Z
$0634	$2E3E			GOTO	JPMSETFOV32
$0635	$	MUL32OK:
$0635	$1FFA			BTFSS	STACK_10, 7
$0636	$13F2			BCF	STACK_2, 7
$0637	$3000			MOVLW	0x00
$0638	$2E47			GOTO	MUL32EEE
$0639	$	JPMRES032:
$0639	$3001			MOVLW	0x01
$063A	$158A			BSF	PCLATH, 3
$063B	$223D			CALL	_RES032
$063C	$118A			BCF	PCLATH, 3
$063D	$2E47			GOTO	MUL32EEE
$063E	$	JPMSETFOV32:
$063E	$3002			MOVLW	0x02
$063F	$158A			BSF	PCLATH, 3
$0640	$2221			CALL	_SETFOV32
$0641	$118A			BCF	PCLATH, 3
$0642	$2E47			GOTO	MUL32EEE
$0643	$	JPMSETFUN32:
$0643	$3004			MOVLW	0x04
$0644	$158A			BSF	PCLATH, 3
$0645	$222F			CALL	_SETFUN32
$0646	$118A			BCF	PCLATH, 3
$0647	$	MUL32EEE:
$0647	$0000			NOP
$0648	$0008			RETURN
$06AD	$	_Compare_Double:
$06AD	$1303			BCF	STATUS, RP1
$06AE	$1283			BCF	STATUS, RP0
$06AF	$01FA			CLRF	STACK_10
$06B0	$0873			MOVF	STACK_3, W
$06B1	$1D03			BTFSS	STATUS, Z
$06B2	$147A			BSF	STACK_10, 0
$06B3	$0877			MOVF	STACK_7, W
$06B4	$1D03			BTFSS	STATUS, Z
$06B5	$14FA			BSF	STACK_10, 1
$06B6	$087A			MOVF	STACK_10, W
$06B7	$1903			BTFSC	STATUS, Z
$06B8	$2EF9			GOTO	COMPARE_EQU
$06B9	$3A03			XORLW	0x03
$06BA	$1903			BTFSC	STATUS, Z
$06BB	$2EC4			GOTO	COMPARE_NOTZERO
$06BC	$187A			BTFSC	STACK_10, 0
$06BD	$2EC1			GOTO	COMPARE_XNOTZERO
$06BE	$	COMPARE_YNOTZERO:
$06BE	$1FF6			BTFSS	STACK_6, 7
$06BF	$2EF7			GOTO	COMPARE_LT
$06C0	$2EF5			GOTO	COMPARE_GT
$06C1	$	COMPARE_XNOTZERO:
$06C1	$1FF2			BTFSS	STACK_2, 7
$06C2	$2EF5			GOTO	COMPARE_GT
$06C3	$2EF7			GOTO	COMPARE_LT
$06C4	$	COMPARE_NOTZERO:
$06C4	$0872			MOVF	STACK_2, W
$06C5	$3980			ANDLW	0x80
$06C6	$00FA			MOVWF	STACK_10
$06C7	$13F2			BCF	STACK_2, 7
$06C8	$0876			MOVF	STACK_6, W
$06C9	$3980			ANDLW	0x80
$06CA	$13F6			BCF	STACK_6, 7
$06CB	$067A			XORWF	STACK_10, W
$06CC	$1903			BTFSC	STATUS, Z
$06CD	$2ED2			GOTO	COMPARE_TESTALL
$06CE	$087A			MOVF	STACK_10, W
$06CF	$1903			BTFSC	STATUS, Z
$06D0	$2EF5			GOTO	COMPARE_GT
$06D1	$2EF7			GOTO	COMPARE_LT
$06D2	$	COMPARE_TESTALL:
$06D2	$0877			MOVF	STACK_7, W
$06D3	$0273			SUBWF	STACK_3, W
$06D4	$1903			BTFSC	STATUS, Z
$06D5	$2ED9			GOTO	COMPARE_C1
$06D6	$1C03			BTFSS	STATUS, C
$06D7	$2EED			GOTO	GT_FALSE
$06D8	$2EF1			GOTO	GT_TRUE
$06D9	$	COMPARE_C1:
$06D9	$0876			MOVF	STACK_6, W
$06DA	$0272			SUBWF	STACK_2, W
$06DB	$1903			BTFSC	STATUS, Z
$06DC	$2EE0			GOTO	COMPARE_C2
$06DD	$1C03			BTFSS	STATUS, C
$06DE	$2EED			GOTO	GT_FALSE
$06DF	$2EF1			GOTO	GT_TRUE
$06E0	$	COMPARE_C2:
$06E0	$0875			MOVF	STACK_5, W
$06E1	$0271			SUBWF	STACK_1, W
$06E2	$1903			BTFSC	STATUS, Z
$06E3	$2EE7			GOTO	COMPARE_C3
$06E4	$1C03			BTFSS	STATUS, C
$06E5	$2EED			GOTO	GT_FALSE
$06E6	$2EF1			GOTO	GT_TRUE
$06E7	$	COMPARE_C3:
$06E7	$0874			MOVF	STACK_4, W
$06E8	$0270			SUBWF	STACK_0, W
$06E9	$1903			BTFSC	STATUS, Z
$06EA	$2EF9			GOTO	COMPARE_EQU
$06EB	$1803			BTFSC	STATUS, C
$06EC	$2EF1			GOTO	GT_TRUE
$06ED	$	GT_FALSE:
$06ED	$08FA			MOVF	STACK_10, F
$06EE	$1903			BTFSC	STATUS, Z
$06EF	$2EF7			GOTO	COMPARE_LT
$06F0	$2EF5			GOTO	COMPARE_GT
$06F1	$	GT_TRUE:
$06F1	$08FA			MOVF	STACK_10, F
$06F2	$1903			BTFSC	STATUS, Z
$06F3	$2EF5			GOTO	COMPARE_GT
$06F4	$2EF7			GOTO	COMPARE_LT
$06F5	$	COMPARE_GT:
$06F5	$1403			BSF	STATUS, C
$06F6	$0008			RETURN
$06F7	$	COMPARE_LT:
$06F7	$1003			BCF	STATUS, C
$06F8	$0008			RETURN
$06F9	$	COMPARE_EQU:
$06F9	$1403			BSF	STATUS, C
$06FA	$1503			BSF	STATUS, Z
$06FB	$0008			RETURN
$06FC	$0008			RETURN
$0895	$	_Double2Byte:
$0895	$1303			BCF	STATUS, RP1
$0896	$1283			BCF	STATUS, RP0
$0897	$	INT32U08:
$0897	$01FB			CLRF	STACK_11
$0898	$01FC			CLRF	STACK_12
$0899	$01FA			CLRF	STACK_10
$089A	$0873			MOVF	STACK_3, W
$089B	$1903			BTFSC	STATUS, Z
$089C	$28C2			GOTO	IRES008
$089D	$13FA			BCF	STACK_10, 7
$089E	$17F2			BSF	STACK_2, 7
$089F	$3086			MOVLW	134
$08A0	$02F3			SUBWF	STACK_3, F
$08A1	$1BF3			BTFSC	STACK_3, 7
$08A2	$28A6			GOTO	SETEXP08
$08A3	$1903			BTFSC	STATUS, Z
$08A4	$28A6			GOTO	SETEXP08
$08A5	$28C4			GOTO	SETIOV08
$08A6	$	SETEXP08:
$08A6	$09F3			COMF	STACK_3, F
$08A7	$0AF3			INCF	STACK_3, F
$08A8	$3008			MOVLW	8
$08A9	$0273			SUBWF	STACK_3, W
$08AA	$1C03			BTFSS	STATUS, C
$08AB	$28B3			GOTO	TSHIFT3208
$08AC	$00F3			MOVWF	STACK_3
$08AD	$0DF2			RLF	STACK_2, F
$08AE	$01F2			CLRF	STACK_2
$08AF	$0873			MOVF	STACK_3, W
$08B0	$1D03			BTFSS	STATUS, Z
$08B1	$1003			BCF	STATUS, C
$08B2	$28BA			GOTO	SHIFT3208OK
$08B3	$	TSHIFT3208:
$08B3	$0873			MOVF	STACK_3, W
$08B4	$1903			BTFSC	STATUS, Z
$08B5	$28BA			GOTO	SHIFT3208OK
$08B6	$	SHIFT3208:
$08B6	$1003			BCF	STATUS, C
$08B7	$0CF2			RRF	STACK_2, F
$08B8	$0BF3			DECFSZ	STACK_3, F
$08B9	$28B6			GOTO	SHIFT3208
$08BA	$	SHIFT3208OK:
$08BA	$1B7B			BTFSC	STACK_11, 6
$08BB	$1C72			BTFSS	STACK_2, 0
$08BC	$28C2			GOTO	INT3208OK
$08BD	$1C03			BTFSS	STATUS, C
$08BE	$28C2			GOTO	INT3208OK
$08BF	$0AF2			INCF	STACK_2, F
$08C0	$1903			BTFSC	STATUS, Z
$08C1	$28C9			GOTO	D2B_JPKSETIOV3224
$08C2	$	INT3208OK:
$08C2	$	IRES008:
$08C2	$01F1			CLRF	STACK_1
$08C3	$28CC			GOTO	INT3208EOK
$08C4	$	SETIOV08:
$08C4	$147B			BSF	STACK_11, 0
$08C5	$1FFB			BTFSS	STACK_11, 7
$08C6	$28CF			GOTO	INT3208EER
$08C7	$01F1			CLRF	STACK_1
$08C8	$28CF			GOTO	INT3208EER
$08C9	$	D2B_JPKSETIOV3224:
$08C9	$3001			MOVLW	0x01
$08CA	$00FC			MOVWF	STACK_12
$08CB	$28D1			GOTO	INT3208EEE
$08CC	$	INT3208EOK:
$08CC	$3000			MOVLW	0x00
$08CD	$00FC			MOVWF	STACK_12
$08CE	$28D1			GOTO	INT3208EEE
$08CF	$	INT3208EER:
$08CF	$30FF			MOVLW	0xFF
$08D0	$00FC			MOVWF	STACK_12
$08D1	$	INT3208EEE:
$08D1	$08FC			MOVF	STACK_12, F
$08D2	$1903			BTFSC	STATUS, Z
$08D3	$28D5			GOTO	L_Double2Byte_0
$08D4	$2212			CALL	_SETIOV3224
$08D5	$	L_Double2Byte_0:
$08D5	$0872			MOVF	STACK_2, W
$08D6	$00F0			MOVWF	STACK_0
$08D7	$0008			RETURN
$0004	$	_main:
;lfr_runner_5sen_tsop_1.c,109 :: 		void main()
;lfr_runner_5sen_tsop_1.c,112 :: 		initport();
$0004	$158A			BSF	PCLATH, 3
$0005	$2000			CALL	GlobalInilfr_runner_5sen_tsop_1
$0006	$118A			BCF	PCLATH, 3
$0007	$158A			BSF	PCLATH, 3
$0008	$2201			CALL	_initport
$0009	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop_1.c,113 :: 		initpwm();
$000A	$158A			BSF	PCLATH, 3
$000B	$21B2			CALL	_initpwm
$000C	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop_1.c,114 :: 		while(1)
$000D	$	L_main_5:
;lfr_runner_5sen_tsop_1.c,116 :: 		indicator();
$000D	$158A			BSF	PCLATH, 3
$000E	$217B			CALL	_indicator
$000F	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop_1.c,117 :: 		CalcError();
$0010	$23C1			CALL	_CalcError
;lfr_runner_5sen_tsop_1.c,119 :: 		if((s1+s2+s3+s4+s5) == 0)		          //ROBOT HAS OVERSHOOT
$0011	$0823			MOVF	_s2, 0
$0012	$0721			ADDWF	_s1, 0
$0013	$00F0			MOVWF	STACK_0
$0014	$0822			MOVF	_s1+1, 0
$0015	$1803			BTFSC	STATUS, C
$0016	$3F01			ADDLW	1
$0017	$0724			ADDWF	_s2+1, 0
$0018	$00F1			MOVWF	STACK_0+1
$0019	$0825			MOVF	_s3, 0
$001A	$07F0			ADDWF	STACK_0, 1
$001B	$0826			MOVF	_s3+1, 0
$001C	$1803			BTFSC	STATUS, C
$001D	$3F01			ADDLW	1
$001E	$07F1			ADDWF	STACK_0+1, 1
$001F	$0827			MOVF	_s4, 0
$0020	$07F0			ADDWF	STACK_0, 1
$0021	$0828			MOVF	_s4+1, 0
$0022	$1803			BTFSC	STATUS, C
$0023	$3F01			ADDLW	1
$0024	$07F1			ADDWF	STACK_0+1, 1
$0025	$0829			MOVF	_s5, 0
$0026	$0770			ADDWF	STACK_0, 0
$0027	$00F4			MOVWF	STACK_4
$0028	$0871			MOVF	STACK_0+1, 0
$0029	$1803			BTFSC	STATUS, C
$002A	$3F01			ADDLW	1
$002B	$072A			ADDWF	_s5+1, 0
$002C	$00F5			MOVWF	STACK_4+1
$002D	$3000			MOVLW	0
$002E	$0675			XORWF	STACK_4+1, 0
$002F	$1D03			BTFSS	STATUS, Z
$0030	$2833			GOTO	L_main_47
$0031	$3000			MOVLW	0
$0032	$0674			XORWF	STACK_4, 0
$0033	$	L_main_47:
$0033	$1D03			BTFSS	STATUS, Z
$0034	$287C			GOTO	L_main_7
;lfr_runner_5sen_tsop_1.c,121 :: 		if(lastreading == 'r')				      //CHECKS IF THE LAST SENSOR ACTIVATED WAS RIGHT
$0035	$082B			MOVF	_lastreading, 0
$0036	$3A72			XORLW	114
$0037	$1D03			BTFSS	STATUS, Z
$0038	$2858			GOTO	L_main_8
;lfr_runner_5sen_tsop_1.c,123 :: 		motor_RB();						          //TURN RIGHT AT FULL SPEED
$0039	$158A			BSF	PCLATH, 3
$003A	$2272			CALL	_motor_RB
$003B	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop_1.c,124 :: 		motor_LF();
$003C	$158A			BSF	PCLATH, 3
$003D	$226D			CALL	_motor_LF
$003E	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop_1.c,125 :: 		PWM1_CHANGE_DUTY(255);
$003F	$30FF			MOVLW	255
$0040	$00DE			MOVWF	FARG_PWM1_Change_Duty+0
$0041	$158A			BSF	PCLATH, 3
$0042	$20D8			CALL	_PWM1_Change_Duty
$0043	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop_1.c,126 :: 		PWM2_CHANGE_DUTY(255);
$0044	$30FF			MOVLW	255
$0045	$00DE			MOVWF	FARG_PWM2_Change_Duty+0
$0046	$158A			BSF	PCLATH, 3
$0047	$2142			CALL	_PWM2_Change_Duty
$0048	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop_1.c,127 :: 		delay_ms(10);
$0049	$300D			MOVLW	13
$004A	$00FB			MOVWF	STACK_11
$004B	$30FF			MOVLW	255
$004C	$00FA			MOVWF	STACK_10
$004D	$0BFB			DECFSZ	STACK_11, F
$004E	$2850			GOTO	$+2
$004F	$2853			GOTO	$+4
$0050	$0BFA			DECFSZ	STACK_10, F
$0051	$2850			GOTO	$-1
$0052	$284D			GOTO	$-5
$0053	$30F3			MOVLW	243
$0054	$00FA			MOVWF	STACK_10
$0055	$0BFA			DECFSZ	STACK_10, F
$0056	$2855			GOTO	$-1
$0057	$0000			NOP
;lfr_runner_5sen_tsop_1.c,128 :: 		}
$0058	$	L_main_8:
;lfr_runner_5sen_tsop_1.c,129 :: 		if(lastreading == 'l')			        //CHECKS IF THE LAST SENSOR ACTIVATED WAS LEFT
$0058	$082B			MOVF	_lastreading, 0
$0059	$3A6C			XORLW	108
$005A	$1D03			BTFSS	STATUS, Z
$005B	$287B			GOTO	L_main_9
;lfr_runner_5sen_tsop_1.c,131 :: 		motor_LB();					        	  //TURN LEFT AT FULL SPEED
$005C	$158A			BSF	PCLATH, 3
$005D	$2277			CALL	_motor_LB
$005E	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop_1.c,132 :: 		motor_RF();
$005F	$158A			BSF	PCLATH, 3
$0060	$2268			CALL	_motor_RF
$0061	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop_1.c,133 :: 		PWM1_CHANGE_DUTY(255);
$0062	$30FF			MOVLW	255
$0063	$00DE			MOVWF	FARG_PWM1_Change_Duty+0
$0064	$158A			BSF	PCLATH, 3
$0065	$20D8			CALL	_PWM1_Change_Duty
$0066	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop_1.c,134 :: 		PWM2_CHANGE_DUTY(255);
$0067	$30FF			MOVLW	255
$0068	$00DE			MOVWF	FARG_PWM2_Change_Duty+0
$0069	$158A			BSF	PCLATH, 3
$006A	$2142			CALL	_PWM2_Change_Duty
$006B	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop_1.c,135 :: 		delay_ms(10);
$006C	$300D			MOVLW	13
$006D	$00FB			MOVWF	STACK_11
$006E	$30FF			MOVLW	255
$006F	$00FA			MOVWF	STACK_10
$0070	$0BFB			DECFSZ	STACK_11, F
$0071	$2873			GOTO	$+2
$0072	$2876			GOTO	$+4
$0073	$0BFA			DECFSZ	STACK_10, F
$0074	$2873			GOTO	$-1
$0075	$2870			GOTO	$-5
$0076	$30F3			MOVLW	243
$0077	$00FA			MOVWF	STACK_10
$0078	$0BFA			DECFSZ	STACK_10, F
$0079	$2878			GOTO	$-1
$007A	$0000			NOP
;lfr_runner_5sen_tsop_1.c,136 :: 		}
$007B	$	L_main_9:
;lfr_runner_5sen_tsop_1.c,137 :: 		}
$007B	$2A6A			GOTO	L_main_10
$007C	$	L_main_7:
;lfr_runner_5sen_tsop_1.c,140 :: 		if((error == 0) && (s3==1) && ((s1+s2+s4+s5)==0))
$007C	$01F4			CLRF	STACK_4
$007D	$01F5			CLRF	STACK_4+1
$007E	$01F6			CLRF	STACK_4+2
$007F	$01F7			CLRF	STACK_4+3
$0080	$0830			MOVF	_error, 0
$0081	$00F0			MOVWF	STACK_0
$0082	$0831			MOVF	_error+1, 0
$0083	$00F1			MOVWF	STACK_0+1
$0084	$0832			MOVF	_error+2, 0
$0085	$00F2			MOVWF	STACK_0+2
$0086	$0833			MOVF	_error+3, 0
$0087	$00F3			MOVWF	STACK_0+3
$0088	$158A			BSF	PCLATH, 3
$0089	$21D9			CALL	_equals_double
$008A	$118A			BCF	PCLATH, 3
$008B	$3001			MOVLW	1
$008C	$1D03			BTFSS	STATUS, Z
$008D	$3000			MOVLW	0
$008E	$00F0			MOVWF	STACK_0
$008F	$0870			MOVF	STACK_0, 0
$0090	$1903			BTFSC	STATUS, Z
$0091	$28D7			GOTO	L_main_13
$0092	$3000			MOVLW	0
$0093	$0626			XORWF	_s3+1, 0
$0094	$1D03			BTFSS	STATUS, Z
$0095	$2898			GOTO	L_main_48
$0096	$3001			MOVLW	1
$0097	$0625			XORWF	_s3, 0
$0098	$	L_main_48:
$0098	$1D03			BTFSS	STATUS, Z
$0099	$28D7			GOTO	L_main_13
$009A	$0823			MOVF	_s2, 0
$009B	$0721			ADDWF	_s1, 0
$009C	$00F0			MOVWF	STACK_0
$009D	$0822			MOVF	_s1+1, 0
$009E	$1803			BTFSC	STATUS, C
$009F	$3F01			ADDLW	1
$00A0	$0724			ADDWF	_s2+1, 0
$00A1	$00F1			MOVWF	STACK_0+1
$00A2	$0827			MOVF	_s4, 0
$00A3	$07F0			ADDWF	STACK_0, 1
$00A4	$0828			MOVF	_s4+1, 0
$00A5	$1803			BTFSC	STATUS, C
$00A6	$3F01			ADDLW	1
$00A7	$07F1			ADDWF	STACK_0+1, 1
$00A8	$0829			MOVF	_s5, 0
$00A9	$0770			ADDWF	STACK_0, 0
$00AA	$00F4			MOVWF	STACK_4
$00AB	$0871			MOVF	STACK_0+1, 0
$00AC	$1803			BTFSC	STATUS, C
$00AD	$3F01			ADDLW	1
$00AE	$072A			ADDWF	_s5+1, 0
$00AF	$00F5			MOVWF	STACK_4+1
$00B0	$3000			MOVLW	0
$00B1	$0675			XORWF	STACK_4+1, 0
$00B2	$1D03			BTFSS	STATUS, Z
$00B3	$28B6			GOTO	L_main_49
$00B4	$3000			MOVLW	0
$00B5	$0674			XORWF	STACK_4, 0
$00B6	$	L_main_49:
$00B6	$1D03			BTFSS	STATUS, Z
$00B7	$28D7			GOTO	L_main_13
$00B8	$	L185_ex_L_main_13:
;lfr_runner_5sen_tsop_1.c,142 :: 		motor_LF();					        	      //FWD AT FULL SPEED
$00B8	$158A			BSF	PCLATH, 3
$00B9	$226D			CALL	_motor_LF
$00BA	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop_1.c,143 :: 		motor_RF();
$00BB	$158A			BSF	PCLATH, 3
$00BC	$2268			CALL	_motor_RF
$00BD	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop_1.c,144 :: 		PWM1_CHANGE_DUTY(255);
$00BE	$30FF			MOVLW	255
$00BF	$00DE			MOVWF	FARG_PWM1_Change_Duty+0
$00C0	$158A			BSF	PCLATH, 3
$00C1	$20D8			CALL	_PWM1_Change_Duty
$00C2	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop_1.c,145 :: 		PWM2_CHANGE_DUTY(255);
$00C3	$30FF			MOVLW	255
$00C4	$00DE			MOVWF	FARG_PWM2_Change_Duty+0
$00C5	$158A			BSF	PCLATH, 3
$00C6	$2142			CALL	_PWM2_Change_Duty
$00C7	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop_1.c,146 :: 		delay_ms(10);
$00C8	$300D			MOVLW	13
$00C9	$00FB			MOVWF	STACK_11
$00CA	$30FF			MOVLW	255
$00CB	$00FA			MOVWF	STACK_10
$00CC	$0BFB			DECFSZ	STACK_11, F
$00CD	$28CF			GOTO	$+2
$00CE	$28D2			GOTO	$+4
$00CF	$0BFA			DECFSZ	STACK_10, F
$00D0	$28CF			GOTO	$-1
$00D1	$28CC			GOTO	$-5
$00D2	$30F3			MOVLW	243
$00D3	$00FA			MOVWF	STACK_10
$00D4	$0BFA			DECFSZ	STACK_10, F
$00D5	$28D4			GOTO	$-1
$00D6	$0000			NOP
;lfr_runner_5sen_tsop_1.c,147 :: 		}
$00D7	$	L_main_13:
;lfr_runner_5sen_tsop_1.c,148 :: 		PROPORTIONAL = error * kp;
$00D7	$0835			MOVF	_Kp, 0
$00D8	$00F0			MOVWF	STACK_0
$00D9	$158A			BSF	PCLATH, 3
$00DA	$21EF			CALL	_byte2double
$00DB	$118A			BCF	PCLATH, 3
$00DC	$0830			MOVF	_error, 0
$00DD	$00F4			MOVWF	STACK_4
$00DE	$0831			MOVF	_error+1, 0
$00DF	$00F5			MOVWF	STACK_4+1
$00E0	$0832			MOVF	_error+2, 0
$00E1	$00F6			MOVWF	STACK_4+2
$00E2	$0833			MOVF	_error+3, 0
$00E3	$00F7			MOVWF	STACK_4+3
$00E4	$25E2			CALL	_mul_32x32_fp
$00E5	$0870			MOVF	STACK_0, 0
$00E6	$00DA			MOVWF	FLOC_main+8
$00E7	$0871			MOVF	STACK_0+1, 0
$00E8	$00DB			MOVWF	FLOC_main+9
$00E9	$0872			MOVF	STACK_0+2, 0
$00EA	$00DC			MOVWF	FLOC_main+10
$00EB	$0873			MOVF	STACK_0+3, 0
$00EC	$00DD			MOVWF	FLOC_main+11
$00ED	$085A			MOVF	FLOC_main+8, 0
$00EE	$00C0			MOVWF	_PROPORTIONAL
$00EF	$085B			MOVF	FLOC_main+9, 0
$00F0	$00C1			MOVWF	_PROPORTIONAL+1
$00F1	$085C			MOVF	FLOC_main+10, 0
$00F2	$00C2			MOVWF	_PROPORTIONAL+2
$00F3	$085D			MOVF	FLOC_main+11, 0
$00F4	$00C3			MOVWF	_PROPORTIONAL+3
;lfr_runner_5sen_tsop_1.c,149 :: 		INTEGRAL  += error ;
$00F5	$0844			MOVF	_INTEGRAL, 0
$00F6	$00F0			MOVWF	STACK_0
$00F7	$0845			MOVF	_INTEGRAL+1, 0
$00F8	$00F1			MOVWF	STACK_0+1
$00F9	$0846			MOVF	_INTEGRAL+2, 0
$00FA	$00F2			MOVWF	STACK_0+2
$00FB	$0847			MOVF	_INTEGRAL+3, 0
$00FC	$00F3			MOVWF	STACK_0+3
$00FD	$0830			MOVF	_error, 0
$00FE	$00F4			MOVWF	STACK_4
$00FF	$0831			MOVF	_error+1, 0
$0100	$00F5			MOVWF	STACK_4+1
$0101	$0832			MOVF	_error+2, 0
$0102	$00F6			MOVWF	STACK_4+2
$0103	$0833			MOVF	_error+3, 0
$0104	$00F7			MOVWF	STACK_4+3
$0105	$249A			CALL	_add_32x32_fp
$0106	$0870			MOVF	STACK_0, 0
$0107	$00D2			MOVWF	FLOC_main+0
$0108	$0871			MOVF	STACK_0+1, 0
$0109	$00D3			MOVWF	FLOC_main+1
$010A	$0872			MOVF	STACK_0+2, 0
$010B	$00D4			MOVWF	FLOC_main+2
$010C	$0873			MOVF	STACK_0+3, 0
$010D	$00D5			MOVWF	FLOC_main+3
$010E	$0852			MOVF	FLOC_main+0, 0
$010F	$00C4			MOVWF	_INTEGRAL
$0110	$0853			MOVF	FLOC_main+1, 0
$0111	$00C5			MOVWF	_INTEGRAL+1
$0112	$0854			MOVF	FLOC_main+2, 0
$0113	$00C6			MOVWF	_INTEGRAL+2
$0114	$0855			MOVF	FLOC_main+3, 0
$0115	$00C7			MOVWF	_INTEGRAL+3
;lfr_runner_5sen_tsop_1.c,150 :: 		INTEGRAL  *= ki;
$0116	$0836			MOVF	_Ki, 0
$0117	$00F0			MOVWF	STACK_0
$0118	$158A			BSF	PCLATH, 3
$0119	$21EF			CALL	_byte2double
$011A	$118A			BCF	PCLATH, 3
$011B	$0852			MOVF	FLOC_main+0, 0
$011C	$00F4			MOVWF	STACK_4
$011D	$0853			MOVF	FLOC_main+1, 0
$011E	$00F5			MOVWF	STACK_4+1
$011F	$0854			MOVF	FLOC_main+2, 0
$0120	$00F6			MOVWF	STACK_4+2
$0121	$0855			MOVF	FLOC_main+3, 0
$0122	$00F7			MOVWF	STACK_4+3
$0123	$25E2			CALL	_mul_32x32_fp
$0124	$0870			MOVF	STACK_0, 0
$0125	$00D2			MOVWF	FLOC_main+0
$0126	$0871			MOVF	STACK_0+1, 0
$0127	$00D3			MOVWF	FLOC_main+1
$0128	$0872			MOVF	STACK_0+2, 0
$0129	$00D4			MOVWF	FLOC_main+2
$012A	$0873			MOVF	STACK_0+3, 0
$012B	$00D5			MOVWF	FLOC_main+3
$012C	$0852			MOVF	FLOC_main+0, 0
$012D	$00C4			MOVWF	_INTEGRAL
$012E	$0853			MOVF	FLOC_main+1, 0
$012F	$00C5			MOVWF	_INTEGRAL+1
$0130	$0854			MOVF	FLOC_main+2, 0
$0131	$00C6			MOVWF	_INTEGRAL+2
$0132	$0855			MOVF	FLOC_main+3, 0
$0133	$00C7			MOVWF	_INTEGRAL+3
;lfr_runner_5sen_tsop_1.c,151 :: 		DERIVATIVE = (error - perror);
$0134	$082C			MOVF	_perror, 0
$0135	$00F4			MOVWF	STACK_4
$0136	$082D			MOVF	_perror+1, 0
$0137	$00F5			MOVWF	STACK_4+1
$0138	$082E			MOVF	_perror+2, 0
$0139	$00F6			MOVWF	STACK_4+2
$013A	$082F			MOVF	_perror+3, 0
$013B	$00F7			MOVWF	STACK_4+3
$013C	$0830			MOVF	_error, 0
$013D	$00F0			MOVWF	STACK_0
$013E	$0831			MOVF	_error+1, 0
$013F	$00F1			MOVWF	STACK_0+1
$0140	$0832			MOVF	_error+2, 0
$0141	$00F2			MOVWF	STACK_0+2
$0142	$0833			MOVF	_error+3, 0
$0143	$00F3			MOVWF	STACK_0+3
$0144	$2728			CALL	_sub_32x32_fp
$0145	$0870			MOVF	STACK_0, 0
$0146	$00D6			MOVWF	FLOC_main+4
$0147	$0871			MOVF	STACK_0+1, 0
$0148	$00D7			MOVWF	FLOC_main+5
$0149	$0872			MOVF	STACK_0+2, 0
$014A	$00D8			MOVWF	FLOC_main+6
$014B	$0873			MOVF	STACK_0+3, 0
$014C	$00D9			MOVWF	FLOC_main+7
$014D	$0856			MOVF	FLOC_main+4, 0
$014E	$00C8			MOVWF	_DERIVATIVE
$014F	$0857			MOVF	FLOC_main+5, 0
$0150	$00C9			MOVWF	_DERIVATIVE+1
$0151	$0858			MOVF	FLOC_main+6, 0
$0152	$00CA			MOVWF	_DERIVATIVE+2
$0153	$0859			MOVF	FLOC_main+7, 0
$0154	$00CB			MOVWF	_DERIVATIVE+3
;lfr_runner_5sen_tsop_1.c,152 :: 		correction = ( (PROPORTIONAL) + (INTEGRAL) + (DERIVATIVE*kd));
$0155	$085A			MOVF	FLOC_main+8, 0
$0156	$00F0			MOVWF	STACK_0
$0157	$085B			MOVF	FLOC_main+9, 0
$0158	$00F1			MOVWF	STACK_0+1
$0159	$085C			MOVF	FLOC_main+10, 0
$015A	$00F2			MOVWF	STACK_0+2
$015B	$085D			MOVF	FLOC_main+11, 0
$015C	$00F3			MOVWF	STACK_0+3
$015D	$0852			MOVF	FLOC_main+0, 0
$015E	$00F4			MOVWF	STACK_4
$015F	$0853			MOVF	FLOC_main+1, 0
$0160	$00F5			MOVWF	STACK_4+1
$0161	$0854			MOVF	FLOC_main+2, 0
$0162	$00F6			MOVWF	STACK_4+2
$0163	$0855			MOVF	FLOC_main+3, 0
$0164	$00F7			MOVWF	STACK_4+3
$0165	$249A			CALL	_add_32x32_fp
$0166	$0870			MOVF	STACK_0, 0
$0167	$00D2			MOVWF	FLOC_main+0
$0168	$0871			MOVF	STACK_0+1, 0
$0169	$00D3			MOVWF	FLOC_main+1
$016A	$0872			MOVF	STACK_0+2, 0
$016B	$00D4			MOVWF	FLOC_main+2
$016C	$0873			MOVF	STACK_0+3, 0
$016D	$00D5			MOVWF	FLOC_main+3
$016E	$0837			MOVF	_Kd, 0
$016F	$00F0			MOVWF	STACK_0
$0170	$158A			BSF	PCLATH, 3
$0171	$21EF			CALL	_byte2double
$0172	$118A			BCF	PCLATH, 3
$0173	$0856			MOVF	FLOC_main+4, 0
$0174	$00F4			MOVWF	STACK_4
$0175	$0857			MOVF	FLOC_main+5, 0
$0176	$00F5			MOVWF	STACK_4+1
$0177	$0858			MOVF	FLOC_main+6, 0
$0178	$00F6			MOVWF	STACK_4+2
$0179	$0859			MOVF	FLOC_main+7, 0
$017A	$00F7			MOVWF	STACK_4+3
$017B	$25E2			CALL	_mul_32x32_fp
$017C	$0852			MOVF	FLOC_main+0, 0
$017D	$00F4			MOVWF	STACK_4
$017E	$0853			MOVF	FLOC_main+1, 0
$017F	$00F5			MOVWF	STACK_4+1
$0180	$0854			MOVF	FLOC_main+2, 0
$0181	$00F6			MOVWF	STACK_4+2
$0182	$0855			MOVF	FLOC_main+3, 0
$0183	$00F7			MOVWF	STACK_4+3
$0184	$249A			CALL	_add_32x32_fp
$0185	$0870			MOVF	STACK_0, 0
$0186	$00D6			MOVWF	FLOC_main+4
$0187	$0871			MOVF	STACK_0+1, 0
$0188	$00D7			MOVWF	FLOC_main+5
$0189	$0872			MOVF	STACK_0+2, 0
$018A	$00D8			MOVWF	FLOC_main+6
$018B	$0873			MOVF	STACK_0+3, 0
$018C	$00D9			MOVWF	FLOC_main+7
$018D	$0856			MOVF	FLOC_main+4, 0
$018E	$00CC			MOVWF	_correction
$018F	$0857			MOVF	FLOC_main+5, 0
$0190	$00CD			MOVWF	_correction+1
$0191	$0858			MOVF	FLOC_main+6, 0
$0192	$00CE			MOVWF	_correction+2
$0193	$0859			MOVF	FLOC_main+7, 0
$0194	$00CF			MOVWF	_correction+3
;lfr_runner_5sen_tsop_1.c,153 :: 		rightpulse =  basespeed + correction;
$0195	$0834			MOVF	_basespeed, 0
$0196	$00F0			MOVWF	STACK_0
$0197	$158A			BSF	PCLATH, 3
$0198	$21EF			CALL	_byte2double
$0199	$118A			BCF	PCLATH, 3
$019A	$0870			MOVF	STACK_0, 0
$019B	$00D2			MOVWF	FLOC_main+0
$019C	$0871			MOVF	STACK_0+1, 0
$019D	$00D3			MOVWF	FLOC_main+1
$019E	$0872			MOVF	STACK_0+2, 0
$019F	$00D4			MOVWF	FLOC_main+2
$01A0	$0873			MOVF	STACK_0+3, 0
$01A1	$00D5			MOVWF	FLOC_main+3
$01A2	$0852			MOVF	FLOC_main+0, 0
$01A3	$00F0			MOVWF	STACK_0
$01A4	$0853			MOVF	FLOC_main+1, 0
$01A5	$00F1			MOVWF	STACK_0+1
$01A6	$0854			MOVF	FLOC_main+2, 0
$01A7	$00F2			MOVWF	STACK_0+2
$01A8	$0855			MOVF	FLOC_main+3, 0
$01A9	$00F3			MOVWF	STACK_0+3
$01AA	$0856			MOVF	FLOC_main+4, 0
$01AB	$00F4			MOVWF	STACK_4
$01AC	$0857			MOVF	FLOC_main+5, 0
$01AD	$00F5			MOVWF	STACK_4+1
$01AE	$0858			MOVF	FLOC_main+6, 0
$01AF	$00F6			MOVWF	STACK_4+2
$01B0	$0859			MOVF	FLOC_main+7, 0
$01B1	$00F7			MOVWF	STACK_4+3
$01B2	$249A			CALL	_add_32x32_fp
$01B3	$0870			MOVF	STACK_0, 0
$01B4	$00B8			MOVWF	_rightpulse
$01B5	$0871			MOVF	STACK_0+1, 0
$01B6	$00B9			MOVWF	_rightpulse+1
$01B7	$0872			MOVF	STACK_0+2, 0
$01B8	$00BA			MOVWF	_rightpulse+2
$01B9	$0873			MOVF	STACK_0+3, 0
$01BA	$00BB			MOVWF	_rightpulse+3
;lfr_runner_5sen_tsop_1.c,154 :: 		leftpulse = basespeed - correction;
$01BB	$0856			MOVF	FLOC_main+4, 0
$01BC	$00F4			MOVWF	STACK_4
$01BD	$0857			MOVF	FLOC_main+5, 0
$01BE	$00F5			MOVWF	STACK_4+1
$01BF	$0858			MOVF	FLOC_main+6, 0
$01C0	$00F6			MOVWF	STACK_4+2
$01C1	$0859			MOVF	FLOC_main+7, 0
$01C2	$00F7			MOVWF	STACK_4+3
$01C3	$0852			MOVF	FLOC_main+0, 0
$01C4	$00F0			MOVWF	STACK_0
$01C5	$0853			MOVF	FLOC_main+1, 0
$01C6	$00F1			MOVWF	STACK_0+1
$01C7	$0854			MOVF	FLOC_main+2, 0
$01C8	$00F2			MOVWF	STACK_0+2
$01C9	$0855			MOVF	FLOC_main+3, 0
$01CA	$00F3			MOVWF	STACK_0+3
$01CB	$2728			CALL	_sub_32x32_fp
$01CC	$0870			MOVF	STACK_0, 0
$01CD	$00BC			MOVWF	_leftpulse
$01CE	$0871			MOVF	STACK_0+1, 0
$01CF	$00BD			MOVWF	_leftpulse+1
$01D0	$0872			MOVF	STACK_0+2, 0
$01D1	$00BE			MOVWF	_leftpulse+2
$01D2	$0873			MOVF	STACK_0+3, 0
$01D3	$00BF			MOVWF	_leftpulse+3
;lfr_runner_5sen_tsop_1.c,155 :: 		motor_RF();
$01D4	$158A			BSF	PCLATH, 3
$01D5	$2268			CALL	_motor_RF
$01D6	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop_1.c,156 :: 		motor_LF();
$01D7	$158A			BSF	PCLATH, 3
$01D8	$226D			CALL	_motor_LF
$01D9	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop_1.c,158 :: 		if(leftpulse > 255)                 //LEFT CORRECTION EXCEED
$01DA	$083C			MOVF	_leftpulse, 0
$01DB	$00F4			MOVWF	STACK_4
$01DC	$083D			MOVF	_leftpulse+1, 0
$01DD	$00F5			MOVWF	STACK_4+1
$01DE	$083E			MOVF	_leftpulse+2, 0
$01DF	$00F6			MOVWF	STACK_4+2
$01E0	$083F			MOVF	_leftpulse+3, 0
$01E1	$00F7			MOVWF	STACK_4+3
$01E2	$3000			MOVLW	0
$01E3	$00F0			MOVWF	STACK_0
$01E4	$3000			MOVLW	0
$01E5	$00F1			MOVWF	STACK_0+1
$01E6	$307F			MOVLW	127
$01E7	$00F2			MOVWF	STACK_0+2
$01E8	$3086			MOVLW	134
$01E9	$00F3			MOVWF	STACK_0+3
$01EA	$26AD			CALL	_compare_double
$01EB	$3001			MOVLW	1
$01EC	$1803			BTFSC	STATUS, C
$01ED	$3000			MOVLW	0
$01EE	$00F0			MOVWF	STACK_0
$01EF	$0870			MOVF	STACK_0, 0
$01F0	$1903			BTFSC	STATUS, Z
$01F1	$29FA			GOTO	L_main_14
;lfr_runner_5sen_tsop_1.c,159 :: 		leftpulse = 255;
$01F2	$3000			MOVLW	0
$01F3	$00BC			MOVWF	_leftpulse
$01F4	$3000			MOVLW	0
$01F5	$00BD			MOVWF	_leftpulse+1
$01F6	$307F			MOVLW	127
$01F7	$00BE			MOVWF	_leftpulse+2
$01F8	$3086			MOVLW	134
$01F9	$00BF			MOVWF	_leftpulse+3
$01FA	$	L_main_14:
;lfr_runner_5sen_tsop_1.c,161 :: 		if(rightpulse > 255)                //RIGHT CORRECTION EXCEED
$01FA	$0838			MOVF	_rightpulse, 0
$01FB	$00F4			MOVWF	STACK_4
$01FC	$0839			MOVF	_rightpulse+1, 0
$01FD	$00F5			MOVWF	STACK_4+1
$01FE	$083A			MOVF	_rightpulse+2, 0
$01FF	$00F6			MOVWF	STACK_4+2
$0200	$083B			MOVF	_rightpulse+3, 0
$0201	$00F7			MOVWF	STACK_4+3
$0202	$3000			MOVLW	0
$0203	$00F0			MOVWF	STACK_0
$0204	$3000			MOVLW	0
$0205	$00F1			MOVWF	STACK_0+1
$0206	$307F			MOVLW	127
$0207	$00F2			MOVWF	STACK_0+2
$0208	$3086			MOVLW	134
$0209	$00F3			MOVWF	STACK_0+3
$020A	$26AD			CALL	_compare_double
$020B	$3001			MOVLW	1
$020C	$1803			BTFSC	STATUS, C
$020D	$3000			MOVLW	0
$020E	$00F0			MOVWF	STACK_0
$020F	$0870			MOVF	STACK_0, 0
$0210	$1903			BTFSC	STATUS, Z
$0211	$2A1A			GOTO	L_main_15
;lfr_runner_5sen_tsop_1.c,162 :: 		rightpulse = 255;
$0212	$3000			MOVLW	0
$0213	$00B8			MOVWF	_rightpulse
$0214	$3000			MOVLW	0
$0215	$00B9			MOVWF	_rightpulse+1
$0216	$307F			MOVLW	127
$0217	$00BA			MOVWF	_rightpulse+2
$0218	$3086			MOVLW	134
$0219	$00BB			MOVWF	_rightpulse+3
$021A	$	L_main_15:
;lfr_runner_5sen_tsop_1.c,164 :: 		if(leftpulse < 0)                   //LEFT CORRECTION EXCEED
$021A	$01F4			CLRF	STACK_4
$021B	$01F5			CLRF	STACK_4+1
$021C	$01F6			CLRF	STACK_4+2
$021D	$01F7			CLRF	STACK_4+3
$021E	$083C			MOVF	_leftpulse, 0
$021F	$00F0			MOVWF	STACK_0
$0220	$083D			MOVF	_leftpulse+1, 0
$0221	$00F1			MOVWF	STACK_0+1
$0222	$083E			MOVF	_leftpulse+2, 0
$0223	$00F2			MOVWF	STACK_0+2
$0224	$083F			MOVF	_leftpulse+3, 0
$0225	$00F3			MOVWF	STACK_0+3
$0226	$26AD			CALL	_compare_double
$0227	$3001			MOVLW	1
$0228	$1803			BTFSC	STATUS, C
$0229	$3000			MOVLW	0
$022A	$00F0			MOVWF	STACK_0
$022B	$0870			MOVF	STACK_0, 0
$022C	$1903			BTFSC	STATUS, Z
$022D	$2A32			GOTO	L_main_16
;lfr_runner_5sen_tsop_1.c,165 :: 		leftpulse = 0;
$022E	$01BC			CLRF	_leftpulse
$022F	$01BD			CLRF	_leftpulse+1
$0230	$01BE			CLRF	_leftpulse+2
$0231	$01BF			CLRF	_leftpulse+3
$0232	$	L_main_16:
;lfr_runner_5sen_tsop_1.c,167 :: 		if(rightpulse < 0)                  //RIGHT CORRECTION EXCEED
$0232	$01F4			CLRF	STACK_4
$0233	$01F5			CLRF	STACK_4+1
$0234	$01F6			CLRF	STACK_4+2
$0235	$01F7			CLRF	STACK_4+3
$0236	$0838			MOVF	_rightpulse, 0
$0237	$00F0			MOVWF	STACK_0
$0238	$0839			MOVF	_rightpulse+1, 0
$0239	$00F1			MOVWF	STACK_0+1
$023A	$083A			MOVF	_rightpulse+2, 0
$023B	$00F2			MOVWF	STACK_0+2
$023C	$083B			MOVF	_rightpulse+3, 0
$023D	$00F3			MOVWF	STACK_0+3
$023E	$26AD			CALL	_compare_double
$023F	$3001			MOVLW	1
$0240	$1803			BTFSC	STATUS, C
$0241	$3000			MOVLW	0
$0242	$00F0			MOVWF	STACK_0
$0243	$0870			MOVF	STACK_0, 0
$0244	$1903			BTFSC	STATUS, Z
$0245	$2A4A			GOTO	L_main_17
;lfr_runner_5sen_tsop_1.c,168 :: 		rightpulse = 0;
$0246	$01B8			CLRF	_rightpulse
$0247	$01B9			CLRF	_rightpulse+1
$0248	$01BA			CLRF	_rightpulse+2
$0249	$01BB			CLRF	_rightpulse+3
$024A	$	L_main_17:
;lfr_runner_5sen_tsop_1.c,170 :: 		PWM1_CHANGE_DUTY(rightpulse);
$024A	$0838			MOVF	_rightpulse, 0
$024B	$00F0			MOVWF	STACK_0
$024C	$0839			MOVF	_rightpulse+1, 0
$024D	$00F1			MOVWF	STACK_0+1
$024E	$083A			MOVF	_rightpulse+2, 0
$024F	$00F2			MOVWF	STACK_0+2
$0250	$083B			MOVF	_rightpulse+3, 0
$0251	$00F3			MOVWF	STACK_0+3
$0252	$158A			BSF	PCLATH, 3
$0253	$2095			CALL	_double2byte
$0254	$118A			BCF	PCLATH, 3
$0255	$0870			MOVF	STACK_0, 0
$0256	$00DE			MOVWF	FARG_PWM1_Change_Duty+0
$0257	$158A			BSF	PCLATH, 3
$0258	$20D8			CALL	_PWM1_Change_Duty
$0259	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop_1.c,171 :: 		PWM2_CHANGE_DUTY(leftpulse);
$025A	$083C			MOVF	_leftpulse, 0
$025B	$00F0			MOVWF	STACK_0
$025C	$083D			MOVF	_leftpulse+1, 0
$025D	$00F1			MOVWF	STACK_0+1
$025E	$083E			MOVF	_leftpulse+2, 0
$025F	$00F2			MOVWF	STACK_0+2
$0260	$083F			MOVF	_leftpulse+3, 0
$0261	$00F3			MOVWF	STACK_0+3
$0262	$158A			BSF	PCLATH, 3
$0263	$2095			CALL	_double2byte
$0264	$118A			BCF	PCLATH, 3
$0265	$0870			MOVF	STACK_0, 0
$0266	$00DE			MOVWF	FARG_PWM2_Change_Duty+0
$0267	$158A			BSF	PCLATH, 3
$0268	$2142			CALL	_PWM2_Change_Duty
$0269	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop_1.c,172 :: 		}
$026A	$	L_main_10:
;lfr_runner_5sen_tsop_1.c,173 :: 		if((s1+s2+s3+s4+s5) ==5 )
$026A	$0823			MOVF	_s2, 0
$026B	$0721			ADDWF	_s1, 0
$026C	$00F0			MOVWF	STACK_0
$026D	$0822			MOVF	_s1+1, 0
$026E	$1803			BTFSC	STATUS, C
$026F	$3F01			ADDLW	1
$0270	$0724			ADDWF	_s2+1, 0
$0271	$00F1			MOVWF	STACK_0+1
$0272	$0825			MOVF	_s3, 0
$0273	$07F0			ADDWF	STACK_0, 1
$0274	$0826			MOVF	_s3+1, 0
$0275	$1803			BTFSC	STATUS, C
$0276	$3F01			ADDLW	1
$0277	$07F1			ADDWF	STACK_0+1, 1
$0278	$0827			MOVF	_s4, 0
$0279	$07F0			ADDWF	STACK_0, 1
$027A	$0828			MOVF	_s4+1, 0
$027B	$1803			BTFSC	STATUS, C
$027C	$3F01			ADDLW	1
$027D	$07F1			ADDWF	STACK_0+1, 1
$027E	$0829			MOVF	_s5, 0
$027F	$0770			ADDWF	STACK_0, 0
$0280	$00F4			MOVWF	STACK_4
$0281	$0871			MOVF	STACK_0+1, 0
$0282	$1803			BTFSC	STATUS, C
$0283	$3F01			ADDLW	1
$0284	$072A			ADDWF	_s5+1, 0
$0285	$00F5			MOVWF	STACK_4+1
$0286	$3000			MOVLW	0
$0287	$0675			XORWF	STACK_4+1, 0
$0288	$1D03			BTFSS	STATUS, Z
$0289	$2A8C			GOTO	L_main_50
$028A	$3005			MOVLW	5
$028B	$0674			XORWF	STACK_4, 0
$028C	$	L_main_50:
$028C	$1D03			BTFSS	STATUS, Z
$028D	$2AFC			GOTO	L_main_18
;lfr_runner_5sen_tsop_1.c,175 :: 		if(PORTA.F2==1)
$028E	$3000			MOVLW	0
$028F	$1905			BTFSC	PORTA, 2
$0290	$3001			MOVLW	1
$0291	$00F4			MOVWF	STACK_4
$0292	$0874			MOVF	STACK_4, 0
$0293	$3A01			XORLW	1
$0294	$1D03			BTFSS	STATUS, Z
$0295	$2AC5			GOTO	L_main_19
;lfr_runner_5sen_tsop_1.c,176 :: 		{for(i=0;i<20;i++)
$0296	$01D0			CLRF	_i
$0297	$01D1			CLRF	_i+1
$0298	$	L_main_20:
$0298	$3000			MOVLW	0
$0299	$0251			SUBWF	_i+1, 0
$029A	$1D03			BTFSS	STATUS, Z
$029B	$2A9E			GOTO	L_main_51
$029C	$3014			MOVLW	20
$029D	$0250			SUBWF	_i, 0
$029E	$	L_main_51:
$029E	$1803			BTFSC	STATUS, C
$029F	$2AC5			GOTO	L_main_21
;lfr_runner_5sen_tsop_1.c,178 :: 		lastreading = 'u';
$02A0	$3075			MOVLW	117
$02A1	$00AB			MOVWF	_lastreading
;lfr_runner_5sen_tsop_1.c,179 :: 		motor_RB();						          //TURN RIGHT AT FULL SPEED
$02A2	$158A			BSF	PCLATH, 3
$02A3	$2272			CALL	_motor_RB
$02A4	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop_1.c,180 :: 		motor_LF();
$02A5	$158A			BSF	PCLATH, 3
$02A6	$226D			CALL	_motor_LF
$02A7	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop_1.c,181 :: 		PWM1_CHANGE_DUTY(255);
$02A8	$30FF			MOVLW	255
$02A9	$00DE			MOVWF	FARG_PWM1_Change_Duty+0
$02AA	$158A			BSF	PCLATH, 3
$02AB	$20D8			CALL	_PWM1_Change_Duty
$02AC	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop_1.c,182 :: 		PWM2_CHANGE_DUTY(255);
$02AD	$30FF			MOVLW	255
$02AE	$00DE			MOVWF	FARG_PWM2_Change_Duty+0
$02AF	$158A			BSF	PCLATH, 3
$02B0	$2142			CALL	_PWM2_Change_Duty
$02B1	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop_1.c,183 :: 		delay_ms(10);
$02B2	$300D			MOVLW	13
$02B3	$00FB			MOVWF	STACK_11
$02B4	$30FF			MOVLW	255
$02B5	$00FA			MOVWF	STACK_10
$02B6	$0BFB			DECFSZ	STACK_11, F
$02B7	$2AB9			GOTO	$+2
$02B8	$2ABC			GOTO	$+4
$02B9	$0BFA			DECFSZ	STACK_10, F
$02BA	$2AB9			GOTO	$-1
$02BB	$2AB6			GOTO	$-5
$02BC	$30F3			MOVLW	243
$02BD	$00FA			MOVWF	STACK_10
$02BE	$0BFA			DECFSZ	STACK_10, F
$02BF	$2ABE			GOTO	$-1
$02C0	$0000			NOP
;lfr_runner_5sen_tsop_1.c,184 :: 		}
$02C1	$	L_main_22:
;lfr_runner_5sen_tsop_1.c,176 :: 		{for(i=0;i<20;i++)
$02C1	$0AD0			INCF	_i, 1
$02C2	$1903			BTFSC	STATUS, Z
$02C3	$0AD1			INCF	_i+1, 1
;lfr_runner_5sen_tsop_1.c,184 :: 		}
$02C4	$2A98			GOTO	L_main_20
$02C5	$	L_main_21:
;lfr_runner_5sen_tsop_1.c,185 :: 		}
$02C5	$	L_main_19:
;lfr_runner_5sen_tsop_1.c,186 :: 		if(PORTE.F1==1)
$02C5	$3000			MOVLW	0
$02C6	$1889			BTFSC	PORTE, 1
$02C7	$3001			MOVLW	1
$02C8	$00F4			MOVWF	STACK_4
$02C9	$0874			MOVF	STACK_4, 0
$02CA	$3A01			XORLW	1
$02CB	$1D03			BTFSS	STATUS, Z
$02CC	$2AFC			GOTO	L_main_23
;lfr_runner_5sen_tsop_1.c,187 :: 		{ for(i=0;i<20;i++)
$02CD	$01D0			CLRF	_i
$02CE	$01D1			CLRF	_i+1
$02CF	$	L_main_24:
$02CF	$3000			MOVLW	0
$02D0	$0251			SUBWF	_i+1, 0
$02D1	$1D03			BTFSS	STATUS, Z
$02D2	$2AD5			GOTO	L_main_52
$02D3	$3014			MOVLW	20
$02D4	$0250			SUBWF	_i, 0
$02D5	$	L_main_52:
$02D5	$1803			BTFSC	STATUS, C
$02D6	$2AFC			GOTO	L_main_25
;lfr_runner_5sen_tsop_1.c,189 :: 		lastreading = 'u';
$02D7	$3075			MOVLW	117
$02D8	$00AB			MOVWF	_lastreading
;lfr_runner_5sen_tsop_1.c,190 :: 		motor_RF();						          //TURN LEFT AT FULL SPEED
$02D9	$158A			BSF	PCLATH, 3
$02DA	$2268			CALL	_motor_RF
$02DB	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop_1.c,191 :: 		motor_LB();
$02DC	$158A			BSF	PCLATH, 3
$02DD	$2277			CALL	_motor_LB
$02DE	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop_1.c,192 :: 		PWM1_CHANGE_DUTY(255);
$02DF	$30FF			MOVLW	255
$02E0	$00DE			MOVWF	FARG_PWM1_Change_Duty+0
$02E1	$158A			BSF	PCLATH, 3
$02E2	$20D8			CALL	_PWM1_Change_Duty
$02E3	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop_1.c,193 :: 		PWM2_CHANGE_DUTY(255);
$02E4	$30FF			MOVLW	255
$02E5	$00DE			MOVWF	FARG_PWM2_Change_Duty+0
$02E6	$158A			BSF	PCLATH, 3
$02E7	$2142			CALL	_PWM2_Change_Duty
$02E8	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop_1.c,194 :: 		delay_ms(10);
$02E9	$300D			MOVLW	13
$02EA	$00FB			MOVWF	STACK_11
$02EB	$30FF			MOVLW	255
$02EC	$00FA			MOVWF	STACK_10
$02ED	$0BFB			DECFSZ	STACK_11, F
$02EE	$2AF0			GOTO	$+2
$02EF	$2AF3			GOTO	$+4
$02F0	$0BFA			DECFSZ	STACK_10, F
$02F1	$2AF0			GOTO	$-1
$02F2	$2AED			GOTO	$-5
$02F3	$30F3			MOVLW	243
$02F4	$00FA			MOVWF	STACK_10
$02F5	$0BFA			DECFSZ	STACK_10, F
$02F6	$2AF5			GOTO	$-1
$02F7	$0000			NOP
;lfr_runner_5sen_tsop_1.c,195 :: 		}
$02F8	$	L_main_26:
;lfr_runner_5sen_tsop_1.c,187 :: 		{ for(i=0;i<20;i++)
$02F8	$0AD0			INCF	_i, 1
$02F9	$1903			BTFSC	STATUS, Z
$02FA	$0AD1			INCF	_i+1, 1
;lfr_runner_5sen_tsop_1.c,195 :: 		}
$02FB	$2ACF			GOTO	L_main_24
$02FC	$	L_main_25:
;lfr_runner_5sen_tsop_1.c,196 :: 		}
$02FC	$	L_main_23:
;lfr_runner_5sen_tsop_1.c,197 :: 		}
$02FC	$	L_main_18:
;lfr_runner_5sen_tsop_1.c,198 :: 		if(PORTB.F7 == 0)
$02FC	$3000			MOVLW	0
$02FD	$1B86			BTFSC	PORTB, 7
$02FE	$3001			MOVLW	1
$02FF	$00F4			MOVWF	STACK_4
$0300	$0874			MOVF	STACK_4, 0
$0301	$3A00			XORLW	0
$0302	$1D03			BTFSS	STATUS, Z
$0303	$2B33			GOTO	L_main_27
;lfr_runner_5sen_tsop_1.c,200 :: 		for(i=0;i<60;i++)
$0304	$01D0			CLRF	_i
$0305	$01D1			CLRF	_i+1
$0306	$	L_main_28:
$0306	$3000			MOVLW	0
$0307	$0251			SUBWF	_i+1, 0
$0308	$1D03			BTFSS	STATUS, Z
$0309	$2B0C			GOTO	L_main_53
$030A	$303C			MOVLW	60
$030B	$0250			SUBWF	_i, 0
$030C	$	L_main_53:
$030C	$1803			BTFSC	STATUS, C
$030D	$2B33			GOTO	L_main_29
;lfr_runner_5sen_tsop_1.c,202 :: 		lastreading = 'u';
$030E	$3075			MOVLW	117
$030F	$00AB			MOVWF	_lastreading
;lfr_runner_5sen_tsop_1.c,203 :: 		motor_RF();						          //TURN RIGHT AT FULL SPEED
$0310	$158A			BSF	PCLATH, 3
$0311	$2268			CALL	_motor_RF
$0312	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop_1.c,204 :: 		motor_LB();
$0313	$158A			BSF	PCLATH, 3
$0314	$2277			CALL	_motor_LB
$0315	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop_1.c,205 :: 		PWM1_CHANGE_DUTY(255);
$0316	$30FF			MOVLW	255
$0317	$00DE			MOVWF	FARG_PWM1_Change_Duty+0
$0318	$158A			BSF	PCLATH, 3
$0319	$20D8			CALL	_PWM1_Change_Duty
$031A	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop_1.c,206 :: 		PWM2_CHANGE_DUTY(255);
$031B	$30FF			MOVLW	255
$031C	$00DE			MOVWF	FARG_PWM2_Change_Duty+0
$031D	$158A			BSF	PCLATH, 3
$031E	$2142			CALL	_PWM2_Change_Duty
$031F	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop_1.c,207 :: 		delay_ms(10);
$0320	$300D			MOVLW	13
$0321	$00FB			MOVWF	STACK_11
$0322	$30FF			MOVLW	255
$0323	$00FA			MOVWF	STACK_10
$0324	$0BFB			DECFSZ	STACK_11, F
$0325	$2B27			GOTO	$+2
$0326	$2B2A			GOTO	$+4
$0327	$0BFA			DECFSZ	STACK_10, F
$0328	$2B27			GOTO	$-1
$0329	$2B24			GOTO	$-5
$032A	$30F3			MOVLW	243
$032B	$00FA			MOVWF	STACK_10
$032C	$0BFA			DECFSZ	STACK_10, F
$032D	$2B2C			GOTO	$-1
$032E	$0000			NOP
;lfr_runner_5sen_tsop_1.c,208 :: 		}
$032F	$	L_main_30:
;lfr_runner_5sen_tsop_1.c,200 :: 		for(i=0;i<60;i++)
$032F	$0AD0			INCF	_i, 1
$0330	$1903			BTFSC	STATUS, Z
$0331	$0AD1			INCF	_i+1, 1
;lfr_runner_5sen_tsop_1.c,208 :: 		}
$0332	$2B06			GOTO	L_main_28
$0333	$	L_main_29:
;lfr_runner_5sen_tsop_1.c,209 :: 		}
$0333	$	L_main_27:
;lfr_runner_5sen_tsop_1.c,210 :: 		if(PORTB.F6 == 0 && PORTA.F0==1)
$0333	$3000			MOVLW	0
$0334	$1B06			BTFSC	PORTB, 6
$0335	$3001			MOVLW	1
$0336	$00F4			MOVWF	STACK_4
$0337	$0874			MOVF	STACK_4, 0
$0338	$3A00			XORLW	0
$0339	$1D03			BTFSS	STATUS, Z
$033A	$2B71			GOTO	L_main_33
$033B	$3001			MOVLW	1
$033C	$0505			ANDWF	PORTA, 0
$033D	$00F4			MOVWF	STACK_4
$033E	$0874			MOVF	STACK_4, 0
$033F	$3A01			XORLW	1
$0340	$1D03			BTFSS	STATUS, Z
$0341	$2B71			GOTO	L_main_33
$0342	$	L390_ex_L_main_33:
;lfr_runner_5sen_tsop_1.c,212 :: 		for(i=0;i<10;i++)
$0342	$01D0			CLRF	_i
$0343	$01D1			CLRF	_i+1
$0344	$	L_main_34:
$0344	$3000			MOVLW	0
$0345	$0251			SUBWF	_i+1, 0
$0346	$1D03			BTFSS	STATUS, Z
$0347	$2B4A			GOTO	L_main_54
$0348	$300A			MOVLW	10
$0349	$0250			SUBWF	_i, 0
$034A	$	L_main_54:
$034A	$1803			BTFSC	STATUS, C
$034B	$2B71			GOTO	L_main_35
;lfr_runner_5sen_tsop_1.c,214 :: 		lastreading = 'u';
$034C	$3075			MOVLW	117
$034D	$00AB			MOVWF	_lastreading
;lfr_runner_5sen_tsop_1.c,215 :: 		motor_RB();						          //TURN RIGHT AT FULL SPEED
$034E	$158A			BSF	PCLATH, 3
$034F	$2272			CALL	_motor_RB
$0350	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop_1.c,216 :: 		motor_LF();
$0351	$158A			BSF	PCLATH, 3
$0352	$226D			CALL	_motor_LF
$0353	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop_1.c,217 :: 		PWM1_CHANGE_DUTY(255);
$0354	$30FF			MOVLW	255
$0355	$00DE			MOVWF	FARG_PWM1_Change_Duty+0
$0356	$158A			BSF	PCLATH, 3
$0357	$20D8			CALL	_PWM1_Change_Duty
$0358	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop_1.c,218 :: 		PWM2_CHANGE_DUTY(255);
$0359	$30FF			MOVLW	255
$035A	$00DE			MOVWF	FARG_PWM2_Change_Duty+0
$035B	$158A			BSF	PCLATH, 3
$035C	$2142			CALL	_PWM2_Change_Duty
$035D	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop_1.c,219 :: 		delay_ms(10);
$035E	$300D			MOVLW	13
$035F	$00FB			MOVWF	STACK_11
$0360	$30FF			MOVLW	255
$0361	$00FA			MOVWF	STACK_10
$0362	$0BFB			DECFSZ	STACK_11, F
$0363	$2B65			GOTO	$+2
$0364	$2B68			GOTO	$+4
$0365	$0BFA			DECFSZ	STACK_10, F
$0366	$2B65			GOTO	$-1
$0367	$2B62			GOTO	$-5
$0368	$30F3			MOVLW	243
$0369	$00FA			MOVWF	STACK_10
$036A	$0BFA			DECFSZ	STACK_10, F
$036B	$2B6A			GOTO	$-1
$036C	$0000			NOP
;lfr_runner_5sen_tsop_1.c,220 :: 		}
$036D	$	L_main_36:
;lfr_runner_5sen_tsop_1.c,212 :: 		for(i=0;i<10;i++)
$036D	$0AD0			INCF	_i, 1
$036E	$1903			BTFSC	STATUS, Z
$036F	$0AD1			INCF	_i+1, 1
;lfr_runner_5sen_tsop_1.c,220 :: 		}
$0370	$2B44			GOTO	L_main_34
$0371	$	L_main_35:
;lfr_runner_5sen_tsop_1.c,221 :: 		}
$0371	$	L_main_33:
;lfr_runner_5sen_tsop_1.c,222 :: 		if(PORTB.F6 == 0 && PORTE.F1==1)
$0371	$3000			MOVLW	0
$0372	$1B06			BTFSC	PORTB, 6
$0373	$3001			MOVLW	1
$0374	$00F4			MOVWF	STACK_4
$0375	$0874			MOVF	STACK_4, 0
$0376	$3A00			XORLW	0
$0377	$1D03			BTFSS	STATUS, Z
$0378	$2BB0			GOTO	L_main_39
$0379	$3000			MOVLW	0
$037A	$1889			BTFSC	PORTE, 1
$037B	$3001			MOVLW	1
$037C	$00F4			MOVWF	STACK_4
$037D	$0874			MOVF	STACK_4, 0
$037E	$3A01			XORLW	1
$037F	$1D03			BTFSS	STATUS, Z
$0380	$2BB0			GOTO	L_main_39
$0381	$	L441_ex_L_main_39:
;lfr_runner_5sen_tsop_1.c,224 :: 		for(i=0;i<10;i++)
$0381	$01D0			CLRF	_i
$0382	$01D1			CLRF	_i+1
$0383	$	L_main_40:
$0383	$3000			MOVLW	0
$0384	$0251			SUBWF	_i+1, 0
$0385	$1D03			BTFSS	STATUS, Z
$0386	$2B89			GOTO	L_main_55
$0387	$300A			MOVLW	10
$0388	$0250			SUBWF	_i, 0
$0389	$	L_main_55:
$0389	$1803			BTFSC	STATUS, C
$038A	$2BB0			GOTO	L_main_41
;lfr_runner_5sen_tsop_1.c,226 :: 		lastreading = 'u';
$038B	$3075			MOVLW	117
$038C	$00AB			MOVWF	_lastreading
;lfr_runner_5sen_tsop_1.c,227 :: 		motor_LB();					        	  //TURN LEFT AT FULL SPEED
$038D	$158A			BSF	PCLATH, 3
$038E	$2277			CALL	_motor_LB
$038F	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop_1.c,228 :: 		motor_RF();
$0390	$158A			BSF	PCLATH, 3
$0391	$2268			CALL	_motor_RF
$0392	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop_1.c,229 :: 		PWM1_CHANGE_DUTY(255);
$0393	$30FF			MOVLW	255
$0394	$00DE			MOVWF	FARG_PWM1_Change_Duty+0
$0395	$158A			BSF	PCLATH, 3
$0396	$20D8			CALL	_PWM1_Change_Duty
$0397	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop_1.c,230 :: 		PWM2_CHANGE_DUTY(255);
$0398	$30FF			MOVLW	255
$0399	$00DE			MOVWF	FARG_PWM2_Change_Duty+0
$039A	$158A			BSF	PCLATH, 3
$039B	$2142			CALL	_PWM2_Change_Duty
$039C	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop_1.c,231 :: 		delay_ms(10);
$039D	$300D			MOVLW	13
$039E	$00FB			MOVWF	STACK_11
$039F	$30FF			MOVLW	255
$03A0	$00FA			MOVWF	STACK_10
$03A1	$0BFB			DECFSZ	STACK_11, F
$03A2	$2BA4			GOTO	$+2
$03A3	$2BA7			GOTO	$+4
$03A4	$0BFA			DECFSZ	STACK_10, F
$03A5	$2BA4			GOTO	$-1
$03A6	$2BA1			GOTO	$-5
$03A7	$30F3			MOVLW	243
$03A8	$00FA			MOVWF	STACK_10
$03A9	$0BFA			DECFSZ	STACK_10, F
$03AA	$2BA9			GOTO	$-1
$03AB	$0000			NOP
;lfr_runner_5sen_tsop_1.c,232 :: 		}
$03AC	$	L_main_42:
;lfr_runner_5sen_tsop_1.c,224 :: 		for(i=0;i<10;i++)
$03AC	$0AD0			INCF	_i, 1
$03AD	$1903			BTFSC	STATUS, Z
$03AE	$0AD1			INCF	_i+1, 1
;lfr_runner_5sen_tsop_1.c,232 :: 		}
$03AF	$2B83			GOTO	L_main_40
$03B0	$	L_main_41:
;lfr_runner_5sen_tsop_1.c,233 :: 		}
$03B0	$	L_main_39:
;lfr_runner_5sen_tsop_1.c,234 :: 		delay_ms(10);
$03B0	$300D			MOVLW	13
$03B1	$00FB			MOVWF	STACK_11
$03B2	$30FF			MOVLW	255
$03B3	$00FA			MOVWF	STACK_10
$03B4	$0BFB			DECFSZ	STACK_11, F
$03B5	$2BB7			GOTO	$+2
$03B6	$2BBA			GOTO	$+4
$03B7	$0BFA			DECFSZ	STACK_10, F
$03B8	$2BB7			GOTO	$-1
$03B9	$2BB4			GOTO	$-5
$03BA	$30F3			MOVLW	243
$03BB	$00FA			MOVWF	STACK_10
$03BC	$0BFA			DECFSZ	STACK_10, F
$03BD	$2BBC			GOTO	$-1
$03BE	$0000			NOP
;lfr_runner_5sen_tsop_1.c,235 :: 		}
$03BF	$280D			GOTO	L_main_5
;lfr_runner_5sen_tsop_1.c,236 :: 		}
$03C0	$2BC0			GOTO	$


//** Procedures locations **
//ADDRESS		PROCEDURE
//----------------------------------------------
$0004		main
$03C1		CalcError
$049A		Add_32x32_FP
$053E		Div_32x32_FP
$05E2		Mul_32x32_FP
$0649		NRM4032
$06AD		Compare_Double
$06FD		Mul_16x16_U
$0728		Sub_32x32_FP
$0800		GlobalInilfr_runner_5sen_tsop_1
$084B		Mul_16x16_S
$0895		Double2Byte
$08D8		PWM1_Change_Duty
$0911		NRM3232
$0942		PWM2_Change_Duty
$097B		indicator
$09B2		initpwm
$09C3		Word2Double
$09D9		Equals_Double
$09EF		Byte2Double
$0A01		initport
$0A12		SETIOV3224
$0A21		SETFOV32
$0A2F		SETFUN32
$0A3D		RES032
$0A46		PWM1_Start
$0A4E		PWM2_Start
$0A56		PWM2_Init
$0A5C		FIXSIGN32
$0A62		PWM1_Init
$0A68		motor_RF
$0A6D		motor_LF
$0A72		motor_RB
$0A77		motor_LB
$0A7C		SETFDZ32


//** Labels locations **
//ADDRESS		LABEL
//----------------------------------------------
$0004		_main:
$000D		L_main_5:
$0033		L_main_47:
$0058		L_main_8:
$007B		L_main_9:
$007C		L_main_7:
$0098		L_main_48:
$00B6		L_main_49:
$00B8		L185_ex_L_main_13:
$00D7		L_main_13:
$01FA		L_main_14:
$021A		L_main_15:
$0232		L_main_16:
$024A		L_main_17:
$026A		L_main_10:
$028C		L_main_50:
$0298		L_main_20:
$029E		L_main_51:
$02C1		L_main_22:
$02C5		L_main_19:
$02C5		L_main_21:
$02CF		L_main_24:
$02D5		L_main_52:
$02F8		L_main_26:
$02FC		L_main_18:
$02FC		L_main_23:
$02FC		L_main_25:
$0306		L_main_28:
$030C		L_main_53:
$032F		L_main_30:
$0333		L_main_27:
$0333		L_main_29:
$0342		L390_ex_L_main_33:
$0344		L_main_34:
$034A		L_main_54:
$036D		L_main_36:
$0371		L_main_33:
$0371		L_main_35:
$0381		L441_ex_L_main_39:
$0383		L_main_40:
$0389		L_main_55:
$03AC		L_main_42:
$03B0		L_main_39:
$03B0		L_main_41:
$03C1		_CalcError:
$03D5		L_CalcError_0:
$03DB		L_CalcError_1:
$03E1		L_CalcError_2:
$03E7		L_CalcError_3:
$03EF		L_CalcError_4:
$03FE		L_CalcError_43:
$0405		L_CalcError_44:
$0423		L_CalcError_45:
$042A		L_CalcError_46:
$049A		_Add_32x32_FP:
$04BD		USEA32:
$04E6		ALIGNB32:
$04E9		ALOOPB32:
$04F0		ALIGNED32:
$04FD		AOK32:
$0516		ACOMP32:
$0526		JMPNRMRND4032:
$052A		JMPNRM4032:
$052E		JMPNRM32:
$0534		ADD_JMPSETFOV32:
$053A		JMPEEE:
$053C		ADD32EEE:
$053E		_Div_32x32_FP:
$0540		FPD32:
$0546		D32BNE0:
$054C		TALIGN32:
$0558		TS1ALIGN32:
$055C		TS2ALIGN32:
$0569		DALIGN32OK:
$056D		AGEB32:
$0573		ALTB32:
$0578		DARGOK32:
$057A		DLOOP32:
$0586		DS132:
$058A		DS232:
$0591		DREST32:
$0596		DAREST32:
$059C		DOK32:
$05A1		DROUND32:
$05C3		DIV32OK:
$05CD		JPDSETFDZ32:
$05D2		JPDRES032:
$05D7		JPDSETFOV32:
$05DC		JPDSETFUN32:
$05E0		DIV32EEE:
$05E2		_Mul_32x32_FP:
$05E4		FPM32:
$05EA		M32BNE0:
$05F6		MTUN32:
$05F9		MOK32:
$0607		MLOOP32:
$0609		MADD32:
$0613		MNOADD32:
$0623		MROUND32:
$0635		MUL32OK:
$0639		JPMRES032:
$063E		JPMSETFOV32:
$0643		JPMSETFUN32:
$0647		MUL32EEE:
$0649		_NRM4032:
$0652		NRM4032:
$0672		NORM4032:
$0678		NORM4032A:
$0681		NRMRND4032:
$0694		JMPRES032:
$069A		JMPSETFUN32:
$06A0		JMPFIXSIGN32:
$06A6		JMPSETFOV32:
$06AB		NRM4032EEE:
$06AD		_Compare_Double:
$06BE		COMPARE_YNOTZERO:
$06C1		COMPARE_XNOTZERO:
$06C4		COMPARE_NOTZERO:
$06D2		COMPARE_TESTALL:
$06D9		COMPARE_C1:
$06E0		COMPARE_C2:
$06E7		COMPARE_C3:
$06ED		GT_FALSE:
$06F1		GT_TRUE:
$06F5		COMPARE_GT:
$06F7		COMPARE_LT:
$06F9		COMPARE_EQU:
$06FD		_Mul_16x16_U:
$0728		_Sub_32x32_FP:
$0800		GlobalInilfr_runner_5sen_tsop_1:
$084B		_Mul_16x16_S:
$0895		_Double2Byte:
$0897		INT32U08:
$08A6		SETEXP08:
$08B3		TSHIFT3208:
$08B6		SHIFT3208:
$08BA		SHIFT3208OK:
$08C2		INT3208OK:
$08C2		IRES008:
$08C4		SETIOV08:
$08C9		D2B_JPKSETIOV3224:
$08CC		INT3208EOK:
$08CF		INT3208EER:
$08D1		INT3208EEE:
$08D5		L_Double2Byte_0:
$08D8		_PWM1_Change_Duty:
$08EC		L_PWM1_Change_Duty_2:
$08F3		L_PWM1_Change_Duty_3:
$0911		_NRM3232:
$0928		NORM3232:
$092E		NORM3232A:
$0936		JPNRES032:
$093A		JPNSETFUN32:
$093E		JMPNFIXSIGN32:
$0941		NORM32EEE:
$0942		_PWM2_Change_Duty:
$0956		L_PWM2_Change_Duty_0:
$095D		L_PWM2_Change_Duty_1:
$097B		_indicator:
$09B2		_initpwm:
$09C3		_Word2Double:
$09CC		FLO16U32:
$09D9		_Equals_Double:
$09EC		EQU_FALSE:
$09EF		_Byte2Double:
$09F1		FLO08U32:
$0A01		_initport:
$0A12		_SETIOV3224:
$0A1F		SETIOV3224EEE:
$0A21		_SETFOV32:
$0A2D		SETFOV32EEE:
$0A2F		_SETFUN32:
$0A3B		SETFUN32EEE:
$0A3D		_RES032:
$0A46		_PWM1_Start:
$0A4E		_PWM2_Start:
$0A56		_PWM2_Init:
$0A5C		_FIXSIGN32:
$0A62		_PWM1_Init:
$0A68		_motor_RF:
$0A6D		_motor_LF:
$0A72		_motor_RB:
$0A77		_motor_LB:
$0A7C		_SETFDZ32:


//** Variables locations **
//ADDRESS		VARIABLE
//----------------------------------------------
$0000		INDF
$0002		PCL
$0003		STATUS
$0004		FSR
$0005		PORTA
$0006		PORTB
$0007		PORTC
$0008		PORTD
$0009		PORTE
$000A		PCLATH
$0012		T2CON
$0015		CCPR1L
$0017		CCP1CON
$001B		CCPR2L
$001D		CCP2CON
$0020		___math_tempbD
$0021		_s1
$0023		_s2
$0025		_s3
$0027		_s4
$0029		_s5
$002B		_lastreading
$002C		_perror
$0030		_error
$0034		_basespeed
$0035		_Kp
$0036		_Ki
$0037		_Kd
$0038		_rightpulse
$003C		_leftpulse
$0040		_PROPORTIONAL
$0044		_INTEGRAL
$0048		_DERIVATIVE
$004C		_correction
$0050		_i
$0052		
$005E		
$005E		FARG_PWM1_Change_Duty+0
$005E		FARG_PWM2_Change_Duty+0
$0062		FARG_PWM1_Init+0
$0062		FARG_PWM2_Init+0
$0070		STACK_0
$0071		STACK_1
$0072		STACK_2
$0073		STACK_3
$0074		STACK_4
$0075		STACK_5
$0076		STACK_6
$0077		STACK_7
$0078		STACK_8
$0079		STACK_9
$007A		STACK_10
$007B		STACK_11
$007C		STACK_12
$007D		STACK_13
$007E		STACK_14
$007F		STACK_15
$0085		TRISA
$0086		TRISB
$0087		TRISC
$0088		TRISD
$0089		TRISE
$0092		PR2
$009F		ADCON1


