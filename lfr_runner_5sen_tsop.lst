;  ASM code generated by mikroVirtualMachine for PIC - V. 8.2.0.0
;  Date/Time: 3/22/2011 10:59:43 PM
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$2804			GOTO	_main
$0BA9	$	_RES032:
$0BA9	$1303			BCF	STATUS, RP1
$0BAA	$1283			BCF	STATUS, RP0
$0BAB	$01F2			CLRF	STACK_2
$0BAC	$01F1			CLRF	STACK_1
$0BAD	$01F0			CLRF	STACK_0
$0BAE	$01F8			CLRF	STACK_8
$0BAF	$01F3			CLRF	STACK_3
$0BB0	$3000			MOVLW	0
$0BB1	$0008			RETURN
$0B93	$	_SETFUN32:
$0B93	$1303			BCF	STATUS, RP1
$0B94	$1283			BCF	STATUS, RP0
$0B95	$157B			BSF	STACK_11, 2
$0B96	$1FFB			BTFSS	STACK_11, 7
$0B97	$2B9F			GOTO	SETFUN32EEE
$0B98	$3001			MOVLW	0x01
$0B99	$00F3			MOVWF	STACK_3
$0B9A	$01F2			CLRF	STACK_2
$0B9B	$01F1			CLRF	STACK_1
$0B9C	$01F0			CLRF	STACK_0
$0B9D	$0DFA			RLF	STACK_10, F
$0B9E	$0CF2			RRF	STACK_2, F
$0B9F	$	SETFUN32EEE:
$0B9F	$30FF			MOVLW	0xFF
$0BA0	$0008			RETURN
$0BC2	$	_FIXSIGN32:
$0BC2	$1303			BCF	STATUS, RP1
$0BC3	$1283			BCF	STATUS, RP0
$0BC4	$1FFA			BTFSS	STACK_10, 7
$0BC5	$13F2			BCF	STACK_2, 7
$0BC6	$3000			MOVLW	0
$0BC7	$0008			RETURN
$0B85	$	_SETFOV32:
$0B85	$1303			BCF	STATUS, RP1
$0B86	$1283			BCF	STATUS, RP0
$0B87	$14FB			BSF	STACK_11, 1
$0B88	$1FFB			BTFSS	STACK_11, 7
$0B89	$2B91			GOTO	SETFOV32EEE
$0B8A	$30FF			MOVLW	0xFF
$0B8B	$00F3			MOVWF	STACK_3
$0B8C	$00F2			MOVWF	STACK_2
$0B8D	$00F1			MOVWF	STACK_1
$0B8E	$00F0			MOVWF	STACK_0
$0B8F	$0DFA			RLF	STACK_10, F
$0B90	$0CF2			RRF	STACK_2, F
$0B91	$	SETFOV32EEE:
$0B91	$30FF			MOVLW	0xFF
$0B92	$0008			RETURN
$089C	$	_NRM4032:
$089C	$1303			BCF	STATUS, RP1
$089D	$1283			BCF	STATUS, RP0
$089E	$187C			BTFSC	STACK_12, 0
$089F	$28D4			GOTO	NRMRND4032
$08A0	$18FC			BTFSC	STACK_12, 1
$08A1	$28A5			GOTO	NRM4032
$08A2	$197C			BTFSC	STACK_12, 2
$08A3	$28F3			GOTO	JMPSETFOV32
$08A4	$289E			GOTO	$-6
$08A5	$	NRM4032:
$08A5	$01A0			CLRF	__math_tempbD
$08A6	$0872			MOVF	STACK_2, W
$08A7	$1D03			BTFSS	STATUS, Z
$08A8	$28C5			GOTO	NORM4032
$08A9	$0871			MOVF	STACK_1, W
$08AA	$00F2			MOVWF	STACK_2
$08AB	$0870			MOVF	STACK_0, W
$08AC	$00F1			MOVWF	STACK_1
$08AD	$0878			MOVF	STACK_8, W
$08AE	$00F0			MOVWF	STACK_0
$08AF	$01F8			CLRF	STACK_8
$08B0	$15A0			BSF	__math_tempbD, 3
$08B1	$0872			MOVF	STACK_2, W
$08B2	$1D03			BTFSS	STATUS, Z
$08B3	$28C5			GOTO	NORM4032
$08B4	$0871			MOVF	STACK_1, W
$08B5	$00F2			MOVWF	STACK_2
$08B6	$0870			MOVF	STACK_0, W
$08B7	$00F1			MOVWF	STACK_1
$08B8	$01F0			CLRF	STACK_0
$08B9	$11A0			BCF	__math_tempbD, 3
$08BA	$1620			BSF	__math_tempbD, 4
$08BB	$0872			MOVF	STACK_2, W
$08BC	$1D03			BTFSS	STATUS, Z
$08BD	$28C5			GOTO	NORM4032
$08BE	$0871			MOVF	STACK_1, W
$08BF	$00F2			MOVWF	STACK_2
$08C0	$01F1			CLRF	STACK_1
$08C1	$15A0			BSF	__math_tempbD, 3
$08C2	$0872			MOVF	STACK_2, W
$08C3	$1903			BTFSC	STATUS, Z
$08C4	$28E7			GOTO	JMPRES032
$08C5	$	NORM4032:
$08C5	$0820			MOVF	__math_tempbD, W
$08C6	$02F3			SUBWF	STACK_3, F
$08C7	$1D03			BTFSS	STATUS, Z
$08C8	$1C03			BTFSS	STATUS, C
$08C9	$28EB			GOTO	JMPSETFUN32
$08CA	$1003			BCF	STATUS, C
$08CB	$	NORM4032A:
$08CB	$1BF2			BTFSC	STACK_2, 7
$08CC	$28D4			GOTO	NRMRND4032
$08CD	$0DF8			RLF	STACK_8, F
$08CE	$0DF0			RLF	STACK_0, F
$08CF	$0DF1			RLF	STACK_1, F
$08D0	$0DF2			RLF	STACK_2, F
$08D1	$0BF3			DECFSZ	STACK_3, F
$08D2	$28CB			GOTO	NORM4032A
$08D3	$28EB			GOTO	JMPSETFUN32
$08D4	$	NRMRND4032:
$08D4	$1B7B			BTFSC	STACK_11, 6
$08D5	$1C70			BTFSS	STACK_0, 0
$08D6	$28EF			GOTO	JMPFIXSIGN32
$08D7	$1FF8			BTFSS	STACK_8, 7
$08D8	$28EF			GOTO	JMPFIXSIGN32
$08D9	$0AF0			INCF	STACK_0, F
$08DA	$1903			BTFSC	STATUS, Z
$08DB	$0AF1			INCF	STACK_1, F
$08DC	$1903			BTFSC	STATUS, Z
$08DD	$0AF2			INCF	STACK_2, F
$08DE	$1D03			BTFSS	STATUS, Z
$08DF	$28EF			GOTO	JMPFIXSIGN32
$08E0	$0CF2			RRF	STACK_2, F
$08E1	$0CF1			RRF	STACK_1, F
$08E2	$0CF0			RRF	STACK_0, F
$08E3	$0AF3			INCF	STACK_3, F
$08E4	$1903			BTFSC	STATUS, Z
$08E5	$28F3			GOTO	JMPSETFOV32
$08E6	$28EF			GOTO	JMPFIXSIGN32
$08E7	$	JMPRES032:
$08E7	$3001			MOVLW	0x01
$08E8	$00FC			MOVWF	STACK_12
$08E9	$23A9			CALL	_RES032
$08EA	$28F6			GOTO	NRM4032EEE
$08EB	$	JMPSETFUN32:
$08EB	$3002			MOVLW	0x02
$08EC	$00FC			MOVWF	STACK_12
$08ED	$2393			CALL	_SETFUN32
$08EE	$28F6			GOTO	NRM4032EEE
$08EF	$	JMPFIXSIGN32:
$08EF	$3004			MOVLW	0x04
$08F0	$00FC			MOVWF	STACK_12
$08F1	$23C2			CALL	_FIXSIGN32
$08F2	$28F6			GOTO	NRM4032EEE
$08F3	$	JMPSETFOV32:
$08F3	$3008			MOVLW	0x08
$08F4	$00FC			MOVWF	STACK_12
$08F5	$2385			CALL	_SETFOV32
$08F6	$	NRM4032EEE:
$08F6	$0000			NOP
$08F7	$0008			RETURN
$0A5D	$	_NRM3232:
$0A5D	$1303			BCF	STATUS, RP1
$0A5E	$1283			BCF	STATUS, RP0
$0A5F	$01A0			CLRF	__math_tempbD
$0A60	$0872			MOVF	STACK_2, W
$0A61	$1D03			BTFSS	STATUS, Z
$0A62	$2A74			GOTO	NORM3232
$0A63	$0871			MOVF	STACK_1, W
$0A64	$00F2			MOVWF	STACK_2
$0A65	$0870			MOVF	STACK_0, W
$0A66	$00F1			MOVWF	STACK_1
$0A67	$01F0			CLRF	STACK_0
$0A68	$15A0			BSF	__math_tempbD, 3
$0A69	$0872			MOVF	STACK_2, W
$0A6A	$1D03			BTFSS	STATUS, Z
$0A6B	$2A74			GOTO	NORM3232
$0A6C	$0871			MOVF	STACK_1, W
$0A6D	$00F2			MOVWF	STACK_2
$0A6E	$01F1			CLRF	STACK_1
$0A6F	$11A0			BCF	__math_tempbD, 3
$0A70	$1620			BSF	__math_tempbD, 4
$0A71	$0872			MOVF	STACK_2, W
$0A72	$1903			BTFSC	STATUS, Z
$0A73	$2A82			GOTO	JPNRES032
$0A74	$	NORM3232:
$0A74	$0820			MOVF	__math_tempbD, W
$0A75	$02F3			SUBWF	STACK_3, F
$0A76	$1D03			BTFSS	STATUS, Z
$0A77	$1C03			BTFSS	STATUS, C
$0A78	$2A86			GOTO	JPNSETFUN32
$0A79	$1003			BCF	STATUS, C
$0A7A	$	NORM3232A:
$0A7A	$1BF2			BTFSC	STACK_2, 7
$0A7B	$2A8A			GOTO	JMPNFIXSIGN32
$0A7C	$0DF0			RLF	STACK_0, F
$0A7D	$0DF1			RLF	STACK_1, F
$0A7E	$0DF2			RLF	STACK_2, F
$0A7F	$0BF3			DECFSZ	STACK_3, F
$0A80	$2A7A			GOTO	NORM3232A
$0A81	$2A86			GOTO	JPNSETFUN32
$0A82	$	JPNRES032:
$0A82	$3001			MOVLW	0x01
$0A83	$00FC			MOVWF	STACK_12
$0A84	$23A9			CALL	_RES032
$0A85	$2A8D			GOTO	NORM32EEE
$0A86	$	JPNSETFUN32:
$0A86	$3002			MOVLW	0x02
$0A87	$00FC			MOVWF	STACK_12
$0A88	$2393			CALL	_SETFUN32
$0A89	$2A8D			GOTO	NORM32EEE
$0A8A	$	JMPNFIXSIGN32:
$0A8A	$3004			MOVLW	0x04
$0A8B	$00FC			MOVWF	STACK_12
$0A8C	$23C2			CALL	_FIXSIGN32
$0A8D	$	NORM32EEE:
$0A8D	$0008			RETURN
$0BE2	$	_SETFDZ32:
$0BE2	$1303			BCF	STATUS, RP1
$0BE3	$1283			BCF	STATUS, RP0
$0BE4	$15FB			BSF	STACK_11, 3
$0BE5	$30FF			MOVLW	0xFF
$0BE6	$0008			RETURN
$05EF	$	_Add_32x32_FP:
$05EF	$1303			BCF	STATUS, RP1
$05F0	$1283			BCF	STATUS, RP0
$05F1	$0872			MOVF	STACK_2, W
$05F2	$0676			XORWF	STACK_6, W
$05F3	$00A0			MOVWF	__math_tempbD
$05F4	$01F8			CLRF	STACK_8
$05F5	$01F9			CLRF	STACK_9
$05F6	$0873			MOVF	STACK_3, W
$05F7	$0277			SUBWF	STACK_7, W
$05F8	$1C03			BTFSS	STATUS, C
$05F9	$2E12			GOTO	USEA32
$05FA	$0877			MOVF	STACK_7, W
$05FB	$00FD			MOVWF	STACK_13
$05FC	$0873			MOVF	STACK_3, W
$05FD	$00F7			MOVWF	STACK_7
$05FE	$087D			MOVF	STACK_13, W
$05FF	$00F3			MOVWF	STACK_3
$0600	$0876			MOVF	STACK_6, W
$0601	$00FD			MOVWF	STACK_13
$0602	$0872			MOVF	STACK_2, W
$0603	$00F6			MOVWF	STACK_6
$0604	$087D			MOVF	STACK_13, W
$0605	$00F2			MOVWF	STACK_2
$0606	$0875			MOVF	STACK_5, W
$0607	$00FD			MOVWF	STACK_13
$0608	$0871			MOVF	STACK_1, W
$0609	$00F5			MOVWF	STACK_5
$060A	$087D			MOVF	STACK_13, W
$060B	$00F1			MOVWF	STACK_1
$060C	$0874			MOVF	STACK_4, W
$060D	$00FD			MOVWF	STACK_13
$060E	$0870			MOVF	STACK_0, W
$060F	$00F4			MOVWF	STACK_4
$0610	$087D			MOVF	STACK_13, W
$0611	$00F0			MOVWF	STACK_0
$0612	$	USEA32:
$0612	$0877			MOVF	STACK_7, W
$0613	$1903			BTFSC	STATUS, Z
$0614	$2E93			GOTO	JMPEEE
$0615	$0872			MOVF	STACK_2, W
$0616	$00FA			MOVWF	STACK_10
$0617	$17F2			BSF	STACK_2, 7
$0618	$17F6			BSF	STACK_6, 7
$0619	$0877			MOVF	STACK_7, W
$061A	$0273			SUBWF	STACK_3, W
$061B	$00F7			MOVWF	STACK_7
$061C	$1903			BTFSC	STATUS, Z
$061D	$2E45			GOTO	ALIGNED32
$061E	$3008			MOVLW	8
$061F	$0277			SUBWF	STACK_7, W
$0620	$1C03			BTFSS	STATUS, C
$0621	$2E3B			GOTO	ALIGNB32
$0622	$00F7			MOVWF	STACK_7
$0623	$0874			MOVF	STACK_4, W
$0624	$00F9			MOVWF	STACK_9
$0625	$0875			MOVF	STACK_5, W
$0626	$00F4			MOVWF	STACK_4
$0627	$0876			MOVF	STACK_6, W
$0628	$00F5			MOVWF	STACK_5
$0629	$01F6			CLRF	STACK_6
$062A	$3008			MOVLW	8
$062B	$0277			SUBWF	STACK_7, W
$062C	$1C03			BTFSS	STATUS, C
$062D	$2E3B			GOTO	ALIGNB32
$062E	$00F7			MOVWF	STACK_7
$062F	$0874			MOVF	STACK_4, W
$0630	$00F9			MOVWF	STACK_9
$0631	$0875			MOVF	STACK_5, W
$0632	$00F4			MOVWF	STACK_4
$0633	$01F5			CLRF	STACK_5
$0634	$3008			MOVLW	8
$0635	$0277			SUBWF	STACK_7, W
$0636	$1C03			BTFSS	STATUS, C
$0637	$2E3B			GOTO	ALIGNB32
$0638	$087A			MOVF	STACK_10, W
$0639	$00F2			MOVWF	STACK_2
$063A	$2E93			GOTO	JMPEEE
$063B	$	ALIGNB32:
$063B	$0877			MOVF	STACK_7, W
$063C	$1903			BTFSC	STATUS, Z
$063D	$2E45			GOTO	ALIGNED32
$063E	$	ALOOPB32:
$063E	$1003			BCF	STATUS, C
$063F	$0CF6			RRF	STACK_6, F
$0640	$0CF5			RRF	STACK_5, F
$0641	$0CF4			RRF	STACK_4, F
$0642	$0CF9			RRF	STACK_9, F
$0643	$0BF7			DECFSZ	STACK_7, F
$0644	$2E3E			GOTO	ALOOPB32
$0645	$	ALIGNED32:
$0645	$1FA0			BTFSS	__math_tempbD, 7
$0646	$2E52			GOTO	AOK32
$0647	$09F9			COMF	STACK_9, F
$0648	$09F4			COMF	STACK_4, F
$0649	$09F5			COMF	STACK_5, F
$064A	$09F6			COMF	STACK_6, F
$064B	$0AF9			INCF	STACK_9, F
$064C	$1903			BTFSC	STATUS, Z
$064D	$0AF4			INCF	STACK_4, F
$064E	$1903			BTFSC	STATUS, Z
$064F	$0AF5			INCF	STACK_5, F
$0650	$1903			BTFSC	STATUS, Z
$0651	$0AF6			INCF	STACK_6, F
$0652	$	AOK32:
$0652	$0879			MOVF	STACK_9, W
$0653	$07F8			ADDWF	STACK_8, F
$0654	$0874			MOVF	STACK_4, W
$0655	$1803			BTFSC	STATUS, C
$0656	$0F74			INCFSZ	STACK_4, W
$0657	$07F0			ADDWF	STACK_0, F
$0658	$0875			MOVF	STACK_5, W
$0659	$1803			BTFSC	STATUS, C
$065A	$0F75			INCFSZ	STACK_5, W
$065B	$07F1			ADDWF	STACK_1, F
$065C	$0876			MOVF	STACK_6, W
$065D	$1803			BTFSC	STATUS, C
$065E	$0F76			INCFSZ	STACK_6, W
$065F	$07F2			ADDWF	STACK_2, F
$0660	$1BA0			BTFSC	__math_tempbD, 7
$0661	$2E6B			GOTO	ACOMP32
$0662	$1C03			BTFSS	STATUS, C
$0663	$2E7B			GOTO	JMPNRMRND4032
$0664	$0CF2			RRF	STACK_2, F
$0665	$0CF1			RRF	STACK_1, F
$0666	$0CF0			RRF	STACK_0, F
$0667	$0CF8			RRF	STACK_8, F
$0668	$0FF3			INCFSZ	STACK_3, F
$0669	$2E7B			GOTO	JMPNRMRND4032
$066A	$2E8D			GOTO	ADD_JMPSETFOV32
$066B	$	ACOMP32:
$066B	$1803			BTFSC	STATUS, C
$066C	$2E81			GOTO	JMPNRM4032
$066D	$09F8			COMF	STACK_8, F
$066E	$09F0			COMF	STACK_0, F
$066F	$09F1			COMF	STACK_1, F
$0670	$09F2			COMF	STACK_2, F
$0671	$0AF8			INCF	STACK_8, F
$0672	$1903			BTFSC	STATUS, Z
$0673	$0AF0			INCF	STACK_0, F
$0674	$1903			BTFSC	STATUS, Z
$0675	$0AF1			INCF	STACK_1, F
$0676	$1903			BTFSC	STATUS, Z
$0677	$0AF2			INCF	STACK_2, F
$0678	$3080			MOVLW	0x80
$0679	$06FA			XORWF	STACK_10, F
$067A	$2E87			GOTO	JMPNRM32
$067B	$	JMPNRMRND4032:
$067B	$3001			MOVLW	0x01
$067C	$00FC			MOVWF	STACK_12
$067D	$158A			BSF	PCLATH, 3
$067E	$209C			CALL	_NRM4032
$067F	$118A			BCF	PCLATH, 3
$0680	$2E95			GOTO	ADD32EEE
$0681	$	JMPNRM4032:
$0681	$3002			MOVLW	0x02
$0682	$00FC			MOVWF	STACK_12
$0683	$158A			BSF	PCLATH, 3
$0684	$209C			CALL	_NRM4032
$0685	$118A			BCF	PCLATH, 3
$0686	$2E95			GOTO	ADD32EEE
$0687	$	JMPNRM32:
$0687	$3004			MOVLW	0x04
$0688	$00FC			MOVWF	STACK_12
$0689	$158A			BSF	PCLATH, 3
$068A	$225D			CALL	_NRM3232
$068B	$118A			BCF	PCLATH, 3
$068C	$2E95			GOTO	ADD32EEE
$068D	$	ADD_JMPSETFOV32:
$068D	$3008			MOVLW	0x08
$068E	$00FC			MOVWF	STACK_12
$068F	$158A			BSF	PCLATH, 3
$0690	$2385			CALL	_SETFOV32
$0691	$118A			BCF	PCLATH, 3
$0692	$2E95			GOTO	ADD32EEE
$0693	$	JMPEEE:
$0693	$3000			MOVLW	0x00
$0694	$00FC			MOVWF	STACK_12
$0695	$	ADD32EEE:
$0695	$0000			NOP
$0696	$0008			RETURN
$0BB2	$	_PWM1_Start:
$0BB2	$1303			BCF	STATUS, RP1
$0BB3	$1683			BSF	STATUS, RP0
$0BB4	$1107			BCF	TRISC, 2
$0BB5	$1283			BCF	STATUS, RP0
$0BB6	$1512			BSF	T2CON, 2
$0BB7	$300C			MOVLW	12
$0BB8	$0497			IORWF	CCP1CON, 1
$0BB9	$0008			RETURN
$0BBA	$	_PWM2_Start:
$0BBA	$1303			BCF	STATUS, RP1
$0BBB	$1683			BSF	STATUS, RP0
$0BBC	$1087			BCF	TRISC, 1
$0BBD	$1283			BCF	STATUS, RP0
$0BBE	$1512			BSF	T2CON, 2
$0BBF	$300C			MOVLW	12
$0BC0	$049D			IORWF	CCP2CON, 1
$0BC1	$0008			RETURN
$0BC8	$	_PWM1_Init:
$0BC8	$1303			BCF	STATUS, RP1
$0BC9	$1283			BCF	STATUS, RP0
$0BCA	$0195			CLRF	CCPR1L, 1
$0BCB	$1217			BCF	CCP1CON, 4
$0BCC	$1297			BCF	CCP1CON, 5
$0BCD	$0008			RETURN
$0715	$	_PWM2_Init:
$0715	$1303			BCF	STATUS, RP1
$0716	$1283			BCF	STATUS, RP0
$0717	$019B			CLRF	CCPR2L, 1
$0718	$121D			BCF	CCP2CON, 4
$0719	$129D			BCF	CCP2CON, 5
$071A	$0008			RETURN
$0AFE	$	_Mul_16x16_U:
$0AFE	$1303			BCF	STATUS, RP1
$0AFF	$1283			BCF	STATUS, RP0
$0B00	$01FB			CLRF	STACK_11
$0B01	$01FA			CLRF	STACK_10
$0B02	$01F9			CLRF	STACK_9
$0B03	$3080			MOVLW	128
$0B04	$00F8			MOVWF	STACK_8
$0B05	$0CF1			RRF	STACK_1, F
$0B06	$0CF0			RRF	STACK_0, F
$0B07	$1C03			BTFSS	STATUS, C
$0B08	$2B12			GOTO	$+10
$0B09	$0874			MOVF	STACK_4, W
$0B0A	$07F9			ADDWF	STACK_9, F
$0B0B	$0875			MOVF	STACK_5, W
$0B0C	$1803			BTFSC	STATUS, C
$0B0D	$0F75			INCFSZ	STACK_5, W
$0B0E	$07FA			ADDWF	STACK_10, F
$0B0F	$1803			BTFSC	STATUS, C
$0B10	$0AFB			INCF	STACK_11, F
$0B11	$1003			BCF	STATUS, C
$0B12	$1FF0			BTFSS	STACK_0, 7
$0B13	$2B1A			GOTO	$+7
$0B14	$0874			MOVF	STACK_4, W
$0B15	$07FA			ADDWF	STACK_10, F
$0B16	$0875			MOVF	STACK_5, W
$0B17	$1803			BTFSC	STATUS, C
$0B18	$0F75			INCFSZ	STACK_5, W
$0B19	$07FB			ADDWF	STACK_11, F
$0B1A	$0CFB			RRF	STACK_11, F
$0B1B	$0CFA			RRF	STACK_10, F
$0B1C	$0CF9			RRF	STACK_9, F
$0B1D	$0CF8			RRF	STACK_8, F
$0B1E	$1C03			BTFSS	STATUS, C
$0B1F	$2B05			GOTO	$-26
$0B20	$087B			MOVF	STACK_11, W
$0B21	$00F3			MOVWF	STACK_3
$0B22	$087A			MOVF	STACK_10, W
$0B23	$00F2			MOVWF	STACK_2
$0B24	$0879			MOVF	STACK_9, W
$0B25	$00F1			MOVWF	STACK_1
$0B26	$0878			MOVF	STACK_8, W
$0B27	$00F0			MOVWF	STACK_0
$0B28	$0008			RETURN
$0B29	$	_Word2Double:
$0B29	$1303			BCF	STATUS, RP1
$0B2A	$1283			BCF	STATUS, RP0
$0B2B	$0870			MOVF	STACK_0, W
$0B2C	$00F8			MOVWF	STACK_8
$0B2D	$0871			MOVF	STACK_1, W
$0B2E	$00F0			MOVWF	STACK_0
$0B2F	$01F1			CLRF	STACK_1
$0B30	$01F2			CLRF	STACK_2
$0B31	$01F3			CLRF	STACK_3
$0B32	$	FLO16U32:
$0B32	$01FB			CLRF	STACK_11
$0B33	$01FC			CLRF	STACK_12
$0B34	$3096			MOVLW	150
$0B35	$00F3			MOVWF	STACK_3
$0B36	$01FA			CLRF	STACK_10
$0B37	$0870			MOVF	STACK_0, W
$0B38	$00F1			MOVWF	STACK_1
$0B39	$0878			MOVF	STACK_8, W
$0B3A	$00F0			MOVWF	STACK_0
$0B3B	$01F8			CLRF	STACK_8
$0B3C	$01F2			CLRF	STACK_2
$0B3D	$225D			CALL	_NRM3232
$0B3E	$0008			RETURN
$0800	$	_Div_32x32_FP:
$0800	$1303			BCF	STATUS, RP1
$0801	$1283			BCF	STATUS, RP0
$0802	$	FPD32:
$0802	$0877			MOVF	STACK_7, W
$0803	$1903			BTFSC	STATUS, Z
$0804	$288F			GOTO	JPDSETFDZ32
$0805	$0873			MOVF	STACK_3, W
$0806	$1903			BTFSC	STATUS, Z
$0807	$2892			GOTO	JPDRES032
$0808	$	D32BNE0:
$0808	$0872			MOVF	STACK_2, W
$0809	$0676			XORWF	STACK_6, W
$080A	$3980			ANDLW	128
$080B	$00FA			MOVWF	STACK_10
$080C	$17F2			BSF	STACK_2, 7
$080D	$17F6			BSF	STACK_6, 7
$080E	$	TALIGN32:
$080E	$01A0			CLRF	__math_tempbD
$080F	$0872			MOVF	STACK_2, W
$0810	$00F8			MOVWF	STACK_8
$0811	$0871			MOVF	STACK_1, W
$0812	$00FC			MOVWF	STACK_12
$0813	$0870			MOVF	STACK_0, W
$0814	$00FD			MOVWF	STACK_13
$0815	$0874			MOVF	STACK_4, W
$0816	$02FD			SUBWF	STACK_13, F
$0817	$0875			MOVF	STACK_5, W
$0818	$1C03			BTFSS	STATUS, C
$0819	$0F75			INCFSZ	STACK_5, W
$081A	$	TS1ALIGN32:
$081A	$02FC			SUBWF	STACK_12, F
$081B	$0876			MOVF	STACK_6, W
$081C	$1C03			BTFSS	STATUS, C
$081D	$0F76			INCFSZ	STACK_6, W
$081E	$	TS2ALIGN32:
$081E	$02F8			SUBWF	STACK_8, F
$081F	$01F8			CLRF	STACK_8
$0820	$01FC			CLRF	STACK_12
$0821	$01FD			CLRF	STACK_13
$0822	$1C03			BTFSS	STATUS, C
$0823	$282B			GOTO	DALIGN32OK
$0824	$1003			BCF	STATUS, C
$0825	$0CF2			RRF	STACK_2, F
$0826	$0CF1			RRF	STACK_1, F
$0827	$0CF0			RRF	STACK_0, F
$0828	$0CF8			RRF	STACK_8, F
$0829	$3001			MOVLW	0x01
$082A	$00A0			MOVWF	__math_tempbD
$082B	$	DALIGN32OK:
$082B	$0877			MOVF	STACK_7, W
$082C	$02F3			SUBWF	STACK_3, F
$082D	$1C03			BTFSS	STATUS, C
$082E	$2835			GOTO	ALTB32
$082F	$	AGEB32:
$082F	$307E			MOVLW	126
$0830	$0720			ADDWF	__math_tempbD, W
$0831	$07F3			ADDWF	STACK_3, F
$0832	$1803			BTFSC	STATUS, C
$0833	$2895			GOTO	JPDSETFOV32
$0834	$283A			GOTO	DARGOK32
$0835	$	ALTB32:
$0835	$307E			MOVLW	126
$0836	$0720			ADDWF	__math_tempbD, W
$0837	$07F3			ADDWF	STACK_3, F
$0838	$1C03			BTFSS	STATUS, C
$0839	$2898			GOTO	JPDSETFUN32
$083A	$	DARGOK32:
$083A	$3018			MOVLW	24
$083B	$07FA			ADDWF	STACK_10, F
$083C	$	DLOOP32:
$083C	$0DFD			RLF	STACK_13, F
$083D	$0DFC			RLF	STACK_12, F
$083E	$0DF8			RLF	STACK_8, F
$083F	$0DF0			RLF	STACK_0, F
$0840	$0DF1			RLF	STACK_1, F
$0841	$0DF2			RLF	STACK_2, F
$0842	$0DA0			RLF	__math_tempbD, F
$0843	$0874			MOVF	STACK_4, W
$0844	$02F0			SUBWF	STACK_0, F
$0845	$0875			MOVF	STACK_5, W
$0846	$1C03			BTFSS	STATUS, C
$0847	$0F75			INCFSZ	STACK_5, W
$0848	$	DS132:
$0848	$02F1			SUBWF	STACK_1, F
$0849	$0876			MOVF	STACK_6, W
$084A	$1C03			BTFSS	STATUS, C
$084B	$0F76			INCFSZ	STACK_6, W
$084C	$	DS232:
$084C	$02F2			SUBWF	STACK_2, F
$084D	$0D76			RLF	STACK_6, W
$084E	$04A0			IORWF	__math_tempbD, F
$084F	$1C20			BTFSS	__math_tempbD, 0
$0850	$2853			GOTO	DREST32
$0851	$147D			BSF	STACK_13, 0
$0852	$285E			GOTO	DOK32
$0853	$	DREST32:
$0853	$0874			MOVF	STACK_4, W
$0854	$07F0			ADDWF	STACK_0, F
$0855	$0875			MOVF	STACK_5, W
$0856	$1803			BTFSC	STATUS, C
$0857	$0F75			INCFSZ	STACK_5, W
$0858	$	DAREST32:
$0858	$07F1			ADDWF	STACK_1, F
$0859	$0876			MOVF	STACK_6, W
$085A	$1803			BTFSC	STATUS, C
$085B	$0A76			INCF	STACK_6, W
$085C	$07F2			ADDWF	STACK_2, F
$085D	$107D			BCF	STACK_13, 0
$085E	$	DOK32:
$085E	$03FA			DECF	STACK_10, F
$085F	$301F			MOVLW	31
$0860	$057A			ANDWF	STACK_10, W
$0861	$1D03			BTFSS	STATUS, Z
$0862	$283C			GOTO	DLOOP32
$0863	$	DROUND32:
$0863	$1B7B			BTFSC	STACK_11, 6
$0864	$1C7D			BTFSS	STACK_13, 0
$0865	$2885			GOTO	DIV32OK
$0866	$1003			BCF	STATUS, C
$0867	$0DF0			RLF	STACK_0, F
$0868	$0DF1			RLF	STACK_1, F
$0869	$0DF2			RLF	STACK_2, F
$086A	$0DA0			RLF	__math_tempbD, F
$086B	$0874			MOVF	STACK_4, W
$086C	$02F0			SUBWF	STACK_0, F
$086D	$0875			MOVF	STACK_5, W
$086E	$1C03			BTFSS	STATUS, C
$086F	$0F75			INCFSZ	STACK_5, W
$0870	$02F1			SUBWF	STACK_1, F
$0871	$0876			MOVF	STACK_6, W
$0872	$1C03			BTFSS	STATUS, C
$0873	$0F76			INCFSZ	STACK_6, W
$0874	$02F2			SUBWF	STACK_2, F
$0875	$0D76			RLF	STACK_6, W
$0876	$0420			IORWF	__math_tempbD, W
$0877	$3901			ANDLW	0x01
$0878	$07FD			ADDWF	STACK_13, F
$0879	$1803			BTFSC	STATUS, C
$087A	$0AFC			INCF	STACK_12, F
$087B	$1903			BTFSC	STATUS, Z
$087C	$0AF8			INCF	STACK_8, F
$087D	$1D03			BTFSS	STATUS, Z
$087E	$2885			GOTO	DIV32OK
$087F	$0CF8			RRF	STACK_8, F
$0880	$0CFC			RRF	STACK_12, F
$0881	$0CFD			RRF	STACK_13, F
$0882	$0AF3			INCF	STACK_3, F
$0883	$1903			BTFSC	STATUS, Z
$0884	$2895			GOTO	JPDSETFOV32
$0885	$	DIV32OK:
$0885	$1FFA			BTFSS	STACK_10, 7
$0886	$13F8			BCF	STACK_8, 7
$0887	$0878			MOVF	STACK_8, W
$0888	$00F2			MOVWF	STACK_2
$0889	$087C			MOVF	STACK_12, W
$088A	$00F1			MOVWF	STACK_1
$088B	$087D			MOVF	STACK_13, W
$088C	$00F0			MOVWF	STACK_0
$088D	$3000			MOVLW	0x00
$088E	$289A			GOTO	DIV32EEE
$088F	$	JPDSETFDZ32:
$088F	$3001			MOVLW	0x01
$0890	$23E2			CALL	_SETFDZ32
$0891	$289A			GOTO	DIV32EEE
$0892	$	JPDRES032:
$0892	$3002			MOVLW	0x02
$0893	$23A9			CALL	_RES032
$0894	$289A			GOTO	DIV32EEE
$0895	$	JPDSETFOV32:
$0895	$3004			MOVLW	0x04
$0896	$2385			CALL	_SETFOV32
$0897	$289A			GOTO	DIV32EEE
$0898	$	JPDSETFUN32:
$0898	$3008			MOVLW	0x08
$0899	$2393			CALL	_SETFUN32
$089A	$	DIV32EEE:
$089A	$0000			NOP
$089B	$0008			RETURN
$0BA1	$	_Sub_32x32_FP:
$0BA1	$1303			BCF	STATUS, RP1
$0BA2	$1283			BCF	STATUS, RP0
$0BA3	$3080			MOVLW	0x80
$0BA4	$06F6			XORWF	STACK_6, F
$0BA5	$118A			BCF	PCLATH, 3
$0BA6	$25EF			CALL	_Add_32x32_FP
$0BA7	$158A			BSF	PCLATH, 3
$0BA8	$0008			RETURN
$0997	$	_Mul_16x16_S:
$0997	$1303			BCF	STATUS, RP1
$0998	$1283			BCF	STATUS, RP0
$0999	$01FB			CLRF	STACK_11
$099A	$01FA			CLRF	STACK_10
$099B	$01F9			CLRF	STACK_9
$099C	$3080			MOVLW	128
$099D	$00F8			MOVWF	STACK_8
$099E	$01FD			CLRF	STACK_13
$099F	$1FF1			BTFSS	STACK_1, 7
$09A0	$29A7			GOTO	$+7
$09A1	$09F1			COMF	STACK_1, F
$09A2	$09F0			COMF	STACK_0, F
$09A3	$0AF0			INCF	STACK_0, F
$09A4	$1903			BTFSC	STATUS, Z
$09A5	$0AF1			INCF	STACK_1, F
$09A6	$0AFD			INCF	STACK_13, F
$09A7	$1FF5			BTFSS	STACK_5, 7
$09A8	$29AF			GOTO	$+7
$09A9	$09F5			COMF	STACK_5, F
$09AA	$09F4			COMF	STACK_4, F
$09AB	$0AF4			INCF	STACK_4, F
$09AC	$1903			BTFSC	STATUS, Z
$09AD	$0AF5			INCF	STACK_5, F
$09AE	$0AFD			INCF	STACK_13, F
$09AF	$0CF1			RRF	STACK_1, F
$09B0	$0CF0			RRF	STACK_0, F
$09B1	$1C03			BTFSS	STATUS, C
$09B2	$29BC			GOTO	$+10
$09B3	$0874			MOVF	STACK_4, W
$09B4	$07F9			ADDWF	STACK_9, F
$09B5	$0875			MOVF	STACK_5, W
$09B6	$1803			BTFSC	STATUS, C
$09B7	$0F75			INCFSZ	STACK_5, W
$09B8	$07FA			ADDWF	STACK_10, F
$09B9	$1803			BTFSC	STATUS, C
$09BA	$0AFB			INCF	STACK_11, F
$09BB	$1003			BCF	STATUS, C
$09BC	$1FF0			BTFSS	STACK_0, 7
$09BD	$29C4			GOTO	$+7
$09BE	$0874			MOVF	STACK_4, W
$09BF	$07FA			ADDWF	STACK_10, F
$09C0	$1803			BTFSC	STATUS, C
$09C1	$0AFB			INCF	STACK_11, F
$09C2	$0875			MOVF	STACK_5, W
$09C3	$07FB			ADDWF	STACK_11, F
$09C4	$0CFB			RRF	STACK_11, F
$09C5	$0CFA			RRF	STACK_10, F
$09C6	$0CF9			RRF	STACK_9, F
$09C7	$0CF8			RRF	STACK_8, F
$09C8	$1C03			BTFSS	STATUS, C
$09C9	$29AF			GOTO	$-26
$09CA	$1C7D			BTFSS	STACK_13, 0
$09CB	$29D7			GOTO	$+12
$09CC	$09FB			COMF	STACK_11, F
$09CD	$09FA			COMF	STACK_10, F
$09CE	$09F9			COMF	STACK_9, F
$09CF	$09F8			COMF	STACK_8, F
$09D0	$0AF8			INCF	STACK_8, F
$09D1	$1903			BTFSC	STATUS, Z
$09D2	$0AF9			INCF	STACK_9, F
$09D3	$1903			BTFSC	STATUS, Z
$09D4	$0AFA			INCF	STACK_10, F
$09D5	$1903			BTFSC	STATUS, Z
$09D6	$0AFB			INCF	STACK_11, F
$09D7	$087B			MOVF	STACK_11, W
$09D8	$00F3			MOVWF	STACK_3
$09D9	$087A			MOVF	STACK_10, W
$09DA	$00F2			MOVWF	STACK_2
$09DB	$0879			MOVF	STACK_9, W
$09DC	$00F1			MOVWF	STACK_1
$09DD	$0878			MOVF	STACK_8, W
$09DE	$00F0			MOVWF	STACK_0
$09DF	$0000			NOP
$09E0	$0008			RETURN
$0B76	$	_SETIOV3224:
$0B76	$1303			BCF	STATUS, RP1
$0B77	$1283			BCF	STATUS, RP0
$0B78	$147B			BSF	STACK_11, 0
$0B79	$1FFB			BTFSS	STACK_11, 7
$0B7A	$2B83			GOTO	SETIOV3224EEE
$0B7B	$01F2			CLRF	STACK_2
$0B7C	$1FFA			BTFSS	STACK_10, 7
$0B7D	$30FF			MOVLW	0xFF
$0B7E	$00F2			MOVWF	STACK_2
$0B7F	$00F1			MOVWF	STACK_1
$0B80	$00F0			MOVWF	STACK_0
$0B81	$0DFA			RLF	STACK_10, F
$0B82	$0CF2			RRF	STACK_2, F
$0B83	$	SETIOV3224EEE:
$0B83	$30FF			MOVLW	0xFF
$0B84	$0008			RETURN
$0B65	$	_initport:
;lfr_runner_5sen_tsop.c,6 :: 		void initport()
;lfr_runner_5sen_tsop.c,8 :: 		ADCON1 =0x06;          //TURN OFF ADC AND CONFIGURE A AND E AS DIG I/O
$0B65	$3006			MOVLW	6
$0B66	$1303			BCF	STATUS, RP1
$0B67	$1683			BSF	STATUS, RP0
$0B68	$009F			MOVWF	ADCON1
;lfr_runner_5sen_tsop.c,9 :: 		PORTA = 0;             //CLEAR PORTA
$0B69	$1283			BCF	STATUS, RP0
$0B6A	$0185			CLRF	PORTA, 1
;lfr_runner_5sen_tsop.c,10 :: 		PORTE = 0;             //CLEAR PORTE
$0B6B	$0189			CLRF	PORTE, 1
;lfr_runner_5sen_tsop.c,11 :: 		TRISA = 0x3F;          //INITIALIZE PORTA AS INPUT
$0B6C	$303F			MOVLW	63
$0B6D	$1683			BSF	STATUS, RP0
$0B6E	$0085			MOVWF	TRISA
;lfr_runner_5sen_tsop.c,12 :: 		TRISE = 0x03;          //INITIALIZE PORTE AS INPUT
$0B6F	$3003			MOVLW	3
$0B70	$0089			MOVWF	TRISE
;lfr_runner_5sen_tsop.c,13 :: 		TRISD = 0x00;          //INITIALIZE PORTD AS OUTPUT
$0B71	$0188			CLRF	TRISD, 1
;lfr_runner_5sen_tsop.c,14 :: 		TRISC = 0b00000000;    //INITIALIZE PORTC AS OUTPUT
$0B72	$0187			CLRF	TRISC, 1
;lfr_runner_5sen_tsop.c,15 :: 		TRISB = 0b11000000;    //INITIALIZE PORTB AS INPUT  FOR TSOP
$0B73	$30C0			MOVLW	192
$0B74	$0086			MOVWF	TRISB
;lfr_runner_5sen_tsop.c,16 :: 		}
$0B75	$0008			RETURN
$06FE	$	_initpwm:
;lfr_runner_5sen_tsop.c,18 :: 		void initpwm()
;lfr_runner_5sen_tsop.c,20 :: 		PWM1_Init(5000);
$06FE	$1303			BCF	STATUS, RP1
$06FF	$1283			BCF	STATUS, RP0
$0700	$1012			BCF	T2CON, T2CKPS0
$0701	$1092			BCF	T2CON, T2CKPS1
$0702	$30C7			MOVLW	199
$0703	$1683			BSF	STATUS, RP0
$0704	$0092			MOVWF	PR2
$0705	$158A			BSF	PCLATH, 3
$0706	$23C8			CALL	_PWM1_Init
$0707	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop.c,21 :: 		PWM2_Init(5000);
$0708	$1012			BCF	T2CON, T2CKPS0
$0709	$1092			BCF	T2CON, T2CKPS1
$070A	$30C7			MOVLW	199
$070B	$1683			BSF	STATUS, RP0
$070C	$0092			MOVWF	PR2
$070D	$2715			CALL	_PWM2_Init
;lfr_runner_5sen_tsop.c,22 :: 		Pwm1_Start();          //RIGHT MOTOR
$070E	$158A			BSF	PCLATH, 3
$070F	$23B2			CALL	_PWM1_Start
$0710	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop.c,23 :: 		Pwm2_Start();          //LEFT MOTOR
$0711	$158A			BSF	PCLATH, 3
$0712	$23BA			CALL	_PWM2_Start
$0713	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop.c,24 :: 		}
$0714	$0008			RETURN
$0AC7	$	_indicator:
;lfr_runner_5sen_tsop.c,49 :: 		void indicator()         //COPY THE SENSOR OUTPUT TO PORTD-INDICATOR
;lfr_runner_5sen_tsop.c,52 :: 		PORTD.F7 = 0;
$0AC7	$1303			BCF	STATUS, RP1
$0AC8	$1283			BCF	STATUS, RP0
$0AC9	$1388			BCF	PORTD, 7
;lfr_runner_5sen_tsop.c,53 :: 		PORTD.F6 = 0;
$0ACA	$1308			BCF	PORTD, 6
;lfr_runner_5sen_tsop.c,54 :: 		PORTD.F5 = PORTA.F2;
$0ACB	$3000			MOVLW	0
$0ACC	$1905			BTFSC	PORTA, 2
$0ACD	$3001			MOVLW	1
$0ACE	$00F1			MOVWF	STACK_1
$0ACF	$3000			MOVLW	0
$0AD0	$1871			BTFSC	STACK_1, 0
$0AD1	$3020			MOVLW	32
$0AD2	$0608			XORWF	PORTD, 0
$0AD3	$3920			ANDLW	32
$0AD4	$0688			XORWF	PORTD, 1
;lfr_runner_5sen_tsop.c,55 :: 		PORTD.F4 = PORTA.F3;
$0AD5	$3000			MOVLW	0
$0AD6	$1985			BTFSC	PORTA, 3
$0AD7	$3001			MOVLW	1
$0AD8	$00F1			MOVWF	STACK_1
$0AD9	$3000			MOVLW	0
$0ADA	$1871			BTFSC	STACK_1, 0
$0ADB	$3010			MOVLW	16
$0ADC	$0608			XORWF	PORTD, 0
$0ADD	$3910			ANDLW	16
$0ADE	$0688			XORWF	PORTD, 1
;lfr_runner_5sen_tsop.c,56 :: 		PORTD.F3 = PORTA.F4;
$0ADF	$3000			MOVLW	0
$0AE0	$1A05			BTFSC	PORTA, 4
$0AE1	$3001			MOVLW	1
$0AE2	$00F1			MOVWF	STACK_1
$0AE3	$3000			MOVLW	0
$0AE4	$1871			BTFSC	STACK_1, 0
$0AE5	$3008			MOVLW	8
$0AE6	$0608			XORWF	PORTD, 0
$0AE7	$3908			ANDLW	8
$0AE8	$0688			XORWF	PORTD, 1
;lfr_runner_5sen_tsop.c,57 :: 		PORTD.F2 = PORTA.F5;
$0AE9	$3000			MOVLW	0
$0AEA	$1A85			BTFSC	PORTA, 5
$0AEB	$3001			MOVLW	1
$0AEC	$00F1			MOVWF	STACK_1
$0AED	$3000			MOVLW	0
$0AEE	$1871			BTFSC	STACK_1, 0
$0AEF	$3004			MOVLW	4
$0AF0	$0608			XORWF	PORTD, 0
$0AF1	$3904			ANDLW	4
$0AF2	$0688			XORWF	PORTD, 1
;lfr_runner_5sen_tsop.c,58 :: 		PORTD.F1 = PORTE.F0;
$0AF3	$3001			MOVLW	1
$0AF4	$0509			ANDWF	PORTE, 0
$0AF5	$00F0			MOVWF	STACK_0
$0AF6	$3000			MOVLW	0
$0AF7	$1870			BTFSC	STACK_0, 0
$0AF8	$3002			MOVLW	2
$0AF9	$0608			XORWF	PORTD, 0
$0AFA	$3902			ANDLW	2
$0AFB	$0688			XORWF	PORTD, 1
;lfr_runner_5sen_tsop.c,59 :: 		PORTD.F0 = 0;
$0AFC	$1008			BCF	PORTD, 0
;lfr_runner_5sen_tsop.c,60 :: 		}
$0AFD	$0008			RETURN
$050E	$	_CalcError:
;lfr_runner_5sen_tsop.c,61 :: 		void CalcError()				 //calculates the current error
;lfr_runner_5sen_tsop.c,63 :: 		s1 = 0;
$050E	$1303			BCF	STATUS, RP1
$050F	$1283			BCF	STATUS, RP0
$0510	$01A1			CLRF	_s1
$0511	$01A2			CLRF	_s1+1
;lfr_runner_5sen_tsop.c,64 :: 		s2 = 0;
$0512	$01A3			CLRF	_s2
$0513	$01A4			CLRF	_s2+1
;lfr_runner_5sen_tsop.c,65 :: 		s3 = 0;
$0514	$01A5			CLRF	_s3
$0515	$01A6			CLRF	_s3+1
;lfr_runner_5sen_tsop.c,66 :: 		s4 = 0;
$0516	$01A7			CLRF	_s4
$0517	$01A8			CLRF	_s4+1
;lfr_runner_5sen_tsop.c,67 :: 		s5 = 0;
$0518	$01A9			CLRF	_s5
$0519	$01AA			CLRF	_s5+1
;lfr_runner_5sen_tsop.c,69 :: 		if(PORTA.F2)
$051A	$1D05			BTFSS	PORTA, 2
$051B	$2D22			GOTO	L_CalcError_0
;lfr_runner_5sen_tsop.c,71 :: 		lastreading='r';
$051C	$3072			MOVLW	114
$051D	$00AB			MOVWF	_lastreading
;lfr_runner_5sen_tsop.c,72 :: 		s1 = 1;
$051E	$3001			MOVLW	1
$051F	$00A1			MOVWF	_s1
$0520	$3000			MOVLW	0
$0521	$00A2			MOVWF	_s1+1
;lfr_runner_5sen_tsop.c,73 :: 		}
$0522	$	L_CalcError_0:
;lfr_runner_5sen_tsop.c,74 :: 		if(PORTA.F3)
$0522	$1D85			BTFSS	PORTA, 3
$0523	$2D28			GOTO	L_CalcError_1
;lfr_runner_5sen_tsop.c,76 :: 		s2 = 1;
$0524	$3001			MOVLW	1
$0525	$00A3			MOVWF	_s2
$0526	$3000			MOVLW	0
$0527	$00A4			MOVWF	_s2+1
;lfr_runner_5sen_tsop.c,77 :: 		}
$0528	$	L_CalcError_1:
;lfr_runner_5sen_tsop.c,78 :: 		if(PORTA.F4)
$0528	$1E05			BTFSS	PORTA, 4
$0529	$2D2E			GOTO	L_CalcError_2
;lfr_runner_5sen_tsop.c,80 :: 		s3 = 1;
$052A	$3001			MOVLW	1
$052B	$00A5			MOVWF	_s3
$052C	$3000			MOVLW	0
$052D	$00A6			MOVWF	_s3+1
;lfr_runner_5sen_tsop.c,81 :: 		}
$052E	$	L_CalcError_2:
;lfr_runner_5sen_tsop.c,82 :: 		if(PORTA.F5)
$052E	$1E85			BTFSS	PORTA, 5
$052F	$2D34			GOTO	L_CalcError_3
;lfr_runner_5sen_tsop.c,85 :: 		s4 = 1;
$0530	$3001			MOVLW	1
$0531	$00A7			MOVWF	_s4
$0532	$3000			MOVLW	0
$0533	$00A8			MOVWF	_s4+1
;lfr_runner_5sen_tsop.c,86 :: 		}
$0534	$	L_CalcError_3:
;lfr_runner_5sen_tsop.c,87 :: 		if(PORTE.F0)
$0534	$1C09			BTFSS	PORTE, 0
$0535	$2D3C			GOTO	L_CalcError_4
;lfr_runner_5sen_tsop.c,89 :: 		lastreading='l';
$0536	$306C			MOVLW	108
$0537	$00AB			MOVWF	_lastreading
;lfr_runner_5sen_tsop.c,90 :: 		s5 = 1;
$0538	$3001			MOVLW	1
$0539	$00A9			MOVWF	_s5
$053A	$3000			MOVLW	0
$053B	$00AA			MOVWF	_s5+1
;lfr_runner_5sen_tsop.c,91 :: 		}
$053C	$	L_CalcError_4:
;lfr_runner_5sen_tsop.c,93 :: 		perror = error;
$053C	$0830			MOVF	_error, 0
$053D	$00AC			MOVWF	_perror
$053E	$0831			MOVF	_error+1, 0
$053F	$00AD			MOVWF	_perror+1
$0540	$0832			MOVF	_error+2, 0
$0541	$00AE			MOVWF	_perror+2
$0542	$0833			MOVF	_error+3, 0
$0543	$00AF			MOVWF	_perror+3
;lfr_runner_5sen_tsop.c,97 :: 		error = (s1 * 1) + (s2 * 2) + (s3 * 3) + (s4 * 4) + (s5 * 5) ;
$0544	$3001			MOVLW	1
$0545	$00F4			MOVWF	STACK_4
$0546	$0823			MOVF	_s2, 0
$0547	$00F0			MOVWF	STACK_0
$0548	$0824			MOVF	_s2+1, 0
$0549	$00F1			MOVWF	STACK_0+1
$054A	$0874			MOVF	STACK_4, 0
$054B	$	L_CalcError_33:
$054B	$1903			BTFSC	STATUS, Z
$054C	$2D52			GOTO	L_CalcError_34
$054D	$0DF0			RLF	STACK_0, 1
$054E	$0DF1			RLF	STACK_0+1, 1
$054F	$1070			BCF	STACK_0, 0
$0550	$3FFF			ADDLW	255
$0551	$2D4B			GOTO	L_CalcError_33
$0552	$	L_CalcError_34:
$0552	$0870			MOVF	STACK_0, 0
$0553	$0721			ADDWF	_s1, 0
$0554	$00DE			MOVWF	FLOC_CalcError+0
$0555	$0822			MOVF	_s1+1, 0
$0556	$1803			BTFSC	STATUS, C
$0557	$3F01			ADDLW	1
$0558	$0771			ADDWF	STACK_0+1, 0
$0559	$00DF			MOVWF	FLOC_CalcError+1
$055A	$0825			MOVF	_s3, 0
$055B	$00F0			MOVWF	STACK_0
$055C	$0826			MOVF	_s3+1, 0
$055D	$00F1			MOVWF	STACK_0+1
$055E	$3003			MOVLW	3
$055F	$00F4			MOVWF	STACK_4
$0560	$3000			MOVLW	0
$0561	$00F5			MOVWF	STACK_4+1
$0562	$158A			BSF	PCLATH, 3
$0563	$22FE			CALL	_mul_16x16_u
$0564	$118A			BCF	PCLATH, 3
$0565	$0870			MOVF	STACK_0, 0
$0566	$07DE			ADDWF	FLOC_CalcError+0, 1
$0567	$0871			MOVF	STACK_0+1, 0
$0568	$1803			BTFSC	STATUS, C
$0569	$3F01			ADDLW	1
$056A	$07DF			ADDWF	FLOC_CalcError+1, 1
$056B	$3002			MOVLW	2
$056C	$00F4			MOVWF	STACK_4
$056D	$0827			MOVF	_s4, 0
$056E	$00F0			MOVWF	STACK_0
$056F	$0828			MOVF	_s4+1, 0
$0570	$00F1			MOVWF	STACK_0+1
$0571	$0874			MOVF	STACK_4, 0
$0572	$	L_CalcError_35:
$0572	$1903			BTFSC	STATUS, Z
$0573	$2D79			GOTO	L_CalcError_36
$0574	$0DF0			RLF	STACK_0, 1
$0575	$0DF1			RLF	STACK_0+1, 1
$0576	$1070			BCF	STACK_0, 0
$0577	$3FFF			ADDLW	255
$0578	$2D72			GOTO	L_CalcError_35
$0579	$	L_CalcError_36:
$0579	$0870			MOVF	STACK_0, 0
$057A	$07DE			ADDWF	FLOC_CalcError+0, 1
$057B	$0871			MOVF	STACK_0+1, 0
$057C	$1803			BTFSC	STATUS, C
$057D	$3F01			ADDLW	1
$057E	$07DF			ADDWF	FLOC_CalcError+1, 1
$057F	$0829			MOVF	_s5, 0
$0580	$00F0			MOVWF	STACK_0
$0581	$082A			MOVF	_s5+1, 0
$0582	$00F1			MOVWF	STACK_0+1
$0583	$3005			MOVLW	5
$0584	$00F4			MOVWF	STACK_4
$0585	$3000			MOVLW	0
$0586	$00F5			MOVWF	STACK_4+1
$0587	$158A			BSF	PCLATH, 3
$0588	$22FE			CALL	_mul_16x16_u
$0589	$118A			BCF	PCLATH, 3
$058A	$085E			MOVF	FLOC_CalcError+0, 0
$058B	$07F0			ADDWF	STACK_0, 1
$058C	$085F			MOVF	FLOC_CalcError+1, 0
$058D	$1803			BTFSC	STATUS, C
$058E	$3F01			ADDLW	1
$058F	$07F1			ADDWF	STACK_0+1, 1
$0590	$158A			BSF	PCLATH, 3
$0591	$2329			CALL	_word2double
$0592	$118A			BCF	PCLATH, 3
$0593	$0870			MOVF	STACK_0, 0
$0594	$00DE			MOVWF	FLOC_CalcError+0
$0595	$0871			MOVF	STACK_0+1, 0
$0596	$00DF			MOVWF	FLOC_CalcError+1
$0597	$0872			MOVF	STACK_0+2, 0
$0598	$00E0			MOVWF	FLOC_CalcError+2
$0599	$0873			MOVF	STACK_0+3, 0
$059A	$00E1			MOVWF	FLOC_CalcError+3
$059B	$085E			MOVF	FLOC_CalcError+0, 0
$059C	$00B0			MOVWF	_error
$059D	$085F			MOVF	FLOC_CalcError+1, 0
$059E	$00B1			MOVWF	_error+1
$059F	$0860			MOVF	FLOC_CalcError+2, 0
$05A0	$00B2			MOVWF	_error+2
$05A1	$0861			MOVF	FLOC_CalcError+3, 0
$05A2	$00B3			MOVWF	_error+3
;lfr_runner_5sen_tsop.c,98 :: 		error = (error)/(s1+s2+s3+s4+s5);
$05A3	$0823			MOVF	_s2, 0
$05A4	$0721			ADDWF	_s1, 0
$05A5	$00F0			MOVWF	STACK_0
$05A6	$0822			MOVF	_s1+1, 0
$05A7	$1803			BTFSC	STATUS, C
$05A8	$3F01			ADDLW	1
$05A9	$0724			ADDWF	_s2+1, 0
$05AA	$00F1			MOVWF	STACK_0+1
$05AB	$0825			MOVF	_s3, 0
$05AC	$07F0			ADDWF	STACK_0, 1
$05AD	$0826			MOVF	_s3+1, 0
$05AE	$1803			BTFSC	STATUS, C
$05AF	$3F01			ADDLW	1
$05B0	$07F1			ADDWF	STACK_0+1, 1
$05B1	$0827			MOVF	_s4, 0
$05B2	$07F0			ADDWF	STACK_0, 1
$05B3	$0828			MOVF	_s4+1, 0
$05B4	$1803			BTFSC	STATUS, C
$05B5	$3F01			ADDLW	1
$05B6	$07F1			ADDWF	STACK_0+1, 1
$05B7	$0829			MOVF	_s5, 0
$05B8	$07F0			ADDWF	STACK_0, 1
$05B9	$082A			MOVF	_s5+1, 0
$05BA	$1803			BTFSC	STATUS, C
$05BB	$3F01			ADDLW	1
$05BC	$07F1			ADDWF	STACK_0+1, 1
$05BD	$158A			BSF	PCLATH, 3
$05BE	$2329			CALL	_word2double
$05BF	$118A			BCF	PCLATH, 3
$05C0	$0870			MOVF	STACK_0, 0
$05C1	$00F4			MOVWF	STACK_4
$05C2	$0871			MOVF	STACK_0+1, 0
$05C3	$00F5			MOVWF	STACK_4+1
$05C4	$0872			MOVF	STACK_0+2, 0
$05C5	$00F6			MOVWF	STACK_4+2
$05C6	$0873			MOVF	STACK_0+3, 0
$05C7	$00F7			MOVWF	STACK_4+3
$05C8	$085E			MOVF	FLOC_CalcError+0, 0
$05C9	$00F0			MOVWF	STACK_0
$05CA	$085F			MOVF	FLOC_CalcError+1, 0
$05CB	$00F1			MOVWF	STACK_0+1
$05CC	$0860			MOVF	FLOC_CalcError+2, 0
$05CD	$00F2			MOVWF	STACK_0+2
$05CE	$0861			MOVF	FLOC_CalcError+3, 0
$05CF	$00F3			MOVWF	STACK_0+3
$05D0	$158A			BSF	PCLATH, 3
$05D1	$2000			CALL	_div_32x32_fp
$05D2	$118A			BCF	PCLATH, 3
$05D3	$0870			MOVF	STACK_0, 0
$05D4	$00B0			MOVWF	_error
$05D5	$0871			MOVF	STACK_0+1, 0
$05D6	$00B1			MOVWF	_error+1
$05D7	$0872			MOVF	STACK_0+2, 0
$05D8	$00B2			MOVWF	_error+2
$05D9	$0873			MOVF	STACK_0+3, 0
$05DA	$00B3			MOVWF	_error+3
;lfr_runner_5sen_tsop.c,99 :: 		error = error - 3;
$05DB	$3000			MOVLW	0
$05DC	$00F4			MOVWF	STACK_4
$05DD	$3000			MOVLW	0
$05DE	$00F5			MOVWF	STACK_4+1
$05DF	$3040			MOVLW	64
$05E0	$00F6			MOVWF	STACK_4+2
$05E1	$3080			MOVLW	128
$05E2	$00F7			MOVWF	STACK_4+3
$05E3	$158A			BSF	PCLATH, 3
$05E4	$23A1			CALL	_sub_32x32_fp
$05E5	$118A			BCF	PCLATH, 3
$05E6	$0870			MOVF	STACK_0, 0
$05E7	$00B0			MOVWF	_error
$05E8	$0871			MOVF	STACK_0+1, 0
$05E9	$00B1			MOVWF	_error+1
$05EA	$0872			MOVF	STACK_0+2, 0
$05EB	$00B2			MOVWF	_error+2
$05EC	$0873			MOVF	STACK_0+3, 0
$05ED	$00B3			MOVWF	_error+3
;lfr_runner_5sen_tsop.c,100 :: 		}
$05EE	$0008			RETURN
$0BD8	$	_motor_LF:
;lfr_runner_5sen_tsop.c,38 :: 		void motor_LF()          //LEFT MOTOR FWD DIR
;lfr_runner_5sen_tsop.c,40 :: 		PORTC.F5 = 1;
$0BD8	$1303			BCF	STATUS, RP1
$0BD9	$1283			BCF	STATUS, RP0
$0BDA	$1687			BSF	PORTC, 5
;lfr_runner_5sen_tsop.c,41 :: 		PORTC.F4 = 0;
$0BDB	$1207			BCF	PORTC, 4
;lfr_runner_5sen_tsop.c,42 :: 		}
$0BDC	$0008			RETURN
$0BD3	$	_motor_RF:
;lfr_runner_5sen_tsop.c,26 :: 		void motor_RF()          //RIGHT MOTOR FWD DIR
;lfr_runner_5sen_tsop.c,28 :: 		PORTC.F7 = 1;
$0BD3	$1303			BCF	STATUS, RP1
$0BD4	$1283			BCF	STATUS, RP0
$0BD5	$1787			BSF	PORTC, 7
;lfr_runner_5sen_tsop.c,29 :: 		PORTC.F6 = 0;
$0BD6	$1307			BCF	PORTC, 6
;lfr_runner_5sen_tsop.c,30 :: 		}
$0BD7	$0008			RETURN
$0A24	$	_PWM1_Change_Duty:
$0A24	$1303			BCF	STATUS, RP1
$0A25	$1683			BSF	STATUS, RP0
$0A26	$0812			MOVF	PR2, 0
$0A27	$3F01			ADDLW	1
$0A28	$00F0			MOVWF	STACK_0
$0A29	$01F1			CLRF	STACK_0+1
$0A2A	$1803			BTFSC	STATUS, C
$0A2B	$0AF1			INCF	STACK_0+1, 1
$0A2C	$1283			BCF	STATUS, RP0
$0A2D	$085E			MOVF	FARG_PWM1_Change_Duty+0, 0
$0A2E	$00F4			MOVWF	STACK_4
$0A2F	$01F5			CLRF	STACK_4+1
$0A30	$2197			CALL	_mul_16x16_s
$0A31	$3006			MOVLW	6
$0A32	$00F2			MOVWF	STACK_2
$0A33	$0870			MOVF	STACK_0, 0
$0A34	$00F4			MOVWF	STACK_4
$0A35	$0871			MOVF	STACK_0+1, 0
$0A36	$00F5			MOVWF	STACK_4+1
$0A37	$0872			MOVF	STACK_2, 0
$0A38	$	L_PWM1_Change_Duty_2:
$0A38	$1903			BTFSC	STATUS, Z
$0A39	$2A3F			GOTO	L_PWM1_Change_Duty_3
$0A3A	$0CF5			RRF	STACK_4+1, 1
$0A3B	$0CF4			RRF	STACK_4, 1
$0A3C	$13F5			BCF	STACK_4+1, 7
$0A3D	$3FFF			ADDLW	255
$0A3E	$2A38			GOTO	L_PWM1_Change_Duty_2
$0A3F	$	L_PWM1_Change_Duty_3:
$0A3F	$0874			MOVF	STACK_4, 0
$0A40	$00F0			MOVWF	STACK_0
$0A41	$0DF0			RLF	STACK_0, 1
$0A42	$1070			BCF	STACK_0, 0
$0A43	$0DF0			RLF	STACK_0, 1
$0A44	$1070			BCF	STACK_0, 0
$0A45	$0DF0			RLF	STACK_0, 1
$0A46	$1070			BCF	STACK_0, 0
$0A47	$0DF0			RLF	STACK_0, 1
$0A48	$1070			BCF	STACK_0, 0
$0A49	$3030			MOVLW	48
$0A4A	$0570			ANDWF	STACK_0, 0
$0A4B	$00F3			MOVWF	STACK_3
$0A4C	$0874			MOVF	STACK_4, 0
$0A4D	$00F0			MOVWF	STACK_0
$0A4E	$0875			MOVF	STACK_4+1, 0
$0A4F	$00F1			MOVWF	STACK_0+1
$0A50	$0CF1			RRF	STACK_0+1, 1
$0A51	$0CF0			RRF	STACK_0, 1
$0A52	$13F1			BCF	STACK_0+1, 7
$0A53	$0CF1			RRF	STACK_0+1, 1
$0A54	$0CF0			RRF	STACK_0, 1
$0A55	$13F1			BCF	STACK_0+1, 7
$0A56	$0870			MOVF	STACK_0, 0
$0A57	$0095			MOVWF	CCPR1L
$0A58	$300F			MOVLW	15
$0A59	$0597			ANDWF	CCP1CON, 1
$0A5A	$0873			MOVF	STACK_3, 0
$0A5B	$0497			IORWF	CCP1CON, 1
$0A5C	$0008			RETURN
$0A8E	$	_PWM2_Change_Duty:
$0A8E	$1303			BCF	STATUS, RP1
$0A8F	$1683			BSF	STATUS, RP0
$0A90	$0812			MOVF	PR2, 0
$0A91	$3F01			ADDLW	1
$0A92	$00F0			MOVWF	STACK_0
$0A93	$01F1			CLRF	STACK_0+1
$0A94	$1803			BTFSC	STATUS, C
$0A95	$0AF1			INCF	STACK_0+1, 1
$0A96	$1283			BCF	STATUS, RP0
$0A97	$085E			MOVF	FARG_PWM2_Change_Duty+0, 0
$0A98	$00F4			MOVWF	STACK_4
$0A99	$01F5			CLRF	STACK_4+1
$0A9A	$2197			CALL	_mul_16x16_s
$0A9B	$3006			MOVLW	6
$0A9C	$00F2			MOVWF	STACK_2
$0A9D	$0870			MOVF	STACK_0, 0
$0A9E	$00F4			MOVWF	STACK_4
$0A9F	$0871			MOVF	STACK_0+1, 0
$0AA0	$00F5			MOVWF	STACK_4+1
$0AA1	$0872			MOVF	STACK_2, 0
$0AA2	$	L_PWM2_Change_Duty_0:
$0AA2	$1903			BTFSC	STATUS, Z
$0AA3	$2AA9			GOTO	L_PWM2_Change_Duty_1
$0AA4	$0CF5			RRF	STACK_4+1, 1
$0AA5	$0CF4			RRF	STACK_4, 1
$0AA6	$13F5			BCF	STACK_4+1, 7
$0AA7	$3FFF			ADDLW	255
$0AA8	$2AA2			GOTO	L_PWM2_Change_Duty_0
$0AA9	$	L_PWM2_Change_Duty_1:
$0AA9	$0874			MOVF	STACK_4, 0
$0AAA	$00F0			MOVWF	STACK_0
$0AAB	$0DF0			RLF	STACK_0, 1
$0AAC	$1070			BCF	STACK_0, 0
$0AAD	$0DF0			RLF	STACK_0, 1
$0AAE	$1070			BCF	STACK_0, 0
$0AAF	$0DF0			RLF	STACK_0, 1
$0AB0	$1070			BCF	STACK_0, 0
$0AB1	$0DF0			RLF	STACK_0, 1
$0AB2	$1070			BCF	STACK_0, 0
$0AB3	$3030			MOVLW	48
$0AB4	$0570			ANDWF	STACK_0, 0
$0AB5	$00F3			MOVWF	STACK_3
$0AB6	$0874			MOVF	STACK_4, 0
$0AB7	$00F0			MOVWF	STACK_0
$0AB8	$0875			MOVF	STACK_4+1, 0
$0AB9	$00F1			MOVWF	STACK_0+1
$0ABA	$0CF1			RRF	STACK_0+1, 1
$0ABB	$0CF0			RRF	STACK_0, 1
$0ABC	$13F1			BCF	STACK_0+1, 7
$0ABD	$0CF1			RRF	STACK_0+1, 1
$0ABE	$0CF0			RRF	STACK_0, 1
$0ABF	$13F1			BCF	STACK_0+1, 7
$0AC0	$0870			MOVF	STACK_0, 0
$0AC1	$009B			MOVWF	CCPR2L
$0AC2	$300F			MOVLW	15
$0AC3	$059D			ANDWF	CCP2CON, 1
$0AC4	$0873			MOVF	STACK_3, 0
$0AC5	$049D			IORWF	CCP2CON, 1
$0AC6	$0008			RETURN
$0BDD	$	_motor_RB:
;lfr_runner_5sen_tsop.c,32 :: 		void motor_RB()          //RIGHT MOTOR REV DIR
;lfr_runner_5sen_tsop.c,34 :: 		PORTC.F7 = 0;
$0BDD	$1303			BCF	STATUS, RP1
$0BDE	$1283			BCF	STATUS, RP0
$0BDF	$1387			BCF	PORTC, 7
;lfr_runner_5sen_tsop.c,35 :: 		PORTC.F6 = 1;
$0BE0	$1707			BSF	PORTC, 6
;lfr_runner_5sen_tsop.c,36 :: 		}
$0BE1	$0008			RETURN
$0BCE	$	_motor_LB:
;lfr_runner_5sen_tsop.c,44 :: 		void motor_LB()          //LEFT MOTOR REV DIR
;lfr_runner_5sen_tsop.c,46 :: 		PORTC.F5 = 0;
$0BCE	$1303			BCF	STATUS, RP1
$0BCF	$1283			BCF	STATUS, RP0
$0BD0	$1287			BCF	PORTC, 5
;lfr_runner_5sen_tsop.c,47 :: 		PORTC.F4 = 1;
$0BD1	$1607			BSF	PORTC, 4
;lfr_runner_5sen_tsop.c,48 :: 		}
$0BD2	$0008			RETURN
$0948	$	GlobalInilfr_runner_5sen_tsop:
$0948	$30BE			MOVLW	190
$0949	$1303			BCF	STATUS, RP1
$094A	$1283			BCF	STATUS, RP0
$094B	$00B4			MOVWF	_basespeed+0
$094C	$3014			MOVLW	20
$094D	$00B5			MOVWF	_Kp+0
$094E	$300A			MOVLW	10
$094F	$00B6			MOVWF	_Ki+0
$0950	$3008			MOVLW	8
$0951	$00B7			MOVWF	_Kd+0
$0952	$3000			MOVLW	0
$0953	$00B8			MOVWF	_rightpulse+0
$0954	$3000			MOVLW	0
$0955	$00B9			MOVWF	_rightpulse+1
$0956	$3000			MOVLW	0
$0957	$00BA			MOVWF	_rightpulse+2
$0958	$3000			MOVLW	0
$0959	$00BB			MOVWF	_rightpulse+3
$095A	$3000			MOVLW	0
$095B	$00BC			MOVWF	_leftpulse+0
$095C	$3000			MOVLW	0
$095D	$00BD			MOVWF	_leftpulse+1
$095E	$3000			MOVLW	0
$095F	$00BE			MOVWF	_leftpulse+2
$0960	$3000			MOVLW	0
$0961	$00BF			MOVWF	_leftpulse+3
$0962	$3000			MOVLW	0
$0963	$00AC			MOVWF	_perror+0
$0964	$3000			MOVLW	0
$0965	$00AD			MOVWF	_perror+1
$0966	$3000			MOVLW	0
$0967	$00AE			MOVWF	_perror+2
$0968	$3000			MOVLW	0
$0969	$00AF			MOVWF	_perror+3
$096A	$3000			MOVLW	0
$096B	$00B0			MOVWF	_error+0
$096C	$3000			MOVLW	0
$096D	$00B1			MOVWF	_error+1
$096E	$3000			MOVLW	0
$096F	$00B2			MOVWF	_error+2
$0970	$3000			MOVLW	0
$0971	$00B3			MOVWF	_error+3
$0972	$3000			MOVLW	0
$0973	$00C0			MOVWF	_PROPORTIONAL+0
$0974	$3000			MOVLW	0
$0975	$00C1			MOVWF	_PROPORTIONAL+1
$0976	$3000			MOVLW	0
$0977	$00C2			MOVWF	_PROPORTIONAL+2
$0978	$3000			MOVLW	0
$0979	$00C3			MOVWF	_PROPORTIONAL+3
$097A	$3000			MOVLW	0
$097B	$00C4			MOVWF	_INTEGRAL+0
$097C	$3000			MOVLW	0
$097D	$00C5			MOVWF	_INTEGRAL+1
$097E	$3000			MOVLW	0
$097F	$00C6			MOVWF	_INTEGRAL+2
$0980	$3000			MOVLW	0
$0981	$00C7			MOVWF	_INTEGRAL+3
$0982	$3000			MOVLW	0
$0983	$00C8			MOVWF	_DERIVATIVE+0
$0984	$3000			MOVLW	0
$0985	$00C9			MOVWF	_DERIVATIVE+1
$0986	$3000			MOVLW	0
$0987	$00CA			MOVWF	_DERIVATIVE+2
$0988	$3000			MOVLW	0
$0989	$00CB			MOVWF	_DERIVATIVE+3
$098A	$3000			MOVLW	0
$098B	$00CC			MOVWF	_correction+0
$098C	$3000			MOVLW	0
$098D	$00CD			MOVWF	_correction+1
$098E	$3000			MOVLW	0
$098F	$00CE			MOVWF	_correction+2
$0990	$3000			MOVLW	0
$0991	$00CF			MOVWF	_correction+3
$0992	$3000			MOVLW	0
$0993	$00D0			MOVWF	_count+0
$0994	$3000			MOVLW	0
$0995	$00D1			MOVWF	_count+1
$0996	$0008			RETURN
$0B3F	$	_Equals_Double:
$0B3F	$1303			BCF	STATUS, RP1
$0B40	$1283			BCF	STATUS, RP0
$0B41	$0873			MOVF	STACK_3, W
$0B42	$0677			XORWF	STACK_7, W
$0B43	$1D03			BTFSS	STATUS, Z
$0B44	$2B52			GOTO	EQU_FALSE
$0B45	$0872			MOVF	STACK_2, W
$0B46	$0676			XORWF	STACK_6, W
$0B47	$1D03			BTFSS	STATUS, Z
$0B48	$2B52			GOTO	EQU_FALSE
$0B49	$0871			MOVF	STACK_1, W
$0B4A	$0675			XORWF	STACK_5, W
$0B4B	$1D03			BTFSS	STATUS, Z
$0B4C	$2B52			GOTO	EQU_FALSE
$0B4D	$0870			MOVF	STACK_0, W
$0B4E	$0674			XORWF	STACK_4, W
$0B4F	$1903			BTFSC	STATUS, Z
$0B50	$1503			BSF	STATUS, Z
$0B51	$0008			RETURN
$0B52	$	EQU_FALSE:
$0B52	$1103			BCF	STATUS, Z
$0B53	$0008			RETURN
$0B54	$0008			RETURN
$0B55	$	_Byte2Double:
$0B55	$1303			BCF	STATUS, RP1
$0B56	$1283			BCF	STATUS, RP0
$0B57	$	FLO08U32:
$0B57	$0870			MOVF	STACK_0, W
$0B58	$00F8			MOVWF	STACK_8
$0B59	$01FB			CLRF	STACK_11
$0B5A	$01FC			CLRF	STACK_12
$0B5B	$309E			MOVLW	0x9E
$0B5C	$00F3			MOVWF	STACK_3
$0B5D	$01FA			CLRF	STACK_10
$0B5E	$01F2			CLRF	STACK_2
$0B5F	$01F1			CLRF	STACK_1
$0B60	$01F0			CLRF	STACK_0
$0B61	$3002			MOVLW	0x02
$0B62	$00FC			MOVWF	STACK_12
$0B63	$209C			CALL	_NRM4032
$0B64	$0008			RETURN
$0697	$	_Mul_32x32_FP:
$0697	$1303			BCF	STATUS, RP1
$0698	$1283			BCF	STATUS, RP0
$0699	$	FPM32:
$0699	$01FB			CLRF	STACK_11
$069A	$0873			MOVF	STACK_3, W
$069B	$1D03			BTFSS	STATUS, Z
$069C	$0877			MOVF	STACK_7, W
$069D	$1903			BTFSC	STATUS, Z
$069E	$2EEE			GOTO	JPMRES032
$069F	$	M32BNE0:
$069F	$0872			MOVF	STACK_2, W
$06A0	$0676			XORWF	STACK_6, W
$06A1	$00FA			MOVWF	STACK_10
$06A2	$0877			MOVF	STACK_7, W
$06A3	$07F3			ADDWF	STACK_3, F
$06A4	$307E			MOVLW	126
$06A5	$1C03			BTFSS	STATUS, C
$06A6	$2EAB			GOTO	MTUN32
$06A7	$02F3			SUBWF	STACK_3, F
$06A8	$1803			BTFSC	STATUS, C
$06A9	$2EF3			GOTO	JPMSETFOV32
$06AA	$2EAE			GOTO	MOK32
$06AB	$	MTUN32:
$06AB	$02F3			SUBWF	STACK_3, F
$06AC	$1C03			BTFSS	STATUS, C
$06AD	$2EF8			GOTO	JPMSETFUN32
$06AE	$	MOK32:
$06AE	$0872			MOVF	STACK_2, W
$06AF	$00F8			MOVWF	STACK_8
$06B0	$0871			MOVF	STACK_1, W
$06B1	$00FC			MOVWF	STACK_12
$06B2	$0870			MOVF	STACK_0, W
$06B3	$00FD			MOVWF	STACK_13
$06B4	$17F8			BSF	STACK_8, 7
$06B5	$17F6			BSF	STACK_6, 7
$06B6	$1003			BCF	STATUS, C
$06B7	$01F2			CLRF	STACK_2
$06B8	$01F1			CLRF	STACK_1
$06B9	$01F0			CLRF	STACK_0
$06BA	$3018			MOVLW	24
$06BB	$00A0			MOVWF	__math_tempbD
$06BC	$	MLOOP32:
$06BC	$1C7D			BTFSS	STACK_13, 0
$06BD	$2EC8			GOTO	MNOADD32
$06BE	$	MADD32:
$06BE	$0874			MOVF	STACK_4, W
$06BF	$07F0			ADDWF	STACK_0, F
$06C0	$0875			MOVF	STACK_5, W
$06C1	$1803			BTFSC	STATUS, C
$06C2	$0F75			INCFSZ	STACK_5, W
$06C3	$07F1			ADDWF	STACK_1, F
$06C4	$0876			MOVF	STACK_6, W
$06C5	$1803			BTFSC	STATUS, C
$06C6	$0F76			INCFSZ	STACK_6, W
$06C7	$07F2			ADDWF	STACK_2, F
$06C8	$	MNOADD32:
$06C8	$0CF2			RRF	STACK_2, F
$06C9	$0CF1			RRF	STACK_1, F
$06CA	$0CF0			RRF	STACK_0, F
$06CB	$0CF8			RRF	STACK_8, F
$06CC	$0CFC			RRF	STACK_12, F
$06CD	$0CFD			RRF	STACK_13, F
$06CE	$1003			BCF	STATUS, C
$06CF	$0BA0			DECFSZ	__math_tempbD, F
$06D0	$2EBC			GOTO	MLOOP32
$06D1	$1BF2			BTFSC	STACK_2, 7
$06D2	$2ED8			GOTO	MROUND32
$06D3	$0DF8			RLF	STACK_8, F
$06D4	$0DF0			RLF	STACK_0, F
$06D5	$0DF1			RLF	STACK_1, F
$06D6	$0DF2			RLF	STACK_2, F
$06D7	$03F3			DECF	STACK_3, F
$06D8	$	MROUND32:
$06D8	$1B7B			BTFSC	STACK_11, 6
$06D9	$1C70			BTFSS	STACK_0, 0
$06DA	$2EEA			GOTO	MUL32OK
$06DB	$1FF8			BTFSS	STACK_8, 7
$06DC	$2EEA			GOTO	MUL32OK
$06DD	$0AF0			INCF	STACK_0, F
$06DE	$1903			BTFSC	STATUS, Z
$06DF	$0AF1			INCF	STACK_1, F
$06E0	$1903			BTFSC	STATUS, Z
$06E1	$0AF2			INCF	STACK_2, F
$06E2	$1D03			BTFSS	STATUS, Z
$06E3	$2EEA			GOTO	MUL32OK
$06E4	$0CF2			RRF	STACK_2, F
$06E5	$0CF1			RRF	STACK_1, F
$06E6	$0CF0			RRF	STACK_0, F
$06E7	$0AF3			INCF	STACK_3, F
$06E8	$1903			BTFSC	STATUS, Z
$06E9	$2EF3			GOTO	JPMSETFOV32
$06EA	$	MUL32OK:
$06EA	$1FFA			BTFSS	STACK_10, 7
$06EB	$13F2			BCF	STACK_2, 7
$06EC	$3000			MOVLW	0x00
$06ED	$2EFC			GOTO	MUL32EEE
$06EE	$	JPMRES032:
$06EE	$3001			MOVLW	0x01
$06EF	$158A			BSF	PCLATH, 3
$06F0	$23A9			CALL	_RES032
$06F1	$118A			BCF	PCLATH, 3
$06F2	$2EFC			GOTO	MUL32EEE
$06F3	$	JPMSETFOV32:
$06F3	$3002			MOVLW	0x02
$06F4	$158A			BSF	PCLATH, 3
$06F5	$2385			CALL	_SETFOV32
$06F6	$118A			BCF	PCLATH, 3
$06F7	$2EFC			GOTO	MUL32EEE
$06F8	$	JPMSETFUN32:
$06F8	$3004			MOVLW	0x04
$06F9	$158A			BSF	PCLATH, 3
$06FA	$2393			CALL	_SETFUN32
$06FB	$118A			BCF	PCLATH, 3
$06FC	$	MUL32EEE:
$06FC	$0000			NOP
$06FD	$0008			RETURN
$08F8	$	_Compare_Double:
$08F8	$1303			BCF	STATUS, RP1
$08F9	$1283			BCF	STATUS, RP0
$08FA	$01FA			CLRF	STACK_10
$08FB	$0873			MOVF	STACK_3, W
$08FC	$1D03			BTFSS	STATUS, Z
$08FD	$147A			BSF	STACK_10, 0
$08FE	$0877			MOVF	STACK_7, W
$08FF	$1D03			BTFSS	STATUS, Z
$0900	$14FA			BSF	STACK_10, 1
$0901	$087A			MOVF	STACK_10, W
$0902	$1903			BTFSC	STATUS, Z
$0903	$2944			GOTO	COMPARE_EQU
$0904	$3A03			XORLW	0x03
$0905	$1903			BTFSC	STATUS, Z
$0906	$290F			GOTO	COMPARE_NOTZERO
$0907	$187A			BTFSC	STACK_10, 0
$0908	$290C			GOTO	COMPARE_XNOTZERO
$0909	$	COMPARE_YNOTZERO:
$0909	$1FF6			BTFSS	STACK_6, 7
$090A	$2942			GOTO	COMPARE_LT
$090B	$2940			GOTO	COMPARE_GT
$090C	$	COMPARE_XNOTZERO:
$090C	$1FF2			BTFSS	STACK_2, 7
$090D	$2940			GOTO	COMPARE_GT
$090E	$2942			GOTO	COMPARE_LT
$090F	$	COMPARE_NOTZERO:
$090F	$0872			MOVF	STACK_2, W
$0910	$3980			ANDLW	0x80
$0911	$00FA			MOVWF	STACK_10
$0912	$13F2			BCF	STACK_2, 7
$0913	$0876			MOVF	STACK_6, W
$0914	$3980			ANDLW	0x80
$0915	$13F6			BCF	STACK_6, 7
$0916	$067A			XORWF	STACK_10, W
$0917	$1903			BTFSC	STATUS, Z
$0918	$291D			GOTO	COMPARE_TESTALL
$0919	$087A			MOVF	STACK_10, W
$091A	$1903			BTFSC	STATUS, Z
$091B	$2940			GOTO	COMPARE_GT
$091C	$2942			GOTO	COMPARE_LT
$091D	$	COMPARE_TESTALL:
$091D	$0877			MOVF	STACK_7, W
$091E	$0273			SUBWF	STACK_3, W
$091F	$1903			BTFSC	STATUS, Z
$0920	$2924			GOTO	COMPARE_C1
$0921	$1C03			BTFSS	STATUS, C
$0922	$2938			GOTO	GT_FALSE
$0923	$293C			GOTO	GT_TRUE
$0924	$	COMPARE_C1:
$0924	$0876			MOVF	STACK_6, W
$0925	$0272			SUBWF	STACK_2, W
$0926	$1903			BTFSC	STATUS, Z
$0927	$292B			GOTO	COMPARE_C2
$0928	$1C03			BTFSS	STATUS, C
$0929	$2938			GOTO	GT_FALSE
$092A	$293C			GOTO	GT_TRUE
$092B	$	COMPARE_C2:
$092B	$0875			MOVF	STACK_5, W
$092C	$0271			SUBWF	STACK_1, W
$092D	$1903			BTFSC	STATUS, Z
$092E	$2932			GOTO	COMPARE_C3
$092F	$1C03			BTFSS	STATUS, C
$0930	$2938			GOTO	GT_FALSE
$0931	$293C			GOTO	GT_TRUE
$0932	$	COMPARE_C3:
$0932	$0874			MOVF	STACK_4, W
$0933	$0270			SUBWF	STACK_0, W
$0934	$1903			BTFSC	STATUS, Z
$0935	$2944			GOTO	COMPARE_EQU
$0936	$1803			BTFSC	STATUS, C
$0937	$293C			GOTO	GT_TRUE
$0938	$	GT_FALSE:
$0938	$08FA			MOVF	STACK_10, F
$0939	$1903			BTFSC	STATUS, Z
$093A	$2942			GOTO	COMPARE_LT
$093B	$2940			GOTO	COMPARE_GT
$093C	$	GT_TRUE:
$093C	$08FA			MOVF	STACK_10, F
$093D	$1903			BTFSC	STATUS, Z
$093E	$2940			GOTO	COMPARE_GT
$093F	$2942			GOTO	COMPARE_LT
$0940	$	COMPARE_GT:
$0940	$1403			BSF	STATUS, C
$0941	$0008			RETURN
$0942	$	COMPARE_LT:
$0942	$1003			BCF	STATUS, C
$0943	$0008			RETURN
$0944	$	COMPARE_EQU:
$0944	$1403			BSF	STATUS, C
$0945	$1503			BSF	STATUS, Z
$0946	$0008			RETURN
$0947	$0008			RETURN
$09E1	$	_Double2Byte:
$09E1	$1303			BCF	STATUS, RP1
$09E2	$1283			BCF	STATUS, RP0
$09E3	$	INT32U08:
$09E3	$01FB			CLRF	STACK_11
$09E4	$01FC			CLRF	STACK_12
$09E5	$01FA			CLRF	STACK_10
$09E6	$0873			MOVF	STACK_3, W
$09E7	$1903			BTFSC	STATUS, Z
$09E8	$2A0E			GOTO	IRES008
$09E9	$13FA			BCF	STACK_10, 7
$09EA	$17F2			BSF	STACK_2, 7
$09EB	$3086			MOVLW	134
$09EC	$02F3			SUBWF	STACK_3, F
$09ED	$1BF3			BTFSC	STACK_3, 7
$09EE	$29F2			GOTO	SETEXP08
$09EF	$1903			BTFSC	STATUS, Z
$09F0	$29F2			GOTO	SETEXP08
$09F1	$2A10			GOTO	SETIOV08
$09F2	$	SETEXP08:
$09F2	$09F3			COMF	STACK_3, F
$09F3	$0AF3			INCF	STACK_3, F
$09F4	$3008			MOVLW	8
$09F5	$0273			SUBWF	STACK_3, W
$09F6	$1C03			BTFSS	STATUS, C
$09F7	$29FF			GOTO	TSHIFT3208
$09F8	$00F3			MOVWF	STACK_3
$09F9	$0DF2			RLF	STACK_2, F
$09FA	$01F2			CLRF	STACK_2
$09FB	$0873			MOVF	STACK_3, W
$09FC	$1D03			BTFSS	STATUS, Z
$09FD	$1003			BCF	STATUS, C
$09FE	$2A06			GOTO	SHIFT3208OK
$09FF	$	TSHIFT3208:
$09FF	$0873			MOVF	STACK_3, W
$0A00	$1903			BTFSC	STATUS, Z
$0A01	$2A06			GOTO	SHIFT3208OK
$0A02	$	SHIFT3208:
$0A02	$1003			BCF	STATUS, C
$0A03	$0CF2			RRF	STACK_2, F
$0A04	$0BF3			DECFSZ	STACK_3, F
$0A05	$2A02			GOTO	SHIFT3208
$0A06	$	SHIFT3208OK:
$0A06	$1B7B			BTFSC	STACK_11, 6
$0A07	$1C72			BTFSS	STACK_2, 0
$0A08	$2A0E			GOTO	INT3208OK
$0A09	$1C03			BTFSS	STATUS, C
$0A0A	$2A0E			GOTO	INT3208OK
$0A0B	$0AF2			INCF	STACK_2, F
$0A0C	$1903			BTFSC	STATUS, Z
$0A0D	$2A15			GOTO	D2B_JPKSETIOV3224
$0A0E	$	INT3208OK:
$0A0E	$	IRES008:
$0A0E	$01F1			CLRF	STACK_1
$0A0F	$2A18			GOTO	INT3208EOK
$0A10	$	SETIOV08:
$0A10	$147B			BSF	STACK_11, 0
$0A11	$1FFB			BTFSS	STACK_11, 7
$0A12	$2A1B			GOTO	INT3208EER
$0A13	$01F1			CLRF	STACK_1
$0A14	$2A1B			GOTO	INT3208EER
$0A15	$	D2B_JPKSETIOV3224:
$0A15	$3001			MOVLW	0x01
$0A16	$00FC			MOVWF	STACK_12
$0A17	$2A1D			GOTO	INT3208EEE
$0A18	$	INT3208EOK:
$0A18	$3000			MOVLW	0x00
$0A19	$00FC			MOVWF	STACK_12
$0A1A	$2A1D			GOTO	INT3208EEE
$0A1B	$	INT3208EER:
$0A1B	$30FF			MOVLW	0xFF
$0A1C	$00FC			MOVWF	STACK_12
$0A1D	$	INT3208EEE:
$0A1D	$08FC			MOVF	STACK_12, F
$0A1E	$1903			BTFSC	STATUS, Z
$0A1F	$2A21			GOTO	L_Double2Byte_0
$0A20	$2376			CALL	_SETIOV3224
$0A21	$	L_Double2Byte_0:
$0A21	$0872			MOVF	STACK_2, W
$0A22	$00F0			MOVWF	STACK_0
$0A23	$0008			RETURN
$0004	$	_main:
;lfr_runner_5sen_tsop.c,101 :: 		void main()
;lfr_runner_5sen_tsop.c,104 :: 		initport();
$0004	$158A			BSF	PCLATH, 3
$0005	$2148			CALL	GlobalInilfr_runner_5sen_tsop
$0006	$118A			BCF	PCLATH, 3
$0007	$158A			BSF	PCLATH, 3
$0008	$2365			CALL	_initport
$0009	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop.c,105 :: 		initpwm();
$000A	$26FE			CALL	_initpwm
;lfr_runner_5sen_tsop.c,106 :: 		fwd : ;
$000B	$	___main_fwd:
;lfr_runner_5sen_tsop.c,107 :: 		while(1)                                 //frwd  direction
$000B	$	L_main_5:
;lfr_runner_5sen_tsop.c,109 :: 		indicator();
$000B	$158A			BSF	PCLATH, 3
$000C	$22C7			CALL	_indicator
$000D	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop.c,110 :: 		CalcError();
$000E	$250E			CALL	_CalcError
;lfr_runner_5sen_tsop.c,111 :: 		if((error == 0) && (s3==1) && ((s1+s2+s4+s5)==0))
$000F	$01F4			CLRF	STACK_4
$0010	$01F5			CLRF	STACK_4+1
$0011	$01F6			CLRF	STACK_4+2
$0012	$01F7			CLRF	STACK_4+3
$0013	$0830			MOVF	_error, 0
$0014	$00F0			MOVWF	STACK_0
$0015	$0831			MOVF	_error+1, 0
$0016	$00F1			MOVWF	STACK_0+1
$0017	$0832			MOVF	_error+2, 0
$0018	$00F2			MOVWF	STACK_0+2
$0019	$0833			MOVF	_error+3, 0
$001A	$00F3			MOVWF	STACK_0+3
$001B	$158A			BSF	PCLATH, 3
$001C	$233F			CALL	_equals_double
$001D	$118A			BCF	PCLATH, 3
$001E	$3001			MOVLW	1
$001F	$1D03			BTFSS	STATUS, Z
$0020	$3000			MOVLW	0
$0021	$00F0			MOVWF	STACK_0
$0022	$0870			MOVF	STACK_0, 0
$0023	$1903			BTFSC	STATUS, Z
$0024	$286A			GOTO	L_main_9
$0025	$3000			MOVLW	0
$0026	$0626			XORWF	_s3+1, 0
$0027	$1D03			BTFSS	STATUS, Z
$0028	$282B			GOTO	L_main_37
$0029	$3001			MOVLW	1
$002A	$0625			XORWF	_s3, 0
$002B	$	L_main_37:
$002B	$1D03			BTFSS	STATUS, Z
$002C	$286A			GOTO	L_main_9
$002D	$0823			MOVF	_s2, 0
$002E	$0721			ADDWF	_s1, 0
$002F	$00F0			MOVWF	STACK_0
$0030	$0822			MOVF	_s1+1, 0
$0031	$1803			BTFSC	STATUS, C
$0032	$3F01			ADDLW	1
$0033	$0724			ADDWF	_s2+1, 0
$0034	$00F1			MOVWF	STACK_0+1
$0035	$0827			MOVF	_s4, 0
$0036	$07F0			ADDWF	STACK_0, 1
$0037	$0828			MOVF	_s4+1, 0
$0038	$1803			BTFSC	STATUS, C
$0039	$3F01			ADDLW	1
$003A	$07F1			ADDWF	STACK_0+1, 1
$003B	$0829			MOVF	_s5, 0
$003C	$0770			ADDWF	STACK_0, 0
$003D	$00F4			MOVWF	STACK_4
$003E	$0871			MOVF	STACK_0+1, 0
$003F	$1803			BTFSC	STATUS, C
$0040	$3F01			ADDLW	1
$0041	$072A			ADDWF	_s5+1, 0
$0042	$00F5			MOVWF	STACK_4+1
$0043	$3000			MOVLW	0
$0044	$0675			XORWF	STACK_4+1, 0
$0045	$1D03			BTFSS	STATUS, Z
$0046	$2849			GOTO	L_main_38
$0047	$3000			MOVLW	0
$0048	$0674			XORWF	STACK_4, 0
$0049	$	L_main_38:
$0049	$1D03			BTFSS	STATUS, Z
$004A	$286A			GOTO	L_main_9
$004B	$	L130_ex_L_main_9:
;lfr_runner_5sen_tsop.c,113 :: 		motor_LF();					        	      //FWD AT FULL SPEED
$004B	$158A			BSF	PCLATH, 3
$004C	$23D8			CALL	_motor_LF
$004D	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop.c,114 :: 		motor_RF();
$004E	$158A			BSF	PCLATH, 3
$004F	$23D3			CALL	_motor_RF
$0050	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop.c,115 :: 		PWM1_CHANGE_DUTY(255);
$0051	$30FF			MOVLW	255
$0052	$00DE			MOVWF	FARG_PWM1_Change_Duty+0
$0053	$158A			BSF	PCLATH, 3
$0054	$2224			CALL	_PWM1_Change_Duty
$0055	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop.c,116 :: 		PWM2_CHANGE_DUTY(255);
$0056	$30FF			MOVLW	255
$0057	$00DE			MOVWF	FARG_PWM2_Change_Duty+0
$0058	$158A			BSF	PCLATH, 3
$0059	$228E			CALL	_PWM2_Change_Duty
$005A	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop.c,117 :: 		delay_ms(10);
$005B	$300D			MOVLW	13
$005C	$00FB			MOVWF	STACK_11
$005D	$30FF			MOVLW	255
$005E	$00FA			MOVWF	STACK_10
$005F	$0BFB			DECFSZ	STACK_11, F
$0060	$2862			GOTO	$+2
$0061	$2865			GOTO	$+4
$0062	$0BFA			DECFSZ	STACK_10, F
$0063	$2862			GOTO	$-1
$0064	$285F			GOTO	$-5
$0065	$30F3			MOVLW	243
$0066	$00FA			MOVWF	STACK_10
$0067	$0BFA			DECFSZ	STACK_10, F
$0068	$2867			GOTO	$-1
$0069	$0000			NOP
;lfr_runner_5sen_tsop.c,118 :: 		}
$006A	$	L_main_9:
;lfr_runner_5sen_tsop.c,119 :: 		if((s1+s2+s3+s4+s5) == 0)		            //ROBOT HAS OVERSHOOT
$006A	$0823			MOVF	_s2, 0
$006B	$0721			ADDWF	_s1, 0
$006C	$00F0			MOVWF	STACK_0
$006D	$0822			MOVF	_s1+1, 0
$006E	$1803			BTFSC	STATUS, C
$006F	$3F01			ADDLW	1
$0070	$0724			ADDWF	_s2+1, 0
$0071	$00F1			MOVWF	STACK_0+1
$0072	$0825			MOVF	_s3, 0
$0073	$07F0			ADDWF	STACK_0, 1
$0074	$0826			MOVF	_s3+1, 0
$0075	$1803			BTFSC	STATUS, C
$0076	$3F01			ADDLW	1
$0077	$07F1			ADDWF	STACK_0+1, 1
$0078	$0827			MOVF	_s4, 0
$0079	$07F0			ADDWF	STACK_0, 1
$007A	$0828			MOVF	_s4+1, 0
$007B	$1803			BTFSC	STATUS, C
$007C	$3F01			ADDLW	1
$007D	$07F1			ADDWF	STACK_0+1, 1
$007E	$0829			MOVF	_s5, 0
$007F	$0770			ADDWF	STACK_0, 0
$0080	$00F4			MOVWF	STACK_4
$0081	$0871			MOVF	STACK_0+1, 0
$0082	$1803			BTFSC	STATUS, C
$0083	$3F01			ADDLW	1
$0084	$072A			ADDWF	_s5+1, 0
$0085	$00F5			MOVWF	STACK_4+1
$0086	$3000			MOVLW	0
$0087	$0675			XORWF	STACK_4+1, 0
$0088	$1D03			BTFSS	STATUS, Z
$0089	$288C			GOTO	L_main_39
$008A	$3000			MOVLW	0
$008B	$0674			XORWF	STACK_4, 0
$008C	$	L_main_39:
$008C	$1D03			BTFSS	STATUS, Z
$008D	$28D5			GOTO	L_main_10
;lfr_runner_5sen_tsop.c,121 :: 		if(lastreading == 'r')				      //CHECKS IF THE LAST SENSOR ACTIVATED WAS RIGHT
$008E	$082B			MOVF	_lastreading, 0
$008F	$3A72			XORLW	114
$0090	$1D03			BTFSS	STATUS, Z
$0091	$28B1			GOTO	L_main_11
;lfr_runner_5sen_tsop.c,123 :: 		motor_RB();						          //TURN RIGHT AT FULL SPEED
$0092	$158A			BSF	PCLATH, 3
$0093	$23DD			CALL	_motor_RB
$0094	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop.c,124 :: 		motor_LF();
$0095	$158A			BSF	PCLATH, 3
$0096	$23D8			CALL	_motor_LF
$0097	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop.c,125 :: 		PWM1_CHANGE_DUTY(255);
$0098	$30FF			MOVLW	255
$0099	$00DE			MOVWF	FARG_PWM1_Change_Duty+0
$009A	$158A			BSF	PCLATH, 3
$009B	$2224			CALL	_PWM1_Change_Duty
$009C	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop.c,126 :: 		PWM2_CHANGE_DUTY(255);
$009D	$30FF			MOVLW	255
$009E	$00DE			MOVWF	FARG_PWM2_Change_Duty+0
$009F	$158A			BSF	PCLATH, 3
$00A0	$228E			CALL	_PWM2_Change_Duty
$00A1	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop.c,127 :: 		delay_ms(10);
$00A2	$300D			MOVLW	13
$00A3	$00FB			MOVWF	STACK_11
$00A4	$30FF			MOVLW	255
$00A5	$00FA			MOVWF	STACK_10
$00A6	$0BFB			DECFSZ	STACK_11, F
$00A7	$28A9			GOTO	$+2
$00A8	$28AC			GOTO	$+4
$00A9	$0BFA			DECFSZ	STACK_10, F
$00AA	$28A9			GOTO	$-1
$00AB	$28A6			GOTO	$-5
$00AC	$30F3			MOVLW	243
$00AD	$00FA			MOVWF	STACK_10
$00AE	$0BFA			DECFSZ	STACK_10, F
$00AF	$28AE			GOTO	$-1
$00B0	$0000			NOP
;lfr_runner_5sen_tsop.c,128 :: 		}
$00B1	$	L_main_11:
;lfr_runner_5sen_tsop.c,129 :: 		if(lastreading == 'l')			        //CHECKS IF THE LAST SENSOR ACTIVATED WAS LEFT
$00B1	$082B			MOVF	_lastreading, 0
$00B2	$3A6C			XORLW	108
$00B3	$1D03			BTFSS	STATUS, Z
$00B4	$28D4			GOTO	L_main_12
;lfr_runner_5sen_tsop.c,131 :: 		motor_LB();					        	  //TURN LEFT AT FULL SPEED
$00B5	$158A			BSF	PCLATH, 3
$00B6	$23CE			CALL	_motor_LB
$00B7	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop.c,132 :: 		motor_RF();
$00B8	$158A			BSF	PCLATH, 3
$00B9	$23D3			CALL	_motor_RF
$00BA	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop.c,133 :: 		PWM1_CHANGE_DUTY(255);
$00BB	$30FF			MOVLW	255
$00BC	$00DE			MOVWF	FARG_PWM1_Change_Duty+0
$00BD	$158A			BSF	PCLATH, 3
$00BE	$2224			CALL	_PWM1_Change_Duty
$00BF	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop.c,134 :: 		PWM2_CHANGE_DUTY(255);
$00C0	$30FF			MOVLW	255
$00C1	$00DE			MOVWF	FARG_PWM2_Change_Duty+0
$00C2	$158A			BSF	PCLATH, 3
$00C3	$228E			CALL	_PWM2_Change_Duty
$00C4	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop.c,135 :: 		delay_ms(10);
$00C5	$300D			MOVLW	13
$00C6	$00FB			MOVWF	STACK_11
$00C7	$30FF			MOVLW	255
$00C8	$00FA			MOVWF	STACK_10
$00C9	$0BFB			DECFSZ	STACK_11, F
$00CA	$28CC			GOTO	$+2
$00CB	$28CF			GOTO	$+4
$00CC	$0BFA			DECFSZ	STACK_10, F
$00CD	$28CC			GOTO	$-1
$00CE	$28C9			GOTO	$-5
$00CF	$30F3			MOVLW	243
$00D0	$00FA			MOVWF	STACK_10
$00D1	$0BFA			DECFSZ	STACK_10, F
$00D2	$28D1			GOTO	$-1
$00D3	$0000			NOP
;lfr_runner_5sen_tsop.c,136 :: 		}
$00D4	$	L_main_12:
;lfr_runner_5sen_tsop.c,137 :: 		}
$00D4	$2A74			GOTO	L_main_13
$00D5	$	L_main_10:
;lfr_runner_5sen_tsop.c,140 :: 		PROPORTIONAL = error * kp;
$00D5	$0835			MOVF	_Kp, 0
$00D6	$00F0			MOVWF	STACK_0
$00D7	$158A			BSF	PCLATH, 3
$00D8	$2355			CALL	_byte2double
$00D9	$118A			BCF	PCLATH, 3
$00DA	$0830			MOVF	_error, 0
$00DB	$00F4			MOVWF	STACK_4
$00DC	$0831			MOVF	_error+1, 0
$00DD	$00F5			MOVWF	STACK_4+1
$00DE	$0832			MOVF	_error+2, 0
$00DF	$00F6			MOVWF	STACK_4+2
$00E0	$0833			MOVF	_error+3, 0
$00E1	$00F7			MOVWF	STACK_4+3
$00E2	$2697			CALL	_mul_32x32_fp
$00E3	$0870			MOVF	STACK_0, 0
$00E4	$00DA			MOVWF	FLOC_main+8
$00E5	$0871			MOVF	STACK_0+1, 0
$00E6	$00DB			MOVWF	FLOC_main+9
$00E7	$0872			MOVF	STACK_0+2, 0
$00E8	$00DC			MOVWF	FLOC_main+10
$00E9	$0873			MOVF	STACK_0+3, 0
$00EA	$00DD			MOVWF	FLOC_main+11
$00EB	$085A			MOVF	FLOC_main+8, 0
$00EC	$00C0			MOVWF	_PROPORTIONAL
$00ED	$085B			MOVF	FLOC_main+9, 0
$00EE	$00C1			MOVWF	_PROPORTIONAL+1
$00EF	$085C			MOVF	FLOC_main+10, 0
$00F0	$00C2			MOVWF	_PROPORTIONAL+2
$00F1	$085D			MOVF	FLOC_main+11, 0
$00F2	$00C3			MOVWF	_PROPORTIONAL+3
;lfr_runner_5sen_tsop.c,141 :: 		INTEGRAL += error ;
$00F3	$0844			MOVF	_INTEGRAL, 0
$00F4	$00F0			MOVWF	STACK_0
$00F5	$0845			MOVF	_INTEGRAL+1, 0
$00F6	$00F1			MOVWF	STACK_0+1
$00F7	$0846			MOVF	_INTEGRAL+2, 0
$00F8	$00F2			MOVWF	STACK_0+2
$00F9	$0847			MOVF	_INTEGRAL+3, 0
$00FA	$00F3			MOVWF	STACK_0+3
$00FB	$0830			MOVF	_error, 0
$00FC	$00F4			MOVWF	STACK_4
$00FD	$0831			MOVF	_error+1, 0
$00FE	$00F5			MOVWF	STACK_4+1
$00FF	$0832			MOVF	_error+2, 0
$0100	$00F6			MOVWF	STACK_4+2
$0101	$0833			MOVF	_error+3, 0
$0102	$00F7			MOVWF	STACK_4+3
$0103	$25EF			CALL	_add_32x32_fp
$0104	$0870			MOVF	STACK_0, 0
$0105	$00D2			MOVWF	FLOC_main+0
$0106	$0871			MOVF	STACK_0+1, 0
$0107	$00D3			MOVWF	FLOC_main+1
$0108	$0872			MOVF	STACK_0+2, 0
$0109	$00D4			MOVWF	FLOC_main+2
$010A	$0873			MOVF	STACK_0+3, 0
$010B	$00D5			MOVWF	FLOC_main+3
$010C	$0852			MOVF	FLOC_main+0, 0
$010D	$00C4			MOVWF	_INTEGRAL
$010E	$0853			MOVF	FLOC_main+1, 0
$010F	$00C5			MOVWF	_INTEGRAL+1
$0110	$0854			MOVF	FLOC_main+2, 0
$0111	$00C6			MOVWF	_INTEGRAL+2
$0112	$0855			MOVF	FLOC_main+3, 0
$0113	$00C7			MOVWF	_INTEGRAL+3
;lfr_runner_5sen_tsop.c,142 :: 		INTEGRAL *= ki;
$0114	$0836			MOVF	_Ki, 0
$0115	$00F0			MOVWF	STACK_0
$0116	$158A			BSF	PCLATH, 3
$0117	$2355			CALL	_byte2double
$0118	$118A			BCF	PCLATH, 3
$0119	$0852			MOVF	FLOC_main+0, 0
$011A	$00F4			MOVWF	STACK_4
$011B	$0853			MOVF	FLOC_main+1, 0
$011C	$00F5			MOVWF	STACK_4+1
$011D	$0854			MOVF	FLOC_main+2, 0
$011E	$00F6			MOVWF	STACK_4+2
$011F	$0855			MOVF	FLOC_main+3, 0
$0120	$00F7			MOVWF	STACK_4+3
$0121	$2697			CALL	_mul_32x32_fp
$0122	$0870			MOVF	STACK_0, 0
$0123	$00D2			MOVWF	FLOC_main+0
$0124	$0871			MOVF	STACK_0+1, 0
$0125	$00D3			MOVWF	FLOC_main+1
$0126	$0872			MOVF	STACK_0+2, 0
$0127	$00D4			MOVWF	FLOC_main+2
$0128	$0873			MOVF	STACK_0+3, 0
$0129	$00D5			MOVWF	FLOC_main+3
$012A	$0852			MOVF	FLOC_main+0, 0
$012B	$00C4			MOVWF	_INTEGRAL
$012C	$0853			MOVF	FLOC_main+1, 0
$012D	$00C5			MOVWF	_INTEGRAL+1
$012E	$0854			MOVF	FLOC_main+2, 0
$012F	$00C6			MOVWF	_INTEGRAL+2
$0130	$0855			MOVF	FLOC_main+3, 0
$0131	$00C7			MOVWF	_INTEGRAL+3
;lfr_runner_5sen_tsop.c,143 :: 		DERIVATIVE = (error - perror);
$0132	$082C			MOVF	_perror, 0
$0133	$00F4			MOVWF	STACK_4
$0134	$082D			MOVF	_perror+1, 0
$0135	$00F5			MOVWF	STACK_4+1
$0136	$082E			MOVF	_perror+2, 0
$0137	$00F6			MOVWF	STACK_4+2
$0138	$082F			MOVF	_perror+3, 0
$0139	$00F7			MOVWF	STACK_4+3
$013A	$0830			MOVF	_error, 0
$013B	$00F0			MOVWF	STACK_0
$013C	$0831			MOVF	_error+1, 0
$013D	$00F1			MOVWF	STACK_0+1
$013E	$0832			MOVF	_error+2, 0
$013F	$00F2			MOVWF	STACK_0+2
$0140	$0833			MOVF	_error+3, 0
$0141	$00F3			MOVWF	STACK_0+3
$0142	$158A			BSF	PCLATH, 3
$0143	$23A1			CALL	_sub_32x32_fp
$0144	$118A			BCF	PCLATH, 3
$0145	$0870			MOVF	STACK_0, 0
$0146	$00D6			MOVWF	FLOC_main+4
$0147	$0871			MOVF	STACK_0+1, 0
$0148	$00D7			MOVWF	FLOC_main+5
$0149	$0872			MOVF	STACK_0+2, 0
$014A	$00D8			MOVWF	FLOC_main+6
$014B	$0873			MOVF	STACK_0+3, 0
$014C	$00D9			MOVWF	FLOC_main+7
$014D	$0856			MOVF	FLOC_main+4, 0
$014E	$00C8			MOVWF	_DERIVATIVE
$014F	$0857			MOVF	FLOC_main+5, 0
$0150	$00C9			MOVWF	_DERIVATIVE+1
$0151	$0858			MOVF	FLOC_main+6, 0
$0152	$00CA			MOVWF	_DERIVATIVE+2
$0153	$0859			MOVF	FLOC_main+7, 0
$0154	$00CB			MOVWF	_DERIVATIVE+3
;lfr_runner_5sen_tsop.c,144 :: 		correction = ( (PROPORTIONAL) + (INTEGRAL) + (DERIVATIVE*kd));
$0155	$085A			MOVF	FLOC_main+8, 0
$0156	$00F0			MOVWF	STACK_0
$0157	$085B			MOVF	FLOC_main+9, 0
$0158	$00F1			MOVWF	STACK_0+1
$0159	$085C			MOVF	FLOC_main+10, 0
$015A	$00F2			MOVWF	STACK_0+2
$015B	$085D			MOVF	FLOC_main+11, 0
$015C	$00F3			MOVWF	STACK_0+3
$015D	$0852			MOVF	FLOC_main+0, 0
$015E	$00F4			MOVWF	STACK_4
$015F	$0853			MOVF	FLOC_main+1, 0
$0160	$00F5			MOVWF	STACK_4+1
$0161	$0854			MOVF	FLOC_main+2, 0
$0162	$00F6			MOVWF	STACK_4+2
$0163	$0855			MOVF	FLOC_main+3, 0
$0164	$00F7			MOVWF	STACK_4+3
$0165	$25EF			CALL	_add_32x32_fp
$0166	$0870			MOVF	STACK_0, 0
$0167	$00D2			MOVWF	FLOC_main+0
$0168	$0871			MOVF	STACK_0+1, 0
$0169	$00D3			MOVWF	FLOC_main+1
$016A	$0872			MOVF	STACK_0+2, 0
$016B	$00D4			MOVWF	FLOC_main+2
$016C	$0873			MOVF	STACK_0+3, 0
$016D	$00D5			MOVWF	FLOC_main+3
$016E	$0837			MOVF	_Kd, 0
$016F	$00F0			MOVWF	STACK_0
$0170	$158A			BSF	PCLATH, 3
$0171	$2355			CALL	_byte2double
$0172	$118A			BCF	PCLATH, 3
$0173	$0856			MOVF	FLOC_main+4, 0
$0174	$00F4			MOVWF	STACK_4
$0175	$0857			MOVF	FLOC_main+5, 0
$0176	$00F5			MOVWF	STACK_4+1
$0177	$0858			MOVF	FLOC_main+6, 0
$0178	$00F6			MOVWF	STACK_4+2
$0179	$0859			MOVF	FLOC_main+7, 0
$017A	$00F7			MOVWF	STACK_4+3
$017B	$2697			CALL	_mul_32x32_fp
$017C	$0852			MOVF	FLOC_main+0, 0
$017D	$00F4			MOVWF	STACK_4
$017E	$0853			MOVF	FLOC_main+1, 0
$017F	$00F5			MOVWF	STACK_4+1
$0180	$0854			MOVF	FLOC_main+2, 0
$0181	$00F6			MOVWF	STACK_4+2
$0182	$0855			MOVF	FLOC_main+3, 0
$0183	$00F7			MOVWF	STACK_4+3
$0184	$25EF			CALL	_add_32x32_fp
$0185	$0870			MOVF	STACK_0, 0
$0186	$00D6			MOVWF	FLOC_main+4
$0187	$0871			MOVF	STACK_0+1, 0
$0188	$00D7			MOVWF	FLOC_main+5
$0189	$0872			MOVF	STACK_0+2, 0
$018A	$00D8			MOVWF	FLOC_main+6
$018B	$0873			MOVF	STACK_0+3, 0
$018C	$00D9			MOVWF	FLOC_main+7
$018D	$0856			MOVF	FLOC_main+4, 0
$018E	$00CC			MOVWF	_correction
$018F	$0857			MOVF	FLOC_main+5, 0
$0190	$00CD			MOVWF	_correction+1
$0191	$0858			MOVF	FLOC_main+6, 0
$0192	$00CE			MOVWF	_correction+2
$0193	$0859			MOVF	FLOC_main+7, 0
$0194	$00CF			MOVWF	_correction+3
;lfr_runner_5sen_tsop.c,145 :: 		rightpulse =  basespeed + correction;
$0195	$0834			MOVF	_basespeed, 0
$0196	$00F0			MOVWF	STACK_0
$0197	$158A			BSF	PCLATH, 3
$0198	$2355			CALL	_byte2double
$0199	$118A			BCF	PCLATH, 3
$019A	$0870			MOVF	STACK_0, 0
$019B	$00D2			MOVWF	FLOC_main+0
$019C	$0871			MOVF	STACK_0+1, 0
$019D	$00D3			MOVWF	FLOC_main+1
$019E	$0872			MOVF	STACK_0+2, 0
$019F	$00D4			MOVWF	FLOC_main+2
$01A0	$0873			MOVF	STACK_0+3, 0
$01A1	$00D5			MOVWF	FLOC_main+3
$01A2	$0852			MOVF	FLOC_main+0, 0
$01A3	$00F0			MOVWF	STACK_0
$01A4	$0853			MOVF	FLOC_main+1, 0
$01A5	$00F1			MOVWF	STACK_0+1
$01A6	$0854			MOVF	FLOC_main+2, 0
$01A7	$00F2			MOVWF	STACK_0+2
$01A8	$0855			MOVF	FLOC_main+3, 0
$01A9	$00F3			MOVWF	STACK_0+3
$01AA	$0856			MOVF	FLOC_main+4, 0
$01AB	$00F4			MOVWF	STACK_4
$01AC	$0857			MOVF	FLOC_main+5, 0
$01AD	$00F5			MOVWF	STACK_4+1
$01AE	$0858			MOVF	FLOC_main+6, 0
$01AF	$00F6			MOVWF	STACK_4+2
$01B0	$0859			MOVF	FLOC_main+7, 0
$01B1	$00F7			MOVWF	STACK_4+3
$01B2	$25EF			CALL	_add_32x32_fp
$01B3	$0870			MOVF	STACK_0, 0
$01B4	$00B8			MOVWF	_rightpulse
$01B5	$0871			MOVF	STACK_0+1, 0
$01B6	$00B9			MOVWF	_rightpulse+1
$01B7	$0872			MOVF	STACK_0+2, 0
$01B8	$00BA			MOVWF	_rightpulse+2
$01B9	$0873			MOVF	STACK_0+3, 0
$01BA	$00BB			MOVWF	_rightpulse+3
;lfr_runner_5sen_tsop.c,146 :: 		leftpulse = basespeed - correction;
$01BB	$0856			MOVF	FLOC_main+4, 0
$01BC	$00F4			MOVWF	STACK_4
$01BD	$0857			MOVF	FLOC_main+5, 0
$01BE	$00F5			MOVWF	STACK_4+1
$01BF	$0858			MOVF	FLOC_main+6, 0
$01C0	$00F6			MOVWF	STACK_4+2
$01C1	$0859			MOVF	FLOC_main+7, 0
$01C2	$00F7			MOVWF	STACK_4+3
$01C3	$0852			MOVF	FLOC_main+0, 0
$01C4	$00F0			MOVWF	STACK_0
$01C5	$0853			MOVF	FLOC_main+1, 0
$01C6	$00F1			MOVWF	STACK_0+1
$01C7	$0854			MOVF	FLOC_main+2, 0
$01C8	$00F2			MOVWF	STACK_0+2
$01C9	$0855			MOVF	FLOC_main+3, 0
$01CA	$00F3			MOVWF	STACK_0+3
$01CB	$158A			BSF	PCLATH, 3
$01CC	$23A1			CALL	_sub_32x32_fp
$01CD	$118A			BCF	PCLATH, 3
$01CE	$0870			MOVF	STACK_0, 0
$01CF	$00BC			MOVWF	_leftpulse
$01D0	$0871			MOVF	STACK_0+1, 0
$01D1	$00BD			MOVWF	_leftpulse+1
$01D2	$0872			MOVF	STACK_0+2, 0
$01D3	$00BE			MOVWF	_leftpulse+2
$01D4	$0873			MOVF	STACK_0+3, 0
$01D5	$00BF			MOVWF	_leftpulse+3
;lfr_runner_5sen_tsop.c,147 :: 		motor_RF();
$01D6	$158A			BSF	PCLATH, 3
$01D7	$23D3			CALL	_motor_RF
$01D8	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop.c,148 :: 		motor_LF();
$01D9	$158A			BSF	PCLATH, 3
$01DA	$23D8			CALL	_motor_LF
$01DB	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop.c,150 :: 		if(leftpulse > 255)                 //LEFT CORRECTION EXCEED
$01DC	$083C			MOVF	_leftpulse, 0
$01DD	$00F4			MOVWF	STACK_4
$01DE	$083D			MOVF	_leftpulse+1, 0
$01DF	$00F5			MOVWF	STACK_4+1
$01E0	$083E			MOVF	_leftpulse+2, 0
$01E1	$00F6			MOVWF	STACK_4+2
$01E2	$083F			MOVF	_leftpulse+3, 0
$01E3	$00F7			MOVWF	STACK_4+3
$01E4	$3000			MOVLW	0
$01E5	$00F0			MOVWF	STACK_0
$01E6	$3000			MOVLW	0
$01E7	$00F1			MOVWF	STACK_0+1
$01E8	$307F			MOVLW	127
$01E9	$00F2			MOVWF	STACK_0+2
$01EA	$3086			MOVLW	134
$01EB	$00F3			MOVWF	STACK_0+3
$01EC	$158A			BSF	PCLATH, 3
$01ED	$20F8			CALL	_compare_double
$01EE	$118A			BCF	PCLATH, 3
$01EF	$3001			MOVLW	1
$01F0	$1803			BTFSC	STATUS, C
$01F1	$3000			MOVLW	0
$01F2	$00F0			MOVWF	STACK_0
$01F3	$0870			MOVF	STACK_0, 0
$01F4	$1903			BTFSC	STATUS, Z
$01F5	$29FE			GOTO	L_main_14
;lfr_runner_5sen_tsop.c,151 :: 		leftpulse = 255;
$01F6	$3000			MOVLW	0
$01F7	$00BC			MOVWF	_leftpulse
$01F8	$3000			MOVLW	0
$01F9	$00BD			MOVWF	_leftpulse+1
$01FA	$307F			MOVLW	127
$01FB	$00BE			MOVWF	_leftpulse+2
$01FC	$3086			MOVLW	134
$01FD	$00BF			MOVWF	_leftpulse+3
$01FE	$	L_main_14:
;lfr_runner_5sen_tsop.c,153 :: 		if(rightpulse > 255)                //RIGHT CORRECTION EXCEED
$01FE	$0838			MOVF	_rightpulse, 0
$01FF	$00F4			MOVWF	STACK_4
$0200	$0839			MOVF	_rightpulse+1, 0
$0201	$00F5			MOVWF	STACK_4+1
$0202	$083A			MOVF	_rightpulse+2, 0
$0203	$00F6			MOVWF	STACK_4+2
$0204	$083B			MOVF	_rightpulse+3, 0
$0205	$00F7			MOVWF	STACK_4+3
$0206	$3000			MOVLW	0
$0207	$00F0			MOVWF	STACK_0
$0208	$3000			MOVLW	0
$0209	$00F1			MOVWF	STACK_0+1
$020A	$307F			MOVLW	127
$020B	$00F2			MOVWF	STACK_0+2
$020C	$3086			MOVLW	134
$020D	$00F3			MOVWF	STACK_0+3
$020E	$158A			BSF	PCLATH, 3
$020F	$20F8			CALL	_compare_double
$0210	$118A			BCF	PCLATH, 3
$0211	$3001			MOVLW	1
$0212	$1803			BTFSC	STATUS, C
$0213	$3000			MOVLW	0
$0214	$00F0			MOVWF	STACK_0
$0215	$0870			MOVF	STACK_0, 0
$0216	$1903			BTFSC	STATUS, Z
$0217	$2A20			GOTO	L_main_15
;lfr_runner_5sen_tsop.c,154 :: 		rightpulse = 255;
$0218	$3000			MOVLW	0
$0219	$00B8			MOVWF	_rightpulse
$021A	$3000			MOVLW	0
$021B	$00B9			MOVWF	_rightpulse+1
$021C	$307F			MOVLW	127
$021D	$00BA			MOVWF	_rightpulse+2
$021E	$3086			MOVLW	134
$021F	$00BB			MOVWF	_rightpulse+3
$0220	$	L_main_15:
;lfr_runner_5sen_tsop.c,156 :: 		if(leftpulse < 0)                   //LEFT CORRECTION EXCEED
$0220	$01F4			CLRF	STACK_4
$0221	$01F5			CLRF	STACK_4+1
$0222	$01F6			CLRF	STACK_4+2
$0223	$01F7			CLRF	STACK_4+3
$0224	$083C			MOVF	_leftpulse, 0
$0225	$00F0			MOVWF	STACK_0
$0226	$083D			MOVF	_leftpulse+1, 0
$0227	$00F1			MOVWF	STACK_0+1
$0228	$083E			MOVF	_leftpulse+2, 0
$0229	$00F2			MOVWF	STACK_0+2
$022A	$083F			MOVF	_leftpulse+3, 0
$022B	$00F3			MOVWF	STACK_0+3
$022C	$158A			BSF	PCLATH, 3
$022D	$20F8			CALL	_compare_double
$022E	$118A			BCF	PCLATH, 3
$022F	$3001			MOVLW	1
$0230	$1803			BTFSC	STATUS, C
$0231	$3000			MOVLW	0
$0232	$00F0			MOVWF	STACK_0
$0233	$0870			MOVF	STACK_0, 0
$0234	$1903			BTFSC	STATUS, Z
$0235	$2A3A			GOTO	L_main_16
;lfr_runner_5sen_tsop.c,157 :: 		leftpulse = 0;
$0236	$01BC			CLRF	_leftpulse
$0237	$01BD			CLRF	_leftpulse+1
$0238	$01BE			CLRF	_leftpulse+2
$0239	$01BF			CLRF	_leftpulse+3
$023A	$	L_main_16:
;lfr_runner_5sen_tsop.c,159 :: 		if(rightpulse < 0)                  //RIGHT CORRECTION EXCEED
$023A	$01F4			CLRF	STACK_4
$023B	$01F5			CLRF	STACK_4+1
$023C	$01F6			CLRF	STACK_4+2
$023D	$01F7			CLRF	STACK_4+3
$023E	$0838			MOVF	_rightpulse, 0
$023F	$00F0			MOVWF	STACK_0
$0240	$0839			MOVF	_rightpulse+1, 0
$0241	$00F1			MOVWF	STACK_0+1
$0242	$083A			MOVF	_rightpulse+2, 0
$0243	$00F2			MOVWF	STACK_0+2
$0244	$083B			MOVF	_rightpulse+3, 0
$0245	$00F3			MOVWF	STACK_0+3
$0246	$158A			BSF	PCLATH, 3
$0247	$20F8			CALL	_compare_double
$0248	$118A			BCF	PCLATH, 3
$0249	$3001			MOVLW	1
$024A	$1803			BTFSC	STATUS, C
$024B	$3000			MOVLW	0
$024C	$00F0			MOVWF	STACK_0
$024D	$0870			MOVF	STACK_0, 0
$024E	$1903			BTFSC	STATUS, Z
$024F	$2A54			GOTO	L_main_17
;lfr_runner_5sen_tsop.c,160 :: 		rightpulse = 0;
$0250	$01B8			CLRF	_rightpulse
$0251	$01B9			CLRF	_rightpulse+1
$0252	$01BA			CLRF	_rightpulse+2
$0253	$01BB			CLRF	_rightpulse+3
$0254	$	L_main_17:
;lfr_runner_5sen_tsop.c,162 :: 		PWM1_CHANGE_DUTY(rightpulse);
$0254	$0838			MOVF	_rightpulse, 0
$0255	$00F0			MOVWF	STACK_0
$0256	$0839			MOVF	_rightpulse+1, 0
$0257	$00F1			MOVWF	STACK_0+1
$0258	$083A			MOVF	_rightpulse+2, 0
$0259	$00F2			MOVWF	STACK_0+2
$025A	$083B			MOVF	_rightpulse+3, 0
$025B	$00F3			MOVWF	STACK_0+3
$025C	$158A			BSF	PCLATH, 3
$025D	$21E1			CALL	_double2byte
$025E	$118A			BCF	PCLATH, 3
$025F	$0870			MOVF	STACK_0, 0
$0260	$00DE			MOVWF	FARG_PWM1_Change_Duty+0
$0261	$158A			BSF	PCLATH, 3
$0262	$2224			CALL	_PWM1_Change_Duty
$0263	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop.c,163 :: 		PWM2_CHANGE_DUTY(leftpulse);
$0264	$083C			MOVF	_leftpulse, 0
$0265	$00F0			MOVWF	STACK_0
$0266	$083D			MOVF	_leftpulse+1, 0
$0267	$00F1			MOVWF	STACK_0+1
$0268	$083E			MOVF	_leftpulse+2, 0
$0269	$00F2			MOVWF	STACK_0+2
$026A	$083F			MOVF	_leftpulse+3, 0
$026B	$00F3			MOVWF	STACK_0+3
$026C	$158A			BSF	PCLATH, 3
$026D	$21E1			CALL	_double2byte
$026E	$118A			BCF	PCLATH, 3
$026F	$0870			MOVF	STACK_0, 0
$0270	$00DE			MOVWF	FARG_PWM2_Change_Duty+0
$0271	$158A			BSF	PCLATH, 3
$0272	$228E			CALL	_PWM2_Change_Duty
$0273	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop.c,164 :: 		}
$0274	$	L_main_13:
;lfr_runner_5sen_tsop.c,165 :: 		delay_ms(10);
$0274	$300D			MOVLW	13
$0275	$00FB			MOVWF	STACK_11
$0276	$30FF			MOVLW	255
$0277	$00FA			MOVWF	STACK_10
$0278	$0BFB			DECFSZ	STACK_11, F
$0279	$2A7B			GOTO	$+2
$027A	$2A7E			GOTO	$+4
$027B	$0BFA			DECFSZ	STACK_10, F
$027C	$2A7B			GOTO	$-1
$027D	$2A78			GOTO	$-5
$027E	$30F3			MOVLW	243
$027F	$00FA			MOVWF	STACK_10
$0280	$0BFA			DECFSZ	STACK_10, F
$0281	$2A80			GOTO	$-1
$0282	$0000			NOP
;lfr_runner_5sen_tsop.c,167 :: 		if (PORTB.F7==0)
$0283	$3000			MOVLW	0
$0284	$1B86			BTFSC	PORTB, 7
$0285	$3001			MOVLW	1
$0286	$00F4			MOVWF	STACK_4
$0287	$0874			MOVF	STACK_4, 0
$0288	$3A00			XORLW	0
$0289	$1903			BTFSC	STATUS, Z
$028A	$2A8C			GOTO	___main_back
;lfr_runner_5sen_tsop.c,168 :: 		goto back;
$028B	$	L_main_18:
;lfr_runner_5sen_tsop.c,169 :: 		}
$028B	$280B			GOTO	L_main_5
;lfr_runner_5sen_tsop.c,170 :: 		back:
$028C	$	___main_back:
;lfr_runner_5sen_tsop.c,172 :: 		while(1)                                  // reverse
$028C	$	L_main_19:
;lfr_runner_5sen_tsop.c,174 :: 		indicator();
$028C	$158A			BSF	PCLATH, 3
$028D	$22C7			CALL	_indicator
$028E	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop.c,175 :: 		CalcError();
$028F	$250E			CALL	_CalcError
;lfr_runner_5sen_tsop.c,176 :: 		if((error == 0) && (s3==1) && ((s1+s2+s4+s5)==0))
$0290	$01F4			CLRF	STACK_4
$0291	$01F5			CLRF	STACK_4+1
$0292	$01F6			CLRF	STACK_4+2
$0293	$01F7			CLRF	STACK_4+3
$0294	$0830			MOVF	_error, 0
$0295	$00F0			MOVWF	STACK_0
$0296	$0831			MOVF	_error+1, 0
$0297	$00F1			MOVWF	STACK_0+1
$0298	$0832			MOVF	_error+2, 0
$0299	$00F2			MOVWF	STACK_0+2
$029A	$0833			MOVF	_error+3, 0
$029B	$00F3			MOVWF	STACK_0+3
$029C	$158A			BSF	PCLATH, 3
$029D	$233F			CALL	_equals_double
$029E	$118A			BCF	PCLATH, 3
$029F	$3001			MOVLW	1
$02A0	$1D03			BTFSS	STATUS, Z
$02A1	$3000			MOVLW	0
$02A2	$00F0			MOVWF	STACK_0
$02A3	$0870			MOVF	STACK_0, 0
$02A4	$1903			BTFSC	STATUS, Z
$02A5	$2AEB			GOTO	L_main_23
$02A6	$3000			MOVLW	0
$02A7	$0626			XORWF	_s3+1, 0
$02A8	$1D03			BTFSS	STATUS, Z
$02A9	$2AAC			GOTO	L_main_40
$02AA	$3001			MOVLW	1
$02AB	$0625			XORWF	_s3, 0
$02AC	$	L_main_40:
$02AC	$1D03			BTFSS	STATUS, Z
$02AD	$2AEB			GOTO	L_main_23
$02AE	$0823			MOVF	_s2, 0
$02AF	$0721			ADDWF	_s1, 0
$02B0	$00F0			MOVWF	STACK_0
$02B1	$0822			MOVF	_s1+1, 0
$02B2	$1803			BTFSC	STATUS, C
$02B3	$3F01			ADDLW	1
$02B4	$0724			ADDWF	_s2+1, 0
$02B5	$00F1			MOVWF	STACK_0+1
$02B6	$0827			MOVF	_s4, 0
$02B7	$07F0			ADDWF	STACK_0, 1
$02B8	$0828			MOVF	_s4+1, 0
$02B9	$1803			BTFSC	STATUS, C
$02BA	$3F01			ADDLW	1
$02BB	$07F1			ADDWF	STACK_0+1, 1
$02BC	$0829			MOVF	_s5, 0
$02BD	$0770			ADDWF	STACK_0, 0
$02BE	$00F4			MOVWF	STACK_4
$02BF	$0871			MOVF	STACK_0+1, 0
$02C0	$1803			BTFSC	STATUS, C
$02C1	$3F01			ADDLW	1
$02C2	$072A			ADDWF	_s5+1, 0
$02C3	$00F5			MOVWF	STACK_4+1
$02C4	$3000			MOVLW	0
$02C5	$0675			XORWF	STACK_4+1, 0
$02C6	$1D03			BTFSS	STATUS, Z
$02C7	$2ACA			GOTO	L_main_41
$02C8	$3000			MOVLW	0
$02C9	$0674			XORWF	STACK_4, 0
$02CA	$	L_main_41:
$02CA	$1D03			BTFSS	STATUS, Z
$02CB	$2AEB			GOTO	L_main_23
$02CC	$	L299_ex_L_main_23:
;lfr_runner_5sen_tsop.c,178 :: 		motor_LB();					        	      //FWD AT FULL SPEED
$02CC	$158A			BSF	PCLATH, 3
$02CD	$23CE			CALL	_motor_LB
$02CE	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop.c,179 :: 		motor_RB();
$02CF	$158A			BSF	PCLATH, 3
$02D0	$23DD			CALL	_motor_RB
$02D1	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop.c,180 :: 		PWM1_CHANGE_DUTY(255);
$02D2	$30FF			MOVLW	255
$02D3	$00DE			MOVWF	FARG_PWM1_Change_Duty+0
$02D4	$158A			BSF	PCLATH, 3
$02D5	$2224			CALL	_PWM1_Change_Duty
$02D6	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop.c,181 :: 		PWM2_CHANGE_DUTY(255);
$02D7	$30FF			MOVLW	255
$02D8	$00DE			MOVWF	FARG_PWM2_Change_Duty+0
$02D9	$158A			BSF	PCLATH, 3
$02DA	$228E			CALL	_PWM2_Change_Duty
$02DB	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop.c,182 :: 		delay_ms(10);
$02DC	$300D			MOVLW	13
$02DD	$00FB			MOVWF	STACK_11
$02DE	$30FF			MOVLW	255
$02DF	$00FA			MOVWF	STACK_10
$02E0	$0BFB			DECFSZ	STACK_11, F
$02E1	$2AE3			GOTO	$+2
$02E2	$2AE6			GOTO	$+4
$02E3	$0BFA			DECFSZ	STACK_10, F
$02E4	$2AE3			GOTO	$-1
$02E5	$2AE0			GOTO	$-5
$02E6	$30F3			MOVLW	243
$02E7	$00FA			MOVWF	STACK_10
$02E8	$0BFA			DECFSZ	STACK_10, F
$02E9	$2AE8			GOTO	$-1
$02EA	$0000			NOP
;lfr_runner_5sen_tsop.c,183 :: 		}
$02EB	$	L_main_23:
;lfr_runner_5sen_tsop.c,184 :: 		if((s1+s2+s3+s4+s5) == 0)		            //ROBOT HAS OVERSHOOT
$02EB	$0823			MOVF	_s2, 0
$02EC	$0721			ADDWF	_s1, 0
$02ED	$00F0			MOVWF	STACK_0
$02EE	$0822			MOVF	_s1+1, 0
$02EF	$1803			BTFSC	STATUS, C
$02F0	$3F01			ADDLW	1
$02F1	$0724			ADDWF	_s2+1, 0
$02F2	$00F1			MOVWF	STACK_0+1
$02F3	$0825			MOVF	_s3, 0
$02F4	$07F0			ADDWF	STACK_0, 1
$02F5	$0826			MOVF	_s3+1, 0
$02F6	$1803			BTFSC	STATUS, C
$02F7	$3F01			ADDLW	1
$02F8	$07F1			ADDWF	STACK_0+1, 1
$02F9	$0827			MOVF	_s4, 0
$02FA	$07F0			ADDWF	STACK_0, 1
$02FB	$0828			MOVF	_s4+1, 0
$02FC	$1803			BTFSC	STATUS, C
$02FD	$3F01			ADDLW	1
$02FE	$07F1			ADDWF	STACK_0+1, 1
$02FF	$0829			MOVF	_s5, 0
$0300	$0770			ADDWF	STACK_0, 0
$0301	$00F4			MOVWF	STACK_4
$0302	$0871			MOVF	STACK_0+1, 0
$0303	$1803			BTFSC	STATUS, C
$0304	$3F01			ADDLW	1
$0305	$072A			ADDWF	_s5+1, 0
$0306	$00F5			MOVWF	STACK_4+1
$0307	$3000			MOVLW	0
$0308	$0675			XORWF	STACK_4+1, 0
$0309	$1D03			BTFSS	STATUS, Z
$030A	$2B0D			GOTO	L_main_42
$030B	$3000			MOVLW	0
$030C	$0674			XORWF	STACK_4, 0
$030D	$	L_main_42:
$030D	$1D03			BTFSS	STATUS, Z
$030E	$2B56			GOTO	L_main_24
;lfr_runner_5sen_tsop.c,186 :: 		if(lastreading == 'r')				      //CHECKS IF THE LAST SENSOR ACTIVATED WAS RIGHT
$030F	$082B			MOVF	_lastreading, 0
$0310	$3A72			XORLW	114
$0311	$1D03			BTFSS	STATUS, Z
$0312	$2B32			GOTO	L_main_25
;lfr_runner_5sen_tsop.c,188 :: 		motor_RF();						          //TURN RIGHT AT FULL SPEED
$0313	$158A			BSF	PCLATH, 3
$0314	$23D3			CALL	_motor_RF
$0315	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop.c,189 :: 		motor_LB();
$0316	$158A			BSF	PCLATH, 3
$0317	$23CE			CALL	_motor_LB
$0318	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop.c,190 :: 		PWM1_CHANGE_DUTY(255);
$0319	$30FF			MOVLW	255
$031A	$00DE			MOVWF	FARG_PWM1_Change_Duty+0
$031B	$158A			BSF	PCLATH, 3
$031C	$2224			CALL	_PWM1_Change_Duty
$031D	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop.c,191 :: 		PWM2_CHANGE_DUTY(255);
$031E	$30FF			MOVLW	255
$031F	$00DE			MOVWF	FARG_PWM2_Change_Duty+0
$0320	$158A			BSF	PCLATH, 3
$0321	$228E			CALL	_PWM2_Change_Duty
$0322	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop.c,192 :: 		delay_ms(10);
$0323	$300D			MOVLW	13
$0324	$00FB			MOVWF	STACK_11
$0325	$30FF			MOVLW	255
$0326	$00FA			MOVWF	STACK_10
$0327	$0BFB			DECFSZ	STACK_11, F
$0328	$2B2A			GOTO	$+2
$0329	$2B2D			GOTO	$+4
$032A	$0BFA			DECFSZ	STACK_10, F
$032B	$2B2A			GOTO	$-1
$032C	$2B27			GOTO	$-5
$032D	$30F3			MOVLW	243
$032E	$00FA			MOVWF	STACK_10
$032F	$0BFA			DECFSZ	STACK_10, F
$0330	$2B2F			GOTO	$-1
$0331	$0000			NOP
;lfr_runner_5sen_tsop.c,193 :: 		}
$0332	$	L_main_25:
;lfr_runner_5sen_tsop.c,194 :: 		if(lastreading == 'l')			        //CHECKS IF THE LAST SENSOR ACTIVATED WAS LEFT
$0332	$082B			MOVF	_lastreading, 0
$0333	$3A6C			XORLW	108
$0334	$1D03			BTFSS	STATUS, Z
$0335	$2B55			GOTO	L_main_26
;lfr_runner_5sen_tsop.c,196 :: 		motor_LF();					        	  //TURN LEFT AT FULL SPEED
$0336	$158A			BSF	PCLATH, 3
$0337	$23D8			CALL	_motor_LF
$0338	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop.c,197 :: 		motor_RB();
$0339	$158A			BSF	PCLATH, 3
$033A	$23DD			CALL	_motor_RB
$033B	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop.c,198 :: 		PWM1_CHANGE_DUTY(255);
$033C	$30FF			MOVLW	255
$033D	$00DE			MOVWF	FARG_PWM1_Change_Duty+0
$033E	$158A			BSF	PCLATH, 3
$033F	$2224			CALL	_PWM1_Change_Duty
$0340	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop.c,199 :: 		PWM2_CHANGE_DUTY(255);
$0341	$30FF			MOVLW	255
$0342	$00DE			MOVWF	FARG_PWM2_Change_Duty+0
$0343	$158A			BSF	PCLATH, 3
$0344	$228E			CALL	_PWM2_Change_Duty
$0345	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop.c,200 :: 		delay_ms(10);
$0346	$300D			MOVLW	13
$0347	$00FB			MOVWF	STACK_11
$0348	$30FF			MOVLW	255
$0349	$00FA			MOVWF	STACK_10
$034A	$0BFB			DECFSZ	STACK_11, F
$034B	$2B4D			GOTO	$+2
$034C	$2B50			GOTO	$+4
$034D	$0BFA			DECFSZ	STACK_10, F
$034E	$2B4D			GOTO	$-1
$034F	$2B4A			GOTO	$-5
$0350	$30F3			MOVLW	243
$0351	$00FA			MOVWF	STACK_10
$0352	$0BFA			DECFSZ	STACK_10, F
$0353	$2B52			GOTO	$-1
$0354	$0000			NOP
;lfr_runner_5sen_tsop.c,201 :: 		}
$0355	$	L_main_26:
;lfr_runner_5sen_tsop.c,202 :: 		}
$0355	$2CF5			GOTO	L_main_27
$0356	$	L_main_24:
;lfr_runner_5sen_tsop.c,205 :: 		PROPORTIONAL = error * kp;
$0356	$0835			MOVF	_Kp, 0
$0357	$00F0			MOVWF	STACK_0
$0358	$158A			BSF	PCLATH, 3
$0359	$2355			CALL	_byte2double
$035A	$118A			BCF	PCLATH, 3
$035B	$0830			MOVF	_error, 0
$035C	$00F4			MOVWF	STACK_4
$035D	$0831			MOVF	_error+1, 0
$035E	$00F5			MOVWF	STACK_4+1
$035F	$0832			MOVF	_error+2, 0
$0360	$00F6			MOVWF	STACK_4+2
$0361	$0833			MOVF	_error+3, 0
$0362	$00F7			MOVWF	STACK_4+3
$0363	$2697			CALL	_mul_32x32_fp
$0364	$0870			MOVF	STACK_0, 0
$0365	$00DA			MOVWF	FLOC_main+8
$0366	$0871			MOVF	STACK_0+1, 0
$0367	$00DB			MOVWF	FLOC_main+9
$0368	$0872			MOVF	STACK_0+2, 0
$0369	$00DC			MOVWF	FLOC_main+10
$036A	$0873			MOVF	STACK_0+3, 0
$036B	$00DD			MOVWF	FLOC_main+11
$036C	$085A			MOVF	FLOC_main+8, 0
$036D	$00C0			MOVWF	_PROPORTIONAL
$036E	$085B			MOVF	FLOC_main+9, 0
$036F	$00C1			MOVWF	_PROPORTIONAL+1
$0370	$085C			MOVF	FLOC_main+10, 0
$0371	$00C2			MOVWF	_PROPORTIONAL+2
$0372	$085D			MOVF	FLOC_main+11, 0
$0373	$00C3			MOVWF	_PROPORTIONAL+3
;lfr_runner_5sen_tsop.c,206 :: 		INTEGRAL += error ;
$0374	$0844			MOVF	_INTEGRAL, 0
$0375	$00F0			MOVWF	STACK_0
$0376	$0845			MOVF	_INTEGRAL+1, 0
$0377	$00F1			MOVWF	STACK_0+1
$0378	$0846			MOVF	_INTEGRAL+2, 0
$0379	$00F2			MOVWF	STACK_0+2
$037A	$0847			MOVF	_INTEGRAL+3, 0
$037B	$00F3			MOVWF	STACK_0+3
$037C	$0830			MOVF	_error, 0
$037D	$00F4			MOVWF	STACK_4
$037E	$0831			MOVF	_error+1, 0
$037F	$00F5			MOVWF	STACK_4+1
$0380	$0832			MOVF	_error+2, 0
$0381	$00F6			MOVWF	STACK_4+2
$0382	$0833			MOVF	_error+3, 0
$0383	$00F7			MOVWF	STACK_4+3
$0384	$25EF			CALL	_add_32x32_fp
$0385	$0870			MOVF	STACK_0, 0
$0386	$00D2			MOVWF	FLOC_main+0
$0387	$0871			MOVF	STACK_0+1, 0
$0388	$00D3			MOVWF	FLOC_main+1
$0389	$0872			MOVF	STACK_0+2, 0
$038A	$00D4			MOVWF	FLOC_main+2
$038B	$0873			MOVF	STACK_0+3, 0
$038C	$00D5			MOVWF	FLOC_main+3
$038D	$0852			MOVF	FLOC_main+0, 0
$038E	$00C4			MOVWF	_INTEGRAL
$038F	$0853			MOVF	FLOC_main+1, 0
$0390	$00C5			MOVWF	_INTEGRAL+1
$0391	$0854			MOVF	FLOC_main+2, 0
$0392	$00C6			MOVWF	_INTEGRAL+2
$0393	$0855			MOVF	FLOC_main+3, 0
$0394	$00C7			MOVWF	_INTEGRAL+3
;lfr_runner_5sen_tsop.c,207 :: 		INTEGRAL *= ki;
$0395	$0836			MOVF	_Ki, 0
$0396	$00F0			MOVWF	STACK_0
$0397	$158A			BSF	PCLATH, 3
$0398	$2355			CALL	_byte2double
$0399	$118A			BCF	PCLATH, 3
$039A	$0852			MOVF	FLOC_main+0, 0
$039B	$00F4			MOVWF	STACK_4
$039C	$0853			MOVF	FLOC_main+1, 0
$039D	$00F5			MOVWF	STACK_4+1
$039E	$0854			MOVF	FLOC_main+2, 0
$039F	$00F6			MOVWF	STACK_4+2
$03A0	$0855			MOVF	FLOC_main+3, 0
$03A1	$00F7			MOVWF	STACK_4+3
$03A2	$2697			CALL	_mul_32x32_fp
$03A3	$0870			MOVF	STACK_0, 0
$03A4	$00D2			MOVWF	FLOC_main+0
$03A5	$0871			MOVF	STACK_0+1, 0
$03A6	$00D3			MOVWF	FLOC_main+1
$03A7	$0872			MOVF	STACK_0+2, 0
$03A8	$00D4			MOVWF	FLOC_main+2
$03A9	$0873			MOVF	STACK_0+3, 0
$03AA	$00D5			MOVWF	FLOC_main+3
$03AB	$0852			MOVF	FLOC_main+0, 0
$03AC	$00C4			MOVWF	_INTEGRAL
$03AD	$0853			MOVF	FLOC_main+1, 0
$03AE	$00C5			MOVWF	_INTEGRAL+1
$03AF	$0854			MOVF	FLOC_main+2, 0
$03B0	$00C6			MOVWF	_INTEGRAL+2
$03B1	$0855			MOVF	FLOC_main+3, 0
$03B2	$00C7			MOVWF	_INTEGRAL+3
;lfr_runner_5sen_tsop.c,208 :: 		DERIVATIVE = (error - perror);
$03B3	$082C			MOVF	_perror, 0
$03B4	$00F4			MOVWF	STACK_4
$03B5	$082D			MOVF	_perror+1, 0
$03B6	$00F5			MOVWF	STACK_4+1
$03B7	$082E			MOVF	_perror+2, 0
$03B8	$00F6			MOVWF	STACK_4+2
$03B9	$082F			MOVF	_perror+3, 0
$03BA	$00F7			MOVWF	STACK_4+3
$03BB	$0830			MOVF	_error, 0
$03BC	$00F0			MOVWF	STACK_0
$03BD	$0831			MOVF	_error+1, 0
$03BE	$00F1			MOVWF	STACK_0+1
$03BF	$0832			MOVF	_error+2, 0
$03C0	$00F2			MOVWF	STACK_0+2
$03C1	$0833			MOVF	_error+3, 0
$03C2	$00F3			MOVWF	STACK_0+3
$03C3	$158A			BSF	PCLATH, 3
$03C4	$23A1			CALL	_sub_32x32_fp
$03C5	$118A			BCF	PCLATH, 3
$03C6	$0870			MOVF	STACK_0, 0
$03C7	$00D6			MOVWF	FLOC_main+4
$03C8	$0871			MOVF	STACK_0+1, 0
$03C9	$00D7			MOVWF	FLOC_main+5
$03CA	$0872			MOVF	STACK_0+2, 0
$03CB	$00D8			MOVWF	FLOC_main+6
$03CC	$0873			MOVF	STACK_0+3, 0
$03CD	$00D9			MOVWF	FLOC_main+7
$03CE	$0856			MOVF	FLOC_main+4, 0
$03CF	$00C8			MOVWF	_DERIVATIVE
$03D0	$0857			MOVF	FLOC_main+5, 0
$03D1	$00C9			MOVWF	_DERIVATIVE+1
$03D2	$0858			MOVF	FLOC_main+6, 0
$03D3	$00CA			MOVWF	_DERIVATIVE+2
$03D4	$0859			MOVF	FLOC_main+7, 0
$03D5	$00CB			MOVWF	_DERIVATIVE+3
;lfr_runner_5sen_tsop.c,209 :: 		correction = ( (PROPORTIONAL) + (INTEGRAL) + (DERIVATIVE*kd));
$03D6	$085A			MOVF	FLOC_main+8, 0
$03D7	$00F0			MOVWF	STACK_0
$03D8	$085B			MOVF	FLOC_main+9, 0
$03D9	$00F1			MOVWF	STACK_0+1
$03DA	$085C			MOVF	FLOC_main+10, 0
$03DB	$00F2			MOVWF	STACK_0+2
$03DC	$085D			MOVF	FLOC_main+11, 0
$03DD	$00F3			MOVWF	STACK_0+3
$03DE	$0852			MOVF	FLOC_main+0, 0
$03DF	$00F4			MOVWF	STACK_4
$03E0	$0853			MOVF	FLOC_main+1, 0
$03E1	$00F5			MOVWF	STACK_4+1
$03E2	$0854			MOVF	FLOC_main+2, 0
$03E3	$00F6			MOVWF	STACK_4+2
$03E4	$0855			MOVF	FLOC_main+3, 0
$03E5	$00F7			MOVWF	STACK_4+3
$03E6	$25EF			CALL	_add_32x32_fp
$03E7	$0870			MOVF	STACK_0, 0
$03E8	$00D2			MOVWF	FLOC_main+0
$03E9	$0871			MOVF	STACK_0+1, 0
$03EA	$00D3			MOVWF	FLOC_main+1
$03EB	$0872			MOVF	STACK_0+2, 0
$03EC	$00D4			MOVWF	FLOC_main+2
$03ED	$0873			MOVF	STACK_0+3, 0
$03EE	$00D5			MOVWF	FLOC_main+3
$03EF	$0837			MOVF	_Kd, 0
$03F0	$00F0			MOVWF	STACK_0
$03F1	$158A			BSF	PCLATH, 3
$03F2	$2355			CALL	_byte2double
$03F3	$118A			BCF	PCLATH, 3
$03F4	$0856			MOVF	FLOC_main+4, 0
$03F5	$00F4			MOVWF	STACK_4
$03F6	$0857			MOVF	FLOC_main+5, 0
$03F7	$00F5			MOVWF	STACK_4+1
$03F8	$0858			MOVF	FLOC_main+6, 0
$03F9	$00F6			MOVWF	STACK_4+2
$03FA	$0859			MOVF	FLOC_main+7, 0
$03FB	$00F7			MOVWF	STACK_4+3
$03FC	$2697			CALL	_mul_32x32_fp
$03FD	$0852			MOVF	FLOC_main+0, 0
$03FE	$00F4			MOVWF	STACK_4
$03FF	$0853			MOVF	FLOC_main+1, 0
$0400	$00F5			MOVWF	STACK_4+1
$0401	$0854			MOVF	FLOC_main+2, 0
$0402	$00F6			MOVWF	STACK_4+2
$0403	$0855			MOVF	FLOC_main+3, 0
$0404	$00F7			MOVWF	STACK_4+3
$0405	$25EF			CALL	_add_32x32_fp
$0406	$0870			MOVF	STACK_0, 0
$0407	$00D6			MOVWF	FLOC_main+4
$0408	$0871			MOVF	STACK_0+1, 0
$0409	$00D7			MOVWF	FLOC_main+5
$040A	$0872			MOVF	STACK_0+2, 0
$040B	$00D8			MOVWF	FLOC_main+6
$040C	$0873			MOVF	STACK_0+3, 0
$040D	$00D9			MOVWF	FLOC_main+7
$040E	$0856			MOVF	FLOC_main+4, 0
$040F	$00CC			MOVWF	_correction
$0410	$0857			MOVF	FLOC_main+5, 0
$0411	$00CD			MOVWF	_correction+1
$0412	$0858			MOVF	FLOC_main+6, 0
$0413	$00CE			MOVWF	_correction+2
$0414	$0859			MOVF	FLOC_main+7, 0
$0415	$00CF			MOVWF	_correction+3
;lfr_runner_5sen_tsop.c,210 :: 		rightpulse =  basespeed + correction;
$0416	$0834			MOVF	_basespeed, 0
$0417	$00F0			MOVWF	STACK_0
$0418	$158A			BSF	PCLATH, 3
$0419	$2355			CALL	_byte2double
$041A	$118A			BCF	PCLATH, 3
$041B	$0870			MOVF	STACK_0, 0
$041C	$00D2			MOVWF	FLOC_main+0
$041D	$0871			MOVF	STACK_0+1, 0
$041E	$00D3			MOVWF	FLOC_main+1
$041F	$0872			MOVF	STACK_0+2, 0
$0420	$00D4			MOVWF	FLOC_main+2
$0421	$0873			MOVF	STACK_0+3, 0
$0422	$00D5			MOVWF	FLOC_main+3
$0423	$0852			MOVF	FLOC_main+0, 0
$0424	$00F0			MOVWF	STACK_0
$0425	$0853			MOVF	FLOC_main+1, 0
$0426	$00F1			MOVWF	STACK_0+1
$0427	$0854			MOVF	FLOC_main+2, 0
$0428	$00F2			MOVWF	STACK_0+2
$0429	$0855			MOVF	FLOC_main+3, 0
$042A	$00F3			MOVWF	STACK_0+3
$042B	$0856			MOVF	FLOC_main+4, 0
$042C	$00F4			MOVWF	STACK_4
$042D	$0857			MOVF	FLOC_main+5, 0
$042E	$00F5			MOVWF	STACK_4+1
$042F	$0858			MOVF	FLOC_main+6, 0
$0430	$00F6			MOVWF	STACK_4+2
$0431	$0859			MOVF	FLOC_main+7, 0
$0432	$00F7			MOVWF	STACK_4+3
$0433	$25EF			CALL	_add_32x32_fp
$0434	$0870			MOVF	STACK_0, 0
$0435	$00B8			MOVWF	_rightpulse
$0436	$0871			MOVF	STACK_0+1, 0
$0437	$00B9			MOVWF	_rightpulse+1
$0438	$0872			MOVF	STACK_0+2, 0
$0439	$00BA			MOVWF	_rightpulse+2
$043A	$0873			MOVF	STACK_0+3, 0
$043B	$00BB			MOVWF	_rightpulse+3
;lfr_runner_5sen_tsop.c,211 :: 		leftpulse = basespeed - correction;
$043C	$0856			MOVF	FLOC_main+4, 0
$043D	$00F4			MOVWF	STACK_4
$043E	$0857			MOVF	FLOC_main+5, 0
$043F	$00F5			MOVWF	STACK_4+1
$0440	$0858			MOVF	FLOC_main+6, 0
$0441	$00F6			MOVWF	STACK_4+2
$0442	$0859			MOVF	FLOC_main+7, 0
$0443	$00F7			MOVWF	STACK_4+3
$0444	$0852			MOVF	FLOC_main+0, 0
$0445	$00F0			MOVWF	STACK_0
$0446	$0853			MOVF	FLOC_main+1, 0
$0447	$00F1			MOVWF	STACK_0+1
$0448	$0854			MOVF	FLOC_main+2, 0
$0449	$00F2			MOVWF	STACK_0+2
$044A	$0855			MOVF	FLOC_main+3, 0
$044B	$00F3			MOVWF	STACK_0+3
$044C	$158A			BSF	PCLATH, 3
$044D	$23A1			CALL	_sub_32x32_fp
$044E	$118A			BCF	PCLATH, 3
$044F	$0870			MOVF	STACK_0, 0
$0450	$00BC			MOVWF	_leftpulse
$0451	$0871			MOVF	STACK_0+1, 0
$0452	$00BD			MOVWF	_leftpulse+1
$0453	$0872			MOVF	STACK_0+2, 0
$0454	$00BE			MOVWF	_leftpulse+2
$0455	$0873			MOVF	STACK_0+3, 0
$0456	$00BF			MOVWF	_leftpulse+3
;lfr_runner_5sen_tsop.c,212 :: 		motor_RF();
$0457	$158A			BSF	PCLATH, 3
$0458	$23D3			CALL	_motor_RF
$0459	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop.c,213 :: 		motor_LF();
$045A	$158A			BSF	PCLATH, 3
$045B	$23D8			CALL	_motor_LF
$045C	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop.c,215 :: 		if(leftpulse > 255)                 //LEFT CORRECTION EXCEED
$045D	$083C			MOVF	_leftpulse, 0
$045E	$00F4			MOVWF	STACK_4
$045F	$083D			MOVF	_leftpulse+1, 0
$0460	$00F5			MOVWF	STACK_4+1
$0461	$083E			MOVF	_leftpulse+2, 0
$0462	$00F6			MOVWF	STACK_4+2
$0463	$083F			MOVF	_leftpulse+3, 0
$0464	$00F7			MOVWF	STACK_4+3
$0465	$3000			MOVLW	0
$0466	$00F0			MOVWF	STACK_0
$0467	$3000			MOVLW	0
$0468	$00F1			MOVWF	STACK_0+1
$0469	$307F			MOVLW	127
$046A	$00F2			MOVWF	STACK_0+2
$046B	$3086			MOVLW	134
$046C	$00F3			MOVWF	STACK_0+3
$046D	$158A			BSF	PCLATH, 3
$046E	$20F8			CALL	_compare_double
$046F	$118A			BCF	PCLATH, 3
$0470	$3001			MOVLW	1
$0471	$1803			BTFSC	STATUS, C
$0472	$3000			MOVLW	0
$0473	$00F0			MOVWF	STACK_0
$0474	$0870			MOVF	STACK_0, 0
$0475	$1903			BTFSC	STATUS, Z
$0476	$2C7F			GOTO	L_main_28
;lfr_runner_5sen_tsop.c,216 :: 		leftpulse = 255;
$0477	$3000			MOVLW	0
$0478	$00BC			MOVWF	_leftpulse
$0479	$3000			MOVLW	0
$047A	$00BD			MOVWF	_leftpulse+1
$047B	$307F			MOVLW	127
$047C	$00BE			MOVWF	_leftpulse+2
$047D	$3086			MOVLW	134
$047E	$00BF			MOVWF	_leftpulse+3
$047F	$	L_main_28:
;lfr_runner_5sen_tsop.c,218 :: 		if(rightpulse > 255)                //RIGHT CORRECTION EXCEED
$047F	$0838			MOVF	_rightpulse, 0
$0480	$00F4			MOVWF	STACK_4
$0481	$0839			MOVF	_rightpulse+1, 0
$0482	$00F5			MOVWF	STACK_4+1
$0483	$083A			MOVF	_rightpulse+2, 0
$0484	$00F6			MOVWF	STACK_4+2
$0485	$083B			MOVF	_rightpulse+3, 0
$0486	$00F7			MOVWF	STACK_4+3
$0487	$3000			MOVLW	0
$0488	$00F0			MOVWF	STACK_0
$0489	$3000			MOVLW	0
$048A	$00F1			MOVWF	STACK_0+1
$048B	$307F			MOVLW	127
$048C	$00F2			MOVWF	STACK_0+2
$048D	$3086			MOVLW	134
$048E	$00F3			MOVWF	STACK_0+3
$048F	$158A			BSF	PCLATH, 3
$0490	$20F8			CALL	_compare_double
$0491	$118A			BCF	PCLATH, 3
$0492	$3001			MOVLW	1
$0493	$1803			BTFSC	STATUS, C
$0494	$3000			MOVLW	0
$0495	$00F0			MOVWF	STACK_0
$0496	$0870			MOVF	STACK_0, 0
$0497	$1903			BTFSC	STATUS, Z
$0498	$2CA1			GOTO	L_main_29
;lfr_runner_5sen_tsop.c,219 :: 		rightpulse = 255;
$0499	$3000			MOVLW	0
$049A	$00B8			MOVWF	_rightpulse
$049B	$3000			MOVLW	0
$049C	$00B9			MOVWF	_rightpulse+1
$049D	$307F			MOVLW	127
$049E	$00BA			MOVWF	_rightpulse+2
$049F	$3086			MOVLW	134
$04A0	$00BB			MOVWF	_rightpulse+3
$04A1	$	L_main_29:
;lfr_runner_5sen_tsop.c,221 :: 		if(leftpulse < 0)                   //LEFT CORRECTION EXCEED
$04A1	$01F4			CLRF	STACK_4
$04A2	$01F5			CLRF	STACK_4+1
$04A3	$01F6			CLRF	STACK_4+2
$04A4	$01F7			CLRF	STACK_4+3
$04A5	$083C			MOVF	_leftpulse, 0
$04A6	$00F0			MOVWF	STACK_0
$04A7	$083D			MOVF	_leftpulse+1, 0
$04A8	$00F1			MOVWF	STACK_0+1
$04A9	$083E			MOVF	_leftpulse+2, 0
$04AA	$00F2			MOVWF	STACK_0+2
$04AB	$083F			MOVF	_leftpulse+3, 0
$04AC	$00F3			MOVWF	STACK_0+3
$04AD	$158A			BSF	PCLATH, 3
$04AE	$20F8			CALL	_compare_double
$04AF	$118A			BCF	PCLATH, 3
$04B0	$3001			MOVLW	1
$04B1	$1803			BTFSC	STATUS, C
$04B2	$3000			MOVLW	0
$04B3	$00F0			MOVWF	STACK_0
$04B4	$0870			MOVF	STACK_0, 0
$04B5	$1903			BTFSC	STATUS, Z
$04B6	$2CBB			GOTO	L_main_30
;lfr_runner_5sen_tsop.c,222 :: 		leftpulse = 0;
$04B7	$01BC			CLRF	_leftpulse
$04B8	$01BD			CLRF	_leftpulse+1
$04B9	$01BE			CLRF	_leftpulse+2
$04BA	$01BF			CLRF	_leftpulse+3
$04BB	$	L_main_30:
;lfr_runner_5sen_tsop.c,224 :: 		if(rightpulse < 0)                  //RIGHT CORRECTION EXCEED
$04BB	$01F4			CLRF	STACK_4
$04BC	$01F5			CLRF	STACK_4+1
$04BD	$01F6			CLRF	STACK_4+2
$04BE	$01F7			CLRF	STACK_4+3
$04BF	$0838			MOVF	_rightpulse, 0
$04C0	$00F0			MOVWF	STACK_0
$04C1	$0839			MOVF	_rightpulse+1, 0
$04C2	$00F1			MOVWF	STACK_0+1
$04C3	$083A			MOVF	_rightpulse+2, 0
$04C4	$00F2			MOVWF	STACK_0+2
$04C5	$083B			MOVF	_rightpulse+3, 0
$04C6	$00F3			MOVWF	STACK_0+3
$04C7	$158A			BSF	PCLATH, 3
$04C8	$20F8			CALL	_compare_double
$04C9	$118A			BCF	PCLATH, 3
$04CA	$3001			MOVLW	1
$04CB	$1803			BTFSC	STATUS, C
$04CC	$3000			MOVLW	0
$04CD	$00F0			MOVWF	STACK_0
$04CE	$0870			MOVF	STACK_0, 0
$04CF	$1903			BTFSC	STATUS, Z
$04D0	$2CD5			GOTO	L_main_31
;lfr_runner_5sen_tsop.c,225 :: 		rightpulse = 0;
$04D1	$01B8			CLRF	_rightpulse
$04D2	$01B9			CLRF	_rightpulse+1
$04D3	$01BA			CLRF	_rightpulse+2
$04D4	$01BB			CLRF	_rightpulse+3
$04D5	$	L_main_31:
;lfr_runner_5sen_tsop.c,227 :: 		PWM1_CHANGE_DUTY(leftpulse);
$04D5	$083C			MOVF	_leftpulse, 0
$04D6	$00F0			MOVWF	STACK_0
$04D7	$083D			MOVF	_leftpulse+1, 0
$04D8	$00F1			MOVWF	STACK_0+1
$04D9	$083E			MOVF	_leftpulse+2, 0
$04DA	$00F2			MOVWF	STACK_0+2
$04DB	$083F			MOVF	_leftpulse+3, 0
$04DC	$00F3			MOVWF	STACK_0+3
$04DD	$158A			BSF	PCLATH, 3
$04DE	$21E1			CALL	_double2byte
$04DF	$118A			BCF	PCLATH, 3
$04E0	$0870			MOVF	STACK_0, 0
$04E1	$00DE			MOVWF	FARG_PWM1_Change_Duty+0
$04E2	$158A			BSF	PCLATH, 3
$04E3	$2224			CALL	_PWM1_Change_Duty
$04E4	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop.c,228 :: 		PWM2_CHANGE_DUTY(rightpulse);
$04E5	$0838			MOVF	_rightpulse, 0
$04E6	$00F0			MOVWF	STACK_0
$04E7	$0839			MOVF	_rightpulse+1, 0
$04E8	$00F1			MOVWF	STACK_0+1
$04E9	$083A			MOVF	_rightpulse+2, 0
$04EA	$00F2			MOVWF	STACK_0+2
$04EB	$083B			MOVF	_rightpulse+3, 0
$04EC	$00F3			MOVWF	STACK_0+3
$04ED	$158A			BSF	PCLATH, 3
$04EE	$21E1			CALL	_double2byte
$04EF	$118A			BCF	PCLATH, 3
$04F0	$0870			MOVF	STACK_0, 0
$04F1	$00DE			MOVWF	FARG_PWM2_Change_Duty+0
$04F2	$158A			BSF	PCLATH, 3
$04F3	$228E			CALL	_PWM2_Change_Duty
$04F4	$118A			BCF	PCLATH, 3
;lfr_runner_5sen_tsop.c,229 :: 		}
$04F5	$	L_main_27:
;lfr_runner_5sen_tsop.c,230 :: 		delay_ms(10);
$04F5	$300D			MOVLW	13
$04F6	$00FB			MOVWF	STACK_11
$04F7	$30FF			MOVLW	255
$04F8	$00FA			MOVWF	STACK_10
$04F9	$0BFB			DECFSZ	STACK_11, F
$04FA	$2CFC			GOTO	$+2
$04FB	$2CFF			GOTO	$+4
$04FC	$0BFA			DECFSZ	STACK_10, F
$04FD	$2CFC			GOTO	$-1
$04FE	$2CF9			GOTO	$-5
$04FF	$30F3			MOVLW	243
$0500	$00FA			MOVWF	STACK_10
$0501	$0BFA			DECFSZ	STACK_10, F
$0502	$2D01			GOTO	$-1
$0503	$0000			NOP
;lfr_runner_5sen_tsop.c,232 :: 		if(PORTB.F6 == 0)
$0504	$3000			MOVLW	0
$0505	$1B06			BTFSC	PORTB, 6
$0506	$3001			MOVLW	1
$0507	$00F4			MOVWF	STACK_4
$0508	$0874			MOVF	STACK_4, 0
$0509	$3A00			XORLW	0
$050A	$1903			BTFSC	STATUS, Z
$050B	$280B			GOTO	___main_fwd
;lfr_runner_5sen_tsop.c,233 :: 		goto fwd ;
$050C	$	L_main_32:
;lfr_runner_5sen_tsop.c,234 :: 		}
$050C	$2A8C			GOTO	L_main_19
;lfr_runner_5sen_tsop.c,236 :: 		}
$050D	$2D0D			GOTO	$


//** Procedures locations **
//ADDRESS		PROCEDURE
//----------------------------------------------
$0004		main
$050E		CalcError
$05EF		Add_32x32_FP
$0697		Mul_32x32_FP
$06FE		initpwm
$0715		PWM2_Init
$0800		Div_32x32_FP
$089C		NRM4032
$08F8		Compare_Double
$0948		GlobalInilfr_runner_5sen_tsop
$0997		Mul_16x16_S
$09E1		Double2Byte
$0A24		PWM1_Change_Duty
$0A5D		NRM3232
$0A8E		PWM2_Change_Duty
$0AC7		indicator
$0AFE		Mul_16x16_U
$0B29		Word2Double
$0B3F		Equals_Double
$0B55		Byte2Double
$0B65		initport
$0B76		SETIOV3224
$0B85		SETFOV32
$0B93		SETFUN32
$0BA1		Sub_32x32_FP
$0BA9		RES032
$0BB2		PWM1_Start
$0BBA		PWM2_Start
$0BC2		FIXSIGN32
$0BC8		PWM1_Init
$0BCE		motor_LB
$0BD3		motor_RF
$0BD8		motor_LF
$0BDD		motor_RB
$0BE2		SETFDZ32


//** Labels locations **
//ADDRESS		LABEL
//----------------------------------------------
$0004		_main:
$000B		___main_fwd:
$000B		L_main_5:
$002B		L_main_37:
$0049		L_main_38:
$004B		L130_ex_L_main_9:
$006A		L_main_9:
$008C		L_main_39:
$00B1		L_main_11:
$00D4		L_main_12:
$00D5		L_main_10:
$01FE		L_main_14:
$0220		L_main_15:
$023A		L_main_16:
$0254		L_main_17:
$0274		L_main_13:
$028B		L_main_18:
$028C		___main_back:
$028C		L_main_19:
$02AC		L_main_40:
$02CA		L_main_41:
$02CC		L299_ex_L_main_23:
$02EB		L_main_23:
$030D		L_main_42:
$0332		L_main_25:
$0355		L_main_26:
$0356		L_main_24:
$047F		L_main_28:
$04A1		L_main_29:
$04BB		L_main_30:
$04D5		L_main_31:
$04F5		L_main_27:
$050C		L_main_32:
$050E		_CalcError:
$0522		L_CalcError_0:
$0528		L_CalcError_1:
$052E		L_CalcError_2:
$0534		L_CalcError_3:
$053C		L_CalcError_4:
$054B		L_CalcError_33:
$0552		L_CalcError_34:
$0572		L_CalcError_35:
$0579		L_CalcError_36:
$05EF		_Add_32x32_FP:
$0612		USEA32:
$063B		ALIGNB32:
$063E		ALOOPB32:
$0645		ALIGNED32:
$0652		AOK32:
$066B		ACOMP32:
$067B		JMPNRMRND4032:
$0681		JMPNRM4032:
$0687		JMPNRM32:
$068D		ADD_JMPSETFOV32:
$0693		JMPEEE:
$0695		ADD32EEE:
$0697		_Mul_32x32_FP:
$0699		FPM32:
$069F		M32BNE0:
$06AB		MTUN32:
$06AE		MOK32:
$06BC		MLOOP32:
$06BE		MADD32:
$06C8		MNOADD32:
$06D8		MROUND32:
$06EA		MUL32OK:
$06EE		JPMRES032:
$06F3		JPMSETFOV32:
$06F8		JPMSETFUN32:
$06FC		MUL32EEE:
$06FE		_initpwm:
$0715		_PWM2_Init:
$0800		_Div_32x32_FP:
$0802		FPD32:
$0808		D32BNE0:
$080E		TALIGN32:
$081A		TS1ALIGN32:
$081E		TS2ALIGN32:
$082B		DALIGN32OK:
$082F		AGEB32:
$0835		ALTB32:
$083A		DARGOK32:
$083C		DLOOP32:
$0848		DS132:
$084C		DS232:
$0853		DREST32:
$0858		DAREST32:
$085E		DOK32:
$0863		DROUND32:
$0885		DIV32OK:
$088F		JPDSETFDZ32:
$0892		JPDRES032:
$0895		JPDSETFOV32:
$0898		JPDSETFUN32:
$089A		DIV32EEE:
$089C		_NRM4032:
$08A5		NRM4032:
$08C5		NORM4032:
$08CB		NORM4032A:
$08D4		NRMRND4032:
$08E7		JMPRES032:
$08EB		JMPSETFUN32:
$08EF		JMPFIXSIGN32:
$08F3		JMPSETFOV32:
$08F6		NRM4032EEE:
$08F8		_Compare_Double:
$0909		COMPARE_YNOTZERO:
$090C		COMPARE_XNOTZERO:
$090F		COMPARE_NOTZERO:
$091D		COMPARE_TESTALL:
$0924		COMPARE_C1:
$092B		COMPARE_C2:
$0932		COMPARE_C3:
$0938		GT_FALSE:
$093C		GT_TRUE:
$0940		COMPARE_GT:
$0942		COMPARE_LT:
$0944		COMPARE_EQU:
$0948		GlobalInilfr_runner_5sen_tsop:
$0997		_Mul_16x16_S:
$09E1		_Double2Byte:
$09E3		INT32U08:
$09F2		SETEXP08:
$09FF		TSHIFT3208:
$0A02		SHIFT3208:
$0A06		SHIFT3208OK:
$0A0E		INT3208OK:
$0A0E		IRES008:
$0A10		SETIOV08:
$0A15		D2B_JPKSETIOV3224:
$0A18		INT3208EOK:
$0A1B		INT3208EER:
$0A1D		INT3208EEE:
$0A21		L_Double2Byte_0:
$0A24		_PWM1_Change_Duty:
$0A38		L_PWM1_Change_Duty_2:
$0A3F		L_PWM1_Change_Duty_3:
$0A5D		_NRM3232:
$0A74		NORM3232:
$0A7A		NORM3232A:
$0A82		JPNRES032:
$0A86		JPNSETFUN32:
$0A8A		JMPNFIXSIGN32:
$0A8D		NORM32EEE:
$0A8E		_PWM2_Change_Duty:
$0AA2		L_PWM2_Change_Duty_0:
$0AA9		L_PWM2_Change_Duty_1:
$0AC7		_indicator:
$0AFE		_Mul_16x16_U:
$0B29		_Word2Double:
$0B32		FLO16U32:
$0B3F		_Equals_Double:
$0B52		EQU_FALSE:
$0B55		_Byte2Double:
$0B57		FLO08U32:
$0B65		_initport:
$0B76		_SETIOV3224:
$0B83		SETIOV3224EEE:
$0B85		_SETFOV32:
$0B91		SETFOV32EEE:
$0B93		_SETFUN32:
$0B9F		SETFUN32EEE:
$0BA1		_Sub_32x32_FP:
$0BA9		_RES032:
$0BB2		_PWM1_Start:
$0BBA		_PWM2_Start:
$0BC2		_FIXSIGN32:
$0BC8		_PWM1_Init:
$0BCE		_motor_LB:
$0BD3		_motor_RF:
$0BD8		_motor_LF:
$0BDD		_motor_RB:
$0BE2		_SETFDZ32:


//** Variables locations **
//ADDRESS		VARIABLE
//----------------------------------------------
$0000		INDF
$0002		PCL
$0003		STATUS
$0004		FSR
$0005		PORTA
$0006		PORTB
$0007		PORTC
$0008		PORTD
$0009		PORTE
$000A		PCLATH
$0012		T2CON
$0015		CCPR1L
$0017		CCP1CON
$001B		CCPR2L
$001D		CCP2CON
$0020		___math_tempbD
$0021		_s1
$0023		_s2
$0025		_s3
$0027		_s4
$0029		_s5
$002B		_lastreading
$002C		_perror
$0030		_error
$0034		_basespeed
$0035		_Kp
$0036		_Ki
$0037		_Kd
$0038		_rightpulse
$003C		_leftpulse
$0040		_PROPORTIONAL
$0044		_INTEGRAL
$0048		_DERIVATIVE
$004C		_correction
$0050		_count
$0052		
$005E		
$005E		FARG_PWM1_Change_Duty+0
$005E		FARG_PWM2_Change_Duty+0
$0062		FARG_PWM1_Init+0
$0062		FARG_PWM2_Init+0
$0070		STACK_0
$0071		STACK_1
$0072		STACK_2
$0073		STACK_3
$0074		STACK_4
$0075		STACK_5
$0076		STACK_6
$0077		STACK_7
$0078		STACK_8
$0079		STACK_9
$007A		STACK_10
$007B		STACK_11
$007C		STACK_12
$007D		STACK_13
$007E		STACK_14
$007F		STACK_15
$0085		TRISA
$0086		TRISB
$0087		TRISC
$0088		TRISD
$0089		TRISE
$0092		PR2
$009F		ADCON1


